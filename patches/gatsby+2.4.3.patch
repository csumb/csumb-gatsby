diff --git a/node_modules/gatsby/.DS_Store b/node_modules/gatsby/.DS_Store
new file mode 100644
index 0000000..7fed685
Binary files /dev/null and b/node_modules/gatsby/.DS_Store differ
diff --git a/node_modules/gatsby/babel.config.js b/node_modules/gatsby/babel.config.js
new file mode 100644
index 0000000..ebde19e
--- /dev/null
+++ b/node_modules/gatsby/babel.config.js
@@ -0,0 +1,7 @@
+// This being a babel.config.js file instead of a .babelrc file allows the
+// packages in `internal-plugins` to be compiled with the rest of the source.
+// Ref: https://github.com/babel/babel/pull/7358
+
+const configPath = require(`path`).join(__dirname, `..`, `..`, `.babelrc.js`)
+
+module.exports = require(configPath)
diff --git a/node_modules/gatsby/cache-dir/__tests__/find-page.js b/node_modules/gatsby/cache-dir/__tests__/find-page.js
index c998b8e..41c6c12 100644
--- a/node_modules/gatsby/cache-dir/__tests__/find-page.js
+++ b/node_modules/gatsby/cache-dir/__tests__/find-page.js
@@ -8,23 +8,19 @@ describe(`find-page`, () => {
       {
         path: `/about/`,
         componentChunkName: `page-component---src-pages-test-js`,
-        jsonName: `about.json`,
       },
       {
         path: `/about/me/`,
         componentChunkName: `page-component---src-pages-test-js`,
-        jsonName: `about-me.json`,
       },
       {
         path: `/about/the best/`,
         componentChunkName: `page-component---src-pages-test-js`,
-        jsonName: `the-best.json`,
       },
       {
         path: `/app/`,
         matchPath: `/app/*`,
         componentChunkName: `page-component---src-pages-app-js`,
-        jsonName: `app.json`,
       },
     ]
     findPage = pageFinderFactory(newPages)
@@ -58,7 +54,6 @@ describe(`find-page`, () => {
       {
         path: `/about/`,
         componentChunkName: `page-component---src-pages-test-js`,
-        jsonName: `about.json`,
       },
     ]
     const findPage2 = pageFinderFactory(newPages, `/my-test-prefix`)
diff --git a/node_modules/gatsby/cache-dir/__tests__/static-entry.js b/node_modules/gatsby/cache-dir/__tests__/static-entry.js
index 8cb6487..6dad7f6 100644
--- a/node_modules/gatsby/cache-dir/__tests__/static-entry.js
+++ b/node_modules/gatsby/cache-dir/__tests__/static-entry.js
@@ -1,15 +1,7 @@
 import React from "react"
-import fs from "fs"
-
 import DevelopStaticEntry from "../develop-static-entry"
 
-jest.mock(`fs`, () => {
-  const fs = jest.requireActual(`fs`)
-  return {
-    ...fs,
-    readFileSync: jest.fn(),
-  }
-})
+jest.mock(`fs`)
 jest.mock(`gatsby/package.json`, () => {
   return {
     version: `2.0.0`,
@@ -30,39 +22,15 @@ jest.mock(
   }
 )
 
-jest.mock(
-  `../data.json`,
-  () => {
-    return {
-      dataPaths: [
-        {
-          [`about.json`]: `/400/about`,
-        },
-      ],
-      pages: [
-        {
-          path: `/about/`,
-          componentChunkName: `page-component---src-pages-test-js`,
-          jsonName: `about.json`,
-        },
-      ],
-    }
-  },
-  {
-    virtual: true,
-  }
-)
-
 const MOCK_FILE_INFO = {
   [`${process.cwd()}/public/webpack.stats.json`]: `{}`,
   [`${process.cwd()}/public/chunk-map.json`]: `{}`,
 }
 
-let StaticEntry
-beforeEach(() => {
-  fs.readFileSync.mockImplementation(file => MOCK_FILE_INFO[file])
-  StaticEntry = require(`../static-entry`).default
-})
+require(`fs`).__setMockFiles(MOCK_FILE_INFO)
+
+// Needs to be imported after __setMockFiles is called, and imports get hoisted.
+const StaticEntry = require(`../static-entry`).default
 
 const reverseHeadersPlugin = {
   plugin: {
@@ -184,7 +152,6 @@ describe(`develop-static-entry`, () => {
 describe(`static-entry sanity checks`, () => {
   beforeEach(() => {
     global.__PATH_PREFIX__ = ``
-    global.__BASE_PATH__ = ``
   })
 
   const methodsToCheck = [
@@ -238,7 +205,6 @@ describe(`static-entry sanity checks`, () => {
 describe(`static-entry`, () => {
   beforeEach(() => {
     global.__PATH_PREFIX__ = ``
-    global.__BASE_PATH__ = ``
   })
 
   test(`onPreRenderHTML can be used to replace headComponents`, done => {
diff --git a/node_modules/gatsby/cache-dir/api-runner-browser.js b/node_modules/gatsby/cache-dir/api-runner-browser.js
index 0a4ff8b..f956b04 100644
--- a/node_modules/gatsby/cache-dir/api-runner-browser.js
+++ b/node_modules/gatsby/cache-dir/api-runner-browser.js
@@ -3,6 +3,8 @@ const {
   getResourcesForPathname,
   getResourcesForPathnameSync,
   getResourceURLsForPathname,
+  loadPage,
+  getPage,
 } = require(`./loader`).publicLoader
 
 exports.apiRunner = (api, args = {}, defaultReturn, argTransform) => {
@@ -22,9 +24,14 @@ exports.apiRunner = (api, args = {}, defaultReturn, argTransform) => {
       return undefined
     }
 
+    // Deprecated April 2019. Use `getPage` instead
     args.getResourcesForPathnameSync = getResourcesForPathnameSync
+    // Deprecated April 2019. Use `loadPage` instead
     args.getResourcesForPathname = getResourcesForPathname
+    // Deprecated April 2019. Use resources passed in `onPostPrefetch` instead
     args.getResourceURLsForPathname = getResourceURLsForPathname
+    args.loadPage = loadPage
+    args.getPage = getPage
 
     const result = plugin.plugin[api](args, plugin.options)
     if (result && argTransform) {
diff --git a/node_modules/gatsby/cache-dir/api-ssr-docs.js b/node_modules/gatsby/cache-dir/api-ssr-docs.js
index d9be6ca..b2897dd 100644
--- a/node_modules/gatsby/cache-dir/api-ssr-docs.js
+++ b/node_modules/gatsby/cache-dir/api-ssr-docs.js
@@ -1,14 +1,8 @@
-/**
- * Object containing options defined in `gatsby-config.js`
- * @typedef {object} pluginOptions
- */
-
 /**
  * Replace the default server renderer. This is useful for integration with
  * Redux, css-in-js libraries, etc. that need custom setups for server
  * rendering.
- * @param {object} $0
- * @param {string} $0.pathname The pathname of the page currently being rendered.
+ * @param {Object} $0
  * @param {function} $0.replaceBodyHTMLString Call this with the HTML string
  * you render. **WARNING** if multiple plugins implement this API it's the
  * last plugin that "wins". TODO implement an automated warning against this.
@@ -27,7 +21,7 @@
  * to the `html.js` component.
  * @param {function} $0.setBodyProps Takes an object of data which
  * is merged with other body props and passed to `html.js` as `bodyProps`.
- * @param {pluginOptions} pluginOptions
+ * @param {Object} pluginOptions
  * @example
  * // From gatsby-plugin-glamor
  * const { renderToString } = require("react-dom/server")
@@ -60,7 +54,7 @@ exports.replaceRenderer = true
  * over server rendering. However, if your plugin requires taking over server
  * rendering then that's the one to
  * use
- * @param {object} $0
+ * @param {Object} $0
  * @param {string} $0.pathname The pathname of the page currently being rendered.
  * @param {function} $0.setHeadComponents Takes an array of components as its
  * first argument which are added to the `headComponents` array which is passed
@@ -77,7 +71,7 @@ exports.replaceRenderer = true
  * to the `html.js` component.
  * @param {function} $0.setBodyProps Takes an object of data which
  * is merged with other body props and passed to `html.js` as `bodyProps`.
- * @param {pluginOptions} pluginOptions
+ * @param {Object} pluginOptions
  * @example
  * const { Helmet } = require("react-helmet")
  *
@@ -104,8 +98,7 @@ exports.onRenderBody = true
  * Called after every page Gatsby server renders while building HTML so you can
  * replace head components to be rendered in your `html.js`. This is useful if
  * you need to reorder scripts or styles added by other plugins.
- * @param {object} $0
- * @param {string} $0.pathname The pathname of the page currently being rendered.
+ * @param {Object} $0
  * @param {Array<ReactNode>} $0.getHeadComponents Returns the current `headComponents` array.
  * @param {function} $0.replaceHeadComponents Takes an array of components as its
  * first argument which replace the `headComponents` array which is passed
@@ -121,7 +114,7 @@ exports.onRenderBody = true
  * first argument which replace the `postBodyComponents` array which is passed
  * to the `html.js` component. **WARNING** if multiple plugins implement this
  * API it's the last plugin that "wins".
- * @param {pluginOptions} pluginOptions
+ * @param {Object} pluginOptions
  * @example
  * // Move Typography.js styles to the top of the head section so they're loaded first.
  * exports.onPreRenderHTML = ({ getHeadComponents, replaceHeadComponents }) => {
@@ -149,13 +142,11 @@ exports.onPreRenderHTML = true
  * @param {object} $0
  * @param {ReactNode} $0.element The "Page" React Element built by Gatsby.
  * @param {object} $0.props Props object used by page.
- * @param {pluginOptions} pluginOptions
- * @returns {ReactNode} Wrapped element
  * @example
- * const React = require("react")
- * const Layout = require("./src/components/layout")
+ * import React from "react"
+ * import Layout from "./src/components/layout"
  *
- * exports.wrapPageElement = ({ element, props }) => {
+ * export const wrapPageElement = ({ element, props }) => {
  *   // props provide same data to Layout as Page element will get
  *   // including location, data, etc - you don't need to pass it
  *   return <Layout {...props}>{element}</Layout>
@@ -172,16 +163,14 @@ exports.wrapPageElement = true
  * _Note:_ [There is equivalent hook in Browser API](/docs/browser-apis/#wrapRootElement)
  * @param {object} $0
  * @param {ReactNode} $0.element The "Root" React Element built by Gatsby.
- * @param {pluginOptions} pluginOptions
- * @returns {ReactNode} Wrapped element
  * @example
- * const React = require("react")
- * const { Provider } = require("react-redux")
+ * import React from "react"
+ * import { Provider } from "react-redux"
  *
- * const createStore = require("./src/state/createStore")
+ * import createStore from "./src/state/createStore"
  * const store = createStore()
  *
- * exports.wrapRootElement = ({ element }) => {
+ * export const wrapRootElement = ({ element }) => {
  *   return (
  *     <Provider store={store}>
  *       {element}
diff --git a/node_modules/gatsby/cache-dir/app.js b/node_modules/gatsby/cache-dir/app.js
index 4f50208..28acea0 100644
--- a/node_modules/gatsby/cache-dir/app.js
+++ b/node_modules/gatsby/cache-dir/app.js
@@ -5,9 +5,9 @@ import domReady from "@mikaelkristiansson/domready"
 import socketIo from "./socketIo"
 import emitter from "./emitter"
 import { apiRunner, apiRunnerAsync } from "./api-runner-browser"
-import loader, { setApiRunnerForLoader, postInitialRenderWork } from "./loader"
+import loader, { setApiRunnerForLoader } from "./loader"
+import devLoader from "./dev-loader"
 import syncRequires from "./sync-requires"
-import pages from "./pages.json"
 
 window.___emitter = emitter
 setApiRunnerForLoader(apiRunner)
@@ -28,16 +28,13 @@ apiRunnerAsync(`onClientEntry`).then(() => {
    * This is especially frustrating when you need to test the
    * production build on your local machine.
    *
-   * Let's warn if we find service workers in development.
+   * Let's unregister the service workers in development, and tidy up a few errors.
    */
-  if (`serviceWorker` in navigator) {
+  if (supportsServiceWorkers(location, navigator)) {
     navigator.serviceWorker.getRegistrations().then(registrations => {
-      if (registrations.length > 0)
-        console.warn(
-          `Warning: found one or more service workers present.`,
-          `If your site isn't behaving as expected, you might want to remove these.`,
-          registrations
-        )
+      for (let registration of registrations) {
+        registration.unregister()
+      }
     })
   }
 
@@ -49,20 +46,31 @@ apiRunnerAsync(`onClientEntry`).then(() => {
     ReactDOM.render
   )[0]
 
-  loader.addPagesArray(pages)
   loader.addDevRequires(syncRequires)
+
   Promise.all([
-    loader.getResourcesForPathname(`/dev-404-page/`),
-    loader.getResourcesForPathname(`/404.html`),
-    loader.getResourcesForPathname(window.location.pathname),
-  ]).then(() => {
-    const preferDefault = m => (m && m.default) || m
-    let Root = preferDefault(require(`./root`))
-    domReady(() => {
-      renderer(<Root />, rootElement, () => {
-        postInitialRenderWork()
-        apiRunner(`onInitialClientRender`)
+    loader.loadPage(window.location.pathname),
+    loader.loadPage(`/dev-404-page/`),
+    loader.loadPage(`/404.html`).catch(err => null),
+    devLoader.loadPages(),
+  ])
+    .then(() => {
+      const preferDefault = m => (m && m.default) || m
+      let Root = preferDefault(require(`./root`))
+      domReady(() => {
+        renderer(<Root />, rootElement, () => {
+          apiRunner(`onInitialClientRender`)
+        })
       })
     })
-  })
+    .catch(err => {
+      console.log(err)
+    })
 })
+
+function supportsServiceWorkers(location, navigator) {
+  if (location.hostname === `localhost` || location.protocol === `https:`) {
+    return `serviceWorker` in navigator
+  }
+  return false
+}
diff --git a/node_modules/gatsby/cache-dir/commonjs/api-runner-browser.js b/node_modules/gatsby/cache-dir/commonjs/api-runner-browser.js
index 04f7157..d020e21 100644
--- a/node_modules/gatsby/cache-dir/commonjs/api-runner-browser.js
+++ b/node_modules/gatsby/cache-dir/commonjs/api-runner-browser.js
@@ -5,7 +5,9 @@ const plugins = require(`./api-runner-browser-plugins`);
 const _require$publicLoader = require(`./loader`).publicLoader,
       getResourcesForPathname = _require$publicLoader.getResourcesForPathname,
       getResourcesForPathnameSync = _require$publicLoader.getResourcesForPathnameSync,
-      getResourceURLsForPathname = _require$publicLoader.getResourceURLsForPathname;
+      getResourceURLsForPathname = _require$publicLoader.getResourceURLsForPathname,
+      loadPage = _require$publicLoader.loadPage,
+      getPage = _require$publicLoader.getPage;
 
 exports.apiRunner = (api, args = {}, defaultReturn, argTransform) => {
   // Hooks for gatsby-cypress's API handler
@@ -22,11 +24,16 @@ exports.apiRunner = (api, args = {}, defaultReturn, argTransform) => {
   let results = plugins.map(plugin => {
     if (!plugin.plugin[api]) {
       return undefined;
-    }
+    } // Deprecated April 2019. Use `getPage` instead
+
+
+    args.getResourcesForPathnameSync = getResourcesForPathnameSync; // Deprecated April 2019. Use `loadPage` instead
+
+    args.getResourcesForPathname = getResourcesForPathname; // Deprecated April 2019. Use resources passed in `onPostPrefetch` instead
 
-    args.getResourcesForPathnameSync = getResourcesForPathnameSync;
-    args.getResourcesForPathname = getResourcesForPathname;
     args.getResourceURLsForPathname = getResourceURLsForPathname;
+    args.loadPage = loadPage;
+    args.getPage = getPage;
     const result = plugin.plugin[api](args, plugin.options);
 
     if (result && argTransform) {
diff --git a/node_modules/gatsby/cache-dir/commonjs/api-ssr-docs.js b/node_modules/gatsby/cache-dir/commonjs/api-ssr-docs.js
index a70eae0..f69805d 100644
--- a/node_modules/gatsby/cache-dir/commonjs/api-ssr-docs.js
+++ b/node_modules/gatsby/cache-dir/commonjs/api-ssr-docs.js
@@ -1,16 +1,10 @@
 "use strict";
 
-/**
- * Object containing options defined in `gatsby-config.js`
- * @typedef {object} pluginOptions
- */
-
 /**
  * Replace the default server renderer. This is useful for integration with
  * Redux, css-in-js libraries, etc. that need custom setups for server
  * rendering.
- * @param {object} $0
- * @param {string} $0.pathname The pathname of the page currently being rendered.
+ * @param {Object} $0
  * @param {function} $0.replaceBodyHTMLString Call this with the HTML string
  * you render. **WARNING** if multiple plugins implement this API it's the
  * last plugin that "wins". TODO implement an automated warning against this.
@@ -29,7 +23,7 @@
  * to the `html.js` component.
  * @param {function} $0.setBodyProps Takes an object of data which
  * is merged with other body props and passed to `html.js` as `bodyProps`.
- * @param {pluginOptions} pluginOptions
+ * @param {Object} pluginOptions
  * @example
  * // From gatsby-plugin-glamor
  * const { renderToString } = require("react-dom/server")
@@ -61,7 +55,7 @@ exports.replaceRenderer = true;
  * over server rendering. However, if your plugin requires taking over server
  * rendering then that's the one to
  * use
- * @param {object} $0
+ * @param {Object} $0
  * @param {string} $0.pathname The pathname of the page currently being rendered.
  * @param {function} $0.setHeadComponents Takes an array of components as its
  * first argument which are added to the `headComponents` array which is passed
@@ -78,7 +72,7 @@ exports.replaceRenderer = true;
  * to the `html.js` component.
  * @param {function} $0.setBodyProps Takes an object of data which
  * is merged with other body props and passed to `html.js` as `bodyProps`.
- * @param {pluginOptions} pluginOptions
+ * @param {Object} pluginOptions
  * @example
  * const { Helmet } = require("react-helmet")
  *
@@ -105,8 +99,7 @@ exports.onRenderBody = true;
  * Called after every page Gatsby server renders while building HTML so you can
  * replace head components to be rendered in your `html.js`. This is useful if
  * you need to reorder scripts or styles added by other plugins.
- * @param {object} $0
- * @param {string} $0.pathname The pathname of the page currently being rendered.
+ * @param {Object} $0
  * @param {Array<ReactNode>} $0.getHeadComponents Returns the current `headComponents` array.
  * @param {function} $0.replaceHeadComponents Takes an array of components as its
  * first argument which replace the `headComponents` array which is passed
@@ -122,7 +115,7 @@ exports.onRenderBody = true;
  * first argument which replace the `postBodyComponents` array which is passed
  * to the `html.js` component. **WARNING** if multiple plugins implement this
  * API it's the last plugin that "wins".
- * @param {pluginOptions} pluginOptions
+ * @param {Object} pluginOptions
  * @example
  * // Move Typography.js styles to the top of the head section so they're loaded first.
  * exports.onPreRenderHTML = ({ getHeadComponents, replaceHeadComponents }) => {
@@ -150,13 +143,11 @@ exports.onPreRenderHTML = true;
  * @param {object} $0
  * @param {ReactNode} $0.element The "Page" React Element built by Gatsby.
  * @param {object} $0.props Props object used by page.
- * @param {pluginOptions} pluginOptions
- * @returns {ReactNode} Wrapped element
  * @example
- * const React = require("react")
- * const Layout = require("./src/components/layout")
+ * import React from "react"
+ * import Layout from "./src/components/layout"
  *
- * exports.wrapPageElement = ({ element, props }) => {
+ * export const wrapPageElement = ({ element, props }) => {
  *   // props provide same data to Layout as Page element will get
  *   // including location, data, etc - you don't need to pass it
  *   return <Layout {...props}>{element}</Layout>
@@ -173,16 +164,14 @@ exports.wrapPageElement = true;
  * _Note:_ [There is equivalent hook in Browser API](/docs/browser-apis/#wrapRootElement)
  * @param {object} $0
  * @param {ReactNode} $0.element The "Root" React Element built by Gatsby.
- * @param {pluginOptions} pluginOptions
- * @returns {ReactNode} Wrapped element
  * @example
- * const React = require("react")
- * const { Provider } = require("react-redux")
+ * import React from "react"
+ * import { Provider } from "react-redux"
  *
- * const createStore = require("./src/state/createStore")
+ * import createStore from "./src/state/createStore"
  * const store = createStore()
  *
- * exports.wrapRootElement = ({ element }) => {
+ * export const wrapRootElement = ({ element }) => {
  *   return (
  *     <Provider store={store}>
  *       {element}
diff --git a/node_modules/gatsby/cache-dir/commonjs/app.js b/node_modules/gatsby/cache-dir/commonjs/app.js
index c617155..1ea6784 100644
--- a/node_modules/gatsby/cache-dir/commonjs/app.js
+++ b/node_modules/gatsby/cache-dir/commonjs/app.js
@@ -18,9 +18,9 @@ var _apiRunnerBrowser = require("./api-runner-browser");
 
 var _loader = _interopRequireWildcard(require("./loader"));
 
-var _syncRequires = _interopRequireDefault(require("./sync-requires"));
+var _devLoader = _interopRequireDefault(require("./dev-loader"));
 
-var _pages = _interopRequireDefault(require("./pages.json"));
+var _syncRequires = _interopRequireDefault(require("./sync-requires"));
 
 window.___emitter = _emitter.default;
 (0, _loader.setApiRunnerForLoader)(_apiRunnerBrowser.apiRunner); // Let the site/plugins run code very early.
@@ -40,32 +40,53 @@ window.___emitter = _emitter.default;
    * This is especially frustrating when you need to test the
    * production build on your local machine.
    *
-   * Let's warn if we find service workers in development.
+   * Let's unregister the service workers in development, and tidy up a few errors.
    */
 
 
-  if (`serviceWorker` in navigator) {
+  if (supportsServiceWorkers(location, navigator)) {
     navigator.serviceWorker.getRegistrations().then(registrations => {
-      if (registrations.length > 0) console.warn(`Warning: found one or more service workers present.`, `If your site isn't behaving as expected, you might want to remove these.`, registrations);
+      for (var _iterator = registrations, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
+        var _ref;
+
+        if (_isArray) {
+          if (_i >= _iterator.length) break;
+          _ref = _iterator[_i++];
+        } else {
+          _i = _iterator.next();
+          if (_i.done) break;
+          _ref = _i.value;
+        }
+
+        let registration = _ref;
+        registration.unregister();
+      }
     });
   }
 
   const rootElement = document.getElementById(`___gatsby`);
   const renderer = (0, _apiRunnerBrowser.apiRunner)(`replaceHydrateFunction`, undefined, _reactDom.default.render)[0];
 
-  _loader.default.addPagesArray(_pages.default);
-
   _loader.default.addDevRequires(_syncRequires.default);
 
-  Promise.all([_loader.default.getResourcesForPathname(`/dev-404-page/`), _loader.default.getResourcesForPathname(`/404.html`), _loader.default.getResourcesForPathname(window.location.pathname)]).then(() => {
+  Promise.all([_loader.default.loadPage(window.location.pathname), _loader.default.loadPage(`/dev-404-page/`), _loader.default.loadPage(`/404.html`).catch(err => null), _devLoader.default.loadPages()]).then(() => {
     const preferDefault = m => m && m.default || m;
 
     let Root = preferDefault(require(`./root`));
     (0, _domready.default)(() => {
       renderer(_react.default.createElement(Root, null), rootElement, () => {
-        (0, _loader.postInitialRenderWork)();
         (0, _apiRunnerBrowser.apiRunner)(`onInitialClientRender`);
       });
     });
+  }).catch(err => {
+    console.log(err);
   });
 });
+
+function supportsServiceWorkers(location, navigator) {
+  if (location.hostname === `localhost` || location.protocol === `https:`) {
+    return `serviceWorker` in navigator;
+  }
+
+  return false;
+}
\ No newline at end of file
diff --git a/node_modules/gatsby/cache-dir/commonjs/dev-loader.js b/node_modules/gatsby/cache-dir/commonjs/dev-loader.js
new file mode 100644
index 0000000..5b80bf3
--- /dev/null
+++ b/node_modules/gatsby/cache-dir/commonjs/dev-loader.js
@@ -0,0 +1,50 @@
+"use strict";
+
+// Initialized by calling loadPages
+let pagesManifest = null;
+
+const fetchPages = () => new Promise((resolve, reject) => {
+  const req = new XMLHttpRequest();
+  req.open(`GET`, `/___pages`, true);
+
+  req.onreadystatechange = () => {
+    if (req.readyState == 4) {
+      if (req.status === 200) {
+        // TODO is this safe? Maybe just do this check in dev mode?
+        const contentType = req.getResponseHeader(`content-type`);
+
+        if (!contentType || !contentType.startsWith(`application/json`)) {
+          reject();
+        } else {
+          resolve(JSON.parse(req.responseText));
+        }
+      } else {
+        reject();
+      }
+    }
+  };
+
+  req.send(null);
+}); // Returns a promise that fetches the `/___pages` resource from the
+// running `gatsby develop` server. It contains a map of all pages on
+// the site (path -> page). Call `getPagesManifest()` to retrieve the
+// pages. Used by dev-404-page to present a list of all pages
+
+
+const loadPages = () => fetchPages().then(pages => {
+  pagesManifest = pages;
+}); // Returns the map of all pages on the site (path -> page)
+
+
+const getPagesManifest = () => {
+  if (pagesManifest === null) {
+    throw new Error(`pages-manifest hasn't been initialized. Ensure the dev-loader/loadPages has been called first`);
+  } else {
+    return pagesManifest;
+  }
+};
+
+module.exports = {
+  loadPages,
+  getPagesManifest
+};
\ No newline at end of file
diff --git a/node_modules/gatsby/cache-dir/commonjs/develop-static-entry.js b/node_modules/gatsby/cache-dir/commonjs/develop-static-entry.js
index 462c3bf..d07dbec 100644
--- a/node_modules/gatsby/cache-dir/commonjs/develop-static-entry.js
+++ b/node_modules/gatsby/cache-dir/commonjs/develop-static-entry.js
@@ -95,8 +95,7 @@ var _default = (pagePath, callback) => {
     setBodyAttributes,
     setPreBodyComponents,
     setPostBodyComponents,
-    setBodyProps,
-    pathname: pagePath
+    setBodyProps
   });
   (0, _apiRunnerSsr.default)(`onPreRenderHTML`, {
     getHeadComponents,
@@ -104,8 +103,7 @@ var _default = (pagePath, callback) => {
     getPreBodyComponents,
     replacePreBodyComponents,
     getPostBodyComponents,
-    replacePostBodyComponents,
-    pathname: pagePath
+    replacePostBodyComponents
   });
 
   const htmlElement = _react.default.createElement(Html, Object.assign({}, bodyProps, {
diff --git a/node_modules/gatsby/cache-dir/commonjs/ensure-resources.js b/node_modules/gatsby/cache-dir/commonjs/ensure-resources.js
index 0d3bb56..7e79b01 100644
--- a/node_modules/gatsby/cache-dir/commonjs/ensure-resources.js
+++ b/node_modules/gatsby/cache-dir/commonjs/ensure-resources.js
@@ -25,7 +25,7 @@ class EnsureResources extends _react.default.Component {
     let location = props.location;
     this.state = {
       location: Object.assign({}, location),
-      pageResources: _loader.default.getResourcesForPathnameSync(location.pathname)
+      pageResources: _loader.default.getPageOr404(location.pathname)
     };
   }
 
@@ -44,7 +44,7 @@ class EnsureResources extends _react.default.Component {
     location
   }, prevState) {
     if (prevState.location !== location) {
-      const pageResources = _loader.default.getResourcesForPathnameSync(location.pathname);
+      const pageResources = _loader.default.getPageOr404(location.pathname);
 
       return {
         pageResources,
@@ -70,14 +70,14 @@ class EnsureResources extends _react.default.Component {
   retryResources(nextProps) {
     const pathname = nextProps.location.pathname;
 
-    if (!_loader.default.getResourcesForPathnameSync(pathname)) {
+    if (!_loader.default.getPage(pathname)) {
       // Store the previous and next location before resolving resources
       const prevLocation = this.props.location;
       this.nextLocation = nextProps.location; // Page resources won't be set in cases where the browser back button
       // or forward button is pushed as we can't wait as normal for resources
       // to load before changing the page.
 
-      _loader.default.getResourcesForPathname(pathname).then(pageResources => {
+      _loader.default.loadPage(pathname).then(pageResources => {
         // The page may have changed since we started this, in which case doesn't update
         if (this.nextLocation !== nextProps.location) {
           return;
diff --git a/node_modules/gatsby/cache-dir/commonjs/find-page.js b/node_modules/gatsby/cache-dir/commonjs/find-page.js
deleted file mode 100644
index 512f379..0000000
--- a/node_modules/gatsby/cache-dir/commonjs/find-page.js
+++ /dev/null
@@ -1,57 +0,0 @@
-"use strict";
-
-var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
-
-exports.__esModule = true;
-exports.default = void 0;
-
-var _utils = require("@reach/router/lib/utils");
-
-var _stripPrefix = _interopRequireDefault(require("./strip-prefix"));
-
-// TODO add tests especially for handling prefixed links.
-const pageCache = {};
-
-var _default = (pages, pathPrefix = ``) => rawPathname => {
-  let pathname = decodeURIComponent(rawPathname); // Remove the pathPrefix from the pathname.
-
-  let trimmedPathname = (0, _stripPrefix.default)(pathname, pathPrefix); // Remove any hashfragment
-
-  if (trimmedPathname.split(`#`).length > 1) {
-    trimmedPathname = trimmedPathname.split(`#`).slice(0, -1).join(``);
-  } // Remove search query
-
-
-  if (trimmedPathname.split(`?`).length > 1) {
-    trimmedPathname = trimmedPathname.split(`?`).slice(0, -1).join(``);
-  }
-
-  if (pageCache[trimmedPathname]) {
-    return pageCache[trimmedPathname];
-  }
-
-  let foundPage; // Array.prototype.find is not supported in IE so we use this somewhat odd
-  // work around.
-
-  pages.some(page => {
-    let pathToMatch = page.matchPath ? page.matchPath : page.path;
-
-    if ((0, _utils.match)(pathToMatch, trimmedPathname)) {
-      foundPage = page;
-      pageCache[trimmedPathname] = page;
-      return true;
-    } // Finally, try and match request with default document.
-
-
-    if ((0, _utils.match)(`${page.path}index.html`, trimmedPathname)) {
-      foundPage = page;
-      pageCache[trimmedPathname] = page;
-      return true;
-    }
-
-    return false;
-  });
-  return foundPage;
-};
-
-exports.default = _default;
\ No newline at end of file
diff --git a/node_modules/gatsby/cache-dir/commonjs/gatsby-browser-entry.js b/node_modules/gatsby/cache-dir/commonjs/gatsby-browser-entry.js
index d88b2d4..1ab4447 100644
--- a/node_modules/gatsby/cache-dir/commonjs/gatsby-browser-entry.js
+++ b/node_modules/gatsby/cache-dir/commonjs/gatsby-browser-entry.js
@@ -16,7 +16,6 @@ var _gatsbyLink = _interopRequireWildcard(require("gatsby-link"));
 
 exports.Link = _gatsbyLink.default;
 exports.withPrefix = _gatsbyLink.withPrefix;
-exports.withAssetPrefix = _gatsbyLink.withAssetPrefix;
 exports.navigate = _gatsbyLink.navigate;
 exports.push = _gatsbyLink.push;
 exports.replace = _gatsbyLink.replace;
@@ -64,5 +63,5 @@ StaticQuery.propTypes = {
 };
 
 function graphql() {
-  throw new Error(`It appears like Gatsby is misconfigured. Gatsby related \`graphql\` calls ` + `are supposed to only be evaluated at compile time, and then compiled away. ` + `Unfortunately, something went wrong and the query was left in the compiled code.\n\n` + `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`);
+  throw new Error(`It appears like Gatsby is misconfigured. Gatsby related \`graphql\` calls ` + `are supposed to only be evaluated at compile time, and then compiled away,. ` + `Unfortunately, something went wrong and the query was left in the compiled code.\n\n.` + `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`);
 }
\ No newline at end of file
diff --git a/node_modules/gatsby/cache-dir/commonjs/json-store.js b/node_modules/gatsby/cache-dir/commonjs/json-store.js
index 9498c47..7731643 100644
--- a/node_modules/gatsby/cache-dir/commonjs/json-store.js
+++ b/node_modules/gatsby/cache-dir/commonjs/json-store.js
@@ -76,13 +76,15 @@ class JSONStore extends _react.default.Component {
   render() {
     const data = this.state.pageQueryData[getPathFromProps(this.props)]; // eslint-disable-next-line
 
+    const propsWithoutPages = Object.assign({}, this.props);
+
     if (!data) {
       return _react.default.createElement("div", null);
     }
 
     return _react.default.createElement(_gatsby.StaticQueryContext.Provider, {
       value: this.state.staticQueryData
-    }, _react.default.createElement(_pageRenderer.default, (0, _extends2.default)({}, this.props, data)));
+    }, _react.default.createElement(_pageRenderer.default, (0, _extends2.default)({}, propsWithoutPages, data)));
   }
 
 }
diff --git a/node_modules/gatsby/cache-dir/commonjs/loader.js b/node_modules/gatsby/cache-dir/commonjs/loader.js
index 516981a..d7ba7aa 100644
--- a/node_modules/gatsby/cache-dir/commonjs/loader.js
+++ b/node_modules/gatsby/cache-dir/commonjs/loader.js
@@ -5,163 +5,151 @@ var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefau
 exports.__esModule = true;
 exports.default = exports.publicLoader = exports.setApiRunnerForLoader = exports.postInitialRenderWork = void 0;
 
-var _findPage = _interopRequireDefault(require("./find-page"));
-
 var _emitter = _interopRequireDefault(require("./emitter"));
 
 var _prefetch = _interopRequireDefault(require("./prefetch"));
 
+var _utils = require("@reach/router/lib/utils");
+
+var _stripPrefix = _interopRequireDefault(require("./strip-prefix"));
+
+var _matchPaths = _interopRequireDefault(require("./match-paths.json"));
+
+// Generated during bootstrap
 const preferDefault = m => m && m.default || m;
 
-let devGetPageData;
-let inInitialRender = true;
-let hasFetched = Object.create(null);
+const pageNotFoundPaths = new Set();
+let apiRunner;
 let syncRequires = {};
 let asyncRequires = {};
-let jsonDataPaths = {};
-let fetchHistory = [];
-let fetchingPageResourceMapPromise = null;
-let fetchedPageResourceMap = false;
-/**
- * Indicate if pages manifest is loaded
- *  - in production it is split to separate "pages-manifest" chunk that need to be lazy loaded,
- *  - in development it is part of single "common" chunk and is available from the start.
- */
-
-let hasPageResourceMap = process.env.NODE_ENV !== `production`;
-let apiRunner;
-const failedPaths = {};
-const MAX_HISTORY = 5;
-const jsonPromiseStore = {};
+const fetchedPageData = {};
+const pageDatas = {};
+const fetchPromiseStore = {};
+let devGetPageData;
 
 if (process.env.NODE_ENV !== `production`) {
   devGetPageData = require(`./socketIo`).getPageData;
-}
-/**
- * Fetch resource map (pages data and paths to json files with results of
- *  queries)
- */
-
-
-const fetchPageResourceMap = () => {
-  if (!fetchingPageResourceMapPromise) {
-    fetchingPageResourceMapPromise = new Promise(resolve => {
-      asyncRequires.data().then(({
-        pages,
-        dataPaths
-      }) => {
-        // TODO — expose proper way to access this data from plugins.
-        // Need to come up with an API for plugins to access
-        // site info.
-        window.___dataPaths = dataPaths;
-        queue.addPagesArray(pages);
-        queue.addDataPaths(dataPaths);
-        hasPageResourceMap = true;
-        resolve(fetchedPageResourceMap = true);
-      }).catch(e => {
-        console.warn(`Failed to fetch pages manifest. Gatsby will reload on next navigation.`); // failed to grab pages metadata
-        // for now let's just resolve this - on navigation this will cause missing resources
-        // and will trigger page reload and then it will retry
-        // this can happen with service worker updates when webpack manifest points to old
-        // chunk that no longer exists on server
-
-        resolve(fetchedPageResourceMap = true);
-      });
-    });
-  }
+} // Cache for `cleanAndFindPath()`. In case `match-paths.json` is large
 
-  return fetchingPageResourceMapPromise;
-};
 
-const createJsonURL = jsonName => `${__PATH_PREFIX__}/static/d/${jsonName}.json`;
+const cleanAndFindPathCache = {}; // Given a raw URL path, returns the cleaned version of it (trim off
+// `#` and query params), or if it matches an entry in
+// `match-paths.json`, its matched path is returned
+//
+// E.g `/foo?bar=far` => `/foo`
+//
+// Or if `match-paths.json` contains `{ "/foo*": "/page1", ...}`, then
+// `/foo?bar=far` => `/page1`
 
-const createComponentUrls = componentChunkName => window.___chunkMapping[componentChunkName].map(chunk => __PATH_PREFIX__ + chunk);
+const cleanAndFindPath = rawPathname => {
+  let pathname = decodeURIComponent(rawPathname); // Remove the pathPrefix from the pathname.
 
-const fetchResource = resourceName => {
-  // Find resource
-  let resourceFunction;
+  let trimmedPathname = (0, _stripPrefix.default)(pathname, __PATH_PREFIX__); // Remove any hashfragment
 
-  if (resourceName.slice(0, 12) === `component---`) {
-    resourceFunction = asyncRequires.components[resourceName];
-  } else {
-    if (resourceName in jsonPromiseStore) {
-      resourceFunction = () => jsonPromiseStore[resourceName];
-    } else {
-      resourceFunction = () => {
-        const fetchPromise = new Promise((resolve, reject) => {
-          const url = createJsonURL(jsonDataPaths[resourceName]);
-          const req = new XMLHttpRequest();
-          req.open(`GET`, url, true);
-          req.withCredentials = true;
-
-          req.onreadystatechange = () => {
-            if (req.readyState == 4) {
-              if (req.status === 200) {
-                resolve(JSON.parse(req.responseText));
-              } else {
-                delete jsonPromiseStore[resourceName];
-                reject();
-              }
-            }
-          };
-
-          req.send(null);
-        });
-        jsonPromiseStore[resourceName] = fetchPromise;
-        return fetchPromise;
-      };
+  if (trimmedPathname.split(`#`).length > 1) {
+    trimmedPathname = trimmedPathname.split(`#`).slice(0, -1).join(``);
+  } // Remove search query
+
+
+  if (trimmedPathname.split(`?`).length > 1) {
+    trimmedPathname = trimmedPathname.split(`?`).slice(0, -1).join(``);
+  }
+
+  if (cleanAndFindPathCache[trimmedPathname]) {
+    return cleanAndFindPathCache[trimmedPathname];
+  }
+
+  let foundPath;
+  Object.keys(_matchPaths.default).some(matchPath => {
+    if ((0, _utils.match)(matchPath, trimmedPathname)) {
+      foundPath = _matchPaths.default[matchPath];
+      return foundPath;
+    } // Finally, try and match request with default document.
+
+
+    if (trimmedPathname === `/index.html`) {
+      foundPath = `/`;
+      return foundPath;
     }
-  } // Download the resource
-
-
-  hasFetched[resourceName] = true;
-  return new Promise(resolve => {
-    const fetchPromise = resourceFunction();
-    let failed = false;
-    return fetchPromise.catch(() => {
-      failed = true;
-    }).then(component => {
-      fetchHistory.push({
-        resource: resourceName,
-        succeeded: !failed
-      });
-      fetchHistory = fetchHistory.slice(-MAX_HISTORY);
-      resolve(component);
-    });
+
+    return false;
   });
+
+  if (!foundPath) {
+    foundPath = trimmedPathname;
+  }
+
+  cleanAndFindPathCache[trimmedPathname] = foundPath;
+  return foundPath;
 };
 
-const prefetchResource = resourceName => {
-  if (resourceName.slice(0, 12) === `component---`) {
-    return Promise.all(createComponentUrls(resourceName).map(url => (0, _prefetch.default)(url)));
+const cachedFetch = (resourceName, fetchFn) => {
+  if (resourceName in fetchPromiseStore) {
+    return fetchPromiseStore[resourceName];
   } else {
-    const url = createJsonURL(jsonDataPaths[resourceName]);
-    return (0, _prefetch.default)(url);
+    const promise = fetchFn(resourceName);
+    fetchPromiseStore[resourceName] = promise;
+    return promise.catch(err => {
+      delete fetchPromiseStore[resourceName];
+      return err;
+    });
   }
 };
 
-const getResourceModule = resourceName => fetchResource(resourceName).then(preferDefault);
+const doFetch = url => new Promise((resolve, reject) => {
+  const req = new XMLHttpRequest();
+  req.open(`GET`, url, true);
+  req.withCredentials = true;
 
-const appearsOnLine = () => {
-  const isOnLine = navigator.onLine;
+  req.onreadystatechange = () => {
+    if (req.readyState == 4) {
+      resolve(req);
+    }
+  };
 
-  if (typeof isOnLine === `boolean`) {
-    return isOnLine;
-  } // If no navigator.onLine support assume onLine if any of last N fetches succeeded
+  req.send(null);
+});
 
+const handlePageDataResponse = (path, req) => {
+  fetchedPageData[path] = true;
 
-  const succeededFetch = fetchHistory.find(entry => entry.succeeded);
-  return !!succeededFetch;
-};
+  if (req.status === 200) {
+    const contentType = req.getResponseHeader(`content-type`);
 
-const handleResourceLoadError = (path, message) => {
-  if (!failedPaths[path]) {
-    failedPaths[path] = message;
+    if (!contentType || !contentType.startsWith(`application/json`)) {
+      pageNotFoundPaths.add(path);
+      return null;
+    } else {
+      const pageData = JSON.parse(req.responseText);
+      pageDatas[path] = pageData;
+      return pageData;
+    }
+  } else if (req.status === 404) {
+    pageNotFoundPaths.add(path);
+    return null;
+  } else {
+    throw new Error(`error fetching page`);
   }
+};
 
-  if (appearsOnLine() && window.location.pathname.replace(/\/$/g, ``) !== path.replace(/\/$/g, ``)) {
-    window.location.pathname = path;
-  }
+const fetchPageData = path => {
+  const url = makePageDataUrl(path);
+  return cachedFetch(url, doFetch).then(req => handlePageDataResponse(path, req));
+};
+
+const createComponentUrls = componentChunkName => window.___chunkMapping[componentChunkName].map(chunk => __PATH_PREFIX__ + chunk);
+
+const fetchComponent = chunkName => asyncRequires.components[chunkName]();
+
+const stripSurroundingSlashes = s => {
+  s = s[0] === `/` ? s.slice(1) : s;
+  s = s.endsWith(`/`) ? s.slice(0, -1) : s;
+  return s;
+};
+
+const makePageDataUrl = path => {
+  const fixedPath = path === `/` ? `index` : stripSurroundingSlashes(path);
+  return `${__PATH_PREFIX__}/page-data/${fixedPath}/page-data.json`;
 };
 
 const onPrefetchPathname = pathname => {
@@ -171,42 +159,30 @@ const onPrefetchPathname = pathname => {
     });
     prefetchTriggered[pathname] = true;
   }
-};
-
-const onPostPrefetchPathname = pathname => {
-  if (!prefetchCompleted[pathname]) {
-    apiRunner(`onPostPrefetchPathname`, {
-      pathname
-    });
-    prefetchCompleted[pathname] = true;
-  }
-};
-/**
- * Check if we should fallback to resources for 404 page if resources for a page are not found
- *
- * We can't do that when we don't have full pages manifest - we don't know if page exist or not if we don't have it.
- * We also can't do that on initial render / mount in case we just can't load resources needed for first page.
- * Not falling back to 404 resources will cause "EnsureResources" component to handle scenarios like this with
- * potential reload
- * @param {string} path Path to a page
- */
-
-
-const shouldFallbackTo404Resources = path => (hasPageResourceMap || inInitialRender) && path !== `/404.html`; // Note we're not actively using the path data atm. There
+}; // Note we're not actively using the path data atm. There
 // could be future optimizations however around trying to ensure
 // we load all resources for likely-to-be-visited paths.
 // let pathArray = []
 // let pathCount = {}
 
 
-let findPage;
 let pathScriptsCache = {};
 let prefetchTriggered = {};
 let prefetchCompleted = {};
 let disableCorePrefetching = false;
+
+const onPostPrefetch = url => {
+  if (!prefetchCompleted[url]) {
+    apiRunner(`onPostPrefetch`, {
+      url
+    });
+    prefetchCompleted[url] = true;
+  }
+};
+
 const queue = {
-  addPagesArray: newPages => {
-    findPage = (0, _findPage.default)(newPages, __BASE_PATH__);
+  addPageData: pageData => {
+    pageDatas[pageData.path] = pageData;
   },
   addDevRequires: devRequires => {
     syncRequires = devRequires;
@@ -214,16 +190,11 @@ const queue = {
   addProdRequires: prodRequires => {
     asyncRequires = prodRequires;
   },
-  addDataPaths: dataPaths => {
-    jsonDataPaths = dataPaths;
-  },
   // Hovering on a link is a very strong indication the user is going to
   // click on it soon so let's start prefetching resources for this
   // pathname.
-  hovering: path => {
-    queue.getResourcesForPathname(path);
-  },
-  enqueue: path => {
+  hovering: path => queue.loadPage(path),
+  enqueue: rawPath => {
     if (!apiRunner) console.error(`Run setApiRunnerForLoader() before enqueing paths`); // Skip prefetching if we know user is on slow or constrained connection
 
     if (`connection` in navigator) {
@@ -238,170 +209,134 @@ const queue = {
     // prefetching this path.
 
 
-    onPrefetchPathname(path); // If a plugin has disabled core prefetching, stop now.
+    onPrefetchPathname(rawPath); // If a plugin has disabled core prefetching, stop now.
 
     if (disableCorePrefetching.some(a => a)) {
       return false;
     } // Check if the page exists.
 
 
-    let page = findPage(path); // In production, we lazy load page metadata. If that
-    // hasn't been fetched yet, start fetching it now.
-
-    if (process.env.NODE_ENV === `production` && !page && !fetchedPageResourceMap) {
-      // If page wasn't found check and we didn't fetch resources map for
-      // all pages, wait for fetch to complete and try find page again
-      return fetchPageResourceMap().then(() => queue.enqueue(path));
-    }
+    let realPath = cleanAndFindPath(rawPath);
 
-    if (!page) {
-      return false;
+    if (pageDatas[realPath]) {
+      return true;
     }
 
     if (process.env.NODE_ENV !== `production` && process.env.NODE_ENV !== `test`) {
-      devGetPageData(page.path);
-    } // Prefetch resources.
-
+      // Ensure latest version of page data is in the JSON store
+      devGetPageData(realPath);
+    }
 
     if (process.env.NODE_ENV === `production`) {
-      Promise.all([prefetchResource(page.jsonName), prefetchResource(page.componentChunkName)]).then(() => {
+      const pageDataUrl = makePageDataUrl(realPath);
+      (0, _prefetch.default)(pageDataUrl).then(() => // This was just prefetched, so will return a response from
+      // the cache instead of making another request to the server
+      fetchPageData(realPath)).then(pageData => {
         // Tell plugins the path has been successfully prefetched
-        onPostPrefetchPathname(path);
+        const chunkName = pageData.componentChunkName;
+        const componentUrls = createComponentUrls(chunkName);
+        return Promise.all(componentUrls.map(_prefetch.default)).then(() => {
+          const resourceUrls = [pageDataUrl].concat(componentUrls);
+          onPostPrefetch({
+            path: rawPath,
+            resourceUrls
+          });
+        });
       });
     }
 
     return true;
   },
-  getPage: pathname => findPage(pathname),
-  getResourceURLsForPathname: path => {
-    const page = findPage(path);
+  isPageNotFound: pathname => pageNotFoundPaths.has(pathname),
+  loadPageData: rawPath => new Promise((resolve, reject) => {
+    const realPath = cleanAndFindPath(rawPath);
+
+    if (!fetchedPageData[realPath]) {
+      fetchPageData(realPath).then(pageData => {
+        if (process.env.NODE_ENV !== `production`) {
+          devGetPageData(realPath);
+        }
 
-    if (page) {
-      return [...createComponentUrls(page.componentChunkName), createJsonURL(jsonDataPaths[page.jsonName])];
+        resolve(queue.loadPageData(rawPath));
+      });
     } else {
-      return null;
+      if (pageDatas[realPath]) {
+        resolve(pageDatas[realPath]);
+      } else {
+        reject(new Error(`page not found`));
+      }
     }
-  },
-  getResourcesForPathnameSync: path => {
-    const page = findPage(path);
-
-    if (page) {
-      return pathScriptsCache[page.path];
-    } else if (shouldFallbackTo404Resources(path)) {
-      return queue.getResourcesForPathnameSync(`/404.html`);
+  }),
+  loadPage: rawPath => queue.loadPageData(rawPath).then(pageData => {
+    if (process.env.NODE_ENV !== `production`) {
+      const component = syncRequires.components[pageData.componentChunkName];
+      return [pageData, component];
     } else {
-      return null;
-    }
-  },
-  // Get resources (code/data) for a path. Fetches metdata first
-  // if necessary and then the code/data bundles. Used for prefetching
-  // and getting resources for page changes.
-  getResourcesForPathname: path => new Promise((resolve, reject) => {
-    // Production code path
-    if (failedPaths[path]) {
-      handleResourceLoadError(path, `Previously detected load failure for "${path}"`);
-      reject();
-      return;
-    }
-
-    const page = findPage(path); // In production, we lazy load page metadata. If that
-    // hasn't been fetched yet, start fetching it now.
-
-    if (!page && !fetchedPageResourceMap && process.env.NODE_ENV === `production`) {
-      // If page wasn't found check and we didn't fetch resources map for
-      // all pages, wait for fetch to complete and try to get resources again
-      fetchPageResourceMap().then(() => resolve(queue.getResourcesForPathname(path)));
-      return;
+      return cachedFetch(pageData.componentChunkName, fetchComponent).then(preferDefault).then(component => [pageData, component]);
     }
+  }).then(([pageData, component]) => {
+    const page = {
+      componentChunkName: pageData.componentChunkName,
+      path: pageData.path,
+      compilationHash: pageData.compilationHash
+    };
+    const jsonData = {
+      data: pageData.data,
+      pageContext: pageData.pageContext
+    };
+    const pageResources = {
+      component,
+      json: jsonData,
+      page
+    };
+    pathScriptsCache[cleanAndFindPath(rawPath)] = pageResources;
+
+    _emitter.default.emit(`onPostLoadPageResources`, {
+      page: pageResources,
+      pageResources
+    });
 
-    if (!page) {
-      if (shouldFallbackTo404Resources(path)) {
-        console.log(`A page wasn't found for "${path}"`); // Preload the custom 404 page
-
-        resolve(queue.getResourcesForPathname(`/404.html`));
-        return;
-      }
-
-      resolve();
-      return;
-    } // Use the path from the page so the pathScriptsCache uses
-    // the normalized path.
-
-
-    path = page.path; // Check if it's in the cache already.
-
-    if (pathScriptsCache[path]) {
-      _emitter.default.emit(`onPostLoadPageResources`, {
-        page,
-        pageResources: pathScriptsCache[path]
+    if (process.env.NODE_ENV === `production`) {
+      const pageDataUrl = makePageDataUrl(cleanAndFindPath(rawPath));
+      const componentUrls = createComponentUrls(pageData.componentChunkName);
+      const resourceUrls = [pageDataUrl].concat(componentUrls);
+      onPostPrefetch({
+        path: rawPath,
+        resourceUrls
       });
+    }
 
-      resolve(pathScriptsCache[path]);
-      return;
-    } // Nope, we need to load resource(s)
-
-
-    _emitter.default.emit(`onPreLoadPageResources`, {
-      path
-    }); // In development we know the code is loaded already
-    // so we just return with it immediately.
-
-
-    if (process.env.NODE_ENV !== `production`) {
-      const pageResources = {
-        component: syncRequires.components[page.componentChunkName],
-        page // Add to the cache.
-
-      };
-      pathScriptsCache[path] = pageResources;
-      devGetPageData(page.path).then(pageData => {
-        _emitter.default.emit(`onPostLoadPageResources`, {
-          page,
-          pageResources
-        }); // Tell plugins the path has been successfully prefetched
-
+    return pageResources;
+  }).catch(err => null),
+  getPage: rawPath => pathScriptsCache[cleanAndFindPath(rawPath)],
+  getPageOr404: rawPath => {
+    const page = queue.getPage(rawPath);
 
-        onPostPrefetchPathname(path);
-        resolve(pageResources);
-      });
+    if (page) {
+      return page;
+    } else if (rawPath !== `/404.html`) {
+      return queue.getPage(`/404.html`);
     } else {
-      Promise.all([getResourceModule(page.componentChunkName), getResourceModule(page.jsonName)]).then(([component, json]) => {
-        if (!(component && json)) {
-          resolve(null);
-          return;
-        }
-
-        const pageResources = {
-          component,
-          json,
-          page
-        };
-        pageResources.page.jsonURL = createJsonURL(jsonDataPaths[page.jsonName]);
-        pathScriptsCache[path] = pageResources;
-        resolve(pageResources);
-
-        _emitter.default.emit(`onPostLoadPageResources`, {
-          page,
-          pageResources
-        }); // Tell plugins the path has been successfully prefetched
-
-
-        onPostPrefetchPathname(path);
-      });
+      return null;
     }
-  })
-};
+  },
+  getResourceURLsForPathname: path => {
+    const pageData = queue.getPage(path);
 
-const postInitialRenderWork = () => {
-  inInitialRender = false;
+    if (pageData) {
+      // Original implementation also concatenated the jsonDataPath
+      // for the page
+      return createComponentUrls(pageData.componentChunkName);
+    } else {
+      return null;
+    }
+  } // Deprecated April 2019. Used to fetch the pages-manifest. Now it's a
+  // noop
 
-  if (process.env.NODE_ENV === `production`) {
-    // We got all resources needed for first mount,
-    // we can fetch resources for all pages.
-    fetchPageResourceMap();
-  }
 };
 
+const postInitialRenderWork = () => {};
+
 exports.postInitialRenderWork = postInitialRenderWork;
 
 const setApiRunnerForLoader = runner => {
@@ -411,9 +346,18 @@ const setApiRunnerForLoader = runner => {
 
 exports.setApiRunnerForLoader = setApiRunnerForLoader;
 const publicLoader = {
-  getResourcesForPathname: queue.getResourcesForPathname,
+  // Deprecated April 2019. Use `loadPage` instead
+  getResourcesForPathname: queue.loadPage,
+  // Deprecated April 2019. Use `getPage` instead
+  getResourcesForPathnameSync: queue.getPage,
+  // Deprecated April 2019. Query results used to be in a separate
+  // file, but are now included in the page-data.json, which is
+  // already loaded into the browser by the time this function is
+  // called. Use the resource URLs passed in `onPostPrefetch` instead.
   getResourceURLsForPathname: queue.getResourceURLsForPathname,
-  getResourcesForPathnameSync: queue.getResourcesForPathnameSync
+  loadPage: queue.loadPage,
+  getPage: queue.getPage,
+  getPageOr404: queue.getPageOr404
 };
 exports.publicLoader = publicLoader;
 var _default = queue;
diff --git a/node_modules/gatsby/cache-dir/commonjs/navigation.js b/node_modules/gatsby/cache-dir/commonjs/navigation.js
index 9565a00..ea622cb 100644
--- a/node_modules/gatsby/cache-dir/commonjs/navigation.js
+++ b/node_modules/gatsby/cache-dir/commonjs/navigation.js
@@ -34,7 +34,7 @@ function maybeRedirect(pathname) {
 
   if (redirect != null) {
     if (process.env.NODE_ENV !== `production`) {
-      const pageResources = _loader.default.getResourcesForPathnameSync(pathname);
+      const pageResources = _loader.default.getPage(pathname);
 
       if (pageResources != null) {
         console.error(`The route "${pathname}" matches both a page and a redirect; this is probably not intentional.`);
@@ -105,7 +105,16 @@ const navigate = (to, options = {}) => {
     });
   }, 1000);
 
-  _loader.default.getResourcesForPathname(pathname).then(pageResources => {
+  _loader.default.loadPage(pathname).then(pageResources => {
+    // If the loaded page has a different compilation hash to the
+    // window, then a rebuild has occurred on the server. Reload.
+    if (process.env.NODE_ENV === `production` && pageResources) {
+      if (pageResources.page.compilationHash !== window.___compilationHash) {
+        console.log(`compilation has different. window = ${window.___compilationHash}, page = ${pageResources.page.compilationHash}`);
+        window.location = pathname;
+      }
+    }
+
     (0, _router.navigate)(to, options);
     clearTimeout(timeoutId);
   });
diff --git a/node_modules/gatsby/cache-dir/commonjs/production-app.js b/node_modules/gatsby/cache-dir/commonjs/production-app.js
index 336384a..1708915 100644
--- a/node_modules/gatsby/cache-dir/commonjs/production-app.js
+++ b/node_modules/gatsby/cache-dir/commonjs/production-app.js
@@ -14,8 +14,6 @@ var _reactDom = _interopRequireDefault(require("react-dom"));
 
 var _router = require("@reach/router");
 
-var _utils = require("@reach/router/lib/utils");
-
 var _gatsbyReactRouterScroll = require("gatsby-react-router-scroll");
 
 var _domready = _interopRequireDefault(require("@mikaelkristiansson/domready"));
@@ -35,12 +33,9 @@ var _ensureResources = _interopRequireDefault(require("./ensure-resources"));
 window.asyncRequires = _asyncRequires.default;
 window.___emitter = _emitter.default;
 window.___loader = _loader.default;
+window.___compilationHash = window.pageData.compilationHash;
 
-_loader.default.addPagesArray([window.page]);
-
-_loader.default.addDataPaths({
-  [window.page.jsonName]: window.dataPath
-});
+_loader.default.addPageData([window.pageData]);
 
 _loader.default.addProdRequires(_asyncRequires.default);
 
@@ -76,24 +71,23 @@ _loader.default.addProdRequires(_asyncRequires.default);
   }
 
   const _window = window,
-        page = _window.page,
+        pageData = _window.pageData,
         browserLoc = _window.location;
 
   if ( // Make sure the window.page object is defined
-  page && // The canonical path doesn't match the actual path (i.e. the address bar)
-  __BASE_PATH__ + page.path !== browserLoc.pathname && ( // ...and if matchPage is specified, it also doesn't match the actual path
-  !page.matchPath || !(0, _utils.match)(__BASE_PATH__ + page.matchPath, browserLoc.pathname)) && // Ignore 404 pages, since we want to keep the same URL
-  page.path !== `/404.html` && !page.path.match(/^\/404\/?$/) && // Also ignore the offline shell (since when using the offline plugin, all
+  pageData && // The canonical path doesn't match the actual path (i.e. the address bar)
+  __PATH_PREFIX__ + pageData.path !== browserLoc.pathname && // Ignore 404 pages, since we want to keep the same URL
+  pageData.path !== `/404.html` && !pageData.path.match(/^\/404\/?$/) && // Also ignore the offline shell (since when using the offline plugin, all
   // pages have this canonical path)
-  !page.path.match(/^\/offline-plugin-app-shell-fallback\/?$/)) {
-    (0, _router.navigate)(__BASE_PATH__ + page.path + browserLoc.search + browserLoc.hash, {
+  !pageData.path.match(/^\/offline-plugin-app-shell-fallback\/?$/)) {
+    (0, _router.navigate)(__PATH_PREFIX__ + pageData.path + browserLoc.search + browserLoc.hash, {
       replace: true
     });
   }
 
-  _loader.default.getResourcesForPathname(browserLoc.pathname).then(() => {
+  _loader.default.loadPage(browserLoc.pathname).then(() => {
     const Root = () => (0, _react.createElement)(_router.Router, {
-      basepath: __BASE_PATH__
+      basepath: __PATH_PREFIX__
     }, (0, _react.createElement)(RouteHandler, {
       path: `/*`
     }));
@@ -113,7 +107,6 @@ _loader.default.addProdRequires(_asyncRequires.default);
     const renderer = (0, _apiRunnerBrowser.apiRunner)(`replaceHydrateFunction`, undefined, _reactDom.default.hydrate)[0];
     (0, _domready.default)(() => {
       renderer(_react.default.createElement(NewRoot, null), typeof window !== `undefined` ? document.getElementById(`___gatsby`) : void 0, () => {
-        (0, _loader.postInitialRenderWork)();
         (0, _apiRunnerBrowser.apiRunner)(`onInitialClientRender`);
       });
     });
diff --git a/node_modules/gatsby/cache-dir/commonjs/public-page-renderer-dev.js b/node_modules/gatsby/cache-dir/commonjs/public-page-renderer-dev.js
index 4056594..9840046 100644
--- a/node_modules/gatsby/cache-dir/commonjs/public-page-renderer-dev.js
+++ b/node_modules/gatsby/cache-dir/commonjs/public-page-renderer-dev.js
@@ -9,6 +9,8 @@ var _react = _interopRequireDefault(require("react"));
 
 var _propTypes = _interopRequireDefault(require("prop-types"));
 
+var _pages = _interopRequireDefault(require("./pages.json"));
+
 var _loader = _interopRequireDefault(require("./loader"));
 
 var _jsonStore = _interopRequireDefault(require("./json-store"));
@@ -16,9 +18,10 @@ var _jsonStore = _interopRequireDefault(require("./json-store"));
 const DevPageRenderer = ({
   location
 }) => {
-  const pageResources = _loader.default.getResourcesForPathnameSync(location.pathname);
+  const pageResources = _loader.default.getPage(location.pathname);
 
   return _react.default.createElement(_jsonStore.default, {
+    pages: _pages.default,
     location,
     pageResources
   });
diff --git a/node_modules/gatsby/cache-dir/commonjs/public-page-renderer-prod.js b/node_modules/gatsby/cache-dir/commonjs/public-page-renderer-prod.js
index 8a4e834..dee0d42 100644
--- a/node_modules/gatsby/cache-dir/commonjs/public-page-renderer-prod.js
+++ b/node_modules/gatsby/cache-dir/commonjs/public-page-renderer-prod.js
@@ -16,11 +16,7 @@ var _loader = _interopRequireDefault(require("./loader"));
 const ProdPageRenderer = ({
   location
 }) => {
-  const pageResources = _loader.default.getResourcesForPathnameSync(location.pathname);
-
-  if (!pageResources) {
-    return null;
-  }
+  const pageResources = _loader.default.getPageOr404(location.pathname);
 
   return _react.default.createElement(_pageRenderer.default, Object.assign({
     location,
diff --git a/node_modules/gatsby/cache-dir/commonjs/register-service-worker.js b/node_modules/gatsby/cache-dir/commonjs/register-service-worker.js
index 9551aad..4fe206b 100644
--- a/node_modules/gatsby/cache-dir/commonjs/register-service-worker.js
+++ b/node_modules/gatsby/cache-dir/commonjs/register-service-worker.js
@@ -5,7 +5,7 @@ var _apiRunnerBrowser = require("./api-runner-browser");
 if (window.location.protocol !== `https:` && window.location.hostname !== `localhost`) {
   console.error(`Service workers can only be used over HTTPS, or on localhost for development`);
 } else if (`serviceWorker` in navigator) {
-  navigator.serviceWorker.register(`${__BASE_PATH__}/sw.js`).then(function (reg) {
+  navigator.serviceWorker.register(`${__PATH_PREFIX__}/sw.js`).then(function (reg) {
     reg.addEventListener(`updatefound`, () => {
       (0, _apiRunnerBrowser.apiRunner)(`onServiceWorkerUpdateFound`, {
         serviceWorker: reg
diff --git a/node_modules/gatsby/cache-dir/commonjs/root.js b/node_modules/gatsby/cache-dir/commonjs/root.js
index 1b0e867..e48bc97 100644
--- a/node_modules/gatsby/cache-dir/commonjs/root.js
+++ b/node_modules/gatsby/cache-dir/commonjs/root.js
@@ -21,6 +21,8 @@ var _apiRunnerBrowser = require("./api-runner-browser");
 
 var _loader = _interopRequireDefault(require("./loader"));
 
+var _devLoader = _interopRequireDefault(require("./dev-loader"));
+
 var _jsonStore = _interopRequireDefault(require("./json-store"));
 
 var _ensureResources = _interopRequireDefault(require("./ensure-resources"));
@@ -51,12 +53,13 @@ if (window.__webpack_hot_middleware_reporter__ !== undefined) {
 
 class RouteHandler extends _react.default.Component {
   render() {
-    let location = this.props.location; // check if page exists - in dev pages are sync loaded, it's safe to use
-    // loader.getPage
+    let location = this.props.location;
+
+    const pages = _devLoader.default.getPagesManifest();
 
-    let page = _loader.default.getPage(location.pathname);
+    const pagePaths = Object.keys(pages);
 
-    if (page) {
+    if (!_loader.default.isPageNotFound(location.pathname)) {
       return _react.default.createElement(_ensureResources.default, {
         location: location
       }, locationAndPageResources => _react.default.createElement(_navigation.RouteUpdates, {
@@ -66,32 +69,33 @@ class RouteHandler extends _react.default.Component {
         shouldUpdateScroll: _navigation.shouldUpdateScroll
       }, _react.default.createElement(_jsonStore.default, (0, _extends2.default)({}, this.props, locationAndPageResources)))));
     } else {
-      const dev404PageResources = _loader.default.getResourcesForPathnameSync(`/dev-404-page/`);
+      const dev404Page = _loader.default.getPage(`/dev-404-page/`);
 
-      const real404PageResources = _loader.default.getResourcesForPathnameSync(`/404.html`);
+      const Dev404Page = dev404Page.component;
 
-      let custom404;
-
-      if (real404PageResources) {
-        custom404 = _react.default.createElement(_jsonStore.default, (0, _extends2.default)({}, this.props, {
-          pageResources: real404PageResources
-        }));
+      if (!_loader.default.getPage(`/404.html`)) {
+        return _react.default.createElement(_navigation.RouteUpdates, {
+          location: location
+        }, _react.default.createElement(Dev404Page, (0, _extends2.default)({}, this.props, {
+          pagePaths: pagePaths
+        })));
       }
 
-      return _react.default.createElement(_navigation.RouteUpdates, {
+      return _react.default.createElement(_ensureResources.default, {
         location: location
-      }, _react.default.createElement(_jsonStore.default, {
-        location: location,
-        pageResources: dev404PageResources,
-        custom404: custom404
-      }));
+      }, locationAndPageResources => _react.default.createElement(_navigation.RouteUpdates, {
+        location: location
+      }, _react.default.createElement(Dev404Page, (0, _extends2.default)({
+        pagePaths: pagePaths,
+        custom404: _react.default.createElement(_jsonStore.default, (0, _extends2.default)({}, this.props, locationAndPageResources))
+      }, this.props))));
     }
   }
 
 }
 
 const Root = () => (0, _react.createElement)(_router.Router, {
-  basepath: __BASE_PATH__
+  basepath: __PATH_PREFIX__
 }, (0, _react.createElement)(RouteHandler, {
   path: `/*`
 })); // Let site, plugins wrap the site e.g. for Redux.
diff --git a/node_modules/gatsby/cache-dir/commonjs/socketIo.js b/node_modules/gatsby/cache-dir/commonjs/socketIo.js
index 694fc98..acdb734 100644
--- a/node_modules/gatsby/cache-dir/commonjs/socketIo.js
+++ b/node_modules/gatsby/cache-dir/commonjs/socketIo.js
@@ -34,19 +34,19 @@ function socketIo() {
         // eslint-disable-next-line no-undef
         socket = io();
 
-        const didDataChange = (msg, queryData) => !(msg.payload.id in queryData) || JSON.stringify(msg.payload.result) !== JSON.stringify(queryData[msg.payload.id]);
+        const didDataChange = (msg, queryData) => !(msg.payload.id in queryData) || JSON.stringify(msg.payload) !== JSON.stringify(queryData[msg.payload.id]);
 
         socket.on(`message`, msg => {
           if (msg.type === `staticQueryResult`) {
             if (didDataChange(msg, staticQueryData)) {
               staticQueryData = Object.assign({}, staticQueryData, {
-                [msg.payload.id]: msg.payload.result
+                [msg.payload.id]: msg.payload
               });
             }
           } else if (msg.type === `pageQueryResult`) {
             if (didDataChange(msg, pageQueryData)) {
               pageQueryData = Object.assign({}, pageQueryData, {
-                [msg.payload.id]: msg.payload.result
+                [msg.payload.id]: msg.payload
               });
             }
           } else if (msg.type === `overlayError`) {
diff --git a/node_modules/gatsby/cache-dir/commonjs/static-entry.js b/node_modules/gatsby/cache-dir/commonjs/static-entry.js
index 74ebc87..76dc0ef 100644
--- a/node_modules/gatsby/cache-dir/commonjs/static-entry.js
+++ b/node_modules/gatsby/cache-dir/commonjs/static-entry.js
@@ -34,16 +34,9 @@ const apiRunner = require(`./api-runner-ssr`);
 
 const syncRequires = require(`./sync-requires`);
 
-const _require5 = require(`./data.json`),
-      dataPaths = _require5.dataPaths,
-      pages = _require5.pages;
+const _require5 = require(`gatsby/package.json`),
+      gatsbyVersion = _require5.version;
 
-const _require6 = require(`gatsby/package.json`),
-      gatsbyVersion = _require6.version; // Speed up looking up pages.
-
-
-const pagesObjectMap = new Map();
-pages.forEach(p => pagesObjectMap.set(p.path, p));
 const stats = JSON.parse(fs.readFileSync(`${process.cwd()}/public/webpack.stats.json`, `utf-8`));
 const chunkMapping = JSON.parse(fs.readFileSync(`${process.cwd()}/public/chunk-map.json`, `utf-8`)); // const testRequireError = require("./test-require-error")
 // For some extremely mysterious reason, webpack adds the above module *after*
@@ -70,7 +63,27 @@ try {
 
 Html = Html && Html.__esModule ? Html.default : Html;
 
-const getPage = path => pagesObjectMap.get(path);
+const getPageDataPath = path => {
+  const fixedPagePath = path === `/` ? `index` : path;
+  return join(`page-data`, fixedPagePath, `page-data.json`);
+};
+
+const getPageDataUrl = pagePath => {
+  const pageDataPath = getPageDataPath(pagePath);
+  return `${__PATH_PREFIX__}/${pageDataPath}`;
+};
+
+const getPageDataFile = pagePath => {
+  const pageDataPath = getPageDataPath(pagePath);
+  return join(process.cwd(), `public`, pageDataPath);
+};
+
+const loadPageDataSync = pagePath => {
+  const pageDataPath = getPageDataPath(pagePath);
+  const pageDataFile = join(process.cwd(), `public`, pageDataPath);
+  const pageDataJson = fs.readFileSync(pageDataFile);
+  return JSON.parse(pageDataJson);
+};
 
 const createElement = React.createElement;
 
@@ -143,26 +156,15 @@ var _default = (pagePath, callback) => {
     postBodyComponents = sanitizeComponents(components);
   };
 
-  const page = getPage(pagePath);
-  let dataAndContext = {};
-
-  if (page.jsonName in dataPaths) {
-    const pathToJsonData = join(process.cwd(), `/public/static/d`, `${dataPaths[page.jsonName]}.json`);
-
-    try {
-      dataAndContext = JSON.parse(fs.readFileSync(pathToJsonData));
-    } catch (e) {
-      console.log(`error`, pathToJsonData, e);
-      process.exit();
-    }
-  }
+  const pageDataRaw = fs.readFileSync(getPageDataFile(pagePath));
+  const pageData = JSON.parse(pageDataRaw);
+  const pageDataUrl = getPageDataUrl(pagePath);
+  const componentChunkName = pageData.componentChunkName;
 
   class RouteHandler extends React.Component {
     render() {
-      const props = Object.assign({}, this.props, dataAndContext, {
-        pathContext: dataAndContext.pageContext
-      });
-      const pageElement = createElement(syncRequires.components[page.componentChunkName], props);
+      const props = Object.assign({}, this.props, pageData);
+      const pageElement = createElement(syncRequires.components[componentChunkName], props);
       const wrappedPage = apiRunner(`wrapPageElement`, {
         element: pageElement,
         props
@@ -180,9 +182,9 @@ var _default = (pagePath, callback) => {
   }
 
   const routerElement = createElement(ServerLocation, {
-    url: `${__BASE_PATH__}${pagePath}`
+    url: `${__PATH_PREFIX__}${pagePath}`
   }, createElement(Router, {
-    baseuri: `${__BASE_PATH__}`
+    baseuri: `${__PATH_PREFIX__}`
   }, createElement(RouteHandler, {
     path: `/*`
   })));
@@ -221,7 +223,7 @@ var _default = (pagePath, callback) => {
   } // Create paths to scripts
 
 
-  let scriptsAndStyles = flatten([`app`, page.componentChunkName].map(s => {
+  let scriptsAndStyles = flatten([`app`, componentChunkName].map(s => {
     const fetchKey = `assetsByChunkName[${s}]`;
     let chunks = get(stats, fetchKey);
     let namedChunkGroups = get(stats, `namedChunkGroups`);
@@ -269,6 +271,7 @@ var _default = (pagePath, callback) => {
     setPostBodyComponents,
     setBodyProps,
     pathname: pagePath,
+    loadPageDataSync,
     bodyHtml,
     scripts,
     styles,
@@ -284,13 +287,12 @@ var _default = (pagePath, callback) => {
     }));
   });
 
-  if (page.jsonName in dataPaths) {
-    const dataPath = `${__PATH_PREFIX__}/static/d/${dataPaths[page.jsonName]}.json`;
+  if (pageData) {
     headComponents.push(React.createElement("link", {
       as: "fetch",
       rel: "preload",
-      key: dataPath,
-      href: dataPath,
+      key: pageDataUrl,
+      href: pageDataUrl,
       crossOrigin: "use-credentials"
     }));
   }
@@ -315,7 +317,7 @@ var _default = (pagePath, callback) => {
     }
   }); // Add page metadata for the current page
 
-  const windowData = `/*<![CDATA[*/window.page=${JSON.stringify(page)};${page.jsonName in dataPaths ? `window.dataPath="${dataPaths[page.jsonName]}";` : ``}/*]]>*/`;
+  const windowData = `/*<![CDATA[*/window.pageData=${pageDataRaw};/*]]>*/`;
   postBodyComponents.push(React.createElement("script", {
     key: `script-loader`,
     id: `gatsby-script-loader`,
diff --git a/node_modules/gatsby/cache-dir/dev-loader.js b/node_modules/gatsby/cache-dir/dev-loader.js
new file mode 100644
index 0000000..93cdf3c
--- /dev/null
+++ b/node_modules/gatsby/cache-dir/dev-loader.js
@@ -0,0 +1,49 @@
+// Initialized by calling loadPages
+let pagesManifest = null
+
+const fetchPages = () =>
+  new Promise((resolve, reject) => {
+    const req = new XMLHttpRequest()
+    req.open(`GET`, `/___pages`, true)
+    req.onreadystatechange = () => {
+      if (req.readyState == 4) {
+        if (req.status === 200) {
+          // TODO is this safe? Maybe just do this check in dev mode?
+          const contentType = req.getResponseHeader(`content-type`)
+          if (!contentType || !contentType.startsWith(`application/json`)) {
+            reject()
+          } else {
+            resolve(JSON.parse(req.responseText))
+          }
+        } else {
+          reject()
+        }
+      }
+    }
+    req.send(null)
+  })
+
+// Returns a promise that fetches the `/___pages` resource from the
+// running `gatsby develop` server. It contains a map of all pages on
+// the site (path -> page). Call `getPagesManifest()` to retrieve the
+// pages. Used by dev-404-page to present a list of all pages
+const loadPages = () =>
+  fetchPages().then(pages => {
+    pagesManifest = pages
+  })
+
+// Returns the map of all pages on the site (path -> page)
+const getPagesManifest = () => {
+  if (pagesManifest === null) {
+    throw new Error(
+      `pages-manifest hasn't been initialized. Ensure the dev-loader/loadPages has been called first`
+    )
+  } else {
+    return pagesManifest
+  }
+}
+
+module.exports = {
+  loadPages,
+  getPagesManifest,
+}
diff --git a/node_modules/gatsby/cache-dir/develop-static-entry.js b/node_modules/gatsby/cache-dir/develop-static-entry.js
index c889f14..56be0d1 100644
--- a/node_modules/gatsby/cache-dir/develop-static-entry.js
+++ b/node_modules/gatsby/cache-dir/develop-static-entry.js
@@ -84,7 +84,6 @@ export default (pagePath, callback) => {
     setPreBodyComponents,
     setPostBodyComponents,
     setBodyProps,
-    pathname: pagePath,
   })
 
   apiRunner(`onPreRenderHTML`, {
@@ -94,7 +93,6 @@ export default (pagePath, callback) => {
     replacePreBodyComponents,
     getPostBodyComponents,
     replacePostBodyComponents,
-    pathname: pagePath,
   })
 
   const htmlElement = React.createElement(Html, {
diff --git a/node_modules/gatsby/cache-dir/ensure-resources.js b/node_modules/gatsby/cache-dir/ensure-resources.js
index 0c37dd5..23270d1 100644
--- a/node_modules/gatsby/cache-dir/ensure-resources.js
+++ b/node_modules/gatsby/cache-dir/ensure-resources.js
@@ -17,7 +17,7 @@ class EnsureResources extends React.Component {
 
     this.state = {
       location: { ...location },
-      pageResources: loader.getResourcesForPathnameSync(location.pathname),
+      pageResources: loader.getPageOr404(location.pathname),
     }
   }
 
@@ -34,9 +34,7 @@ class EnsureResources extends React.Component {
 
   static getDerivedStateFromProps({ location }, prevState) {
     if (prevState.location !== location) {
-      const pageResources = loader.getResourcesForPathnameSync(
-        location.pathname
-      )
+      const pageResources = loader.getPageOr404(location.pathname)
 
       return {
         pageResources,
@@ -62,7 +60,7 @@ class EnsureResources extends React.Component {
   retryResources(nextProps) {
     const { pathname } = nextProps.location
 
-    if (!loader.getResourcesForPathnameSync(pathname)) {
+    if (!loader.getPage(pathname)) {
       // Store the previous and next location before resolving resources
       const prevLocation = this.props.location
       this.nextLocation = nextProps.location
@@ -70,7 +68,7 @@ class EnsureResources extends React.Component {
       // Page resources won't be set in cases where the browser back button
       // or forward button is pushed as we can't wait as normal for resources
       // to load before changing the page.
-      loader.getResourcesForPathname(pathname).then(pageResources => {
+      loader.loadPage(pathname).then(pageResources => {
         // The page may have changed since we started this, in which case doesn't update
         if (this.nextLocation !== nextProps.location) {
           return
diff --git a/node_modules/gatsby/cache-dir/find-page.js b/node_modules/gatsby/cache-dir/find-page.js
deleted file mode 100644
index f25078f..0000000
--- a/node_modules/gatsby/cache-dir/find-page.js
+++ /dev/null
@@ -1,55 +0,0 @@
-// TODO add tests especially for handling prefixed links.
-import { match as matchPath } from "@reach/router/lib/utils"
-import stripPrefix from "./strip-prefix"
-
-const pageCache = {}
-
-export default (pages, pathPrefix = ``) => rawPathname => {
-  let pathname = decodeURIComponent(rawPathname)
-
-  // Remove the pathPrefix from the pathname.
-  let trimmedPathname = stripPrefix(pathname, pathPrefix)
-
-  // Remove any hashfragment
-  if (trimmedPathname.split(`#`).length > 1) {
-    trimmedPathname = trimmedPathname
-      .split(`#`)
-      .slice(0, -1)
-      .join(``)
-  }
-
-  // Remove search query
-  if (trimmedPathname.split(`?`).length > 1) {
-    trimmedPathname = trimmedPathname
-      .split(`?`)
-      .slice(0, -1)
-      .join(``)
-  }
-
-  if (pageCache[trimmedPathname]) {
-    return pageCache[trimmedPathname]
-  }
-
-  let foundPage
-  // Array.prototype.find is not supported in IE so we use this somewhat odd
-  // work around.
-  pages.some(page => {
-    let pathToMatch = page.matchPath ? page.matchPath : page.path
-    if (matchPath(pathToMatch, trimmedPathname)) {
-      foundPage = page
-      pageCache[trimmedPathname] = page
-      return true
-    }
-
-    // Finally, try and match request with default document.
-    if (matchPath(`${page.path}index.html`, trimmedPathname)) {
-      foundPage = page
-      pageCache[trimmedPathname] = page
-      return true
-    }
-
-    return false
-  })
-
-  return foundPage
-}
diff --git a/node_modules/gatsby/cache-dir/gatsby-browser-entry.js b/node_modules/gatsby/cache-dir/gatsby-browser-entry.js
index b803c96..6126d73 100644
--- a/node_modules/gatsby/cache-dir/gatsby-browser-entry.js
+++ b/node_modules/gatsby/cache-dir/gatsby-browser-entry.js
@@ -2,7 +2,6 @@ import React from "react"
 import PropTypes from "prop-types"
 import Link, {
   withPrefix,
-  withAssetPrefix,
   navigate,
   push,
   replace,
@@ -62,15 +61,14 @@ StaticQuery.propTypes = {
 function graphql() {
   throw new Error(
     `It appears like Gatsby is misconfigured. Gatsby related \`graphql\` calls ` +
-      `are supposed to only be evaluated at compile time, and then compiled away. ` +
-      `Unfortunately, something went wrong and the query was left in the compiled code.\n\n` +
+      `are supposed to only be evaluated at compile time, and then compiled away,. ` +
+      `Unfortunately, something went wrong and the query was left in the compiled code.\n\n.` +
       `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`
   )
 }
 
 export {
   Link,
-  withAssetPrefix,
   withPrefix,
   graphql,
   parsePath,
diff --git a/node_modules/gatsby/cache-dir/json-store.js b/node_modules/gatsby/cache-dir/json-store.js
index 8bec0d5..3c476e9 100644
--- a/node_modules/gatsby/cache-dir/json-store.js
+++ b/node_modules/gatsby/cache-dir/json-store.js
@@ -28,6 +28,7 @@ const getPathFromProps = props =>
 class JSONStore extends React.Component {
   constructor(props) {
     super(props)
+
     this.state = {
       staticQueryData: getStaticQueryData(),
       pageQueryData: getPageQueryData(),
@@ -83,13 +84,13 @@ class JSONStore extends React.Component {
   render() {
     const data = this.state.pageQueryData[getPathFromProps(this.props)]
     // eslint-disable-next-line
+    const { ...propsWithoutPages } = this.props
     if (!data) {
       return <div />
     }
-
     return (
       <StaticQueryContext.Provider value={this.state.staticQueryData}>
-        <PageRenderer {...this.props} {...data} />
+        <PageRenderer {...propsWithoutPages} {...data} />
       </StaticQueryContext.Provider>
     )
   }
diff --git a/node_modules/gatsby/cache-dir/loader.js b/node_modules/gatsby/cache-dir/loader.js
index 5a9dec2..fe4d943 100644
--- a/node_modules/gatsby/cache-dir/loader.js
+++ b/node_modules/gatsby/cache-dir/loader.js
@@ -1,166 +1,150 @@
-import pageFinderFactory from "./find-page"
 import emitter from "./emitter"
 import prefetchHelper from "./prefetch"
+import { match } from "@reach/router/lib/utils"
+import stripPrefix from "./strip-prefix"
+// Generated during bootstrap
+import matchPaths from "./match-paths.json"
 
 const preferDefault = m => (m && m.default) || m
 
-let devGetPageData
-let inInitialRender = true
-let hasFetched = Object.create(null)
+const pageNotFoundPaths = new Set()
+
+let apiRunner
 let syncRequires = {}
 let asyncRequires = {}
-let jsonDataPaths = {}
-let fetchHistory = []
-let fetchingPageResourceMapPromise = null
-let fetchedPageResourceMap = false
-/**
- * Indicate if pages manifest is loaded
- *  - in production it is split to separate "pages-manifest" chunk that need to be lazy loaded,
- *  - in development it is part of single "common" chunk and is available from the start.
- */
-let hasPageResourceMap = process.env.NODE_ENV !== `production`
-let apiRunner
-const failedPaths = {}
-const MAX_HISTORY = 5
 
-const jsonPromiseStore = {}
+const fetchedPageData = {}
+const pageDatas = {}
+const fetchPromiseStore = {}
 
+let devGetPageData
 if (process.env.NODE_ENV !== `production`) {
   devGetPageData = require(`./socketIo`).getPageData
 }
 
-/**
- * Fetch resource map (pages data and paths to json files with results of
- *  queries)
- */
-const fetchPageResourceMap = () => {
-  if (!fetchingPageResourceMapPromise) {
-    fetchingPageResourceMapPromise = new Promise(resolve => {
-      asyncRequires
-        .data()
-        .then(({ pages, dataPaths }) => {
-          // TODO — expose proper way to access this data from plugins.
-          // Need to come up with an API for plugins to access
-          // site info.
-          window.___dataPaths = dataPaths
-          queue.addPagesArray(pages)
-          queue.addDataPaths(dataPaths)
-          hasPageResourceMap = true
-          resolve((fetchedPageResourceMap = true))
-        })
-        .catch(e => {
-          console.warn(
-            `Failed to fetch pages manifest. Gatsby will reload on next navigation.`
-          )
-          // failed to grab pages metadata
-          // for now let's just resolve this - on navigation this will cause missing resources
-          // and will trigger page reload and then it will retry
-          // this can happen with service worker updates when webpack manifest points to old
-          // chunk that no longer exists on server
-          resolve((fetchedPageResourceMap = true))
-        })
-    })
+// Cache for `cleanAndFindPath()`. In case `match-paths.json` is large
+const cleanAndFindPathCache = {}
+
+// Given a raw URL path, returns the cleaned version of it (trim off
+// `#` and query params), or if it matches an entry in
+// `match-paths.json`, its matched path is returned
+//
+// E.g `/foo?bar=far` => `/foo`
+//
+// Or if `match-paths.json` contains `{ "/foo*": "/page1", ...}`, then
+// `/foo?bar=far` => `/page1`
+const cleanAndFindPath = rawPathname => {
+  let pathname = decodeURIComponent(rawPathname)
+  // Remove the pathPrefix from the pathname.
+  let trimmedPathname = stripPrefix(pathname, __PATH_PREFIX__)
+  // Remove any hashfragment
+  if (trimmedPathname.split(`#`).length > 1) {
+    trimmedPathname = trimmedPathname
+      .split(`#`)
+      .slice(0, -1)
+      .join(``)
   }
-  return fetchingPageResourceMapPromise
-}
 
-const createJsonURL = jsonName => `${__PATH_PREFIX__}/static/d/${jsonName}.json`
-const createComponentUrls = componentChunkName =>
-  window.___chunkMapping[componentChunkName].map(
-    chunk => __PATH_PREFIX__ + chunk
-  )
-
-const fetchResource = resourceName => {
-  // Find resource
-  let resourceFunction
-  if (resourceName.slice(0, 12) === `component---`) {
-    resourceFunction = asyncRequires.components[resourceName]
-  } else {
-    if (resourceName in jsonPromiseStore) {
-      resourceFunction = () => jsonPromiseStore[resourceName]
-    } else {
-      resourceFunction = () => {
-        const fetchPromise = new Promise((resolve, reject) => {
-          const url = createJsonURL(jsonDataPaths[resourceName])
-          const req = new XMLHttpRequest()
-          req.open(`GET`, url, true)
-          req.withCredentials = true
-          req.onreadystatechange = () => {
-            if (req.readyState == 4) {
-              if (req.status === 200) {
-                resolve(JSON.parse(req.responseText))
-              } else {
-                delete jsonPromiseStore[resourceName]
-                reject()
-              }
-            }
-          }
-          req.send(null)
-        })
-        jsonPromiseStore[resourceName] = fetchPromise
-        return fetchPromise
-      }
-    }
+  // Remove search query
+  if (trimmedPathname.split(`?`).length > 1) {
+    trimmedPathname = trimmedPathname
+      .split(`?`)
+      .slice(0, -1)
+      .join(``)
+  }
+  if (cleanAndFindPathCache[trimmedPathname]) {
+    return cleanAndFindPathCache[trimmedPathname]
   }
 
-  // Download the resource
-  hasFetched[resourceName] = true
-  return new Promise(resolve => {
-    const fetchPromise = resourceFunction()
-    let failed = false
-    return fetchPromise
-      .catch(() => {
-        failed = true
-      })
-      .then(component => {
-        fetchHistory.push({
-          resource: resourceName,
-          succeeded: !failed,
-        })
-
-        fetchHistory = fetchHistory.slice(-MAX_HISTORY)
-
-        resolve(component)
-      })
+  let foundPath
+  Object.keys(matchPaths).some(matchPath => {
+    if (match(matchPath, trimmedPathname)) {
+      foundPath = matchPaths[matchPath]
+      return foundPath
+    }
+    // Finally, try and match request with default document.
+    if (trimmedPathname === `/index.html`) {
+      foundPath = `/`
+      return foundPath
+    }
+    return false
   })
+  if (!foundPath) {
+    foundPath = trimmedPathname
+  }
+  cleanAndFindPathCache[trimmedPathname] = foundPath
+  return foundPath
 }
 
-const prefetchResource = resourceName => {
-  if (resourceName.slice(0, 12) === `component---`) {
-    return Promise.all(
-      createComponentUrls(resourceName).map(url => prefetchHelper(url))
-    )
+const cachedFetch = (resourceName, fetchFn) => {
+  if (resourceName in fetchPromiseStore) {
+    return fetchPromiseStore[resourceName]
   } else {
-    const url = createJsonURL(jsonDataPaths[resourceName])
-    return prefetchHelper(url)
+    const promise = fetchFn(resourceName)
+    fetchPromiseStore[resourceName] = promise
+    return promise.catch(err => {
+      delete fetchPromiseStore[resourceName]
+      return err
+    })
   }
 }
 
-const getResourceModule = resourceName =>
-  fetchResource(resourceName).then(preferDefault)
+const doFetch = url =>
+  new Promise((resolve, reject) => {
+    const req = new XMLHttpRequest()
+    req.open(`GET`, url, true)
+    req.withCredentials = true
+    req.onreadystatechange = () => {
+      if (req.readyState == 4) {
+        resolve(req)
+      }
+    }
+    req.send(null)
+  })
 
-const appearsOnLine = () => {
-  const isOnLine = navigator.onLine
-  if (typeof isOnLine === `boolean`) {
-    return isOnLine
+const handlePageDataResponse = (path, req) => {
+  fetchedPageData[path] = true
+  if (req.status === 200) {
+    const contentType = req.getResponseHeader(`content-type`)
+    if (!contentType || !contentType.startsWith(`application/json`)) {
+      pageNotFoundPaths.add(path)
+      return null
+    } else {
+      const pageData = JSON.parse(req.responseText)
+      pageDatas[path] = pageData
+      return pageData
+    }
+  } else if (req.status === 404) {
+    pageNotFoundPaths.add(path)
+    return null
+  } else {
+    throw new Error(`error fetching page`)
   }
+}
 
-  // If no navigator.onLine support assume onLine if any of last N fetches succeeded
-  const succeededFetch = fetchHistory.find(entry => entry.succeeded)
-  return !!succeededFetch
+const fetchPageData = path => {
+  const url = makePageDataUrl(path)
+  return cachedFetch(url, doFetch).then(req =>
+    handlePageDataResponse(path, req)
+  )
 }
 
-const handleResourceLoadError = (path, message) => {
-  if (!failedPaths[path]) {
-    failedPaths[path] = message
-  }
+const createComponentUrls = componentChunkName =>
+  window.___chunkMapping[componentChunkName].map(
+    chunk => __PATH_PREFIX__ + chunk
+  )
 
-  if (
-    appearsOnLine() &&
-    window.location.pathname.replace(/\/$/g, ``) !== path.replace(/\/$/g, ``)
-  ) {
-    window.location.pathname = path
-  }
+const fetchComponent = chunkName => asyncRequires.components[chunkName]()
+
+const stripSurroundingSlashes = s => {
+  s = s[0] === `/` ? s.slice(1) : s
+  s = s.endsWith(`/`) ? s.slice(0, -1) : s
+  return s
+}
+
+const makePageDataUrl = path => {
+  const fixedPath = path === `/` ? `index` : stripSurroundingSlashes(path)
+  return `${__PATH_PREFIX__}/page-data/${fixedPath}/page-data.json`
 }
 
 const onPrefetchPathname = pathname => {
@@ -170,40 +154,27 @@ const onPrefetchPathname = pathname => {
   }
 }
 
-const onPostPrefetchPathname = pathname => {
-  if (!prefetchCompleted[pathname]) {
-    apiRunner(`onPostPrefetchPathname`, { pathname })
-    prefetchCompleted[pathname] = true
-  }
-}
-
-/**
- * Check if we should fallback to resources for 404 page if resources for a page are not found
- *
- * We can't do that when we don't have full pages manifest - we don't know if page exist or not if we don't have it.
- * We also can't do that on initial render / mount in case we just can't load resources needed for first page.
- * Not falling back to 404 resources will cause "EnsureResources" component to handle scenarios like this with
- * potential reload
- * @param {string} path Path to a page
- */
-const shouldFallbackTo404Resources = path =>
-  (hasPageResourceMap || inInitialRender) && path !== `/404.html`
-
 // Note we're not actively using the path data atm. There
 // could be future optimizations however around trying to ensure
 // we load all resources for likely-to-be-visited paths.
 // let pathArray = []
 // let pathCount = {}
 
-let findPage
 let pathScriptsCache = {}
 let prefetchTriggered = {}
 let prefetchCompleted = {}
 let disableCorePrefetching = false
 
+const onPostPrefetch = url => {
+  if (!prefetchCompleted[url]) {
+    apiRunner(`onPostPrefetch`, { url })
+    prefetchCompleted[url] = true
+  }
+}
+
 const queue = {
-  addPagesArray: newPages => {
-    findPage = pageFinderFactory(newPages, __BASE_PATH__)
+  addPageData: pageData => {
+    pageDatas[pageData.path] = pageData
   },
   addDevRequires: devRequires => {
     syncRequires = devRequires
@@ -211,16 +182,11 @@ const queue = {
   addProdRequires: prodRequires => {
     asyncRequires = prodRequires
   },
-  addDataPaths: dataPaths => {
-    jsonDataPaths = dataPaths
-  },
   // Hovering on a link is a very strong indication the user is going to
   // click on it soon so let's start prefetching resources for this
   // pathname.
-  hovering: path => {
-    queue.getResourcesForPathname(path)
-  },
-  enqueue: path => {
+  hovering: path => queue.loadPage(path),
+  enqueue: rawPath => {
     if (!apiRunner)
       console.error(`Run setApiRunnerForLoader() before enqueing paths`)
 
@@ -236,7 +202,7 @@ const queue = {
 
     // Tell plugins with custom prefetching logic that they should start
     // prefetching this path.
-    onPrefetchPathname(path)
+    onPrefetchPathname(rawPath)
 
     // If a plugin has disabled core prefetching, stop now.
     if (disableCorePrefetching.some(a => a)) {
@@ -244,204 +210,164 @@ const queue = {
     }
 
     // Check if the page exists.
-    let page = findPage(path)
+    let realPath = cleanAndFindPath(rawPath)
 
-    // In production, we lazy load page metadata. If that
-    // hasn't been fetched yet, start fetching it now.
-    if (
-      process.env.NODE_ENV === `production` &&
-      !page &&
-      !fetchedPageResourceMap
-    ) {
-      // If page wasn't found check and we didn't fetch resources map for
-      // all pages, wait for fetch to complete and try find page again
-      return fetchPageResourceMap().then(() => queue.enqueue(path))
-    }
-
-    if (!page) {
-      return false
+    if (pageDatas[realPath]) {
+      return true
     }
 
     if (
       process.env.NODE_ENV !== `production` &&
       process.env.NODE_ENV !== `test`
     ) {
-      devGetPageData(page.path)
+      // Ensure latest version of page data is in the JSON store
+      devGetPageData(realPath)
     }
 
-    // Prefetch resources.
     if (process.env.NODE_ENV === `production`) {
-      Promise.all([
-        prefetchResource(page.jsonName),
-        prefetchResource(page.componentChunkName),
-      ]).then(() => {
-        // Tell plugins the path has been successfully prefetched
-        onPostPrefetchPathname(path)
-      })
+      const pageDataUrl = makePageDataUrl(realPath)
+      prefetchHelper(pageDataUrl)
+        .then(() =>
+          // This was just prefetched, so will return a response from
+          // the cache instead of making another request to the server
+          fetchPageData(realPath)
+        )
+        .then(pageData => {
+          // Tell plugins the path has been successfully prefetched
+          const chunkName = pageData.componentChunkName
+          const componentUrls = createComponentUrls(chunkName)
+          return Promise.all(componentUrls.map(prefetchHelper)).then(() => {
+            const resourceUrls = [pageDataUrl].concat(componentUrls)
+            onPostPrefetch({
+              path: rawPath,
+              resourceUrls,
+            })
+          })
+        })
     }
 
     return true
   },
 
-  getPage: pathname => findPage(pathname),
-
-  getResourceURLsForPathname: path => {
-    const page = findPage(path)
-    if (page) {
-      return [
-        ...createComponentUrls(page.componentChunkName),
-        createJsonURL(jsonDataPaths[page.jsonName]),
-      ]
-    } else {
-      return null
-    }
-  },
-
-  getResourcesForPathnameSync: path => {
-    const page = findPage(path)
-    if (page) {
-      return pathScriptsCache[page.path]
-    } else if (shouldFallbackTo404Resources(path)) {
-      return queue.getResourcesForPathnameSync(`/404.html`)
-    } else {
-      return null
-    }
-  },
+  isPageNotFound: pathname => pageNotFoundPaths.has(pathname),
 
-  // Get resources (code/data) for a path. Fetches metdata first
-  // if necessary and then the code/data bundles. Used for prefetching
-  // and getting resources for page changes.
-  getResourcesForPathname: path =>
+  loadPageData: rawPath =>
     new Promise((resolve, reject) => {
-      // Production code path
-      if (failedPaths[path]) {
-        handleResourceLoadError(
-          path,
-          `Previously detected load failure for "${path}"`
-        )
-        reject()
-        return
-      }
-      const page = findPage(path)
-
-      // In production, we lazy load page metadata. If that
-      // hasn't been fetched yet, start fetching it now.
-      if (
-        !page &&
-        !fetchedPageResourceMap &&
-        process.env.NODE_ENV === `production`
-      ) {
-        // If page wasn't found check and we didn't fetch resources map for
-        // all pages, wait for fetch to complete and try to get resources again
-        fetchPageResourceMap().then(() =>
-          resolve(queue.getResourcesForPathname(path))
-        )
-        return
-      }
-
-      if (!page) {
-        if (shouldFallbackTo404Resources(path)) {
-          console.log(`A page wasn't found for "${path}"`)
-
-          // Preload the custom 404 page
-          resolve(queue.getResourcesForPathname(`/404.html`))
-          return
-        }
-
-        resolve()
-        return
-      }
-
-      // Use the path from the page so the pathScriptsCache uses
-      // the normalized path.
-      path = page.path
-
-      // Check if it's in the cache already.
-      if (pathScriptsCache[path]) {
-        emitter.emit(`onPostLoadPageResources`, {
-          page,
-          pageResources: pathScriptsCache[path],
+      const realPath = cleanAndFindPath(rawPath)
+      if (!fetchedPageData[realPath]) {
+        fetchPageData(realPath).then(pageData => {
+          if (process.env.NODE_ENV !== `production`) {
+            devGetPageData(realPath)
+          }
+          resolve(queue.loadPageData(rawPath))
         })
-        resolve(pathScriptsCache[path])
-        return
+      } else {
+        if (pageDatas[realPath]) {
+          resolve(pageDatas[realPath])
+        } else {
+          reject(new Error(`page not found`))
+        }
       }
+    }),
 
-      // Nope, we need to load resource(s)
-      emitter.emit(`onPreLoadPageResources`, {
-        path,
+  loadPage: rawPath =>
+    queue
+      .loadPageData(rawPath)
+      .then(pageData => {
+        if (process.env.NODE_ENV !== `production`) {
+          const component = syncRequires.components[pageData.componentChunkName]
+          return [pageData, component]
+        } else {
+          return cachedFetch(pageData.componentChunkName, fetchComponent)
+            .then(preferDefault)
+            .then(component => [pageData, component])
+        }
       })
+      .then(([pageData, component]) => {
+        const page = {
+          componentChunkName: pageData.componentChunkName,
+          path: pageData.path,
+          compilationHash: pageData.compilationHash,
+        }
+
+        const jsonData = {
+          data: pageData.data,
+          pageContext: pageData.pageContext,
+        }
 
-      // In development we know the code is loaded already
-      // so we just return with it immediately.
-      if (process.env.NODE_ENV !== `production`) {
         const pageResources = {
-          component: syncRequires.components[page.componentChunkName],
+          component,
+          json: jsonData,
           page,
         }
 
-        // Add to the cache.
-        pathScriptsCache[path] = pageResources
-        devGetPageData(page.path).then(pageData => {
-          emitter.emit(`onPostLoadPageResources`, {
-            page,
-            pageResources,
+        pathScriptsCache[cleanAndFindPath(rawPath)] = pageResources
+        emitter.emit(`onPostLoadPageResources`, {
+          page: pageResources,
+          pageResources,
+        })
+        if (process.env.NODE_ENV === `production`) {
+          const pageDataUrl = makePageDataUrl(cleanAndFindPath(rawPath))
+          const componentUrls = createComponentUrls(pageData.componentChunkName)
+          const resourceUrls = [pageDataUrl].concat(componentUrls)
+          onPostPrefetch({
+            path: rawPath,
+            resourceUrls,
           })
-          // Tell plugins the path has been successfully prefetched
-          onPostPrefetchPathname(path)
+        }
 
-          resolve(pageResources)
-        })
-      } else {
-        Promise.all([
-          getResourceModule(page.componentChunkName),
-          getResourceModule(page.jsonName),
-        ]).then(([component, json]) => {
-          if (!(component && json)) {
-            resolve(null)
-            return
-          }
+        return pageResources
+      })
+      .catch(err => null),
 
-          const pageResources = {
-            component,
-            json,
-            page,
-          }
-          pageResources.page.jsonURL = createJsonURL(
-            jsonDataPaths[page.jsonName]
-          )
-          pathScriptsCache[path] = pageResources
-          resolve(pageResources)
-
-          emitter.emit(`onPostLoadPageResources`, {
-            page,
-            pageResources,
-          })
+  getPage: rawPath => pathScriptsCache[cleanAndFindPath(rawPath)],
 
-          // Tell plugins the path has been successfully prefetched
-          onPostPrefetchPathname(path)
-        })
-      }
-    }),
-}
+  getPageOr404: rawPath => {
+    const page = queue.getPage(rawPath)
+    if (page) {
+      return page
+    } else if (rawPath !== `/404.html`) {
+      return queue.getPage(`/404.html`)
+    } else {
+      return null
+    }
+  },
 
-export const postInitialRenderWork = () => {
-  inInitialRender = false
-  if (process.env.NODE_ENV === `production`) {
-    // We got all resources needed for first mount,
-    // we can fetch resources for all pages.
-    fetchPageResourceMap()
-  }
+  getResourceURLsForPathname: path => {
+    const pageData = queue.getPage(path)
+    if (pageData) {
+      // Original implementation also concatenated the jsonDataPath
+      // for the page
+      return createComponentUrls(pageData.componentChunkName)
+    } else {
+      return null
+    }
+  },
 }
 
+// Deprecated April 2019. Used to fetch the pages-manifest. Now it's a
+// noop
+export const postInitialRenderWork = () => {}
+
 export const setApiRunnerForLoader = runner => {
   apiRunner = runner
   disableCorePrefetching = apiRunner(`disableCorePrefetching`)
 }
 
 export const publicLoader = {
-  getResourcesForPathname: queue.getResourcesForPathname,
+  // Deprecated April 2019. Use `loadPage` instead
+  getResourcesForPathname: queue.loadPage,
+  // Deprecated April 2019. Use `getPage` instead
+  getResourcesForPathnameSync: queue.getPage,
+  // Deprecated April 2019. Query results used to be in a separate
+  // file, but are now included in the page-data.json, which is
+  // already loaded into the browser by the time this function is
+  // called. Use the resource URLs passed in `onPostPrefetch` instead.
   getResourceURLsForPathname: queue.getResourceURLsForPathname,
-  getResourcesForPathnameSync: queue.getResourcesForPathnameSync,
+
+  loadPage: queue.loadPage,
+  getPage: queue.getPage,
+  getPageOr404: queue.getPageOr404,
 }
 
 export default queue
diff --git a/node_modules/gatsby/cache-dir/navigation.js b/node_modules/gatsby/cache-dir/navigation.js
index 6289cc2..5acdbef 100644
--- a/node_modules/gatsby/cache-dir/navigation.js
+++ b/node_modules/gatsby/cache-dir/navigation.js
@@ -18,7 +18,7 @@ function maybeRedirect(pathname) {
 
   if (redirect != null) {
     if (process.env.NODE_ENV !== `production`) {
-      const pageResources = loader.getResourcesForPathnameSync(pathname)
+      const pageResources = loader.getPage(pathname)
 
       if (pageResources != null) {
         console.error(
@@ -81,7 +81,19 @@ const navigate = (to, options = {}) => {
     })
   }, 1000)
 
-  loader.getResourcesForPathname(pathname).then(pageResources => {
+  loader.loadPage(pathname).then(pageResources => {
+    // If the loaded page has a different compilation hash to the
+    // window, then a rebuild has occurred on the server. Reload.
+    if (process.env.NODE_ENV === `production` && pageResources) {
+      if (pageResources.page.compilationHash !== window.___compilationHash) {
+        console.log(
+          `compilation has different. window = ${
+            window.___compilationHash
+          }, page = ${pageResources.page.compilationHash}`
+        )
+        window.location = pathname
+      }
+    }
     reachNavigate(to, options)
     clearTimeout(timeoutId)
   })
diff --git a/node_modules/gatsby/cache-dir/production-app.js b/node_modules/gatsby/cache-dir/production-app.js
index 90d8f87..0b8d06c 100644
--- a/node_modules/gatsby/cache-dir/production-app.js
+++ b/node_modules/gatsby/cache-dir/production-app.js
@@ -2,7 +2,6 @@ import { apiRunner, apiRunnerAsync } from "./api-runner-browser"
 import React, { createElement } from "react"
 import ReactDOM from "react-dom"
 import { Router, navigate } from "@reach/router"
-import { match } from "@reach/router/lib/utils"
 import { ScrollContext } from "gatsby-react-router-scroll"
 import domReady from "@mikaelkristiansson/domready"
 import {
@@ -13,15 +12,15 @@ import {
 import emitter from "./emitter"
 import PageRenderer from "./page-renderer"
 import asyncRequires from "./async-requires"
-import loader, { setApiRunnerForLoader, postInitialRenderWork } from "./loader"
+import loader, { setApiRunnerForLoader } from "./loader"
 import EnsureResources from "./ensure-resources"
 
 window.asyncRequires = asyncRequires
 window.___emitter = emitter
 window.___loader = loader
+window.___compilationHash = window.pageData.compilationHash
 
-loader.addPagesArray([window.page])
-loader.addDataPaths({ [window.page.jsonName]: window.dataPath })
+loader.addPageData([window.pageData])
 loader.addProdRequires(asyncRequires)
 setApiRunnerForLoader(apiRunner)
 
@@ -61,33 +60,31 @@ apiRunnerAsync(`onClientEntry`).then(() => {
     }
   }
 
-  const { page, location: browserLoc } = window
+  const { pageData, location: browserLoc } = window
   if (
     // Make sure the window.page object is defined
-    page &&
+    pageData &&
     // The canonical path doesn't match the actual path (i.e. the address bar)
-    __BASE_PATH__ + page.path !== browserLoc.pathname &&
-    // ...and if matchPage is specified, it also doesn't match the actual path
-    (!page.matchPath ||
-      !match(__BASE_PATH__ + page.matchPath, browserLoc.pathname)) &&
+    __PATH_PREFIX__ + pageData.path !== browserLoc.pathname &&
     // Ignore 404 pages, since we want to keep the same URL
-    page.path !== `/404.html` &&
-    !page.path.match(/^\/404\/?$/) &&
+    pageData.path !== `/404.html` &&
+    !pageData.path.match(/^\/404\/?$/) &&
     // Also ignore the offline shell (since when using the offline plugin, all
     // pages have this canonical path)
-    !page.path.match(/^\/offline-plugin-app-shell-fallback\/?$/)
+    !pageData.path.match(/^\/offline-plugin-app-shell-fallback\/?$/)
   ) {
-    navigate(__BASE_PATH__ + page.path + browserLoc.search + browserLoc.hash, {
-      replace: true,
-    })
+    navigate(
+      __PATH_PREFIX__ + pageData.path + browserLoc.search + browserLoc.hash,
+      { replace: true }
+    )
   }
 
-  loader.getResourcesForPathname(browserLoc.pathname).then(() => {
+  loader.loadPage(browserLoc.pathname).then(() => {
     const Root = () =>
       createElement(
         Router,
         {
-          basepath: __BASE_PATH__,
+          basepath: __PATH_PREFIX__,
         },
         createElement(RouteHandler, { path: `/*` })
       )
@@ -116,7 +113,6 @@ apiRunnerAsync(`onClientEntry`).then(() => {
           ? document.getElementById(`___gatsby`)
           : void 0,
         () => {
-          postInitialRenderWork()
           apiRunner(`onInitialClientRender`)
         }
       )
diff --git a/node_modules/gatsby/cache-dir/public-page-renderer-dev.js b/node_modules/gatsby/cache-dir/public-page-renderer-dev.js
index 6bcfd16..b274fd7 100644
--- a/node_modules/gatsby/cache-dir/public-page-renderer-dev.js
+++ b/node_modules/gatsby/cache-dir/public-page-renderer-dev.js
@@ -1,12 +1,14 @@
 import React from "react"
 import PropTypes from "prop-types"
 
+import pages from "./pages.json"
 import loader from "./loader"
 import JSONStore from "./json-store"
 
 const DevPageRenderer = ({ location }) => {
-  const pageResources = loader.getResourcesForPathnameSync(location.pathname)
+  const pageResources = loader.getPage(location.pathname)
   return React.createElement(JSONStore, {
+    pages,
     location,
     pageResources,
   })
diff --git a/node_modules/gatsby/cache-dir/public-page-renderer-prod.js b/node_modules/gatsby/cache-dir/public-page-renderer-prod.js
index 195567c..dc814f8 100644
--- a/node_modules/gatsby/cache-dir/public-page-renderer-prod.js
+++ b/node_modules/gatsby/cache-dir/public-page-renderer-prod.js
@@ -5,11 +5,7 @@ import InternalPageRenderer from "./page-renderer"
 import loader from "./loader"
 
 const ProdPageRenderer = ({ location }) => {
-  const pageResources = loader.getResourcesForPathnameSync(location.pathname)
-  if (!pageResources) {
-    return null
-  }
-
+  const pageResources = loader.getPageOr404(location.pathname)
   return React.createElement(InternalPageRenderer, {
     location,
     pageResources,
diff --git a/node_modules/gatsby/cache-dir/register-service-worker.js b/node_modules/gatsby/cache-dir/register-service-worker.js
index 52eb37a..acb6347 100644
--- a/node_modules/gatsby/cache-dir/register-service-worker.js
+++ b/node_modules/gatsby/cache-dir/register-service-worker.js
@@ -9,7 +9,7 @@ if (
   )
 } else if (`serviceWorker` in navigator) {
   navigator.serviceWorker
-    .register(`${__BASE_PATH__}/sw.js`)
+    .register(`${__PATH_PREFIX__}/sw.js`)
     .then(function(reg) {
       reg.addEventListener(`updatefound`, () => {
         apiRunner(`onServiceWorkerUpdateFound`, { serviceWorker: reg })
diff --git a/node_modules/gatsby/cache-dir/root.js b/node_modules/gatsby/cache-dir/root.js
index c19a134..247e430 100644
--- a/node_modules/gatsby/cache-dir/root.js
+++ b/node_modules/gatsby/cache-dir/root.js
@@ -9,6 +9,7 @@ import {
 } from "./navigation"
 import { apiRunner } from "./api-runner-browser"
 import loader from "./loader"
+import devLoader from "./dev-loader"
 import JSONStore from "./json-store"
 import EnsureResources from "./ensure-resources"
 
@@ -36,12 +37,10 @@ navigationInit()
 class RouteHandler extends React.Component {
   render() {
     let { location } = this.props
+    const pages = devLoader.getPagesManifest()
+    const pagePaths = Object.keys(pages)
 
-    // check if page exists - in dev pages are sync loaded, it's safe to use
-    // loader.getPage
-    let page = loader.getPage(location.pathname)
-
-    if (page) {
+    if (!loader.isPageNotFound(location.pathname)) {
       return (
         <EnsureResources location={location}>
           {locationAndPageResources => (
@@ -57,27 +56,31 @@ class RouteHandler extends React.Component {
         </EnsureResources>
       )
     } else {
-      const dev404PageResources = loader.getResourcesForPathnameSync(
-        `/dev-404-page/`
-      )
-      const real404PageResources = loader.getResourcesForPathnameSync(
-        `/404.html`
-      )
-      let custom404
-      if (real404PageResources) {
-        custom404 = (
-          <JSONStore {...this.props} pageResources={real404PageResources} />
+      const dev404Page = loader.getPage(`/dev-404-page/`)
+      const Dev404Page = dev404Page.component
+
+      if (!loader.getPage(`/404.html`)) {
+        return (
+          <RouteUpdates location={location}>
+            <Dev404Page {...this.props} pagePaths={pagePaths} />
+          </RouteUpdates>
         )
       }
 
       return (
-        <RouteUpdates location={location}>
-          <JSONStore
-            location={location}
-            pageResources={dev404PageResources}
-            custom404={custom404}
-          />
-        </RouteUpdates>
+        <EnsureResources location={location}>
+          {locationAndPageResources => (
+            <RouteUpdates location={location}>
+              <Dev404Page
+                pagePaths={pagePaths}
+                custom404={
+                  <JSONStore {...this.props} {...locationAndPageResources} />
+                }
+                {...this.props}
+              />
+            </RouteUpdates>
+          )}
+        </EnsureResources>
       )
     }
   }
@@ -87,7 +90,7 @@ const Root = () =>
   createElement(
     Router,
     {
-      basepath: __BASE_PATH__,
+      basepath: __PATH_PREFIX__,
     },
     createElement(RouteHandler, { path: `/*` })
   )
diff --git a/node_modules/gatsby/cache-dir/socketIo.js b/node_modules/gatsby/cache-dir/socketIo.js
index 978f7db..1548f39 100644
--- a/node_modules/gatsby/cache-dir/socketIo.js
+++ b/node_modules/gatsby/cache-dir/socketIo.js
@@ -20,7 +20,7 @@ export default function socketIo() {
 
         const didDataChange = (msg, queryData) =>
           !(msg.payload.id in queryData) ||
-          JSON.stringify(msg.payload.result) !==
+          JSON.stringify(msg.payload) !==
             JSON.stringify(queryData[msg.payload.id])
 
         socket.on(`message`, msg => {
@@ -28,14 +28,14 @@ export default function socketIo() {
             if (didDataChange(msg, staticQueryData)) {
               staticQueryData = {
                 ...staticQueryData,
-                [msg.payload.id]: msg.payload.result,
+                [msg.payload.id]: msg.payload,
               }
             }
           } else if (msg.type === `pageQueryResult`) {
             if (didDataChange(msg, pageQueryData)) {
               pageQueryData = {
                 ...pageQueryData,
-                [msg.payload.id]: msg.payload.result,
+                [msg.payload.id]: msg.payload,
               }
             }
           } else if (msg.type === `overlayError`) {
diff --git a/node_modules/gatsby/cache-dir/static-entry.js b/node_modules/gatsby/cache-dir/static-entry.js
index dfb4e8f..6f92417 100644
--- a/node_modules/gatsby/cache-dir/static-entry.js
+++ b/node_modules/gatsby/cache-dir/static-entry.js
@@ -7,13 +7,8 @@ const { get, merge, isObject, flatten, uniqBy } = require(`lodash`)
 
 const apiRunner = require(`./api-runner-ssr`)
 const syncRequires = require(`./sync-requires`)
-const { dataPaths, pages } = require(`./data.json`)
 const { version: gatsbyVersion } = require(`gatsby/package.json`)
 
-// Speed up looking up pages.
-const pagesObjectMap = new Map()
-pages.forEach(p => pagesObjectMap.set(p.path, p))
-
 const stats = JSON.parse(
   fs.readFileSync(`${process.cwd()}/public/webpack.stats.json`, `utf-8`)
 )
@@ -45,7 +40,27 @@ try {
 
 Html = Html && Html.__esModule ? Html.default : Html
 
-const getPage = path => pagesObjectMap.get(path)
+const getPageDataPath = path => {
+  const fixedPagePath = path === `/` ? `index` : path
+  return join(`page-data`, fixedPagePath, `page-data.json`)
+}
+
+const getPageDataUrl = pagePath => {
+  const pageDataPath = getPageDataPath(pagePath)
+  return `${__PATH_PREFIX__}/${pageDataPath}`
+}
+
+const getPageDataFile = pagePath => {
+  const pageDataPath = getPageDataPath(pagePath)
+  return join(process.cwd(), `public`, pageDataPath)
+}
+
+const loadPageDataSync = pagePath => {
+  const pageDataPath = getPageDataPath(pagePath)
+  const pageDataFile = join(process.cwd(), `public`, pageDataPath)
+  const pageDataJson = fs.readFileSync(pageDataFile)
+  return JSON.parse(pageDataJson)
+}
 
 const createElement = React.createElement
 
@@ -122,33 +137,20 @@ export default (pagePath, callback) => {
     postBodyComponents = sanitizeComponents(components)
   }
 
-  const page = getPage(pagePath)
-
-  let dataAndContext = {}
-  if (page.jsonName in dataPaths) {
-    const pathToJsonData = join(
-      process.cwd(),
-      `/public/static/d`,
-      `${dataPaths[page.jsonName]}.json`
-    )
-    try {
-      dataAndContext = JSON.parse(fs.readFileSync(pathToJsonData))
-    } catch (e) {
-      console.log(`error`, pathToJsonData, e)
-      process.exit()
-    }
-  }
+  const pageDataRaw = fs.readFileSync(getPageDataFile(pagePath))
+  const pageData = JSON.parse(pageDataRaw)
+  const pageDataUrl = getPageDataUrl(pagePath)
+  const { componentChunkName } = pageData
 
   class RouteHandler extends React.Component {
     render() {
       const props = {
         ...this.props,
-        ...dataAndContext,
-        pathContext: dataAndContext.pageContext,
+        ...pageData,
       }
 
       const pageElement = createElement(
-        syncRequires.components[page.componentChunkName],
+        syncRequires.components[componentChunkName],
         props
       )
 
@@ -167,11 +169,11 @@ export default (pagePath, callback) => {
 
   const routerElement = createElement(
     ServerLocation,
-    { url: `${__BASE_PATH__}${pagePath}` },
+    { url: `${__PATH_PREFIX__}${pagePath}` },
     createElement(
       Router,
       {
-        baseuri: `${__BASE_PATH__}`,
+        baseuri: `${__PATH_PREFIX__}`,
       },
       createElement(RouteHandler, { path: `/*` })
     )
@@ -212,7 +214,7 @@ export default (pagePath, callback) => {
 
   // Create paths to scripts
   let scriptsAndStyles = flatten(
-    [`app`, page.componentChunkName].map(s => {
+    [`app`, componentChunkName].map(s => {
       const fetchKey = `assetsByChunkName[${s}]`
 
       let chunks = get(stats, fetchKey)
@@ -266,6 +268,7 @@ export default (pagePath, callback) => {
     setPostBodyComponents,
     setBodyProps,
     pathname: pagePath,
+    loadPageDataSync,
     bodyHtml,
     scripts,
     styles,
@@ -287,16 +290,13 @@ export default (pagePath, callback) => {
       )
     })
 
-  if (page.jsonName in dataPaths) {
-    const dataPath = `${__PATH_PREFIX__}/static/d/${
-      dataPaths[page.jsonName]
-    }.json`
+  if (pageData) {
     headComponents.push(
       <link
         as="fetch"
         rel="preload"
-        key={dataPath}
-        href={dataPath}
+        key={pageDataUrl}
+        href={pageDataUrl}
         crossOrigin="use-credentials"
       />
     )
@@ -334,11 +334,7 @@ export default (pagePath, callback) => {
     })
 
   // Add page metadata for the current page
-  const windowData = `/*<![CDATA[*/window.page=${JSON.stringify(page)};${
-    page.jsonName in dataPaths
-      ? `window.dataPath="${dataPaths[page.jsonName]}";`
-      : ``
-  }/*]]>*/`
+  const windowData = `/*<![CDATA[*/window.pageData=${pageDataRaw};/*]]>*/`
 
   postBodyComponents.push(
     <script
diff --git a/node_modules/gatsby/dist/bin/gatsby.js b/node_modules/gatsby/dist/bin/gatsby.js
old mode 100755
new mode 100644
diff --git a/node_modules/gatsby/dist/bootstrap/__mocks__/require/exports.js b/node_modules/gatsby/dist/bootstrap/__mocks__/require/exports.js
deleted file mode 100644
index f4c47fe..0000000
--- a/node_modules/gatsby/dist/bootstrap/__mocks__/require/exports.js
+++ /dev/null
@@ -1,8 +0,0 @@
-"use strict";
-
-exports.foo = () => {};
-
-exports.bar = () => {};
-
-exports.__esModule = true;
-//# sourceMappingURL=exports.js.map
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/bootstrap/__mocks__/require/exports.js.map b/node_modules/gatsby/dist/bootstrap/__mocks__/require/exports.js.map
deleted file mode 100644
index e106460..0000000
--- a/node_modules/gatsby/dist/bootstrap/__mocks__/require/exports.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"sources":["../../../../src/bootstrap/__mocks__/require/exports.js"],"names":["exports","foo","bar","__esModule"],"mappings":";;AAAAA,OAAO,CAACC,GAAR,GAAc,MAAM,CAAE,CAAtB;;AACAD,OAAO,CAACE,GAAR,GAAc,MAAM,CAAE,CAAtB;;AACAF,OAAO,CAACG,UAAR,GAAqB,IAArB","sourcesContent":["exports.foo = () => {}\nexports.bar = () => {}\nexports.__esModule = true\n"],"file":"exports.js"}
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/bootstrap/__mocks__/require/module-error.js b/node_modules/gatsby/dist/bootstrap/__mocks__/require/module-error.js
deleted file mode 100644
index 3141afd..0000000
--- a/node_modules/gatsby/dist/bootstrap/__mocks__/require/module-error.js
+++ /dev/null
@@ -1,6 +0,0 @@
-"use strict";
-
-// this will cause errors when importing it - that's fine - that's the point opf this mock
-// eslint-disable-next-line
-wat();
-//# sourceMappingURL=module-error.js.map
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/bootstrap/__mocks__/require/module-error.js.map b/node_modules/gatsby/dist/bootstrap/__mocks__/require/module-error.js.map
deleted file mode 100644
index 578ebd6..0000000
--- a/node_modules/gatsby/dist/bootstrap/__mocks__/require/module-error.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"sources":["../../../../src/bootstrap/__mocks__/require/module-error.js"],"names":["wat"],"mappings":";;AAAA;AACA;AACAA,GAAG","sourcesContent":["// this will cause errors when importing it - that's fine - that's the point opf this mock\n// eslint-disable-next-line\nwat()\n"],"file":"module-error.js"}
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/bootstrap/__mocks__/require/unusual-exports.js b/node_modules/gatsby/dist/bootstrap/__mocks__/require/unusual-exports.js
deleted file mode 100644
index 9b6a680..0000000
--- a/node_modules/gatsby/dist/bootstrap/__mocks__/require/unusual-exports.js
+++ /dev/null
@@ -1,12 +0,0 @@
-"use strict";
-
-Object.defineProperty(exports, `foo`, {
-  enumerable: true,
-  get: function get() {
-    return () => {};
-  }
-});
-Object.defineProperty(exports, `__esModule`, {
-  value: true
-});
-//# sourceMappingURL=unusual-exports.js.map
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/bootstrap/__mocks__/require/unusual-exports.js.map b/node_modules/gatsby/dist/bootstrap/__mocks__/require/unusual-exports.js.map
deleted file mode 100644
index fcb46b0..0000000
--- a/node_modules/gatsby/dist/bootstrap/__mocks__/require/unusual-exports.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"sources":["../../../../src/bootstrap/__mocks__/require/unusual-exports.js"],"names":["Object","defineProperty","exports","enumerable","get","value"],"mappings":";;AAAAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAAgC,KAAhC,EAAsC;AACpCC,EAAAA,UAAU,EAAE,IADwB;AAEpCC,EAAAA,GAAG,EAAE,SAASA,GAAT,GAAe;AAClB,WAAO,MAAM,CAAE,CAAf;AACD;AAJmC,CAAtC;AAMAJ,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAAgC,YAAhC,EAA6C;AAC3CG,EAAAA,KAAK,EAAE;AADoC,CAA7C","sourcesContent":["Object.defineProperty(exports, `foo`, {\n  enumerable: true,\n  get: function get() {\n    return () => {}\n  },\n})\nObject.defineProperty(exports, `__esModule`, {\n  value: true,\n})\n"],"file":"unusual-exports.js"}
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/bootstrap/index.js b/node_modules/gatsby/dist/bootstrap/index.js
index 00128cb..145f91c 100644
--- a/node_modules/gatsby/dist/bootstrap/index.js
+++ b/node_modules/gatsby/dist/bootstrap/index.js
@@ -47,10 +47,9 @@ const preferDefault = require(`./prefer-default`);
 
 const nodeTracking = require(`../db/node-tracking`);
 
-const withResolverContext = require(`../schema/context`); // Add `util.promisify` polyfill for old node versions
+const withResolverContext = require(`../schema/context`);
 
-
-require(`util.promisify/shim`)(); // Show stack trace on unhandled promises.
+require(`../db`).startAutosave(); // Show stack trace on unhandled promises.
 
 
 process.on(`unhandledRejection`, (reason, p) => {
@@ -60,13 +59,10 @@ process.on(`unhandledRejection`, (reason, p) => {
 const _require3 = require(`../query/query-watcher`),
       extractQueries = _require3.extractQueries;
 
-const queryUtil = require(`../query`);
-
-const _require4 = require(`../query/pages-writer`),
-      writePages = _require4.writePages;
+const writeJsRequires = require(`./write-js-requires`);
 
-const _require5 = require(`./redirects-writer`),
-      writeRedirects = _require5.writeRedirects; // Override console.log to add the source file + line number.
+const _require4 = require(`./redirects-writer`),
+      writeRedirects = _require4.writeRedirects; // Override console.log to add the source file + line number.
 // Useful for debugging if you lose a console.log somewhere.
 // Otherwise leave commented out.
 // require(`./log-line-function`)
@@ -160,8 +156,11 @@ function () {
     const hashes = yield Promise.all([md5File(`package.json`), Promise.resolve(md5File(`${program.directory}/gatsby-config.js`).catch(() => {})), // ignore as this file isn't required),
     Promise.resolve(md5File(`${program.directory}/gatsby-node.js`).catch(() => {}))]);
     const pluginsHash = crypto.createHash(`md5`).update(JSON.stringify(pluginVersions.concat(hashes))).digest(`hex`);
-    let state = store.getState();
-    const oldPluginsHash = state && state.status ? state.status.PLUGINS_HASH : ``; // Check if anything has changed. If it has, delete the site's .cache
+
+    const _store$getState = store.getState(),
+          status = _store$getState.status;
+
+    const oldPluginsHash = status ? status.PLUGINS_HASH : ``; // Check if anything has changed. If it has, delete the site's .cache
     // directory and tell reducers to empty themselves.
     //
     // Also if the hash isn't there, then delete things just in case something
@@ -409,104 +408,17 @@ function () {
     });
     activity.start();
     yield extractQueries();
-    activity.end(); // Start the createPages hot reloader.
-
-    if (process.env.NODE_ENV !== `production`) {
-      require(`./page-hot-reloader`)(graphqlRunner);
-    }
-
-    const queryIds = queryUtil.calcInitialDirtyQueryIds(store.getState());
-
-    const _queryUtil$groupQuery = queryUtil.groupQueryIds(queryIds),
-          staticQueryIds = _queryUtil$groupQuery.staticQueryIds,
-          pageQueryIds = _queryUtil$groupQuery.pageQueryIds;
-
-    activity = report.activityTimer(`run static queries`, {
-      parentSpan: bootstrapSpan
-    });
-    activity.start();
-    yield queryUtil.processStaticQueries(staticQueryIds, {
-      activity,
-      state: store.getState()
-    });
-    activity.end();
-    activity = report.activityTimer(`run page queries`);
-    activity.start();
-    yield queryUtil.processPageQueries(pageQueryIds, {
-      activity
-    });
     activity.end();
 
-    require(`../redux/actions`).boundActionCreators.setProgramStatus(`BOOTSTRAP_QUERY_RUNNING_FINISHED`); // Write out files.
-
-
-    activity = report.activityTimer(`write out page data`, {
-      parentSpan: bootstrapSpan
-    });
-    activity.start();
-
     try {
-      yield writePages();
+      yield writeJsRequires.writeAll(store.getState());
     } catch (err) {
       report.panic(`Failed to write out page data`, err);
     }
 
-    activity.end(); // Write out redirects.
-
-    activity = report.activityTimer(`write out redirect data`, {
-      parentSpan: bootstrapSpan
-    });
-    activity.start();
-    yield writeRedirects();
-    activity.end();
-    let onEndJob;
-
-    const checkJobsDone = _.debounce(
-    /*#__PURE__*/
-    function () {
-      var _ref2 = (0, _asyncToGenerator2.default)(function* (resolve) {
-        const state = store.getState();
-
-        if (state.jobs.active.length === 0) {
-          emitter.off(`END_JOB`, onEndJob);
-          yield finishBootstrap(bootstrapSpan);
-          resolve({
-            graphqlRunner
-          });
-        }
-      });
-
-      return function (_x2) {
-        return _ref2.apply(this, arguments);
-      };
-    }(), 100);
-
-    if (store.getState().jobs.active.length === 0) {
-      yield finishBootstrap(bootstrapSpan);
-      return {
-        graphqlRunner
-      };
-    } else {
-      return new Promise(resolve => {
-        // Wait until all side effect jobs are finished.
-        onEndJob = () => checkJobsDone(resolve);
-
-        emitter.on(`END_JOB`, onEndJob);
-      });
-    }
-  });
-
-  return function (_x) {
-    return _ref.apply(this, arguments);
-  };
-}();
+    yield writeRedirects(); // onPostBootstrap
 
-const finishBootstrap =
-/*#__PURE__*/
-function () {
-  var _ref3 = (0, _asyncToGenerator2.default)(function* (bootstrapSpan) {
-    // onPostBootstrap
-    const activity = report.activityTimer(`onPostBootstrap`, {
+    activity = report.activityTimer(`onPostBootstrap`, {
       parentSpan: bootstrapSpan
     });
     activity.start();
@@ -515,17 +427,20 @@ function () {
     });
     activity.end();
     report.log(``);
-    report.info(`bootstrap finished - ${process.uptime().toFixed(3)} s`);
+    report.info(`bootstrap finished - ${process.uptime()} s`);
     report.log(``);
     emitter.emit(`BOOTSTRAP_FINISHED`);
 
     require(`../redux/actions`).boundActionCreators.setProgramStatus(`BOOTSTRAP_FINISHED`);
 
     bootstrapSpan.finish();
+    return {
+      graphqlRunner
+    };
   });
 
-  return function finishBootstrap(_x3) {
-    return _ref3.apply(this, arguments);
+  return function (_x) {
+    return _ref.apply(this, arguments);
   };
 }();
 //# sourceMappingURL=index.js.map
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/bootstrap/index.js.map b/node_modules/gatsby/dist/bootstrap/index.js.map
index b1be6d3..813241e 100644
--- a/node_modules/gatsby/dist/bootstrap/index.js.map
+++ b/node_modules/gatsby/dist/bootstrap/index.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/bootstrap/index.js"],"names":["_","require","slash","fs","md5File","crypto","del","path","Promise","telemetry","apiRunnerNode","getBrowserslist","graphql","store","emitter","loadPlugins","loadThemes","report","getConfigFile","tracer","globalTracer","preferDefault","nodeTracking","withResolverContext","process","on","reason","p","panic","extractQueries","queryUtil","writePages","writeRedirects","module","exports","args","spanArgs","parentSpan","childOf","bootstrapSpan","startSpan","directory","program","browserslist","dispatch","type","payload","activity","activityTimer","start","config","__experimentalThemes","themes","polyfill","warn","end","flattenedPlugins","decorateEvent","plugins","map","name","version","span","env","NODE_ENV","pluginVersions","hashes","all","resolve","catch","pluginsHash","createHash","update","JSON","stringify","concat","digest","state","getState","oldPluginsHash","status","PLUGINS_HASH","info","stripIndent","cacheDirectory","remove","emptyDir","e","error","ensureDir","GATSBY_DB_NODES","loki","dbSaveFile","saveFile","dirname","trackDbNodes","srcDir","__dirname","siteDir","tryRequire","copy","clobber","ensureDirSync","err","hasAPIFile","plugin","skipSSR","undefined","envAPIs","join","Array","isArray","length","ssrPlugins","filter","options","pluginOptions","browserPlugins","browserPluginsRequires","browserAPIRunner","sSRAPIRunner","readFileSync","ssrPluginsRequires","writeFileSync","build","extensions","apiResults","traceId","flattenDeep","graphqlRunner","query","context","schema","waitForCascadingActions","rebuildWithSitePage","queryIds","calcInitialDirtyQueryIds","groupQueryIds","staticQueryIds","pageQueryIds","processStaticQueries","processPageQueries","boundActionCreators","setProgramStatus","onEndJob","checkJobsDone","debounce","jobs","active","off","finishBootstrap","log","uptime","toFixed","emit","finish"],"mappings":"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","sourcesContent":["/* @flow */\n\nconst _ = require(`lodash`)\nconst slash = require(`slash`)\nconst fs = require(`fs-extra`)\nconst md5File = require(`md5-file/promise`)\nconst crypto = require(`crypto`)\nconst del = require(`del`)\nconst path = require(`path`)\nconst Promise = require(`bluebird`)\nconst telemetry = require(`gatsby-telemetry`)\n\nconst apiRunnerNode = require(`../utils/api-runner-node`)\nconst getBrowserslist = require(`../utils/browserslist`)\nconst { graphql } = require(`graphql`)\nconst { store, emitter } = require(`../redux`)\nconst loadPlugins = require(`./load-plugins`)\nconst loadThemes = require(`./load-themes`)\nconst report = require(`gatsby-cli/lib/reporter`)\nconst getConfigFile = require(`./get-config-file`)\nconst tracer = require(`opentracing`).globalTracer()\nconst preferDefault = require(`./prefer-default`)\nconst nodeTracking = require(`../db/node-tracking`)\nconst withResolverContext = require(`../schema/context`)\n// Add `util.promisify` polyfill for old node versions\nrequire(`util.promisify/shim`)()\n\n// Show stack trace on unhandled promises.\nprocess.on(`unhandledRejection`, (reason, p) => {\n  report.panic(reason)\n})\n\nconst { extractQueries } = require(`../query/query-watcher`)\nconst queryUtil = require(`../query`)\nconst { writePages } = require(`../query/pages-writer`)\nconst { writeRedirects } = require(`./redirects-writer`)\n\n// Override console.log to add the source file + line number.\n// Useful for debugging if you lose a console.log somewhere.\n// Otherwise leave commented out.\n// require(`./log-line-function`)\n\ntype BootstrapArgs = {\n  directory: string,\n  prefixPaths?: boolean,\n  parentSpan: Object,\n}\n\nmodule.exports = async (args: BootstrapArgs) => {\n  const spanArgs = args.parentSpan ? { childOf: args.parentSpan } : {}\n  const bootstrapSpan = tracer.startSpan(`bootstrap`, spanArgs)\n\n  // Start plugin runner which listens to the store\n  // and invokes Gatsby API based on actions.\n  require(`../redux/plugin-runner`)\n\n  const directory = slash(args.directory)\n\n  const program = {\n    ...args,\n    browserslist: getBrowserslist(directory),\n    // Fix program directory path for windows env.\n    directory,\n  }\n\n  store.dispatch({\n    type: `SET_PROGRAM`,\n    payload: program,\n  })\n\n  // Try opening the site's gatsby-config.js file.\n  let activity = report.activityTimer(`open and validate gatsby-configs`, {\n    parentSpan: bootstrapSpan,\n  })\n  activity.start()\n  let config = await preferDefault(\n    getConfigFile(program.directory, `gatsby-config`)\n  )\n\n  // theme gatsby configs can be functions or objects\n  if (config && config.__experimentalThemes) {\n    const themes = await loadThemes(config)\n    config = themes.config\n\n    store.dispatch({\n      type: `SET_RESOLVED_THEMES`,\n      payload: themes.themes,\n    })\n  }\n\n  if (config && config.polyfill) {\n    report.warn(\n      `Support for custom Promise polyfills has been removed in Gatsby v2. We only support Babel 7's new automatic polyfilling behavior.`\n    )\n  }\n\n  store.dispatch({\n    type: `SET_SITE_CONFIG`,\n    payload: config,\n  })\n\n  activity.end()\n\n  activity = report.activityTimer(`load plugins`)\n  activity.start()\n  const flattenedPlugins = await loadPlugins(config, program.directory)\n  activity.end()\n\n  telemetry.decorateEvent(`BUILD_END`, {\n    plugins: flattenedPlugins.map(p => `${p.name}@${p.version}`),\n  })\n\n  // onPreInit\n  activity = report.activityTimer(`onPreInit`, {\n    parentSpan: bootstrapSpan,\n  })\n  activity.start()\n  await apiRunnerNode(`onPreInit`, { parentSpan: activity.span })\n  activity.end()\n\n  // During builds, delete html and css files from the public directory as we don't want\n  // deleted pages and styles from previous builds to stick around.\n  if (process.env.NODE_ENV === `production`) {\n    activity = report.activityTimer(\n      `delete html and css files from previous builds`,\n      {\n        parentSpan: bootstrapSpan,\n      }\n    )\n    activity.start()\n    await del([\n      `public/*.{html,css}`,\n      `public/**/*.{html,css}`,\n      `!public/static`,\n      `!public/static/**/*.{html,css}`,\n    ])\n    activity.end()\n  }\n\n  activity = report.activityTimer(`initialize cache`)\n  activity.start()\n  // Check if any plugins have been updated since our last run. If so\n  // we delete the cache is there's likely been changes\n  // since the previous run.\n  //\n  // We do this by creating a hash of all the version numbers of installed\n  // plugins, the site's package.json, gatsby-config.js, and gatsby-node.js.\n  // The last, gatsby-node.js, is important as many gatsby sites put important\n  // logic in there e.g. generating slugs for custom pages.\n  const pluginVersions = flattenedPlugins.map(p => p.version)\n  const hashes = await Promise.all([\n    md5File(`package.json`),\n    Promise.resolve(\n      md5File(`${program.directory}/gatsby-config.js`).catch(() => {})\n    ), // ignore as this file isn't required),\n    Promise.resolve(\n      md5File(`${program.directory}/gatsby-node.js`).catch(() => {})\n    ), // ignore as this file isn't required),\n  ])\n  const pluginsHash = crypto\n    .createHash(`md5`)\n    .update(JSON.stringify(pluginVersions.concat(hashes)))\n    .digest(`hex`)\n  let state = store.getState()\n  const oldPluginsHash = state && state.status ? state.status.PLUGINS_HASH : ``\n\n  // Check if anything has changed. If it has, delete the site's .cache\n  // directory and tell reducers to empty themselves.\n  //\n  // Also if the hash isn't there, then delete things just in case something\n  // is weird.\n  if (oldPluginsHash && pluginsHash !== oldPluginsHash) {\n    report.info(report.stripIndent`\n      One or more of your plugins have changed since the last time you ran Gatsby. As\n      a precaution, we're deleting your site's cache to ensure there's not any stale\n      data\n    `)\n  }\n  const cacheDirectory = `${program.directory}/.cache`\n  if (!oldPluginsHash || pluginsHash !== oldPluginsHash) {\n    try {\n      // Attempt to empty dir if remove fails,\n      // like when directory is mount point\n      await fs.remove(cacheDirectory).catch(() => fs.emptyDir(cacheDirectory))\n    } catch (e) {\n      report.error(`Failed to remove .cache files.`, e)\n    }\n    // Tell reducers to delete their data (the store will already have\n    // been loaded from the file system cache).\n    store.dispatch({\n      type: `DELETE_CACHE`,\n    })\n  }\n\n  // Update the store with the new plugins hash.\n  store.dispatch({\n    type: `UPDATE_PLUGINS_HASH`,\n    payload: pluginsHash,\n  })\n\n  // Now that we know the .cache directory is safe, initialize the cache\n  // directory.\n  await fs.ensureDir(cacheDirectory)\n\n  // Ensure the public/static directory\n  await fs.ensureDir(`${program.directory}/public/static`)\n\n  activity.end()\n\n  if (process.env.GATSBY_DB_NODES === `loki`) {\n    const loki = require(`../db/loki`)\n    // Start the nodes database (in memory loki js with interval disk\n    // saves). If data was saved from a previous build, it will be\n    // loaded here\n    activity = report.activityTimer(`start nodes db`, {\n      parentSpan: bootstrapSpan,\n    })\n    activity.start()\n    const dbSaveFile = `${cacheDirectory}/loki/loki.db`\n    try {\n      await loki.start({\n        saveFile: dbSaveFile,\n      })\n    } catch (e) {\n      report.error(\n        `Error starting DB. Perhaps try deleting ${path.dirname(dbSaveFile)}`\n      )\n    }\n    activity.end()\n  }\n\n  // By now, our nodes database has been loaded, so ensure that we\n  // have tracked all inline objects\n  nodeTracking.trackDbNodes()\n\n  // Copy our site files to the root of the site.\n  activity = report.activityTimer(`copy gatsby files`, {\n    parentSpan: bootstrapSpan,\n  })\n  activity.start()\n  const srcDir = `${__dirname}/../../cache-dir`\n  const siteDir = cacheDirectory\n  const tryRequire = `${__dirname}/../utils/test-require-error.js`\n  try {\n    await fs.copy(srcDir, siteDir, {\n      clobber: true,\n    })\n    await fs.copy(tryRequire, `${siteDir}/test-require-error.js`, {\n      clobber: true,\n    })\n    await fs.ensureDirSync(`${cacheDirectory}/json`)\n\n    // Ensure .cache/fragments exists and is empty. We want fragments to be\n    // added on every run in response to data as fragments can only be added if\n    // the data used to create the schema they're dependent on is available.\n    await fs.emptyDir(`${cacheDirectory}/fragments`)\n  } catch (err) {\n    report.panic(`Unable to copy site files to .cache`, err)\n  }\n\n  // Find plugins which implement gatsby-browser and gatsby-ssr and write\n  // out api-runners for them.\n  const hasAPIFile = (env, plugin) => {\n    // The plugin loader has disabled SSR APIs for this plugin. Usually due to\n    // multiple implementations of an API that can only be implemented once\n    if (env === `ssr` && plugin.skipSSR === true) return undefined\n\n    const envAPIs = plugin[`${env}APIs`]\n\n    // Always include gatsby-browser.js files if they exists as they're\n    // a handy place to include global styles and other global imports.\n    try {\n      if (env === `browser`) {\n        return slash(\n          require.resolve(path.join(plugin.resolve, `gatsby-${env}`))\n        )\n      }\n    } catch (e) {\n      // ignore\n    }\n\n    if (envAPIs && Array.isArray(envAPIs) && envAPIs.length > 0) {\n      return slash(path.join(plugin.resolve, `gatsby-${env}`))\n    }\n    return undefined\n  }\n\n  const ssrPlugins = _.filter(\n    flattenedPlugins.map(plugin => {\n      return {\n        resolve: hasAPIFile(`ssr`, plugin),\n        options: plugin.pluginOptions,\n      }\n    }),\n    plugin => plugin.resolve\n  )\n\n  const browserPlugins = _.filter(\n    flattenedPlugins.map(plugin => {\n      return {\n        resolve: hasAPIFile(`browser`, plugin),\n        options: plugin.pluginOptions,\n      }\n    }),\n    plugin => plugin.resolve\n  )\n\n  const browserPluginsRequires = browserPlugins\n    .map(\n      plugin =>\n        `{\n      plugin: require('${plugin.resolve}'),\n      options: ${JSON.stringify(plugin.options)},\n    }`\n    )\n    .join(`,`)\n\n  const browserAPIRunner = `module.exports = [${browserPluginsRequires}]\\n`\n\n  let sSRAPIRunner = ``\n\n  try {\n    sSRAPIRunner = fs.readFileSync(`${siteDir}/api-runner-ssr.js`, `utf-8`)\n  } catch (err) {\n    report.panic(`Failed to read ${siteDir}/api-runner-ssr.js`, err)\n  }\n\n  const ssrPluginsRequires = ssrPlugins\n    .map(\n      plugin =>\n        `{\n      plugin: require('${plugin.resolve}'),\n      options: ${JSON.stringify(plugin.options)},\n    }`\n    )\n    .join(`,`)\n  sSRAPIRunner = `var plugins = [${ssrPluginsRequires}]\\n${sSRAPIRunner}`\n\n  fs.writeFileSync(\n    `${siteDir}/api-runner-browser-plugins.js`,\n    browserAPIRunner,\n    `utf-8`\n  )\n  fs.writeFileSync(`${siteDir}/api-runner-ssr.js`, sSRAPIRunner, `utf-8`)\n\n  activity.end()\n  /**\n   * Start the main bootstrap processes.\n   */\n\n  // onPreBootstrap\n  activity = report.activityTimer(`onPreBootstrap`)\n  activity.start()\n  await apiRunnerNode(`onPreBootstrap`)\n  activity.end()\n\n  // Source nodes\n  activity = report.activityTimer(`source and transform nodes`, {\n    parentSpan: bootstrapSpan,\n  })\n  activity.start()\n  await require(`../utils/source-nodes`)({ parentSpan: activity.span })\n  activity.end()\n\n  // Create Schema.\n  activity = report.activityTimer(`building schema`, {\n    parentSpan: bootstrapSpan,\n  })\n  activity.start()\n  await require(`../schema`).build({ parentSpan: activity.span })\n  activity.end()\n\n  // Collect resolvable extensions and attach to program.\n  const extensions = [`.mjs`, `.js`, `.jsx`, `.wasm`, `.json`]\n  // Change to this being an action and plugins implement `onPreBootstrap`\n  // for adding extensions.\n  const apiResults = await apiRunnerNode(`resolvableExtensions`, {\n    traceId: `initial-resolvableExtensions`,\n    parentSpan: bootstrapSpan,\n  })\n\n  store.dispatch({\n    type: `SET_PROGRAM_EXTENSIONS`,\n    payload: _.flattenDeep([extensions, apiResults]),\n  })\n\n  const graphqlRunner = (query, context = {}) => {\n    const schema = store.getState().schema\n    return graphql(\n      schema,\n      query,\n      context,\n      withResolverContext(context, schema),\n      context\n    )\n  }\n\n  // Collect pages.\n  activity = report.activityTimer(`createPages`, {\n    parentSpan: bootstrapSpan,\n  })\n  activity.start()\n  await apiRunnerNode(`createPages`, {\n    graphql: graphqlRunner,\n    traceId: `initial-createPages`,\n    waitForCascadingActions: true,\n    parentSpan: activity.span,\n  })\n  activity.end()\n\n  // A variant on createPages for plugins that want to\n  // have full control over adding/removing pages. The normal\n  // \"createPages\" API is called every time (during development)\n  // that data changes.\n  activity = report.activityTimer(`createPagesStatefully`, {\n    parentSpan: bootstrapSpan,\n  })\n  activity.start()\n  await apiRunnerNode(`createPagesStatefully`, {\n    graphql: graphqlRunner,\n    traceId: `initial-createPagesStatefully`,\n    waitForCascadingActions: true,\n    parentSpan: activity.span,\n  })\n  activity.end()\n\n  activity = report.activityTimer(`onPreExtractQueries`, {\n    parentSpan: bootstrapSpan,\n  })\n  activity.start()\n  await apiRunnerNode(`onPreExtractQueries`, { parentSpan: activity.span })\n  activity.end()\n\n  // Update Schema for SitePage.\n  activity = report.activityTimer(`update schema`, {\n    parentSpan: bootstrapSpan,\n  })\n  activity.start()\n  await require(`../schema`).rebuildWithSitePage({ parentSpan: activity.span })\n  activity.end()\n\n  // Extract queries\n  activity = report.activityTimer(`extract queries from components`, {\n    parentSpan: bootstrapSpan,\n  })\n  activity.start()\n  await extractQueries()\n  activity.end()\n\n  // Start the createPages hot reloader.\n  if (process.env.NODE_ENV !== `production`) {\n    require(`./page-hot-reloader`)(graphqlRunner)\n  }\n\n  const queryIds = queryUtil.calcInitialDirtyQueryIds(store.getState())\n  const { staticQueryIds, pageQueryIds } = queryUtil.groupQueryIds(queryIds)\n\n  activity = report.activityTimer(`run static queries`, {\n    parentSpan: bootstrapSpan,\n  })\n  activity.start()\n  await queryUtil.processStaticQueries(staticQueryIds, {\n    activity,\n    state: store.getState(),\n  })\n  activity.end()\n\n  activity = report.activityTimer(`run page queries`)\n  activity.start()\n  await queryUtil.processPageQueries(pageQueryIds, { activity })\n  activity.end()\n\n  require(`../redux/actions`).boundActionCreators.setProgramStatus(\n    `BOOTSTRAP_QUERY_RUNNING_FINISHED`\n  )\n\n  // Write out files.\n  activity = report.activityTimer(`write out page data`, {\n    parentSpan: bootstrapSpan,\n  })\n  activity.start()\n  try {\n    await writePages()\n  } catch (err) {\n    report.panic(`Failed to write out page data`, err)\n  }\n  activity.end()\n\n  // Write out redirects.\n  activity = report.activityTimer(`write out redirect data`, {\n    parentSpan: bootstrapSpan,\n  })\n  activity.start()\n  await writeRedirects()\n  activity.end()\n\n  let onEndJob\n\n  const checkJobsDone = _.debounce(async resolve => {\n    const state = store.getState()\n    if (state.jobs.active.length === 0) {\n      emitter.off(`END_JOB`, onEndJob)\n\n      await finishBootstrap(bootstrapSpan)\n      resolve({ graphqlRunner })\n    }\n  }, 100)\n\n  if (store.getState().jobs.active.length === 0) {\n    await finishBootstrap(bootstrapSpan)\n    return { graphqlRunner }\n  } else {\n    return new Promise(resolve => {\n      // Wait until all side effect jobs are finished.\n      onEndJob = () => checkJobsDone(resolve)\n      emitter.on(`END_JOB`, onEndJob)\n    })\n  }\n}\n\nconst finishBootstrap = async bootstrapSpan => {\n  // onPostBootstrap\n  const activity = report.activityTimer(`onPostBootstrap`, {\n    parentSpan: bootstrapSpan,\n  })\n  activity.start()\n  await apiRunnerNode(`onPostBootstrap`, { parentSpan: activity.span })\n  activity.end()\n\n  report.log(``)\n  report.info(`bootstrap finished - ${process.uptime().toFixed(3)} s`)\n  report.log(``)\n  emitter.emit(`BOOTSTRAP_FINISHED`)\n  require(`../redux/actions`).boundActionCreators.setProgramStatus(\n    `BOOTSTRAP_FINISHED`\n  )\n\n  bootstrapSpan.finish()\n}\n"],"file":"index.js"}
\ No newline at end of file
+{"version":3,"sources":["../../src/bootstrap/index.js"],"names":["_","require","slash","fs","md5File","crypto","del","path","Promise","telemetry","apiRunnerNode","getBrowserslist","graphql","store","emitter","loadPlugins","loadThemes","report","getConfigFile","tracer","globalTracer","preferDefault","nodeTracking","withResolverContext","startAutosave","process","on","reason","p","panic","extractQueries","writeJsRequires","writeRedirects","module","exports","args","spanArgs","parentSpan","childOf","bootstrapSpan","startSpan","directory","program","browserslist","dispatch","type","payload","activity","activityTimer","start","config","__experimentalThemes","themes","polyfill","warn","end","flattenedPlugins","decorateEvent","plugins","map","name","version","span","env","NODE_ENV","pluginVersions","hashes","all","resolve","catch","pluginsHash","createHash","update","JSON","stringify","concat","digest","getState","status","oldPluginsHash","PLUGINS_HASH","info","stripIndent","cacheDirectory","remove","emptyDir","e","error","ensureDir","GATSBY_DB_NODES","loki","dbSaveFile","saveFile","dirname","trackDbNodes","srcDir","__dirname","siteDir","tryRequire","copy","clobber","ensureDirSync","err","hasAPIFile","plugin","skipSSR","undefined","envAPIs","join","Array","isArray","length","ssrPlugins","filter","options","pluginOptions","browserPlugins","browserPluginsRequires","browserAPIRunner","sSRAPIRunner","readFileSync","ssrPluginsRequires","writeFileSync","build","extensions","apiResults","traceId","flattenDeep","graphqlRunner","query","context","schema","waitForCascadingActions","rebuildWithSitePage","writeAll","log","uptime","emit","boundActionCreators","setProgramStatus","finish"],"mappings":"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","sourcesContent":["/* @flow */\n\nconst _ = require(`lodash`)\nconst slash = require(`slash`)\nconst fs = require(`fs-extra`)\nconst md5File = require(`md5-file/promise`)\nconst crypto = require(`crypto`)\nconst del = require(`del`)\nconst path = require(`path`)\nconst Promise = require(`bluebird`)\nconst telemetry = require(`gatsby-telemetry`)\n\nconst apiRunnerNode = require(`../utils/api-runner-node`)\nconst getBrowserslist = require(`../utils/browserslist`)\nconst { graphql } = require(`graphql`)\nconst { store, emitter } = require(`../redux`)\nconst loadPlugins = require(`./load-plugins`)\nconst loadThemes = require(`./load-themes`)\nconst report = require(`gatsby-cli/lib/reporter`)\nconst getConfigFile = require(`./get-config-file`)\nconst tracer = require(`opentracing`).globalTracer()\nconst preferDefault = require(`./prefer-default`)\nconst nodeTracking = require(`../db/node-tracking`)\nconst withResolverContext = require(`../schema/context`)\nrequire(`../db`).startAutosave()\n\n// Show stack trace on unhandled promises.\nprocess.on(`unhandledRejection`, (reason, p) => {\n  report.panic(reason)\n})\n\nconst { extractQueries } = require(`../query/query-watcher`)\nconst writeJsRequires = require(`./write-js-requires`)\nconst { writeRedirects } = require(`./redirects-writer`)\n\n// Override console.log to add the source file + line number.\n// Useful for debugging if you lose a console.log somewhere.\n// Otherwise leave commented out.\n// require(`./log-line-function`)\n\ntype BootstrapArgs = {\n  directory: string,\n  prefixPaths?: boolean,\n  parentSpan: Object,\n}\n\nmodule.exports = async (args: BootstrapArgs) => {\n  const spanArgs = args.parentSpan ? { childOf: args.parentSpan } : {}\n  const bootstrapSpan = tracer.startSpan(`bootstrap`, spanArgs)\n\n  // Start plugin runner which listens to the store\n  // and invokes Gatsby API based on actions.\n  require(`../redux/plugin-runner`)\n\n  const directory = slash(args.directory)\n\n  const program = {\n    ...args,\n    browserslist: getBrowserslist(directory),\n    // Fix program directory path for windows env.\n    directory,\n  }\n\n  store.dispatch({\n    type: `SET_PROGRAM`,\n    payload: program,\n  })\n\n  // Try opening the site's gatsby-config.js file.\n  let activity = report.activityTimer(`open and validate gatsby-configs`, {\n    parentSpan: bootstrapSpan,\n  })\n  activity.start()\n  let config = await preferDefault(\n    getConfigFile(program.directory, `gatsby-config`)\n  )\n\n  // theme gatsby configs can be functions or objects\n  if (config && config.__experimentalThemes) {\n    const themes = await loadThemes(config)\n    config = themes.config\n\n    store.dispatch({\n      type: `SET_RESOLVED_THEMES`,\n      payload: themes.themes,\n    })\n  }\n\n  if (config && config.polyfill) {\n    report.warn(\n      `Support for custom Promise polyfills has been removed in Gatsby v2. We only support Babel 7's new automatic polyfilling behavior.`\n    )\n  }\n\n  store.dispatch({\n    type: `SET_SITE_CONFIG`,\n    payload: config,\n  })\n\n  activity.end()\n\n  activity = report.activityTimer(`load plugins`)\n  activity.start()\n  const flattenedPlugins = await loadPlugins(config, program.directory)\n  activity.end()\n\n  telemetry.decorateEvent(`BUILD_END`, {\n    plugins: flattenedPlugins.map(p => `${p.name}@${p.version}`),\n  })\n\n  // onPreInit\n  activity = report.activityTimer(`onPreInit`, {\n    parentSpan: bootstrapSpan,\n  })\n  activity.start()\n  await apiRunnerNode(`onPreInit`, { parentSpan: activity.span })\n  activity.end()\n\n  // During builds, delete html and css files from the public directory as we don't want\n  // deleted pages and styles from previous builds to stick around.\n  if (process.env.NODE_ENV === `production`) {\n    activity = report.activityTimer(\n      `delete html and css files from previous builds`,\n      {\n        parentSpan: bootstrapSpan,\n      }\n    )\n    activity.start()\n    await del([\n      `public/*.{html,css}`,\n      `public/**/*.{html,css}`,\n      `!public/static`,\n      `!public/static/**/*.{html,css}`,\n    ])\n    activity.end()\n  }\n\n  activity = report.activityTimer(`initialize cache`)\n  activity.start()\n  // Check if any plugins have been updated since our last run. If so\n  // we delete the cache is there's likely been changes\n  // since the previous run.\n  //\n  // We do this by creating a hash of all the version numbers of installed\n  // plugins, the site's package.json, gatsby-config.js, and gatsby-node.js.\n  // The last, gatsby-node.js, is important as many gatsby sites put important\n  // logic in there e.g. generating slugs for custom pages.\n  const pluginVersions = flattenedPlugins.map(p => p.version)\n  const hashes = await Promise.all([\n    md5File(`package.json`),\n    Promise.resolve(\n      md5File(`${program.directory}/gatsby-config.js`).catch(() => {})\n    ), // ignore as this file isn't required),\n    Promise.resolve(\n      md5File(`${program.directory}/gatsby-node.js`).catch(() => {})\n    ), // ignore as this file isn't required),\n  ])\n  const pluginsHash = crypto\n    .createHash(`md5`)\n    .update(JSON.stringify(pluginVersions.concat(hashes)))\n    .digest(`hex`)\n  const { status } = store.getState()\n  const oldPluginsHash = status ? status.PLUGINS_HASH : ``\n\n  // Check if anything has changed. If it has, delete the site's .cache\n  // directory and tell reducers to empty themselves.\n  //\n  // Also if the hash isn't there, then delete things just in case something\n  // is weird.\n  if (oldPluginsHash && pluginsHash !== oldPluginsHash) {\n    report.info(report.stripIndent`\n      One or more of your plugins have changed since the last time you ran Gatsby. As\n      a precaution, we're deleting your site's cache to ensure there's not any stale\n      data\n    `)\n  }\n  const cacheDirectory = `${program.directory}/.cache`\n  if (!oldPluginsHash || pluginsHash !== oldPluginsHash) {\n    try {\n      // Attempt to empty dir if remove fails,\n      // like when directory is mount point\n      await fs.remove(cacheDirectory).catch(() => fs.emptyDir(cacheDirectory))\n    } catch (e) {\n      report.error(`Failed to remove .cache files.`, e)\n    }\n    // Tell reducers to delete their data (the store will already have\n    // been loaded from the file system cache).\n    store.dispatch({\n      type: `DELETE_CACHE`,\n    })\n  }\n\n  // Update the store with the new plugins hash.\n  store.dispatch({\n    type: `UPDATE_PLUGINS_HASH`,\n    payload: pluginsHash,\n  })\n\n  // Now that we know the .cache directory is safe, initialize the cache\n  // directory.\n  await fs.ensureDir(cacheDirectory)\n\n  // Ensure the public/static directory\n  await fs.ensureDir(`${program.directory}/public/static`)\n\n  activity.end()\n\n  if (process.env.GATSBY_DB_NODES === `loki`) {\n    const loki = require(`../db/loki`)\n    // Start the nodes database (in memory loki js with interval disk\n    // saves). If data was saved from a previous build, it will be\n    // loaded here\n    activity = report.activityTimer(`start nodes db`, {\n      parentSpan: bootstrapSpan,\n    })\n    activity.start()\n    const dbSaveFile = `${cacheDirectory}/loki/loki.db`\n    try {\n      await loki.start({\n        saveFile: dbSaveFile,\n      })\n    } catch (e) {\n      report.error(\n        `Error starting DB. Perhaps try deleting ${path.dirname(dbSaveFile)}`\n      )\n    }\n    activity.end()\n  }\n\n  // By now, our nodes database has been loaded, so ensure that we\n  // have tracked all inline objects\n  nodeTracking.trackDbNodes()\n\n  // Copy our site files to the root of the site.\n  activity = report.activityTimer(`copy gatsby files`, {\n    parentSpan: bootstrapSpan,\n  })\n  activity.start()\n  const srcDir = `${__dirname}/../../cache-dir`\n  const siteDir = cacheDirectory\n  const tryRequire = `${__dirname}/../utils/test-require-error.js`\n  try {\n    await fs.copy(srcDir, siteDir, {\n      clobber: true,\n    })\n    await fs.copy(tryRequire, `${siteDir}/test-require-error.js`, {\n      clobber: true,\n    })\n    await fs.ensureDirSync(`${cacheDirectory}/json`)\n\n    // Ensure .cache/fragments exists and is empty. We want fragments to be\n    // added on every run in response to data as fragments can only be added if\n    // the data used to create the schema they're dependent on is available.\n    await fs.emptyDir(`${cacheDirectory}/fragments`)\n  } catch (err) {\n    report.panic(`Unable to copy site files to .cache`, err)\n  }\n\n  // Find plugins which implement gatsby-browser and gatsby-ssr and write\n  // out api-runners for them.\n  const hasAPIFile = (env, plugin) => {\n    // The plugin loader has disabled SSR APIs for this plugin. Usually due to\n    // multiple implementations of an API that can only be implemented once\n    if (env === `ssr` && plugin.skipSSR === true) return undefined\n\n    const envAPIs = plugin[`${env}APIs`]\n\n    // Always include gatsby-browser.js files if they exists as they're\n    // a handy place to include global styles and other global imports.\n    try {\n      if (env === `browser`) {\n        return slash(\n          require.resolve(path.join(plugin.resolve, `gatsby-${env}`))\n        )\n      }\n    } catch (e) {\n      // ignore\n    }\n\n    if (envAPIs && Array.isArray(envAPIs) && envAPIs.length > 0) {\n      return slash(path.join(plugin.resolve, `gatsby-${env}`))\n    }\n    return undefined\n  }\n\n  const ssrPlugins = _.filter(\n    flattenedPlugins.map(plugin => {\n      return {\n        resolve: hasAPIFile(`ssr`, plugin),\n        options: plugin.pluginOptions,\n      }\n    }),\n    plugin => plugin.resolve\n  )\n\n  const browserPlugins = _.filter(\n    flattenedPlugins.map(plugin => {\n      return {\n        resolve: hasAPIFile(`browser`, plugin),\n        options: plugin.pluginOptions,\n      }\n    }),\n    plugin => plugin.resolve\n  )\n\n  const browserPluginsRequires = browserPlugins\n    .map(\n      plugin =>\n        `{\n      plugin: require('${plugin.resolve}'),\n      options: ${JSON.stringify(plugin.options)},\n    }`\n    )\n    .join(`,`)\n\n  const browserAPIRunner = `module.exports = [${browserPluginsRequires}]\\n`\n\n  let sSRAPIRunner = ``\n\n  try {\n    sSRAPIRunner = fs.readFileSync(`${siteDir}/api-runner-ssr.js`, `utf-8`)\n  } catch (err) {\n    report.panic(`Failed to read ${siteDir}/api-runner-ssr.js`, err)\n  }\n\n  const ssrPluginsRequires = ssrPlugins\n    .map(\n      plugin =>\n        `{\n      plugin: require('${plugin.resolve}'),\n      options: ${JSON.stringify(plugin.options)},\n    }`\n    )\n    .join(`,`)\n  sSRAPIRunner = `var plugins = [${ssrPluginsRequires}]\\n${sSRAPIRunner}`\n\n  fs.writeFileSync(\n    `${siteDir}/api-runner-browser-plugins.js`,\n    browserAPIRunner,\n    `utf-8`\n  )\n  fs.writeFileSync(`${siteDir}/api-runner-ssr.js`, sSRAPIRunner, `utf-8`)\n\n  activity.end()\n  /**\n   * Start the main bootstrap processes.\n   */\n\n  // onPreBootstrap\n  activity = report.activityTimer(`onPreBootstrap`)\n  activity.start()\n  await apiRunnerNode(`onPreBootstrap`)\n  activity.end()\n\n  // Source nodes\n  activity = report.activityTimer(`source and transform nodes`, {\n    parentSpan: bootstrapSpan,\n  })\n  activity.start()\n  await require(`../utils/source-nodes`)({ parentSpan: activity.span })\n  activity.end()\n\n  // Create Schema.\n  activity = report.activityTimer(`building schema`, {\n    parentSpan: bootstrapSpan,\n  })\n  activity.start()\n  await require(`../schema`).build({ parentSpan: activity.span })\n  activity.end()\n\n  // Collect resolvable extensions and attach to program.\n  const extensions = [`.mjs`, `.js`, `.jsx`, `.wasm`, `.json`]\n  // Change to this being an action and plugins implement `onPreBootstrap`\n  // for adding extensions.\n  const apiResults = await apiRunnerNode(`resolvableExtensions`, {\n    traceId: `initial-resolvableExtensions`,\n    parentSpan: bootstrapSpan,\n  })\n\n  store.dispatch({\n    type: `SET_PROGRAM_EXTENSIONS`,\n    payload: _.flattenDeep([extensions, apiResults]),\n  })\n\n  const graphqlRunner = (query, context = {}) => {\n    const schema = store.getState().schema\n    return graphql(\n      schema,\n      query,\n      context,\n      withResolverContext(context, schema),\n      context\n    )\n  }\n\n  // Collect pages.\n  activity = report.activityTimer(`createPages`, {\n    parentSpan: bootstrapSpan,\n  })\n  activity.start()\n  await apiRunnerNode(`createPages`, {\n    graphql: graphqlRunner,\n    traceId: `initial-createPages`,\n    waitForCascadingActions: true,\n    parentSpan: activity.span,\n  })\n  activity.end()\n\n  // A variant on createPages for plugins that want to\n  // have full control over adding/removing pages. The normal\n  // \"createPages\" API is called every time (during development)\n  // that data changes.\n  activity = report.activityTimer(`createPagesStatefully`, {\n    parentSpan: bootstrapSpan,\n  })\n  activity.start()\n  await apiRunnerNode(`createPagesStatefully`, {\n    graphql: graphqlRunner,\n    traceId: `initial-createPagesStatefully`,\n    waitForCascadingActions: true,\n    parentSpan: activity.span,\n  })\n  activity.end()\n\n  activity = report.activityTimer(`onPreExtractQueries`, {\n    parentSpan: bootstrapSpan,\n  })\n  activity.start()\n  await apiRunnerNode(`onPreExtractQueries`, { parentSpan: activity.span })\n  activity.end()\n\n  // Update Schema for SitePage.\n  activity = report.activityTimer(`update schema`, {\n    parentSpan: bootstrapSpan,\n  })\n  activity.start()\n  await require(`../schema`).rebuildWithSitePage({ parentSpan: activity.span })\n  activity.end()\n\n  // Extract queries\n  activity = report.activityTimer(`extract queries from components`, {\n    parentSpan: bootstrapSpan,\n  })\n  activity.start()\n  await extractQueries()\n  activity.end()\n\n  try {\n    await writeJsRequires.writeAll(store.getState())\n  } catch (err) {\n    report.panic(`Failed to write out page data`, err)\n  }\n\n  await writeRedirects()\n\n  // onPostBootstrap\n  activity = report.activityTimer(`onPostBootstrap`, {\n    parentSpan: bootstrapSpan,\n  })\n  activity.start()\n  await apiRunnerNode(`onPostBootstrap`, { parentSpan: activity.span })\n  activity.end()\n\n  report.log(``)\n  report.info(`bootstrap finished - ${process.uptime()} s`)\n  report.log(``)\n  emitter.emit(`BOOTSTRAP_FINISHED`)\n  require(`../redux/actions`).boundActionCreators.setProgramStatus(\n    `BOOTSTRAP_FINISHED`\n  )\n\n  bootstrapSpan.finish()\n\n  return { graphqlRunner }\n}\n"],"file":"index.js"}
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/bootstrap/load-plugins/validate.js b/node_modules/gatsby/dist/bootstrap/load-plugins/validate.js
index a447375..4af27e5 100644
--- a/node_modules/gatsby/dist/bootstrap/load-plugins/validate.js
+++ b/node_modules/gatsby/dist/bootstrap/load-plugins/validate.js
@@ -119,9 +119,7 @@ const collatePluginAPIs = ({
     // the plugin node itself *and* in an API to plugins map for faster lookups
     // later.
 
-    const pluginNodeExports = resolveModuleExports(`${plugin.resolve}/gatsby-node`, {
-      mode: `require`
-    });
+    const pluginNodeExports = resolveModuleExports(`${plugin.resolve}/gatsby-node`);
     const pluginBrowserExports = resolveModuleExports(`${plugin.resolve}/gatsby-browser`);
     const pluginSSRExports = resolveModuleExports(`${plugin.resolve}/gatsby-ssr`);
 
diff --git a/node_modules/gatsby/dist/bootstrap/load-plugins/validate.js.map b/node_modules/gatsby/dist/bootstrap/load-plugins/validate.js.map
index 33042ab..4c1b115 100644
--- a/node_modules/gatsby/dist/bootstrap/load-plugins/validate.js.map
+++ b/node_modules/gatsby/dist/bootstrap/load-plugins/validate.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../../src/bootstrap/load-plugins/validate.js"],"names":["_","require","semver","gatsbyVersion","version","reporter","resolveModuleExports","getBadExports","plugin","pluginAPIKeys","apis","badExports","concat","difference","map","e","exportName","pluginName","name","pluginVersion","getBadExportsMessage","exportType","stripIndent","stringSimiliarity","capitalized","toUpperCase","slice","message","forEach","bady","similarities","findBestMatch","isDefaultPlugin","badExportsMigrationMap","modifyWebpackConfig","replacement","migrationLink","wrapRootComponent","isOldAPI","Object","keys","includes","bestMatch","rating","target","handleBadExports","toPairs","badItem","entries","length","panicOnBuild","collatePluginAPIs","flattenedPlugins","node","browser","ssr","nodeAPIs","browserAPIs","ssrAPIs","pluginNodeExports","resolve","mode","pluginBrowserExports","pluginSSRExports","intersection","handleMultipleReplaceRenderers","rendererPlugins","filter","warn","join","console","log","error","process","env","NODE_ENV","exit","ignorable","messages","fp","i","push","skipSSR","m","warnOnIncompatiblePeerDependency","packageJSON","gatsbyPeerDependency","get","satisfies","module","exports"],"mappings":"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","sourcesContent":["const _ = require(`lodash`)\nconst semver = require(`semver`)\nconst { version: gatsbyVersion } = require(`gatsby/package.json`)\nconst reporter = require(`gatsby-cli/lib/reporter`)\nconst resolveModuleExports = require(`../resolve-module-exports`)\n\n// Given a plugin object, an array of the API names it exports and an\n// array of valid API names, return an array of invalid API exports.\nconst getBadExports = (plugin, pluginAPIKeys, apis) => {\n  let badExports = []\n  // Discover any exports from plugins which are not \"known\"\n  badExports = badExports.concat(\n    _.difference(pluginAPIKeys, apis).map(e => {\n      return {\n        exportName: e,\n        pluginName: plugin.name,\n        pluginVersion: plugin.version,\n      }\n    })\n  )\n  return badExports\n}\n\nconst getBadExportsMessage = (badExports, exportType, apis) => {\n  const { stripIndent } = require(`common-tags`)\n  const stringSimiliarity = require(`string-similarity`)\n  let capitalized = `${exportType[0].toUpperCase()}${exportType.slice(1)}`\n  if (capitalized === `Ssr`) capitalized = `SSR`\n\n  let message = `\\n`\n  message += stripIndent`\n    Your plugins must export known APIs from their gatsby-${exportType}.js.\n    The following exports aren't APIs. Perhaps you made a typo or your plugin is outdated?\n\n    See https://www.gatsbyjs.org/docs/${exportType}-apis/ for the list of Gatsby ${capitalized} APIs\n  `\n\n  badExports.forEach(bady => {\n    message += `\\n\\n`\n    const similarities = stringSimiliarity.findBestMatch(bady.exportName, apis)\n    const isDefaultPlugin = bady.pluginName == `default-site-plugin`\n    const badExportsMigrationMap = {\n      modifyWebpackConfig: {\n        replacement: `onCreateWebpackConfig`,\n        migrationLink: `https://gatsby.dev/update-webpack-config`,\n      },\n      wrapRootComponent: {\n        replacement: `wrapRootElement`,\n        migrationLink: `https://gatsby.dev/update-wraprootcomponent`,\n      },\n    }\n    const isOldAPI = Object.keys(badExportsMigrationMap).includes(\n      bady.exportName\n    )\n\n    if (isDefaultPlugin && isOldAPI) {\n      const { replacement, migrationLink } = badExportsMigrationMap[\n        bady.exportName\n      ]\n      message += stripIndent`\n        - Your site's gatsby-${exportType}.js is exporting \"${\n        bady.exportName\n      }\" which was removed in Gatsby v2. Refer to the migration guide for more info on upgrading to \"${replacement}\":\n      `\n      message += `\\n ${migrationLink}`\n    } else if (isDefaultPlugin) {\n      message += stripIndent`\n        - Your site's gatsby-${exportType}.js is exporting a variable named \"${\n        bady.exportName\n      }\" which isn't an API.\n      `\n    } else {\n      message += stripIndent`\n        - The plugin \"${bady.pluginName}@${\n        bady.pluginVersion\n      }\" is exporting a variable named \"${bady.exportName}\" which isn't an API.\n      `\n    }\n\n    if (similarities.bestMatch.rating > 0.5 && !isOldAPI) {\n      message += `\\n\\n`\n      message += `Perhaps you meant to export \"${\n        similarities.bestMatch.target\n      }\"?`\n    }\n  })\n\n  return message\n}\n\nconst handleBadExports = ({ apis, badExports }) => {\n  // Output error messages for all bad exports\n  _.toPairs(badExports).forEach(badItem => {\n    const [exportType, entries] = badItem\n    if (entries.length > 0) {\n      reporter.panicOnBuild(\n        getBadExportsMessage(entries, exportType, apis[exportType])\n      )\n    }\n  })\n}\n\n/**\n * Identify which APIs each plugin exports\n */\nconst collatePluginAPIs = ({ apis, flattenedPlugins }) => {\n  // Get a list of bad exports\n  const badExports = {\n    node: [],\n    browser: [],\n    ssr: [],\n  }\n\n  flattenedPlugins.forEach(plugin => {\n    plugin.nodeAPIs = []\n    plugin.browserAPIs = []\n    plugin.ssrAPIs = []\n\n    // Discover which APIs this plugin implements and store an array against\n    // the plugin node itself *and* in an API to plugins map for faster lookups\n    // later.\n    const pluginNodeExports = resolveModuleExports(\n      `${plugin.resolve}/gatsby-node`,\n      {\n        mode: `require`,\n      }\n    )\n    const pluginBrowserExports = resolveModuleExports(\n      `${plugin.resolve}/gatsby-browser`\n    )\n    const pluginSSRExports = resolveModuleExports(\n      `${plugin.resolve}/gatsby-ssr`\n    )\n\n    if (pluginNodeExports.length > 0) {\n      plugin.nodeAPIs = _.intersection(pluginNodeExports, apis.node)\n      badExports.node = badExports.node.concat(\n        getBadExports(plugin, pluginNodeExports, apis.node)\n      ) // Collate any bad exports\n    }\n\n    if (pluginBrowserExports.length > 0) {\n      plugin.browserAPIs = _.intersection(pluginBrowserExports, apis.browser)\n      badExports.browser = badExports.browser.concat(\n        getBadExports(plugin, pluginBrowserExports, apis.browser)\n      ) // Collate any bad exports\n    }\n\n    if (pluginSSRExports.length > 0) {\n      plugin.ssrAPIs = _.intersection(pluginSSRExports, apis.ssr)\n      badExports.ssr = badExports.ssr.concat(\n        getBadExports(plugin, pluginSSRExports, apis.ssr)\n      ) // Collate any bad exports\n    }\n  })\n\n  return { flattenedPlugins, badExports }\n}\n\nconst handleMultipleReplaceRenderers = ({ flattenedPlugins }) => {\n  // multiple replaceRenderers may cause problems at build time\n  const rendererPlugins = flattenedPlugins\n    .filter(plugin => plugin.ssrAPIs.includes(`replaceRenderer`))\n    .map(plugin => plugin.name)\n  if (rendererPlugins.length > 1) {\n    if (rendererPlugins.includes(`default-site-plugin`)) {\n      reporter.warn(`replaceRenderer API found in these plugins:`)\n      reporter.warn(rendererPlugins.join(`, `))\n      reporter.warn(\n        `This might be an error, see: https://www.gatsbyjs.org/docs/debugging-replace-renderer-api/`\n      )\n    } else {\n      console.log(``)\n      reporter.error(\n        `Gatsby's replaceRenderer API is implemented by multiple plugins:`\n      )\n      reporter.error(rendererPlugins.join(`, `))\n      reporter.error(`This will break your build`)\n      reporter.error(\n        `See: https://www.gatsbyjs.org/docs/debugging-replace-renderer-api/`\n      )\n      if (process.env.NODE_ENV === `production`) process.exit(1)\n    }\n\n    // Now update plugin list so only final replaceRenderer will run\n    const ignorable = rendererPlugins.slice(0, -1)\n\n    // For each plugin in ignorable, set a skipSSR flag to true\n    // This prevents apiRunnerSSR() from attempting to run it later\n    const messages = []\n    flattenedPlugins.forEach((fp, i) => {\n      if (ignorable.includes(fp.name)) {\n        messages.push(\n          `Duplicate replaceRenderer found, skipping gatsby-ssr.js for plugin: ${\n            fp.name\n          }`\n        )\n        flattenedPlugins[i].skipSSR = true\n      }\n    })\n    if (messages.length > 0) {\n      console.log(``)\n      messages.forEach(m => reporter.warn(m))\n      console.log(``)\n    }\n  }\n\n  return flattenedPlugins\n}\n\nfunction warnOnIncompatiblePeerDependency(name, packageJSON) {\n  // Note: In the future the peer dependency should be enforced for all plugins.\n  const gatsbyPeerDependency = _.get(packageJSON, `peerDependencies.gatsby`)\n  if (\n    gatsbyPeerDependency &&\n    !semver.satisfies(gatsbyVersion, gatsbyPeerDependency)\n  ) {\n    reporter.warn(\n      `Plugin ${name} is not compatible with your gatsby version ${gatsbyVersion} - It requires gatsby@${gatsbyPeerDependency}`\n    )\n  }\n}\n\nmodule.exports = {\n  collatePluginAPIs,\n  handleBadExports,\n  handleMultipleReplaceRenderers,\n  warnOnIncompatiblePeerDependency,\n}\n"],"file":"validate.js"}
\ No newline at end of file
+{"version":3,"sources":["../../../src/bootstrap/load-plugins/validate.js"],"names":["_","require","semver","gatsbyVersion","version","reporter","resolveModuleExports","getBadExports","plugin","pluginAPIKeys","apis","badExports","concat","difference","map","e","exportName","pluginName","name","pluginVersion","getBadExportsMessage","exportType","stripIndent","stringSimiliarity","capitalized","toUpperCase","slice","message","forEach","bady","similarities","findBestMatch","isDefaultPlugin","badExportsMigrationMap","modifyWebpackConfig","replacement","migrationLink","wrapRootComponent","isOldAPI","Object","keys","includes","bestMatch","rating","target","handleBadExports","toPairs","badItem","entries","length","panicOnBuild","collatePluginAPIs","flattenedPlugins","node","browser","ssr","nodeAPIs","browserAPIs","ssrAPIs","pluginNodeExports","resolve","pluginBrowserExports","pluginSSRExports","intersection","handleMultipleReplaceRenderers","rendererPlugins","filter","warn","join","console","log","error","process","env","NODE_ENV","exit","ignorable","messages","fp","i","push","skipSSR","m","warnOnIncompatiblePeerDependency","packageJSON","gatsbyPeerDependency","get","satisfies","module","exports"],"mappings":"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","sourcesContent":["const _ = require(`lodash`)\nconst semver = require(`semver`)\nconst { version: gatsbyVersion } = require(`gatsby/package.json`)\nconst reporter = require(`gatsby-cli/lib/reporter`)\nconst resolveModuleExports = require(`../resolve-module-exports`)\n\n// Given a plugin object, an array of the API names it exports and an\n// array of valid API names, return an array of invalid API exports.\nconst getBadExports = (plugin, pluginAPIKeys, apis) => {\n  let badExports = []\n  // Discover any exports from plugins which are not \"known\"\n  badExports = badExports.concat(\n    _.difference(pluginAPIKeys, apis).map(e => {\n      return {\n        exportName: e,\n        pluginName: plugin.name,\n        pluginVersion: plugin.version,\n      }\n    })\n  )\n  return badExports\n}\n\nconst getBadExportsMessage = (badExports, exportType, apis) => {\n  const { stripIndent } = require(`common-tags`)\n  const stringSimiliarity = require(`string-similarity`)\n  let capitalized = `${exportType[0].toUpperCase()}${exportType.slice(1)}`\n  if (capitalized === `Ssr`) capitalized = `SSR`\n\n  let message = `\\n`\n  message += stripIndent`\n    Your plugins must export known APIs from their gatsby-${exportType}.js.\n    The following exports aren't APIs. Perhaps you made a typo or your plugin is outdated?\n\n    See https://www.gatsbyjs.org/docs/${exportType}-apis/ for the list of Gatsby ${capitalized} APIs\n  `\n\n  badExports.forEach(bady => {\n    message += `\\n\\n`\n    const similarities = stringSimiliarity.findBestMatch(bady.exportName, apis)\n    const isDefaultPlugin = bady.pluginName == `default-site-plugin`\n    const badExportsMigrationMap = {\n      modifyWebpackConfig: {\n        replacement: `onCreateWebpackConfig`,\n        migrationLink: `https://gatsby.dev/update-webpack-config`,\n      },\n      wrapRootComponent: {\n        replacement: `wrapRootElement`,\n        migrationLink: `https://gatsby.dev/update-wraprootcomponent`,\n      },\n    }\n    const isOldAPI = Object.keys(badExportsMigrationMap).includes(\n      bady.exportName\n    )\n\n    if (isDefaultPlugin && isOldAPI) {\n      const { replacement, migrationLink } = badExportsMigrationMap[\n        bady.exportName\n      ]\n      message += stripIndent`\n        - Your site's gatsby-${exportType}.js is exporting \"${\n        bady.exportName\n      }\" which was removed in Gatsby v2. Refer to the migration guide for more info on upgrading to \"${replacement}\":\n      `\n      message += `\\n ${migrationLink}`\n    } else if (isDefaultPlugin) {\n      message += stripIndent`\n        - Your site's gatsby-${exportType}.js is exporting a variable named \"${\n        bady.exportName\n      }\" which isn't an API.\n      `\n    } else {\n      message += stripIndent`\n        - The plugin \"${bady.pluginName}@${\n        bady.pluginVersion\n      }\" is exporting a variable named \"${bady.exportName}\" which isn't an API.\n      `\n    }\n\n    if (similarities.bestMatch.rating > 0.5 && !isOldAPI) {\n      message += `\\n\\n`\n      message += `Perhaps you meant to export \"${\n        similarities.bestMatch.target\n      }\"?`\n    }\n  })\n\n  return message\n}\n\nconst handleBadExports = ({ apis, badExports }) => {\n  // Output error messages for all bad exports\n  _.toPairs(badExports).forEach(badItem => {\n    const [exportType, entries] = badItem\n    if (entries.length > 0) {\n      reporter.panicOnBuild(\n        getBadExportsMessage(entries, exportType, apis[exportType])\n      )\n    }\n  })\n}\n\n/**\n * Identify which APIs each plugin exports\n */\nconst collatePluginAPIs = ({ apis, flattenedPlugins }) => {\n  // Get a list of bad exports\n  const badExports = {\n    node: [],\n    browser: [],\n    ssr: [],\n  }\n\n  flattenedPlugins.forEach(plugin => {\n    plugin.nodeAPIs = []\n    plugin.browserAPIs = []\n    plugin.ssrAPIs = []\n\n    // Discover which APIs this plugin implements and store an array against\n    // the plugin node itself *and* in an API to plugins map for faster lookups\n    // later.\n    const pluginNodeExports = resolveModuleExports(\n      `${plugin.resolve}/gatsby-node`\n    )\n    const pluginBrowserExports = resolveModuleExports(\n      `${plugin.resolve}/gatsby-browser`\n    )\n    const pluginSSRExports = resolveModuleExports(\n      `${plugin.resolve}/gatsby-ssr`\n    )\n\n    if (pluginNodeExports.length > 0) {\n      plugin.nodeAPIs = _.intersection(pluginNodeExports, apis.node)\n      badExports.node = badExports.node.concat(\n        getBadExports(plugin, pluginNodeExports, apis.node)\n      ) // Collate any bad exports\n    }\n\n    if (pluginBrowserExports.length > 0) {\n      plugin.browserAPIs = _.intersection(pluginBrowserExports, apis.browser)\n      badExports.browser = badExports.browser.concat(\n        getBadExports(plugin, pluginBrowserExports, apis.browser)\n      ) // Collate any bad exports\n    }\n\n    if (pluginSSRExports.length > 0) {\n      plugin.ssrAPIs = _.intersection(pluginSSRExports, apis.ssr)\n      badExports.ssr = badExports.ssr.concat(\n        getBadExports(plugin, pluginSSRExports, apis.ssr)\n      ) // Collate any bad exports\n    }\n  })\n\n  return { flattenedPlugins, badExports }\n}\n\nconst handleMultipleReplaceRenderers = ({ flattenedPlugins }) => {\n  // multiple replaceRenderers may cause problems at build time\n  const rendererPlugins = flattenedPlugins\n    .filter(plugin => plugin.ssrAPIs.includes(`replaceRenderer`))\n    .map(plugin => plugin.name)\n  if (rendererPlugins.length > 1) {\n    if (rendererPlugins.includes(`default-site-plugin`)) {\n      reporter.warn(`replaceRenderer API found in these plugins:`)\n      reporter.warn(rendererPlugins.join(`, `))\n      reporter.warn(\n        `This might be an error, see: https://www.gatsbyjs.org/docs/debugging-replace-renderer-api/`\n      )\n    } else {\n      console.log(``)\n      reporter.error(\n        `Gatsby's replaceRenderer API is implemented by multiple plugins:`\n      )\n      reporter.error(rendererPlugins.join(`, `))\n      reporter.error(`This will break your build`)\n      reporter.error(\n        `See: https://www.gatsbyjs.org/docs/debugging-replace-renderer-api/`\n      )\n      if (process.env.NODE_ENV === `production`) process.exit(1)\n    }\n\n    // Now update plugin list so only final replaceRenderer will run\n    const ignorable = rendererPlugins.slice(0, -1)\n\n    // For each plugin in ignorable, set a skipSSR flag to true\n    // This prevents apiRunnerSSR() from attempting to run it later\n    const messages = []\n    flattenedPlugins.forEach((fp, i) => {\n      if (ignorable.includes(fp.name)) {\n        messages.push(\n          `Duplicate replaceRenderer found, skipping gatsby-ssr.js for plugin: ${\n            fp.name\n          }`\n        )\n        flattenedPlugins[i].skipSSR = true\n      }\n    })\n    if (messages.length > 0) {\n      console.log(``)\n      messages.forEach(m => reporter.warn(m))\n      console.log(``)\n    }\n  }\n\n  return flattenedPlugins\n}\n\nfunction warnOnIncompatiblePeerDependency(name, packageJSON) {\n  // Note: In the future the peer dependency should be enforced for all plugins.\n  const gatsbyPeerDependency = _.get(packageJSON, `peerDependencies.gatsby`)\n  if (\n    gatsbyPeerDependency &&\n    !semver.satisfies(gatsbyVersion, gatsbyPeerDependency)\n  ) {\n    reporter.warn(\n      `Plugin ${name} is not compatible with your gatsby version ${gatsbyVersion} - It requires gatsby@${gatsbyPeerDependency}`\n    )\n  }\n}\n\nmodule.exports = {\n  collatePluginAPIs,\n  handleBadExports,\n  handleMultipleReplaceRenderers,\n  warnOnIncompatiblePeerDependency,\n}\n"],"file":"validate.js"}
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/bootstrap/resolve-module-exports.js b/node_modules/gatsby/dist/bootstrap/resolve-module-exports.js
index c57dbab..1fca200 100644
--- a/node_modules/gatsby/dist/bootstrap/resolve-module-exports.js
+++ b/node_modules/gatsby/dist/bootstrap/resolve-module-exports.js
@@ -13,10 +13,18 @@ const _require2 = require(`../utils/babel-parse-to-ast`),
       babelParseToAst = _require2.babelParseToAst;
 
 const report = require(`gatsby-cli/lib/reporter`);
+/**
+ * Given a `require.resolve()` compatible path pointing to a JS module,
+ * return an array listing the names of the module's exports.
+ *
+ * Returns [] for invalid paths and modules without exports.
+ *
+ * @param {string} modulePath
+ * @param {function} resolver
+ */
 
-const testRequireError = require(`../utils/test-require-error`).default;
 
-const staticallyAnalyzeExports = (modulePath, resolver = require.resolve) => {
+module.exports = (modulePath, resolver = require.resolve) => {
   let absPath;
   const exportNames = [];
 
@@ -100,39 +108,4 @@ https://gatsby.dev/no-mixed-modules
 
   return exportNames;
 };
-/**
- * Given a `require.resolve()` compatible path pointing to a JS module,
- * return an array listing the names of the module's exports.
- *
- * Returns [] for invalid paths and modules without exports.
- *
- * @param {string} modulePath
- * @param {string} mode
- * @param {function} resolver
- */
-
-
-module.exports = (modulePath, {
-  mode = `analysis`,
-  resolver = require.resolve
-} = {}) => {
-  if (mode === `require`) {
-    let absPath;
-
-    try {
-      absPath = resolver(modulePath);
-      return Object.keys(require(modulePath)).filter(exportName => exportName !== `__esModule`);
-    } catch (e) {
-      if (!testRequireError(modulePath, e)) {
-        // if module exists, but requiring it cause errors,
-        // show the error to the user and terminate build
-        report.panic(`Error in "${absPath}":`, e);
-      }
-    }
-  } else {
-    return staticallyAnalyzeExports(modulePath, resolver);
-  }
-
-  return [];
-};
 //# sourceMappingURL=resolve-module-exports.js.map
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/bootstrap/resolve-module-exports.js.map b/node_modules/gatsby/dist/bootstrap/resolve-module-exports.js.map
index 5db03bd..b9da3b8 100644
--- a/node_modules/gatsby/dist/bootstrap/resolve-module-exports.js.map
+++ b/node_modules/gatsby/dist/bootstrap/resolve-module-exports.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/bootstrap/resolve-module-exports.js"],"names":["fs","require","traverse","default","get","codeFrameColumns","babelParseToAst","report","testRequireError","staticallyAnalyzeExports","modulePath","resolver","resolve","absPath","exportNames","err","code","readFileSync","ast","SyntaxError","codeFrame","start","loc","highlightCode","panic","message","isCommonJS","isES6","ImportDeclaration","astPath","ExportNamedDeclaration","exportName","push","ExportSpecifier","AssignmentExpression","nodeLeft","node","left","type","property","name","process","env","NODE_ENV","module","exports","mode","Object","keys","filter","e"],"mappings":"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","sourcesContent":["// @flow\nconst fs = require(`fs`)\nconst traverse = require(`@babel/traverse`).default\nconst get = require(`lodash/get`)\nconst { codeFrameColumns } = require(`@babel/code-frame`)\nconst { babelParseToAst } = require(`../utils/babel-parse-to-ast`)\nconst report = require(`gatsby-cli/lib/reporter`)\n\nconst testRequireError = require(`../utils/test-require-error`).default\n\nconst staticallyAnalyzeExports = (modulePath, resolver = require.resolve) => {\n  let absPath\n  const exportNames = []\n\n  try {\n    absPath = resolver(modulePath)\n  } catch (err) {\n    return exportNames // doesn't exist\n  }\n  const code = fs.readFileSync(absPath, `utf8`) // get file contents\n\n  let ast\n  try {\n    ast = babelParseToAst(code, absPath)\n  } catch (err) {\n    if (err instanceof SyntaxError) {\n      // Pretty print syntax errors\n      const codeFrame = codeFrameColumns(\n        code,\n        {\n          start: err.loc,\n        },\n        {\n          highlightCode: true,\n        }\n      )\n\n      report.panic(\n        `Syntax error in \"${absPath}\":\\n${err.message}\\n${codeFrame}`\n      )\n    } else {\n      // if it's not syntax error, just throw it\n      throw err\n    }\n  }\n\n  let isCommonJS = false\n  let isES6 = false\n\n  // extract names of exports from file\n  traverse(ast, {\n    // Check if the file is using ES6 imports\n    ImportDeclaration: function ImportDeclaration(astPath) {\n      isES6 = true\n    },\n\n    // get foo from `export const foo = bar`\n    ExportNamedDeclaration: function ExportNamedDeclaration(astPath) {\n      const exportName = get(\n        astPath,\n        `node.declaration.declarations[0].id.name`\n      )\n      isES6 = true\n      if (exportName) exportNames.push(exportName)\n    },\n\n    // get foo from `export { foo } from 'bar'`\n    // get foo from `export { foo }`\n    ExportSpecifier: function ExportSpecifier(astPath) {\n      const exportName = get(astPath, `node.exported.name`)\n      isES6 = true\n      if (exportName) exportNames.push(exportName)\n    },\n\n    AssignmentExpression: function AssignmentExpression(astPath) {\n      const nodeLeft = astPath.node.left\n\n      if (nodeLeft.type !== `MemberExpression`) return\n\n      // ignore marker property `__esModule`\n      if (get(nodeLeft, `property.name`) === `__esModule`) return\n\n      // get foo from `exports.foo = bar`\n      if (get(nodeLeft, `object.name`) === `exports`) {\n        isCommonJS = true\n        exportNames.push(nodeLeft.property.name)\n      }\n\n      // get foo from `module.exports.foo = bar`\n      if (\n        get(nodeLeft, `object.object.name`) === `module` &&\n        get(nodeLeft, `object.property.name`) === `exports`\n      ) {\n        isCommonJS = true\n        exportNames.push(nodeLeft.property.name)\n      }\n    },\n  })\n\n  if (isES6 && isCommonJS && process.env.NODE_ENV !== `test`) {\n    report.panic(\n      `This plugin file is using both CommonJS and ES6 module systems together which we don't support.\nYou'll need to edit the file to use just one or the other.\n\nplugin: ${modulePath}.js\n\nThis didn't cause a problem in Gatsby v1 so you might want to review the migration doc for this:\nhttps://gatsby.dev/no-mixed-modules\n      `\n    )\n  }\n  return exportNames\n}\n\n/**\n * Given a `require.resolve()` compatible path pointing to a JS module,\n * return an array listing the names of the module's exports.\n *\n * Returns [] for invalid paths and modules without exports.\n *\n * @param {string} modulePath\n * @param {string} mode\n * @param {function} resolver\n */\nmodule.exports = (\n  modulePath,\n  { mode = `analysis`, resolver = require.resolve } = {}\n) => {\n  if (mode === `require`) {\n    let absPath\n    try {\n      absPath = resolver(modulePath)\n      return Object.keys(require(modulePath)).filter(\n        exportName => exportName !== `__esModule`\n      )\n    } catch (e) {\n      if (!testRequireError(modulePath, e)) {\n        // if module exists, but requiring it cause errors,\n        // show the error to the user and terminate build\n        report.panic(`Error in \"${absPath}\":`, e)\n      }\n    }\n  } else {\n    return staticallyAnalyzeExports(modulePath, resolver)\n  }\n\n  return []\n}\n"],"file":"resolve-module-exports.js"}
\ No newline at end of file
+{"version":3,"sources":["../../src/bootstrap/resolve-module-exports.js"],"names":["fs","require","traverse","default","get","codeFrameColumns","babelParseToAst","report","module","exports","modulePath","resolver","resolve","absPath","exportNames","err","code","readFileSync","ast","SyntaxError","codeFrame","start","loc","highlightCode","panic","message","isCommonJS","isES6","ImportDeclaration","astPath","ExportNamedDeclaration","exportName","push","ExportSpecifier","AssignmentExpression","nodeLeft","node","left","type","property","name","process","env","NODE_ENV"],"mappings":"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","sourcesContent":["// @flow\nconst fs = require(`fs`)\nconst traverse = require(`@babel/traverse`).default\nconst get = require(`lodash/get`)\nconst { codeFrameColumns } = require(`@babel/code-frame`)\nconst { babelParseToAst } = require(`../utils/babel-parse-to-ast`)\nconst report = require(`gatsby-cli/lib/reporter`)\n\n/**\n * Given a `require.resolve()` compatible path pointing to a JS module,\n * return an array listing the names of the module's exports.\n *\n * Returns [] for invalid paths and modules without exports.\n *\n * @param {string} modulePath\n * @param {function} resolver\n */\nmodule.exports = (modulePath, resolver = require.resolve) => {\n  let absPath\n  const exportNames = []\n\n  try {\n    absPath = resolver(modulePath)\n  } catch (err) {\n    return exportNames // doesn't exist\n  }\n  const code = fs.readFileSync(absPath, `utf8`) // get file contents\n\n  let ast\n  try {\n    ast = babelParseToAst(code, absPath)\n  } catch (err) {\n    if (err instanceof SyntaxError) {\n      // Pretty print syntax errors\n      const codeFrame = codeFrameColumns(\n        code,\n        {\n          start: err.loc,\n        },\n        {\n          highlightCode: true,\n        }\n      )\n\n      report.panic(\n        `Syntax error in \"${absPath}\":\\n${err.message}\\n${codeFrame}`\n      )\n    } else {\n      // if it's not syntax error, just throw it\n      throw err\n    }\n  }\n\n  let isCommonJS = false\n  let isES6 = false\n\n  // extract names of exports from file\n  traverse(ast, {\n    // Check if the file is using ES6 imports\n    ImportDeclaration: function ImportDeclaration(astPath) {\n      isES6 = true\n    },\n\n    // get foo from `export const foo = bar`\n    ExportNamedDeclaration: function ExportNamedDeclaration(astPath) {\n      const exportName = get(\n        astPath,\n        `node.declaration.declarations[0].id.name`\n      )\n      isES6 = true\n      if (exportName) exportNames.push(exportName)\n    },\n\n    // get foo from `export { foo } from 'bar'`\n    // get foo from `export { foo }`\n    ExportSpecifier: function ExportSpecifier(astPath) {\n      const exportName = get(astPath, `node.exported.name`)\n      isES6 = true\n      if (exportName) exportNames.push(exportName)\n    },\n\n    AssignmentExpression: function AssignmentExpression(astPath) {\n      const nodeLeft = astPath.node.left\n\n      if (nodeLeft.type !== `MemberExpression`) return\n\n      // ignore marker property `__esModule`\n      if (get(nodeLeft, `property.name`) === `__esModule`) return\n\n      // get foo from `exports.foo = bar`\n      if (get(nodeLeft, `object.name`) === `exports`) {\n        isCommonJS = true\n        exportNames.push(nodeLeft.property.name)\n      }\n\n      // get foo from `module.exports.foo = bar`\n      if (\n        get(nodeLeft, `object.object.name`) === `module` &&\n        get(nodeLeft, `object.property.name`) === `exports`\n      ) {\n        isCommonJS = true\n        exportNames.push(nodeLeft.property.name)\n      }\n    },\n  })\n\n  if (isES6 && isCommonJS && process.env.NODE_ENV !== `test`) {\n    report.panic(\n      `This plugin file is using both CommonJS and ES6 module systems together which we don't support.\nYou'll need to edit the file to use just one or the other.\n\nplugin: ${modulePath}.js\n\nThis didn't cause a problem in Gatsby v1 so you might want to review the migration doc for this:\nhttps://gatsby.dev/no-mixed-modules\n      `\n    )\n  }\n  return exportNames\n}\n"],"file":"resolve-module-exports.js"}
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/bootstrap/write-js-requires.js b/node_modules/gatsby/dist/bootstrap/write-js-requires.js
new file mode 100644
index 0000000..0c2ae19
--- /dev/null
+++ b/node_modules/gatsby/dist/bootstrap/write-js-requires.js
@@ -0,0 +1,88 @@
+"use strict";
+
+var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
+
+var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
+
+var _path = require("../utils/path");
+
+const _ = require(`lodash`);
+
+const fs = require(`fs-extra`);
+
+const _require = require(`../redux`),
+      store = _require.store,
+      emitter = _require.emitter;
+
+const writeAll =
+/*#__PURE__*/
+function () {
+  var _ref = (0, _asyncToGenerator2.default)(function* (state) {
+    let program = state.program,
+        pages = state.pages,
+        matchPaths = state.matchPaths;
+    pages = [...pages.values()];
+    let components = [];
+    pages.forEach(p => {
+      components.push({
+        componentChunkName: p.componentChunkName,
+        component: p.component
+      });
+    });
+    components = _.uniqBy(components, c => c.componentChunkName); // Create file with sync requires of components/json files.
+
+    let syncRequires = `const { hot } = require("react-hot-loader/root")
+
+// prefer default export if available
+const preferDefault = m => m && m.default || m
+\n\n`;
+    syncRequires += `exports.components = {\n${components.map(c => `  "${c.componentChunkName}": hot(preferDefault(require("${(0, _path.joinPath)(c.component)}")))`).join(`,\n`)}
+}\n\n`; // Create file with async requires of components/json files.
+
+    let asyncRequires = `// prefer default export if available
+const preferDefault = m => m && m.default || m
+\n`;
+    asyncRequires += `exports.components = {\n${components.map(c => `  "${c.componentChunkName}": () => import("${(0, _path.joinPath)(c.component)}" /* webpackChunkName: "${c.componentChunkName}" */)`).join(`,\n`)}
+}\n\n`;
+
+    const writeAndMove = (file, data) => {
+      const destination = (0, _path.joinPath)(program.directory, `.cache`, file);
+      const tmp = `${destination}.${Date.now()}`;
+      return fs.writeFile(tmp, data).then(() => fs.move(tmp, destination, {
+        overwrite: true
+      }));
+    };
+
+    return yield Promise.all([// writeAndMove(`pages.json`, JSON.stringify(pagesData, null, 4)),
+    writeAndMove(`sync-requires.js`, syncRequires), writeAndMove(`async-requires.js`, asyncRequires), writeAndMove(`match-paths.json`, JSON.stringify(matchPaths, null, 4))]);
+  });
+
+  return function writeAll(_x) {
+    return _ref.apply(this, arguments);
+  };
+}();
+
+const debouncedWriteAll = _.debounce(() => writeAll(store.getState()), 500, {
+  leading: true
+});
+
+const startPageListener = () => {
+  emitter.on(`CREATE_PAGE`, () => {
+    debouncedWriteAll();
+  });
+  emitter.on(`CREATE_PAGE_END`, () => {
+    debouncedWriteAll();
+  });
+  emitter.on(`DELETE_PAGE`, () => {
+    debouncedWriteAll();
+  });
+  emitter.on(`DELETE_PAGE_BY_PATH`, () => {
+    debouncedWriteAll();
+  });
+};
+
+module.exports = {
+  writeAll,
+  startPageListener
+};
+//# sourceMappingURL=write-js-requires.js.map
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/bootstrap/write-js-requires.js.map b/node_modules/gatsby/dist/bootstrap/write-js-requires.js.map
new file mode 100644
index 0000000..a2270f9
--- /dev/null
+++ b/node_modules/gatsby/dist/bootstrap/write-js-requires.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":["../../src/bootstrap/write-js-requires.js"],"names":["_","require","fs","store","emitter","writeAll","state","program","pages","matchPaths","values","components","forEach","p","push","componentChunkName","component","uniqBy","c","syncRequires","map","join","asyncRequires","writeAndMove","file","data","destination","directory","tmp","Date","now","writeFile","then","move","overwrite","Promise","all","JSON","stringify","debouncedWriteAll","debounce","getState","leading","startPageListener","on","module","exports"],"mappings":"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","sourcesContent":["const _ = require(`lodash`)\nconst fs = require(`fs-extra`)\nimport { joinPath } from \"../utils/path\"\nconst { store, emitter } = require(`../redux`)\n\nconst writeAll = async state => {\n  let { program, pages, matchPaths } = state\n  pages = [...pages.values()]\n\n  let components = []\n  pages.forEach(p => {\n    components.push({\n      componentChunkName: p.componentChunkName,\n      component: p.component,\n    })\n  })\n\n  components = _.uniqBy(components, c => c.componentChunkName)\n\n  // Create file with sync requires of components/json files.\n  let syncRequires = `const { hot } = require(\"react-hot-loader/root\")\n\n// prefer default export if available\nconst preferDefault = m => m && m.default || m\n\\n\\n`\n  syncRequires += `exports.components = {\\n${components\n    .map(\n      c =>\n        `  \"${c.componentChunkName}\": hot(preferDefault(require(\"${joinPath(\n          c.component\n        )}\")))`\n    )\n    .join(`,\\n`)}\n}\\n\\n`\n\n  // Create file with async requires of components/json files.\n  let asyncRequires = `// prefer default export if available\nconst preferDefault = m => m && m.default || m\n\\n`\n  asyncRequires += `exports.components = {\\n${components\n    .map(\n      c =>\n        `  \"${c.componentChunkName}\": () => import(\"${joinPath(\n          c.component\n        )}\" /* webpackChunkName: \"${c.componentChunkName}\" */)`\n    )\n    .join(`,\\n`)}\n}\\n\\n`\n\n  const writeAndMove = (file, data) => {\n    const destination = joinPath(program.directory, `.cache`, file)\n    const tmp = `${destination}.${Date.now()}`\n    return fs\n      .writeFile(tmp, data)\n      .then(() => fs.move(tmp, destination, { overwrite: true }))\n  }\n\n  return await Promise.all([\n    // writeAndMove(`pages.json`, JSON.stringify(pagesData, null, 4)),\n    writeAndMove(`sync-requires.js`, syncRequires),\n    writeAndMove(`async-requires.js`, asyncRequires),\n    writeAndMove(`match-paths.json`, JSON.stringify(matchPaths, null, 4)),\n  ])\n}\n\nconst debouncedWriteAll = _.debounce(() => writeAll(store.getState()), 500, {\n  leading: true,\n})\n\nconst startPageListener = () => {\n  emitter.on(`CREATE_PAGE`, () => {\n    debouncedWriteAll()\n  })\n\n  emitter.on(`CREATE_PAGE_END`, () => {\n    debouncedWriteAll()\n  })\n\n  emitter.on(`DELETE_PAGE`, () => {\n    debouncedWriteAll()\n  })\n\n  emitter.on(`DELETE_PAGE_BY_PATH`, () => {\n    debouncedWriteAll()\n  })\n}\n\nmodule.exports = {\n  writeAll,\n  startPageListener,\n}\n"],"file":"write-js-requires.js"}
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/commands/build-html.js b/node_modules/gatsby/dist/commands/build-html.js
index f957fe0..6f20c5a 100644
--- a/node_modules/gatsby/dist/commands/build-html.js
+++ b/node_modules/gatsby/dist/commands/build-html.js
@@ -6,7 +6,7 @@ var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/
 
 const webpack = require(`webpack`);
 
-const fs = require(`fs-extra`);
+const fs = require(`fs`);
 
 const webpackConfig = require(`../utils/webpack.config`);
 
@@ -18,9 +18,9 @@ const renderHTMLQueue = require(`../utils/html-renderer-queue`);
 const telemetry = require(`gatsby-telemetry`);
 
 const runWebpack = compilerConfig => new Promise((resolve, reject) => {
-  webpack(compilerConfig).run((err, stats) => {
-    if (err) {
-      reject(err);
+  webpack(compilerConfig).run((e, stats) => {
+    if (e) {
+      reject(e);
     } else {
       resolve(stats);
     }
@@ -32,8 +32,7 @@ const doBuildRenderer =
 function () {
   var _ref = (0, _asyncToGenerator2.default)(function* (program, webpackConfig) {
     const directory = program.directory;
-    const stats = yield runWebpack(webpackConfig); // render-page.js is hard coded in webpack.config
-
+    const stats = yield runWebpack(webpackConfig);
     const outputFile = `${directory}/public/render-page.js`;
 
     if (stats.hasErrors()) {
@@ -41,8 +40,6 @@ function () {
       const error = webpackErrors.length ? createErrorFromString(webpackErrors[0], `${outputFile}.map`) : new Error(`There was an issue while building the site: ` + `\n\n${stats.toString()}`);
       throw error;
     }
-
-    return outputFile;
   });
 
   return function doBuildRenderer(_x, _x2) {
@@ -56,7 +53,7 @@ function () {
   var _ref2 = (0, _asyncToGenerator2.default)(function* (program, stage) {
     const directory = program.directory;
     const config = yield webpackConfig(program, directory, stage, null);
-    return yield doBuildRenderer(program, config);
+    yield doBuildRenderer(program, config);
   });
 
   return function buildRenderer(_x3, _x4) {
@@ -64,74 +61,43 @@ function () {
   };
 }();
 
-const deleteRenderer =
-/*#__PURE__*/
-function () {
-  var _ref3 = (0, _asyncToGenerator2.default)(function* (rendererPath) {
-    try {
-      yield fs.remove(rendererPath);
-      yield fs.remove(`${rendererPath}.map`);
-    } catch (e) {// This function will fail on Windows with no further consequences.
-    }
-  });
-
-  return function deleteRenderer(_x5) {
-    return _ref3.apply(this, arguments);
-  };
-}();
+function buildPages(_x5) {
+  return _buildPages.apply(this, arguments);
+}
 
-const doBuildPages =
-/*#__PURE__*/
-function () {
-  var _ref4 = (0, _asyncToGenerator2.default)(function* ({
-    rendererPath,
+function _buildPages() {
+  _buildPages = (0, _asyncToGenerator2.default)(function* ({
+    program,
     pagePaths,
     activity
   }) {
+    const directory = program.directory;
     telemetry.decorateEvent(`BUILD_END`, {
       siteMeasurements: {
         pagesCount: pagePaths.length
       }
     });
+    const outputFile = `${directory}/public/render-page.js`;
 
     try {
-      yield renderHTMLQueue(rendererPath, pagePaths, activity);
+      yield renderHTMLQueue(outputFile, pagePaths, activity);
+
+      try {
+        yield fs.unlink(outputFile);
+        yield fs.unlink(`${outputFile}.map`);
+      } catch (e) {// This function will fail on Windows with no further consequences.
+      }
     } catch (e) {
-      const prettyError = createErrorFromString(e.stack, `${rendererPath}.map`);
+      const prettyError = createErrorFromString(e.stack, `${outputFile}.map`);
       prettyError.context = e.context;
       throw prettyError;
     }
   });
-
-  return function doBuildPages(_x6) {
-    return _ref4.apply(this, arguments);
-  };
-}();
-
-const buildPages =
-/*#__PURE__*/
-function () {
-  var _ref5 = (0, _asyncToGenerator2.default)(function* ({
-    program,
-    stage,
-    pagePaths,
-    activity
-  }) {
-    const rendererPath = yield buildRenderer(program, stage);
-    yield doBuildPages({
-      rendererPath,
-      pagePaths,
-      activity
-    });
-    yield deleteRenderer(rendererPath);
-  });
-
-  return function buildPages(_x7) {
-    return _ref5.apply(this, arguments);
-  };
-}();
+  return _buildPages.apply(this, arguments);
+}
 
 module.exports = {
+  buildRenderer,
   buildPages
 };
 //# sourceMappingURL=build-html.js.map
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/commands/build-html.js.map b/node_modules/gatsby/dist/commands/build-html.js.map
index 4e74eba..d68bab5 100644
--- a/node_modules/gatsby/dist/commands/build-html.js.map
+++ b/node_modules/gatsby/dist/commands/build-html.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/commands/build-html.js"],"names":["webpack","require","fs","webpackConfig","createErrorFromString","renderHTMLQueue","telemetry","runWebpack","compilerConfig","Promise","resolve","reject","run","err","stats","doBuildRenderer","program","directory","outputFile","hasErrors","webpackErrors","toJson","errors","filter","Boolean","error","length","Error","toString","buildRenderer","stage","config","deleteRenderer","rendererPath","remove","e","doBuildPages","pagePaths","activity","decorateEvent","siteMeasurements","pagesCount","prettyError","stack","context","buildPages","module","exports"],"mappings":"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","sourcesContent":["/* @flow */\nconst webpack = require(`webpack`)\nconst fs = require(`fs-extra`)\n\nconst webpackConfig = require(`../utils/webpack.config`)\nconst { createErrorFromString } = require(`gatsby-cli/lib/reporter/errors`)\nconst renderHTMLQueue = require(`../utils/html-renderer-queue`)\nconst telemetry = require(`gatsby-telemetry`)\n\nconst runWebpack = compilerConfig =>\n  new Promise((resolve, reject) => {\n    webpack(compilerConfig).run((err, stats) => {\n      if (err) {\n        reject(err)\n      } else {\n        resolve(stats)\n      }\n    })\n  })\n\nconst doBuildRenderer = async (program, webpackConfig) => {\n  const { directory } = program\n  const stats = await runWebpack(webpackConfig)\n  // render-page.js is hard coded in webpack.config\n  const outputFile = `${directory}/public/render-page.js`\n  if (stats.hasErrors()) {\n    let webpackErrors = stats.toJson().errors.filter(Boolean)\n    const error = webpackErrors.length\n      ? createErrorFromString(webpackErrors[0], `${outputFile}.map`)\n      : new Error(\n          `There was an issue while building the site: ` +\n            `\\n\\n${stats.toString()}`\n        )\n    throw error\n  }\n  return outputFile\n}\n\nconst buildRenderer = async (program, stage) => {\n  const { directory } = program\n  const config = await webpackConfig(program, directory, stage, null)\n  return await doBuildRenderer(program, config)\n}\n\nconst deleteRenderer = async rendererPath => {\n  try {\n    await fs.remove(rendererPath)\n    await fs.remove(`${rendererPath}.map`)\n  } catch (e) {\n    // This function will fail on Windows with no further consequences.\n  }\n}\n\nconst doBuildPages = async ({ rendererPath, pagePaths, activity }) => {\n  telemetry.decorateEvent(`BUILD_END`, {\n    siteMeasurements: { pagesCount: pagePaths.length },\n  })\n\n  try {\n    await renderHTMLQueue(rendererPath, pagePaths, activity)\n  } catch (e) {\n    const prettyError = createErrorFromString(e.stack, `${rendererPath}.map`)\n    prettyError.context = e.context\n    throw prettyError\n  }\n}\n\nconst buildPages = async ({ program, stage, pagePaths, activity }) => {\n  const rendererPath = await buildRenderer(program, stage)\n  await doBuildPages({ rendererPath, pagePaths, activity })\n  await deleteRenderer(rendererPath)\n}\n\nmodule.exports = {\n  buildPages,\n}\n"],"file":"build-html.js"}
\ No newline at end of file
+{"version":3,"sources":["../../src/commands/build-html.js"],"names":["webpack","require","fs","webpackConfig","createErrorFromString","renderHTMLQueue","telemetry","runWebpack","compilerConfig","Promise","resolve","reject","run","e","stats","doBuildRenderer","program","directory","outputFile","hasErrors","webpackErrors","toJson","errors","filter","Boolean","error","length","Error","toString","buildRenderer","stage","config","buildPages","pagePaths","activity","decorateEvent","siteMeasurements","pagesCount","unlink","prettyError","stack","context","module","exports"],"mappings":"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","sourcesContent":["/* @flow */\nconst webpack = require(`webpack`)\nconst fs = require(`fs`)\n\nconst webpackConfig = require(`../utils/webpack.config`)\nconst { createErrorFromString } = require(`gatsby-cli/lib/reporter/errors`)\nconst renderHTMLQueue = require(`../utils/html-renderer-queue`)\nconst telemetry = require(`gatsby-telemetry`)\n\nconst runWebpack = compilerConfig =>\n  new Promise((resolve, reject) => {\n    webpack(compilerConfig).run((e, stats) => {\n      if (e) {\n        reject(e)\n      } else {\n        resolve(stats)\n      }\n    })\n  })\n\nconst doBuildRenderer = async (program, webpackConfig) => {\n  const { directory } = program\n  const stats = await runWebpack(webpackConfig)\n  const outputFile = `${directory}/public/render-page.js`\n  if (stats.hasErrors()) {\n    let webpackErrors = stats.toJson().errors.filter(Boolean)\n    const error = webpackErrors.length\n      ? createErrorFromString(webpackErrors[0], `${outputFile}.map`)\n      : new Error(\n          `There was an issue while building the site: ` +\n            `\\n\\n${stats.toString()}`\n        )\n    throw error\n  }\n}\n\nconst buildRenderer = async (program, stage) => {\n  const { directory } = program\n  const config = await webpackConfig(program, directory, stage, null)\n  await doBuildRenderer(program, config)\n}\n\nasync function buildPages({ program, pagePaths, activity }) {\n  const { directory } = program\n  telemetry.decorateEvent(`BUILD_END`, {\n    siteMeasurements: { pagesCount: pagePaths.length },\n  })\n\n  const outputFile = `${directory}/public/render-page.js`\n  try {\n    await renderHTMLQueue(outputFile, pagePaths, activity)\n    try {\n      await fs.unlink(outputFile)\n      await fs.unlink(`${outputFile}.map`)\n    } catch (e) {\n      // This function will fail on Windows with no further consequences.\n    }\n  } catch (e) {\n    const prettyError = createErrorFromString(e.stack, `${outputFile}.map`)\n    prettyError.context = e.context\n    throw prettyError\n  }\n}\n\nmodule.exports = {\n  buildRenderer,\n  buildPages,\n}\n"],"file":"build-html.js"}
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/commands/build-javascript.js b/node_modules/gatsby/dist/commands/build-javascript.js
index 12487b5..349f0bd 100644
--- a/node_modules/gatsby/dist/commands/build-javascript.js
+++ b/node_modules/gatsby/dist/commands/build-javascript.js
@@ -28,7 +28,7 @@ function () {
           return;
         }
 
-        resolve();
+        resolve(stats);
       });
     });
   });
diff --git a/node_modules/gatsby/dist/commands/build-javascript.js.map b/node_modules/gatsby/dist/commands/build-javascript.js.map
index 9a12ee1..9ed3093 100644
--- a/node_modules/gatsby/dist/commands/build-javascript.js.map
+++ b/node_modules/gatsby/dist/commands/build-javascript.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/commands/build-javascript.js"],"names":["webpack","require","webpackConfig","module","exports","program","directory","compilerConfig","Promise","resolve","reject","run","err","stats","jsonStats","toJson","errors","length"],"mappings":";;;;;;AACA,MAAMA,OAAO,GAAGC,OAAO,CAAE,SAAF,CAAvB;;AACA,MAAMC,aAAa,GAAGD,OAAO,CAAE,yBAAF,CAA7B;;AAEAE,MAAM,CAACC,OAAP;AAAA;AAAA;AAAA,6CAAiB,WAAMC,OAAN,EAAiB;AAAA,UACxBC,SADwB,GACVD,OADU,CACxBC,SADwB;AAGhC,UAAMC,cAAc,SAASL,aAAa,CACxCG,OADwC,EAExCC,SAFwC,EAGvC,kBAHuC,CAA1C;AAMA,WAAO,IAAIE,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCV,MAAAA,OAAO,CAACO,cAAD,CAAP,CAAwBI,GAAxB,CAA4B,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAC1C,YAAID,GAAJ,EAAS;AACPF,UAAAA,MAAM,CAACE,GAAD,CAAN;AACA;AACD;;AAED,cAAME,SAAS,GAAGD,KAAK,CAACE,MAAN,EAAlB;;AACA,YAAID,SAAS,CAACE,MAAV,IAAoBF,SAAS,CAACE,MAAV,CAAiBC,MAAjB,GAA0B,CAAlD,EAAqD;AACnDP,UAAAA,MAAM,CAACI,SAAS,CAACE,MAAX,CAAN;AACA;AACD;;AAEDP,QAAAA,OAAO;AACR,OAbD;AAcD,KAfM,CAAP;AAgBD,GAzBD;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["/* @flow */\nconst webpack = require(`webpack`)\nconst webpackConfig = require(`../utils/webpack.config`)\n\nmodule.exports = async program => {\n  const { directory } = program\n\n  const compilerConfig = await webpackConfig(\n    program,\n    directory,\n    `build-javascript`\n  )\n\n  return new Promise((resolve, reject) => {\n    webpack(compilerConfig).run((err, stats) => {\n      if (err) {\n        reject(err)\n        return\n      }\n\n      const jsonStats = stats.toJson()\n      if (jsonStats.errors && jsonStats.errors.length > 0) {\n        reject(jsonStats.errors)\n        return\n      }\n\n      resolve()\n    })\n  })\n}\n"],"file":"build-javascript.js"}
\ No newline at end of file
+{"version":3,"sources":["../../src/commands/build-javascript.js"],"names":["webpack","require","webpackConfig","module","exports","program","directory","compilerConfig","Promise","resolve","reject","run","err","stats","jsonStats","toJson","errors","length"],"mappings":";;;;;;AACA,MAAMA,OAAO,GAAGC,OAAO,CAAE,SAAF,CAAvB;;AACA,MAAMC,aAAa,GAAGD,OAAO,CAAE,yBAAF,CAA7B;;AAEAE,MAAM,CAACC,OAAP;AAAA;AAAA;AAAA,6CAAiB,WAAMC,OAAN,EAAiB;AAAA,UACxBC,SADwB,GACVD,OADU,CACxBC,SADwB;AAGhC,UAAMC,cAAc,SAASL,aAAa,CACxCG,OADwC,EAExCC,SAFwC,EAGvC,kBAHuC,CAA1C;AAMA,WAAO,IAAIE,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCV,MAAAA,OAAO,CAACO,cAAD,CAAP,CAAwBI,GAAxB,CAA4B,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAC1C,YAAID,GAAJ,EAAS;AACPF,UAAAA,MAAM,CAACE,GAAD,CAAN;AACA;AACD;;AAED,cAAME,SAAS,GAAGD,KAAK,CAACE,MAAN,EAAlB;;AACA,YAAID,SAAS,CAACE,MAAV,IAAoBF,SAAS,CAACE,MAAV,CAAiBC,MAAjB,GAA0B,CAAlD,EAAqD;AACnDP,UAAAA,MAAM,CAACI,SAAS,CAACE,MAAX,CAAN;AACA;AACD;;AAEDP,QAAAA,OAAO,CAACI,KAAD,CAAP;AACD,OAbD;AAcD,KAfM,CAAP;AAgBD,GAzBD;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["/* @flow */\nconst webpack = require(`webpack`)\nconst webpackConfig = require(`../utils/webpack.config`)\n\nmodule.exports = async program => {\n  const { directory } = program\n\n  const compilerConfig = await webpackConfig(\n    program,\n    directory,\n    `build-javascript`\n  )\n\n  return new Promise((resolve, reject) => {\n    webpack(compilerConfig).run((err, stats) => {\n      if (err) {\n        reject(err)\n        return\n      }\n\n      const jsonStats = stats.toJson()\n      if (jsonStats.errors && jsonStats.errors.length > 0) {\n        reject(jsonStats.errors)\n        return\n      }\n\n      resolve(stats)\n    })\n  })\n}\n"],"file":"build-javascript.js"}
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/commands/build.js b/node_modules/gatsby/dist/commands/build.js
index 8617862..04389d3 100644
--- a/node_modules/gatsby/dist/commands/build.js
+++ b/node_modules/gatsby/dist/commands/build.js
@@ -4,6 +4,10 @@ var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefau
 
 var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
 
+const _ = require(`lodash`);
+
+const path = require(`path`);
+
 const report = require(`gatsby-cli/lib/reporter`);
 
 const buildHTML = require(`./build-html`);
@@ -21,8 +25,6 @@ const _require2 = require(`../utils/tracer`),
       initTracer = _require2.initTracer,
       stopTracer = _require2.stopTracer;
 
-const db = require(`../db`);
-
 const chalk = require(`chalk`);
 
 const tracer = require(`opentracing`).globalTracer();
@@ -31,18 +33,48 @@ const signalExit = require(`signal-exit`);
 
 const telemetry = require(`gatsby-telemetry`);
 
+const queryRunner = require(`../query`);
+
 const _require3 = require(`../redux`),
-      store = _require3.store;
+      store = _require3.store,
+      emitter = _require3.emitter;
+
+const db = require(`../db`);
+
+const pageDataUtil = require(`../utils/page-data`);
 
 function reportFailure(msg, err) {
   report.log(``);
   report.panic(msg, err);
 }
 
+const handleChangedCompilationHash =
+/*#__PURE__*/
+function () {
+  var _ref = (0, _asyncToGenerator2.default)(function* (state, pageQueryIds, newHash) {
+    const publicDir = path.join(state.program.directory, `public`);
+
+    const stalePaths = _.difference([...state.pages.keys()], pageQueryIds);
+
+    yield pageDataUtil.rewriteCompilationHashes({
+      publicDir
+    }, stalePaths, newHash);
+    store.dispatch({
+      type: `SET_WEBPACK_COMPILATION_HASH`,
+      payload: newHash
+    });
+  });
+
+  return function handleChangedCompilationHash(_x, _x2, _x3) {
+    return _ref.apply(this, arguments);
+  };
+}();
+
 module.exports =
 /*#__PURE__*/
 function () {
   var _build = (0, _asyncToGenerator2.default)(function* (program) {
+    let activity;
     initTracer(program.openTracingConfigFile);
     telemetry.trackCli(`BUILD_START`);
     signalExit(() => {
@@ -51,12 +83,25 @@ function () {
     const buildSpan = tracer.startSpan(`build`);
     buildSpan.setTag(`directory`, program.directory);
 
-    const _ref = yield bootstrap(Object.assign({}, program, {
+    const _ref2 = yield bootstrap(Object.assign({}, program, {
       parentSpan: buildSpan
     })),
-          graphqlRunner = _ref.graphqlRunner;
+          graphqlRunner = _ref2.graphqlRunner;
 
-    yield db.saveState();
+    const queryIds = queryRunner.calcBootstrapDirtyQueryIds(store.getState());
+
+    const _queryRunner$groupQue = queryRunner.groupQueryIds(queryIds),
+          staticQueryIds = _queryRunner$groupQue.staticQueryIds,
+          pageQueryIds = _queryRunner$groupQue.pageQueryIds;
+
+    activity = report.activityTimer(`run static queries`, {
+      parentSpan: buildSpan
+    });
+    activity.start();
+    yield queryRunner.processStaticQueries(staticQueryIds, {
+      activity
+    });
+    activity.end();
     yield apiRunnerNode(`onPreBuild`, {
       graphql: graphqlRunner,
       parentSpan: buildSpan
@@ -64,25 +109,60 @@ function () {
     // an equivalent static directory within public.
 
     copyStaticDirs();
-    let activity;
     activity = report.activityTimer(`Building production JavaScript and CSS bundles`, {
       parentSpan: buildSpan
     });
     activity.start();
-    yield buildProductionBundle(program).catch(err => {
+    const stats = yield buildProductionBundle(program).catch(err => {
       reportFailure(`Generating JavaScript bundles failed`, err);
     });
     activity.end();
+    const webpackCompilationHash = stats.hash;
+
+    if (webpackCompilationHash !== store.getState().webpackCompilationHash) {
+      activity = report.activityTimer(`Rewriting compilation hashes`, {
+        parentSpan: buildSpan
+      });
+      activity.start();
+      yield handleChangedCompilationHash(store.getState(), pageQueryIds, webpackCompilationHash);
+      activity.end();
+    }
+
+    activity = report.activityTimer(`run page queries`);
+    activity.start();
+    yield queryRunner.processPageQueries(pageQueryIds, {
+      activity
+    });
+    activity.end();
+
+    const waitJobsFinished = () => new Promise((resolve, reject) => {
+      const onEndJob = () => {
+        if (store.getState().jobs.active.length === 0) {
+          resolve();
+          emitter.off(`END_JOB`, onEndJob);
+        }
+      };
+
+      emitter.on(`END_JOB`, onEndJob);
+      onEndJob();
+    });
+
+    yield waitJobsFinished();
+    yield db.saveState();
+
+    require(`../redux/actions`).boundActionCreators.setProgramStatus(`BOOTSTRAP_QUERY_RUNNING_FINISHED`);
+
     activity = report.activityTimer(`Building static HTML for pages`, {
       parentSpan: buildSpan
     });
     activity.start();
 
     try {
+      yield buildHTML.buildRenderer(program, `build-html`);
+      const pagePaths = [...store.getState().pages.keys()];
       yield buildHTML.buildPages({
         program,
-        stage: `build-html`,
-        pagePaths: [...store.getState().pages.keys()],
+        pagePaths,
         activity
       });
     } catch (err) {
@@ -103,7 +183,7 @@ function () {
     yield stopTracer();
   });
 
-  return function build(_x) {
+  return function build(_x4) {
     return _build.apply(this, arguments);
   };
 }();
diff --git a/node_modules/gatsby/dist/commands/build.js.map b/node_modules/gatsby/dist/commands/build.js.map
index 3fb72ec..b370d2a 100644
--- a/node_modules/gatsby/dist/commands/build.js.map
+++ b/node_modules/gatsby/dist/commands/build.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/commands/build.js"],"names":["report","require","buildHTML","buildProductionBundle","bootstrap","apiRunnerNode","copyStaticDirs","initTracer","stopTracer","db","chalk","tracer","globalTracer","signalExit","telemetry","store","reportFailure","msg","err","log","panic","module","exports","program","openTracingConfigFile","trackCli","buildSpan","startSpan","setTag","directory","parentSpan","graphqlRunner","saveState","graphql","activity","activityTimer","start","catch","end","buildPages","stage","pagePaths","getState","pages","keys","stripIndent","context","path","bold","info","process","uptime","finish","build"],"mappings":"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","sourcesContent":["/* @flow */\n\nconst report = require(`gatsby-cli/lib/reporter`)\nconst buildHTML = require(`./build-html`)\nconst buildProductionBundle = require(`./build-javascript`)\nconst bootstrap = require(`../bootstrap`)\nconst apiRunnerNode = require(`../utils/api-runner-node`)\nconst { copyStaticDirs } = require(`../utils/get-static-dir`)\nconst { initTracer, stopTracer } = require(`../utils/tracer`)\nconst db = require(`../db`)\nconst chalk = require(`chalk`)\nconst tracer = require(`opentracing`).globalTracer()\nconst signalExit = require(`signal-exit`)\nconst telemetry = require(`gatsby-telemetry`)\nconst { store } = require(`../redux`)\n\nfunction reportFailure(msg, err: Error) {\n  report.log(``)\n  report.panic(msg, err)\n}\n\ntype BuildArgs = {\n  directory: string,\n  sitePackageJson: object,\n  prefixPaths: boolean,\n  noUglify: boolean,\n  openTracingConfigFile: string,\n}\n\nmodule.exports = async function build(program: BuildArgs) {\n  initTracer(program.openTracingConfigFile)\n\n  telemetry.trackCli(`BUILD_START`)\n  signalExit(() => {\n    telemetry.trackCli(`BUILD_END`)\n  })\n\n  const buildSpan = tracer.startSpan(`build`)\n  buildSpan.setTag(`directory`, program.directory)\n\n  const { graphqlRunner } = await bootstrap({\n    ...program,\n    parentSpan: buildSpan,\n  })\n\n  await db.saveState()\n\n  await apiRunnerNode(`onPreBuild`, {\n    graphql: graphqlRunner,\n    parentSpan: buildSpan,\n  })\n\n  // Copy files from the static directory to\n  // an equivalent static directory within public.\n  copyStaticDirs()\n\n  let activity\n  activity = report.activityTimer(\n    `Building production JavaScript and CSS bundles`,\n    { parentSpan: buildSpan }\n  )\n  activity.start()\n  await buildProductionBundle(program).catch(err => {\n    reportFailure(`Generating JavaScript bundles failed`, err)\n  })\n  activity.end()\n\n  activity = report.activityTimer(`Building static HTML for pages`, {\n    parentSpan: buildSpan,\n  })\n  activity.start()\n  try {\n    await buildHTML.buildPages({\n      program,\n      stage: `build-html`,\n      pagePaths: [...store.getState().pages.keys()],\n      activity,\n    })\n  } catch (err) {\n    reportFailure(\n      report.stripIndent`\n        Building static HTML failed${\n          err.context && err.context.path\n            ? ` for path \"${chalk.bold(err.context.path)}\"`\n            : ``\n        }\n\n        See our docs page on debugging HTML builds for help https://gatsby.dev/debug-html\n      `,\n      err\n    )\n  }\n  activity.end()\n\n  await apiRunnerNode(`onPostBuild`, {\n    graphql: graphqlRunner,\n    parentSpan: buildSpan,\n  })\n\n  report.info(`Done building in ${process.uptime()} sec`)\n\n  buildSpan.finish()\n  await stopTracer()\n}\n"],"file":"build.js"}
\ No newline at end of file
+{"version":3,"sources":["../../src/commands/build.js"],"names":["_","require","path","report","buildHTML","buildProductionBundle","bootstrap","apiRunnerNode","copyStaticDirs","initTracer","stopTracer","chalk","tracer","globalTracer","signalExit","telemetry","queryRunner","store","emitter","db","pageDataUtil","reportFailure","msg","err","log","panic","handleChangedCompilationHash","state","pageQueryIds","newHash","publicDir","join","program","directory","stalePaths","difference","pages","keys","rewriteCompilationHashes","dispatch","type","payload","module","exports","activity","openTracingConfigFile","trackCli","buildSpan","startSpan","setTag","parentSpan","graphqlRunner","queryIds","calcBootstrapDirtyQueryIds","getState","groupQueryIds","staticQueryIds","activityTimer","start","processStaticQueries","end","graphql","stats","catch","webpackCompilationHash","hash","processPageQueries","waitJobsFinished","Promise","resolve","reject","onEndJob","jobs","active","length","off","on","saveState","boundActionCreators","setProgramStatus","buildRenderer","pagePaths","buildPages","stripIndent","context","bold","info","process","uptime","finish","build"],"mappings":"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","sourcesContent":["/* @flow */\n\nconst _ = require(`lodash`)\nconst path = require(`path`)\nconst report = require(`gatsby-cli/lib/reporter`)\nconst buildHTML = require(`./build-html`)\nconst buildProductionBundle = require(`./build-javascript`)\nconst bootstrap = require(`../bootstrap`)\nconst apiRunnerNode = require(`../utils/api-runner-node`)\nconst { copyStaticDirs } = require(`../utils/get-static-dir`)\nconst { initTracer, stopTracer } = require(`../utils/tracer`)\nconst chalk = require(`chalk`)\nconst tracer = require(`opentracing`).globalTracer()\nconst signalExit = require(`signal-exit`)\nconst telemetry = require(`gatsby-telemetry`)\nconst queryRunner = require(`../query`)\nconst { store, emitter } = require(`../redux`)\nconst db = require(`../db`)\nconst pageDataUtil = require(`../utils/page-data`)\n\nfunction reportFailure(msg, err: Error) {\n  report.log(``)\n  report.panic(msg, err)\n}\n\ntype BuildArgs = {\n  directory: string,\n  sitePackageJson: object,\n  prefixPaths: boolean,\n  noUglify: boolean,\n  openTracingConfigFile: string,\n}\n\nconst handleChangedCompilationHash = async (state, pageQueryIds, newHash) => {\n  const publicDir = path.join(state.program.directory, `public`)\n  const stalePaths = _.difference([...state.pages.keys()], pageQueryIds)\n  await pageDataUtil.rewriteCompilationHashes(\n    { publicDir },\n    stalePaths,\n    newHash\n  )\n  store.dispatch({\n    type: `SET_WEBPACK_COMPILATION_HASH`,\n    payload: newHash,\n  })\n}\n\nmodule.exports = async function build(program: BuildArgs) {\n  let activity\n  initTracer(program.openTracingConfigFile)\n\n  telemetry.trackCli(`BUILD_START`)\n  signalExit(() => {\n    telemetry.trackCli(`BUILD_END`)\n  })\n\n  const buildSpan = tracer.startSpan(`build`)\n  buildSpan.setTag(`directory`, program.directory)\n\n  const { graphqlRunner } = await bootstrap({\n    ...program,\n    parentSpan: buildSpan,\n  })\n\n  const queryIds = queryRunner.calcBootstrapDirtyQueryIds(store.getState())\n  const { staticQueryIds, pageQueryIds } = queryRunner.groupQueryIds(queryIds)\n\n  activity = report.activityTimer(`run static queries`, {\n    parentSpan: buildSpan,\n  })\n  activity.start()\n  await queryRunner.processStaticQueries(staticQueryIds, { activity })\n  activity.end()\n\n  await apiRunnerNode(`onPreBuild`, {\n    graphql: graphqlRunner,\n    parentSpan: buildSpan,\n  })\n\n  // Copy files from the static directory to\n  // an equivalent static directory within public.\n  copyStaticDirs()\n\n  activity = report.activityTimer(\n    `Building production JavaScript and CSS bundles`,\n    { parentSpan: buildSpan }\n  )\n  activity.start()\n  const stats = await buildProductionBundle(program).catch(err => {\n    reportFailure(`Generating JavaScript bundles failed`, err)\n  })\n  activity.end()\n\n  const webpackCompilationHash = stats.hash\n  if (webpackCompilationHash !== store.getState().webpackCompilationHash) {\n    activity = report.activityTimer(`Rewriting compilation hashes`, {\n      parentSpan: buildSpan,\n    })\n    activity.start()\n    await handleChangedCompilationHash(\n      store.getState(),\n      pageQueryIds,\n      webpackCompilationHash\n    )\n    activity.end()\n  }\n\n  activity = report.activityTimer(`run page queries`)\n  activity.start()\n  await queryRunner.processPageQueries(pageQueryIds, { activity })\n  activity.end()\n\n  const waitJobsFinished = () =>\n    new Promise((resolve, reject) => {\n      const onEndJob = () => {\n        if (store.getState().jobs.active.length === 0) {\n          resolve()\n          emitter.off(`END_JOB`, onEndJob)\n        }\n      }\n      emitter.on(`END_JOB`, onEndJob)\n      onEndJob()\n    })\n\n  await waitJobsFinished()\n\n  await db.saveState()\n\n  require(`../redux/actions`).boundActionCreators.setProgramStatus(\n    `BOOTSTRAP_QUERY_RUNNING_FINISHED`\n  )\n\n  activity = report.activityTimer(`Building static HTML for pages`, {\n    parentSpan: buildSpan,\n  })\n  activity.start()\n  try {\n    await buildHTML.buildRenderer(program, `build-html`)\n    const pagePaths = [...store.getState().pages.keys()]\n    await buildHTML.buildPages({ program, pagePaths, activity })\n  } catch (err) {\n    reportFailure(\n      report.stripIndent`\n        Building static HTML failed${\n          err.context && err.context.path\n            ? ` for path \"${chalk.bold(err.context.path)}\"`\n            : ``\n        }\n\n        See our docs page on debugging HTML builds for help https://gatsby.dev/debug-html\n      `,\n      err\n    )\n  }\n  activity.end()\n\n  await apiRunnerNode(`onPostBuild`, {\n    graphql: graphqlRunner,\n    parentSpan: buildSpan,\n  })\n\n  report.info(`Done building in ${process.uptime()} sec`)\n\n  buildSpan.finish()\n  await stopTracer()\n}\n"],"file":"build.js"}
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/commands/develop.js b/node_modules/gatsby/dist/commands/develop.js
index 4d80db5..7fe5a9f 100644
--- a/node_modules/gatsby/dist/commands/develop.js
+++ b/node_modules/gatsby/dist/commands/develop.js
@@ -23,7 +23,7 @@ const graphqlPlayground = require(`graphql-playground-middleware-express`).defau
 const _require = require(`graphql`),
       formatError = _require.formatError;
 
-const got = require(`got`);
+const request = require(`request`);
 
 const rl = require(`readline`);
 
@@ -34,7 +34,8 @@ const webpackConfig = require(`../utils/webpack.config`);
 const bootstrap = require(`../bootstrap`);
 
 const _require2 = require(`../redux`),
-      store = _require2.store;
+      store = _require2.store,
+      emitter = _require2.emitter;
 
 const _require3 = require(`../utils/get-static-dir`),
       syncStaticDir = _require3.syncStaticDir;
@@ -69,19 +70,19 @@ const _require5 = require(`../utils/tracer`),
 
 const apiRunnerNode = require(`../utils/api-runner-node`);
 
-const db = require(`../db`);
-
 const telemetry = require(`gatsby-telemetry`);
 
-const detectPortInUseAndPrompt = require(`../utils/detect-port-in-use-and-prompt`);
+const queryRunner = require(`../query`);
 
-const onExit = require(`signal-exit`);
+const queryWatcher = require(`../query/query-watcher`);
 
-const queryUtil = require(`../query`);
+const writeJsRequires = require(`../bootstrap/write-js-requires`);
 
-const queryQueue = require(`../query/queue`);
+const db = require(`../db`);
 
-const queryWatcher = require(`../query/query-watcher`); // const isInteractive = process.stdout.isTTY
+const detectPortInUseAndPrompt = require(`../utils/detect-port-in-use-and-prompt`);
+
+const onExit = require(`signal-exit`); // const isInteractive = process.stdout.isTTY
 // Watch the static directory and copy files to public as they're added or
 // changed. Wait 10 seconds so copying doesn't interfere with the regular
 // bootstrap.
@@ -98,11 +99,106 @@ const rlInterface = rl.createInterface({
 rlInterface.on(`SIGINT`, () => {
   process.exit();
 });
+
+function startQueryListener() {
+  const processing = new Set();
+  const waiting = new Map();
+  const betterQueueOptions = {
+    priority: (job, cb) => {
+      const activePaths = Array.from(websocketManager.activePaths.values());
+
+      if (job.id && activePaths.includes(job.id)) {
+        cb(null, 10);
+      } else {
+        cb(null, 1);
+      }
+    },
+    merge: (oldTask, newTask, cb) => {
+      cb(null, newTask);
+    },
+    filter: (job, cb) => {
+      if (processing.has(job.id)) {
+        waiting.set(job.id, job);
+        cb(`already running`);
+      } else {
+        cb(null, job);
+      }
+    }
+  };
+
+  const postHandler =
+  /*#__PURE__*/
+  function () {
+    var _ref = (0, _asyncToGenerator2.default)(function* ({
+      queryJob,
+      result
+    }) {
+      if (queryJob.isPage) {
+        websocketManager.emitPageData(Object.assign({}, result, {
+          id: queryJob.id
+        }));
+      } else {
+        websocketManager.emitStaticQueryData(Object.assign({}, result, {
+          id: queryJob.id
+        }));
+      }
+
+      processing.delete(queryJob.id);
+
+      if (waiting.has(queryJob.id)) {
+        queue.push(waiting.get(queryJob.id));
+        waiting.delete(queryJob.id);
+      }
+    });
+
+    return function postHandler(_x) {
+      return _ref.apply(this, arguments);
+    };
+  }();
+
+  const queue = queryRunner.createQueue({
+    postHandler,
+    betterQueueOptions
+  });
+  queryRunner.startListener(queue);
+}
+
+const runPageQueries =
+/*#__PURE__*/
+function () {
+  var _ref2 = (0, _asyncToGenerator2.default)(function* (queryIds) {
+    let activity = report.activityTimer(`run page queries`);
+    activity.start();
+    yield queryRunner.processPageQueries(queryIds, {
+      activity
+    });
+    activity.end();
+
+    require(`../redux/actions`).boundActionCreators.setProgramStatus(`BOOTSTRAP_QUERY_RUNNING_FINISHED`);
+  });
+
+  return function runPageQueries(_x2) {
+    return _ref2.apply(this, arguments);
+  };
+}();
+
+const waitJobsFinished = () => new Promise((resolve, reject) => {
+  const onEndJob = () => {
+    if (store.getState().jobs.active.length === 0) {
+      resolve();
+      emitter.off(`END_JOB`, onEndJob);
+    }
+  };
+
+  emitter.on(`END_JOB`, onEndJob);
+  onEndJob();
+});
+
 onExit(() => {
   telemetry.trackCli(`DEVELOP_STOP`);
 });
 
-function startServer(_x) {
+function startServer(_x3) {
   return _startServer.apply(this, arguments);
 }
 
@@ -114,11 +210,11 @@ function _startServer() {
     const createIndexHtml =
     /*#__PURE__*/
     function () {
-      var _ref3 = (0, _asyncToGenerator2.default)(function* () {
+      var _ref6 = (0, _asyncToGenerator2.default)(function* () {
         try {
+          yield buildHTML.buildRenderer(program, `develop-html`);
           yield buildHTML.buildPages({
             program,
-            stage: `develop-html`,
             pagePaths: [`/`]
           });
         } catch (err) {
@@ -136,15 +232,10 @@ function _startServer() {
       });
 
       return function createIndexHtml() {
-        return _ref3.apply(this, arguments);
+        return _ref6.apply(this, arguments);
       };
-    }(); // Start bootstrap process.
-
+    }();
 
-    yield bootstrap(program);
-    db.startAutosave();
-    queryUtil.startListening(queryQueue.createDevelopQueue());
-    queryWatcher.startWatchDeletePage();
     yield createIndexHtml();
     const devConfig = yield webpackConfig(program, directory, `develop`, program.port);
     const compiler = webpack(devConfig);
@@ -180,7 +271,35 @@ function _startServer() {
         }
 
       };
-    })); // Allow requests from any origin. Avoids CORS issues when using the `--host` flag.
+    }));
+
+    const mapToObject = map => {
+      const obj = {};
+
+      for (var _iterator = map, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
+        var _ref7;
+
+        if (_isArray) {
+          if (_i >= _iterator.length) break;
+          _ref7 = _iterator[_i++];
+        } else {
+          _i = _iterator.next();
+          if (_i.done) break;
+          _ref7 = _i.value;
+        }
+
+        let _ref8 = _ref7,
+            key = _ref8[0],
+            value = _ref8[1];
+        obj[key] = value;
+      }
+
+      return obj;
+    };
+
+    app.get(`/___pages`, (req, res) => {
+      res.json(mapToObject(store.getState().pages));
+    }); // Allow requests from any origin. Avoids CORS issues when using the `--host` flag.
 
     app.use((req, res, next) => {
       res.header(`Access-Control-Allow-Origin`, `*`);
@@ -236,12 +355,7 @@ function _startServer() {
             url = proxy.url;
       app.use(`${prefix}/*`, (req, res) => {
         const proxiedUrl = url + req.originalUrl;
-        const headers = req.headers,
-              method = req.method;
-        req.pipe(got.stream(proxiedUrl, {
-          headers,
-          method
-        }).on(`error`, err => {
+        req.pipe(request(proxiedUrl).on(`error`, err => {
           const message = `Error when trying to proxy request "${req.originalUrl}" to "${proxiedUrl}"`;
           report.error(message, err);
           res.status(500).end();
@@ -303,7 +417,7 @@ function _startServer() {
 module.exports =
 /*#__PURE__*/
 function () {
-  var _ref = (0, _asyncToGenerator2.default)(function* (program) {
+  var _ref3 = (0, _asyncToGenerator2.default)(function* (program) {
     initTracer(program.openTracingConfigFile);
     telemetry.trackCli(`DEVELOP_START`);
     telemetry.startBackgroundUpdate();
@@ -326,10 +440,11 @@ function () {
       });
     }
 
-    program.port = yield detectPortInUseAndPrompt(port, rlInterface);
-
-    const _ref2 = yield startServer(program),
-          compiler = _ref2[0];
+    program.port = yield new Promise(resolve => {
+      detectPortInUseAndPrompt(port, rlInterface, newPort => {
+        resolve(newPort);
+      });
+    });
 
     function prepareUrls(protocol, host, port) {
       const formatUrl = hostname => url.format({
@@ -433,7 +548,37 @@ function () {
           console.log();
         }
       });
-    }
+    } // Start bootstrap process.
+
+
+    const _ref4 = yield bootstrap(program),
+          graphqlRunner = _ref4.graphqlRunner; // Start the createPages hot reloader.
+
+
+    require(`../bootstrap/page-hot-reloader`)(graphqlRunner);
+
+    const queryIds = queryRunner.calcBootstrapDirtyQueryIds(store.getState());
+
+    const _queryRunner$groupQue = queryRunner.groupQueryIds(queryIds),
+          staticQueryIds = _queryRunner$groupQue.staticQueryIds,
+          pageQueryIds = _queryRunner$groupQue.pageQueryIds;
+
+    let activity = report.activityTimer(`run static queries`);
+    activity.start();
+    yield queryRunner.processStaticQueries(staticQueryIds, {
+      activity
+    });
+    activity.end();
+    yield runPageQueries(pageQueryIds);
+    yield waitJobsFinished();
+    yield writeJsRequires.startPageListener();
+    yield db.saveState();
+    db.startAutosave();
+    startQueryListener();
+    queryWatcher.startWatchDeletePage();
+
+    const _ref5 = yield startServer(program),
+          compiler = _ref5[0];
 
     let isFirstCompile = true; // "done" event fires when Webpack has finished recompiling the bundle.
     // Whether or not you have warnings or errors, you will get this event.
@@ -490,8 +635,8 @@ function () {
     });
   });
 
-  return function (_x2) {
-    return _ref.apply(this, arguments);
+  return function (_x4) {
+    return _ref3.apply(this, arguments);
   };
 }();
 //# sourceMappingURL=develop.js.map
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/commands/develop.js.map b/node_modules/gatsby/dist/commands/develop.js.map
index 0aff33a..68c2bcb 100644
--- a/node_modules/gatsby/dist/commands/develop.js.map
+++ b/node_modules/gatsby/dist/commands/develop.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/commands/develop.js"],"names":["url","require","glob","fs","openurl","chokidar","express","graphqlHTTP","graphqlPlayground","default","formatError","got","rl","webpack","webpackConfig","bootstrap","store","syncStaticDir","buildHTML","withBasePath","report","launchEditor","formatWebpackMessages","chalk","address","withResolverContext","sourceNodes","websocketManager","getSslCert","slash","initTracer","apiRunnerNode","db","telemetry","detectPortInUseAndPrompt","onExit","queryUtil","queryQueue","queryWatcher","setTimeout","rlInterface","createInterface","input","process","stdin","output","stdout","on","exit","trackCli","startServer","program","directory","directoryPath","createIndexHtml","buildPages","stage","pagePaths","err","name","panic","stripIndent","startAutosave","startListening","createDevelopQueue","startWatchDeletePage","devConfig","port","compiler","app","use","expressMiddleware","log","path","heartbeat","env","GATSBY_GRAPHQL_IDE","get","endpoint","schema","getState","graphiql","context","stack","split","req","res","next","header","post","enableRefresh","ENABLE_GATSBY_REFRESH_ENDPOINT","refreshToken","GATSBY_REFRESH_TOKEN","authorizedRefresh","headers","authorization","console","end","query","fileName","lineNumber","index","logLevel","publicPath","stats","developMiddleware","config","proxy","prefix","proxiedUrl","originalUrl","method","pipe","stream","message","error","status","sendFile","server","Server","ssl","createServer","init","socket","getSocket","listener","listen","host","code","watchGlobs","map","watch","to","emit","module","exports","openTracingConfigFile","startBackgroundUpdate","parseInt","https","sitePackageJson","replace","certFile","keyFile","prepareUrls","protocol","formatUrl","hostname","format","pathname","prettyPrintUrl","bold","isUnspecifiedHost","lanUrlForConfig","lanUrlForTerminal","ip","test","undefined","_e","localUrlForTerminal","localUrlForBrowser","printInstructions","appName","urls","useYarn","cyan","printDeprecationWarnings","deprecatedApis","fixMap","boundActionCreators","newName","docsLink","pathContext","deprecatedLocations","forEach","api","sync","nodir","file","fileText","readFileSync","matchingApis","filter","indexOf","push","length","yellow","isFirstCompile","hooks","done","tapAsync","messages","toJson","isSuccessful","errors","open","Promise","resolve","catch"],"mappings":";;;;;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAE,KAAF,CAAnB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAE,MAAF,CAApB;;AACA,MAAME,EAAE,GAAGF,OAAO,CAAE,IAAF,CAAlB;;AACA,MAAMG,OAAO,GAAGH,OAAO,CAAE,YAAF,CAAvB;;AACA,MAAMI,QAAQ,GAAGJ,OAAO,CAAE,UAAF,CAAxB;;AACA,MAAMK,OAAO,GAAGL,OAAO,CAAE,SAAF,CAAvB;;AACA,MAAMM,WAAW,GAAGN,OAAO,CAAE,iBAAF,CAA3B;;AACA,MAAMO,iBAAiB,GAAGP,OAAO,CAAE,uCAAF,CAAP,CACvBQ,OADH;;iBAEwBR,OAAO,CAAE,SAAF,C;MAAvBS,W,YAAAA,W;;AACR,MAAMC,GAAG,GAAGV,OAAO,CAAE,KAAF,CAAnB;;AACA,MAAMW,EAAE,GAAGX,OAAO,CAAE,UAAF,CAAlB;;AACA,MAAMY,OAAO,GAAGZ,OAAO,CAAE,SAAF,CAAvB;;AACA,MAAMa,aAAa,GAAGb,OAAO,CAAE,yBAAF,CAA7B;;AACA,MAAMc,SAAS,GAAGd,OAAO,CAAE,cAAF,CAAzB;;kBACkBA,OAAO,CAAE,UAAF,C;MAAjBe,K,aAAAA,K;;kBACkBf,OAAO,CAAE,yBAAF,C;MAAzBgB,a,aAAAA,a;;AACR,MAAMC,SAAS,GAAGjB,OAAO,CAAE,cAAF,CAAzB;;kBACyBA,OAAO,CAAE,eAAF,C;MAAxBkB,Y,aAAAA,Y;;AACR,MAAMC,MAAM,GAAGnB,OAAO,CAAE,yBAAF,CAAtB;;AACA,MAAMoB,YAAY,GAAGpB,OAAO,CAAE,8BAAF,CAA5B;;AACA,MAAMqB,qBAAqB,GAAGrB,OAAO,CAAE,uCAAF,CAArC;;AACA,MAAMsB,KAAK,GAAGtB,OAAO,CAAE,OAAF,CAArB;;AACA,MAAMuB,OAAO,GAAGvB,OAAO,CAAE,SAAF,CAAvB;;AACA,MAAMwB,mBAAmB,GAAGxB,OAAO,CAAE,mBAAF,CAAnC;;AACA,MAAMyB,WAAW,GAAGzB,OAAO,CAAE,uBAAF,CAA3B;;AACA,MAAM0B,gBAAgB,GAAG1B,OAAO,CAAE,4BAAF,CAAhC;;AACA,MAAM2B,UAAU,GAAG3B,OAAO,CAAE,uBAAF,CAA1B;;AACA,MAAM4B,KAAK,GAAG5B,OAAO,CAAE,OAAF,CAArB;;kBACuBA,OAAO,CAAE,iBAAF,C;MAAtB6B,U,aAAAA,U;;AACR,MAAMC,aAAa,GAAG9B,OAAO,CAAE,0BAAF,CAA7B;;AACA,MAAM+B,EAAE,GAAG/B,OAAO,CAAE,OAAF,CAAlB;;AACA,MAAMgC,SAAS,GAAGhC,OAAO,CAAE,kBAAF,CAAzB;;AACA,MAAMiC,wBAAwB,GAAGjC,OAAO,CAAE,wCAAF,CAAxC;;AACA,MAAMkC,MAAM,GAAGlC,OAAO,CAAE,aAAF,CAAtB;;AACA,MAAMmC,SAAS,GAAGnC,OAAO,CAAE,UAAF,CAAzB;;AACA,MAAMoC,UAAU,GAAGpC,OAAO,CAAE,gBAAF,CAA1B;;AACA,MAAMqC,YAAY,GAAGrC,OAAO,CAAE,wBAAF,CAA5B,C,CAEA;AAEA;AACA;AACA;;;AACAsC,UAAU,CAAC,MAAM;AACftB,EAAAA,aAAa;AACd,CAFS,EAEP,KAFO,CAAV;AAIA,MAAMuB,WAAW,GAAG5B,EAAE,CAAC6B,eAAH,CAAmB;AACrCC,EAAAA,KAAK,EAAEC,OAAO,CAACC,KADsB;AAErCC,EAAAA,MAAM,EAAEF,OAAO,CAACG;AAFqB,CAAnB,CAApB,C,CAKA;;AACAN,WAAW,CAACO,EAAZ,CAAgB,QAAhB,EAAyB,MAAM;AAC7BJ,EAAAA,OAAO,CAACK,IAAR;AACD,CAFD;AAIAb,MAAM,CAAC,MAAM;AACXF,EAAAA,SAAS,CAACgB,QAAV,CAAoB,cAApB;AACD,CAFK,CAAN;;SAIeC,W;;;;;iDAAf,WAA2BC,OAA3B,EAAoC;AAClC,UAAMC,SAAS,GAAGD,OAAO,CAACC,SAA1B;AACA,UAAMC,aAAa,GAAGlC,YAAY,CAACiC,SAAD,CAAlC;;AACA,UAAME,eAAe;AAAA;AAAA;AAAA,kDAAG,aAAY;AAClC,YAAI;AACF,gBAAMpC,SAAS,CAACqC,UAAV,CAAqB;AACzBJ,YAAAA,OADyB;AAEzBK,YAAAA,KAAK,EAAG,cAFiB;AAGzBC,YAAAA,SAAS,EAAE,CAAE,GAAF;AAHc,WAArB,CAAN;AAKD,SAND,CAME,OAAOC,GAAP,EAAY;AACZ,cAAIA,GAAG,CAACC,IAAJ,KAAc,cAAlB,EAAiC;AAC/BvC,YAAAA,MAAM,CAACwC,KAAP,CAAaF,GAAb;AACA;AACD;;AACDtC,UAAAA,MAAM,CAACwC,KAAP,CACExC,MAAM,CAACyC,WAAY;;;;SADrB,EAMEH,GANF;AAQD;AACF,OArBoB;;AAAA,sBAAfJ,eAAe;AAAA;AAAA;AAAA,OAArB,CAHkC,CA0BlC;;;AACA,UAAMvC,SAAS,CAACoC,OAAD,CAAf;AAEAnB,IAAAA,EAAE,CAAC8B,aAAH;AACA1B,IAAAA,SAAS,CAAC2B,cAAV,CAAyB1B,UAAU,CAAC2B,kBAAX,EAAzB;AACA1B,IAAAA,YAAY,CAAC2B,oBAAb;AAEA,UAAMX,eAAe,EAArB;AAEA,UAAMY,SAAS,SAASpD,aAAa,CACnCqC,OADmC,EAEnCC,SAFmC,EAGlC,SAHkC,EAInCD,OAAO,CAACgB,IAJ2B,CAArC;AAOA,UAAMC,QAAQ,GAAGvD,OAAO,CAACqD,SAAD,CAAxB;AAEA;;;;AAGA,UAAMG,GAAG,GAAG/D,OAAO,EAAnB;AACA+D,IAAAA,GAAG,CAACC,GAAJ,CAAQrC,SAAS,CAACsC,iBAAV,CAA6B,SAA7B,CAAR;AACAF,IAAAA,GAAG,CAACC,GAAJ,CACErE,OAAO,CAAE,wBAAF,CAAP,CAAkCmE,QAAlC,EAA4C;AAC1CI,MAAAA,GAAG,EAAE,KADqC;AAE1CC,MAAAA,IAAI,EAAG,gBAFmC;AAG1CC,MAAAA,SAAS,EAAE,KAAK;AAH0B,KAA5C,CADF;;AAQA,QAAI/B,OAAO,CAACgC,GAAR,CAAYC,kBAAZ,KAAoC,YAAxC,EAAqD;AACnDP,MAAAA,GAAG,CAACQ,GAAJ,CACG,aADH,EAEErE,iBAAiB,CAAC;AAChBsE,QAAAA,QAAQ,EAAG;AADK,OAAD,CAFnB,EAKE,MAAM,CAAE,CALV;AAOD;;AAEDT,IAAAA,GAAG,CAACC,GAAJ,CACG,aADH,EAEE/D,WAAW,CAAC,MAAM;AAChB,YAAMwE,MAAM,GAAG/D,KAAK,CAACgE,QAAN,GAAiBD,MAAhC;AACA,aAAO;AACLA,QAAAA,MADK;AAELE,QAAAA,QAAQ,EACNtC,OAAO,CAACgC,GAAR,CAAYC,kBAAZ,KAAoC,YAApC,GAAkD,KAAlD,GAA0D,IAHvD;AAILM,QAAAA,OAAO,EAAEzD,mBAAmB,CAAC,EAAD,EAAKsD,MAAL,CAJvB;;AAKLrE,QAAAA,WAAW,CAACgD,GAAD,EAAM;AACf,mCACKhD,WAAW,CAACgD,GAAD,CADhB;AAEEyB,YAAAA,KAAK,EAAEzB,GAAG,CAACyB,KAAJ,GAAYzB,GAAG,CAACyB,KAAJ,CAAUC,KAAV,CAAiB,IAAjB,CAAZ,GAAoC;AAF7C;AAID;;AAVI,OAAP;AAYD,KAdU,CAFb,EAnEkC,CAsFlC;;AACAf,IAAAA,GAAG,CAACC,GAAJ,CAAQ,CAACe,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AAC1BD,MAAAA,GAAG,CAACE,MAAJ,CAAY,6BAAZ,EAA2C,GAA3C;AACAF,MAAAA,GAAG,CAACE,MAAJ,CACG,8BADH,EAEG,gDAFH;AAIAD,MAAAA,IAAI;AACL,KAPD;AASA;;;;;;AAKAlB,IAAAA,GAAG,CAACoB,IAAJ,CAAU,YAAV,EAAuB,CAACJ,GAAD,EAAMC,GAAN,KAAc;AACnC,YAAMI,aAAa,GAAG/C,OAAO,CAACgC,GAAR,CAAYgB,8BAAlC;AACA,YAAMC,YAAY,GAAGjD,OAAO,CAACgC,GAAR,CAAYkB,oBAAjC;AACA,YAAMC,iBAAiB,GACrB,CAACF,YAAD,IAAiBP,GAAG,CAACU,OAAJ,CAAYC,aAAZ,KAA8BJ,YADjD;;AAGA,UAAIF,aAAa,IAAII,iBAArB,EAAwC;AACtCG,QAAAA,OAAO,CAACzB,GAAR,CAAa,wBAAb;AACA9C,QAAAA,WAAW;AACZ;;AACD4D,MAAAA,GAAG,CAACY,GAAJ;AACD,KAXD;AAaA7B,IAAAA,GAAG,CAACQ,GAAJ,CAAS,+BAAT,EAAyC,CAACQ,GAAD,EAAMC,GAAN,KAAc;AACrDjE,MAAAA,YAAY,CAACgE,GAAG,CAACc,KAAJ,CAAUC,QAAX,EAAqBf,GAAG,CAACc,KAAJ,CAAUE,UAA/B,CAAZ;AACAf,MAAAA,GAAG,CAACY,GAAJ;AACD,KAHD,EAlHkC,CAuHlC;AACA;AACA;AACA;;AACA7B,IAAAA,GAAG,CAACC,GAAJ,CAAQrE,OAAO,CAAE,kBAAF,CAAP,CAA6B,QAA7B,EAAsC;AAAEqG,MAAAA,KAAK,EAAE;AAAT,KAAtC,CAAR;AAEAjC,IAAAA,GAAG,CAACC,GAAJ,CACErE,OAAO,CAAE,wBAAF,CAAP,CAAkCmE,QAAlC,EAA4C;AAC1CmC,MAAAA,QAAQ,EAAG,OAD+B;AAE1CC,MAAAA,UAAU,EAAEtC,SAAS,CAACrB,MAAV,CAAiB2D,UAFa;AAG1CC,MAAAA,KAAK,EAAG;AAHkC,KAA5C,CADF,EA7HkC,CAqIlC;;AArIkC,UAsI1BC,iBAtI0B,GAsIJ1F,KAAK,CAACgE,QAAN,GAAiB2B,MAtIb,CAsI1BD,iBAtI0B;;AAwIlC,QAAIA,iBAAJ,EAAuB;AACrBA,MAAAA,iBAAiB,CAACrC,GAAD,CAAjB;AACD,KA1IiC,CA4IlC;;;AA5IkC,UA6I1BuC,KA7I0B,GA6IhB5F,KAAK,CAACgE,QAAN,GAAiB2B,MA7ID,CA6I1BC,KA7I0B;;AA8IlC,QAAIA,KAAJ,EAAW;AAAA,YACDC,MADC,GACeD,KADf,CACDC,MADC;AAAA,YACO7G,GADP,GACe4G,KADf,CACO5G,GADP;AAETqE,MAAAA,GAAG,CAACC,GAAJ,CAAS,GAAEuC,MAAO,IAAlB,EAAuB,CAACxB,GAAD,EAAMC,GAAN,KAAc;AACnC,cAAMwB,UAAU,GAAG9G,GAAG,GAAGqF,GAAG,CAAC0B,WAA7B;AADmC,cAE3BhB,OAF2B,GAEPV,GAFO,CAE3BU,OAF2B;AAAA,cAElBiB,MAFkB,GAEP3B,GAFO,CAElB2B,MAFkB;AAGnC3B,QAAAA,GAAG,CACA4B,IADH,CAEItG,GAAG,CAACuG,MAAJ,CAAWJ,UAAX,EAAuB;AAAEf,UAAAA,OAAF;AAAWiB,UAAAA;AAAX,SAAvB,EAA4CjE,EAA5C,CAAgD,OAAhD,EAAwDW,GAAG,IAAI;AAC7D,gBAAMyD,OAAO,GAAI,uCACf9B,GAAG,CAAC0B,WACL,SAAQD,UAAW,GAFpB;AAIA1F,UAAAA,MAAM,CAACgG,KAAP,CAAaD,OAAb,EAAsBzD,GAAtB;AACA4B,UAAAA,GAAG,CAAC+B,MAAJ,CAAW,GAAX,EAAgBnB,GAAhB;AACD,SAPD,CAFJ,EAWGe,IAXH,CAWQ3B,GAXR;AAYD,OAfD;AAgBD;;AAED,UAAMvD,aAAa,CAAE,mBAAF,EAAsB;AAAEsC,MAAAA;AAAF,KAAtB,CAAnB,CAlKkC,CAoKlC;;AACAA,IAAAA,GAAG,CAACC,GAAJ,CAAQ,CAACe,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AAC1BD,MAAAA,GAAG,CAACgC,QAAJ,CAAajE,aAAa,CAAE,mBAAF,CAA1B,EAAiDK,GAAG,IAAI;AACtD,YAAIA,GAAJ,EAAS;AACP4B,UAAAA,GAAG,CAAC+B,MAAJ,CAAW,GAAX,EAAgBnB,GAAhB;AACD;AACF,OAJD;AAKD,KAND;AAQA;;;;AAGA,QAAIqB,MAAM,GAAGtH,OAAO,CAAE,MAAF,CAAP,CAAgBuH,MAAhB,CAAuBnD,GAAvB,CAAb,CAhLkC,CAkLlC;;;AACA,QAAIlB,OAAO,CAACsE,GAAZ,EAAiB;AACfF,MAAAA,MAAM,GAAGtH,OAAO,CAAE,OAAF,CAAP,CAAiByH,YAAjB,CAA8BvE,OAAO,CAACsE,GAAtC,EAA2CpD,GAA3C,CAAT;AACD;;AACD1C,IAAAA,gBAAgB,CAACgG,IAAjB,CAAsB;AAAEJ,MAAAA,MAAF;AAAUnE,MAAAA,SAAS,EAAED,OAAO,CAACC;AAA7B,KAAtB;AACA,UAAMwE,MAAM,GAAGjG,gBAAgB,CAACkG,SAAjB,EAAf;AAEA,UAAMC,QAAQ,GAAGP,MAAM,CAACQ,MAAP,CAAc5E,OAAO,CAACgB,IAAtB,EAA4BhB,OAAO,CAAC6E,IAApC,EAA0CtE,GAAG,IAAI;AAChE,UAAIA,GAAJ,EAAS;AACP,YAAIA,GAAG,CAACuE,IAAJ,KAAc,YAAlB,EAA+B;AAC7B;AACA7G,UAAAA,MAAM,CAACwC,KAAP,CACG,kCACCT,OAAO,CAACgB,IACT,uDAHH;AAKA;AACD;;AAED/C,QAAAA,MAAM,CAACwC,KAAP,CAAc,qDAAd,EAAoEF,GAApE;AACD;AACF,KAdgB,CAAjB,CAzLkC,CAyMlC;;AACA,UAAMwE,UAAU,GAAG,CAAE,aAAF,EAAiB,0BAAjB,EAA4CC,GAA5C,CAAgD1D,IAAI,IACrE5C,KAAK,CAACwB,aAAa,CAACoB,IAAD,CAAd,CADY,CAAnB;AAIApE,IAAAA,QAAQ,CAAC+H,KAAT,CAAeF,UAAf,EAA2BnF,EAA3B,CAA+B,QAA/B;AAAA;AAAA,oCAAwC,aAAY;AAClD,YAAMO,eAAe,EAArB;AACAsE,MAAAA,MAAM,CAACS,EAAP,CAAW,SAAX,EAAqBC,IAArB,CAA2B,QAA3B;AACD,KAHD;AAKA,WAAO,CAAClE,QAAD,EAAW0D,QAAX,CAAP;AACD,G;;;;AAEDS,MAAM,CAACC,OAAP;AAAA;AAAA;AAAA,6CAAiB,WAAOrF,OAAP,EAAwB;AACvCrB,IAAAA,UAAU,CAACqB,OAAO,CAACsF,qBAAT,CAAV;AACAxG,IAAAA,SAAS,CAACgB,QAAV,CAAoB,eAApB;AACAhB,IAAAA,SAAS,CAACyG,qBAAV;AAEA,UAAMvE,IAAI,GACR,OAAOhB,OAAO,CAACgB,IAAf,KAAyB,QAAzB,GAAmCwE,QAAQ,CAACxF,OAAO,CAACgB,IAAT,EAAe,EAAf,CAA3C,GAAgEhB,OAAO,CAACgB,IAD1E,CALuC,CAQvC;AACA;;AACA,QAAI,CAAChB,OAAO,CAAE,WAAF,CAAP,IAAwBA,OAAO,CAAE,UAAF,CAAhC,KAAiD,CAACA,OAAO,CAACyF,KAA9D,EAAqE;AACnExH,MAAAA,MAAM,CAACwC,KAAP,CACG,2EADH;AAGD,KAdsC,CAgBvC;AACA;AACA;;;AACA,QAAIT,OAAO,CAACyF,KAAZ,EAAmB;AACjBzF,MAAAA,OAAO,CAACsE,GAAR,SAAoB7F,UAAU,CAAC;AAC7B+B,QAAAA,IAAI,EAAER,OAAO,CAAC0F,eAAR,CAAwBlF,IAAxB,CAA6BmF,OAA7B,CAAsC,GAAtC,EAA2C,EAA3C,EAA8CA,OAA9C,CAAuD,GAAvD,EAA4D,IAA5D,CADuB;AAE7BC,QAAAA,QAAQ,EAAE5F,OAAO,CAAE,WAAF,CAFY;AAG7B6F,QAAAA,OAAO,EAAE7F,OAAO,CAAE,UAAF,CAHa;AAI7BC,QAAAA,SAAS,EAAED,OAAO,CAACC;AAJU,OAAD,CAA9B;AAMD;;AAEDD,IAAAA,OAAO,CAACgB,IAAR,SAAqBjC,wBAAwB,CAACiC,IAAD,EAAO3B,WAAP,CAA7C;;AA5BuC,wBA8BdU,WAAW,CAACC,OAAD,CA9BG;AAAA,UA8BhCiB,QA9BgC;;AAgCvC,aAAS6E,WAAT,CAAqBC,QAArB,EAA+BlB,IAA/B,EAAqC7D,IAArC,EAA2C;AACzC,YAAMgF,SAAS,GAAGC,QAAQ,IACxBpJ,GAAG,CAACqJ,MAAJ,CAAW;AACTH,QAAAA,QADS;AAETE,QAAAA,QAFS;AAGTjF,QAAAA,IAHS;AAITmF,QAAAA,QAAQ,EAAG;AAJF,OAAX,CADF;;AAOA,YAAMC,cAAc,GAAGH,QAAQ,IAC7BpJ,GAAG,CAACqJ,MAAJ,CAAW;AACTH,QAAAA,QADS;AAETE,QAAAA,QAFS;AAGTjF,QAAAA,IAAI,EAAE5C,KAAK,CAACiI,IAAN,CAAWrF,IAAX,CAHG;AAITmF,QAAAA,QAAQ,EAAG;AAJF,OAAX,CADF;;AAQA,YAAMG,iBAAiB,GAAGzB,IAAI,KAAM,SAAV,IAAsBA,IAAI,KAAM,IAA1D;AACA,UAAI0B,eAAJ,EAAqBC,iBAArB;;AACA,UAAIF,iBAAJ,EAAuB;AACrB,YAAI;AACF;AACAC,UAAAA,eAAe,GAAGlI,OAAO,CAACoI,EAAR,EAAlB;;AACA,cAAIF,eAAJ,EAAqB;AACnB;AACA;AACA,gBACE,wDAAwDG,IAAxD,CACEH,eADF,CADF,EAIE;AACA;AACAC,cAAAA,iBAAiB,GAAGJ,cAAc,CAACG,eAAD,CAAlC;AACD,aAPD,MAOO;AACL;AACAA,cAAAA,eAAe,GAAGI,SAAlB;AACD;AACF;AACF,SAlBD,CAkBE,OAAOC,EAAP,EAAW,CACX;AACD;AACF,OAxCwC,CAyCzC;AACA;AACA;;;AACA,YAAMC,mBAAmB,GAAGT,cAAc,CAACvB,IAAD,CAA1C;AACA,YAAMiC,kBAAkB,GAAGd,SAAS,CAACnB,IAAD,CAApC;AACA,aAAO;AACL0B,QAAAA,eADK;AAELC,QAAAA,iBAFK;AAGLK,QAAAA,mBAHK;AAILC,QAAAA;AAJK,OAAP;AAMD;;AAED,aAASC,iBAAT,CAA2BC,OAA3B,EAAoCC,IAApC,EAA0CC,OAA1C,EAAmD;AACjDpE,MAAAA,OAAO,CAACzB,GAAR;AACAyB,MAAAA,OAAO,CAACzB,GAAR,CAAa,oBAAmBjD,KAAK,CAACiI,IAAN,CAAWW,OAAX,CAAoB,kBAApD;AACAlE,MAAAA,OAAO,CAACzB,GAAR;;AAEA,UAAI4F,IAAI,CAACT,iBAAT,EAA4B;AAC1B1D,QAAAA,OAAO,CAACzB,GAAR,CACG,KAAIjD,KAAK,CAACiI,IAAN,CAAY,QAAZ,CAAqB,eAAcY,IAAI,CAACJ,mBAAoB,EADnE;AAGA/D,QAAAA,OAAO,CAACzB,GAAR,CACG,KAAIjD,KAAK,CAACiI,IAAN,CAAY,kBAAZ,CAA+B,KAAIY,IAAI,CAACT,iBAAkB,EADjE;AAGD,OAPD,MAOO;AACL1D,QAAAA,OAAO,CAACzB,GAAR,CAAa,KAAI4F,IAAI,CAACJ,mBAAoB,EAA1C;AACD;;AAED/D,MAAAA,OAAO,CAACzB,GAAR;AACAyB,MAAAA,OAAO,CAACzB,GAAR,CACG,QACC7B,OAAO,CAACgC,GAAR,CAAYC,kBAAZ,KAAoC,YAApC,GACK,wBADL,GAEK,UACN,6DALH;AAOAqB,MAAAA,OAAO,CAACzB,GAAR;AACAyB,MAAAA,OAAO,CAACzB,GAAR,CAAa,KAAI4F,IAAI,CAACJ,mBAAoB,YAA1C;AAEA/D,MAAAA,OAAO,CAACzB,GAAR;AACAyB,MAAAA,OAAO,CAACzB,GAAR,CAAa,mDAAb;AACAyB,MAAAA,OAAO,CAACzB,GAAR,CACG,oCAAD,GAAwC,GAAEjD,KAAK,CAAC+I,IAAN,CAAY,eAAZ,CAA4B,EADxE;AAGArE,MAAAA,OAAO,CAACzB,GAAR;AACD;;AAED,aAAS+F,wBAAT,GAAoC;AAClC,YAAMC,cAAc,GAAG,CAAE,qBAAF,EAAyB,aAAzB,CAAvB;AACA,YAAMC,MAAM,GAAG;AACbC,QAAAA,mBAAmB,EAAE;AACnBC,UAAAA,OAAO,EAAG,SADS;AAEnBC,UAAAA,QAAQ,EAAG;AAFQ,SADR;AAKbC,QAAAA,WAAW,EAAE;AACXF,UAAAA,OAAO,EAAG,aADC;AAEXC,UAAAA,QAAQ,EAAG;AAFA;AALA,OAAf;AAUA,YAAME,mBAAmB,GAAG,EAA5B;AACAN,MAAAA,cAAc,CAACO,OAAf,CAAuBC,GAAG,IAAKF,mBAAmB,CAACE,GAAD,CAAnB,GAA2B,EAA1D;AAEA9K,MAAAA,IAAI,CACD+K,IADH,CACS,mCADT,EAC6C;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAD7C,EAEGH,OAFH,CAEWI,IAAI,IAAI;AACf,cAAMC,QAAQ,GAAGjL,EAAE,CAACkL,YAAH,CAAgBF,IAAhB,CAAjB;AACA,cAAMG,YAAY,GAAGd,cAAc,CAACe,MAAf,CACnBP,GAAG,IAAII,QAAQ,CAACI,OAAT,CAAiBR,GAAjB,MAA0B,CAAC,CADf,CAArB;AAGAM,QAAAA,YAAY,CAACP,OAAb,CAAqBC,GAAG,IAAIF,mBAAmB,CAACE,GAAD,CAAnB,CAAyBS,IAAzB,CAA8BN,IAA9B,CAA5B;AACD,OARH;AAUAX,MAAAA,cAAc,CAACO,OAAf,CAAuBC,GAAG,IAAI;AAC5B,YAAIF,mBAAmB,CAACE,GAAD,CAAnB,CAAyBU,MAA7B,EAAqC;AACnCzF,UAAAA,OAAO,CAACzB,GAAR,CACG,aADH,EAEEjD,KAAK,CAAC+I,IAAN,CAAWU,GAAX,CAFF,EAGEzJ,KAAK,CAACoK,MAAN,CAAc,2BAAd,CAHF,EAIEpK,KAAK,CAAC+I,IAAN,CAAWG,MAAM,CAACO,GAAD,CAAN,CAAYL,OAAvB,CAJF,EAKEpJ,KAAK,CAACoK,MAAN,CACG,4CACClB,MAAM,CAACO,GAAD,CAAN,CAAYJ,QACb,8BAHH,CALF;AAWA3E,UAAAA,OAAO,CAACzB,GAAR;AACAsG,UAAAA,mBAAmB,CAACE,GAAD,CAAnB,CAAyBD,OAAzB,CAAiCI,IAAI,IAAIlF,OAAO,CAACzB,GAAR,CAAY2G,IAAZ,CAAzC;AACAlF,UAAAA,OAAO,CAACzB,GAAR;AACD;AACF,OAjBD;AAkBD;;AAED,QAAIoH,cAAc,GAAG,IAArB,CAtKuC,CAuKvC;AACA;;AACAxH,IAAAA,QAAQ,CAACyH,KAAT,CAAeC,IAAf,CAAoBC,QAApB,CAA8B,2BAA9B,EAA0D,CAACtF,KAAD,EAAQqF,IAAR,KAAiB;AACzE;AACA;AACA;AACA,YAAME,QAAQ,GAAG1K,qBAAqB,CAACmF,KAAK,CAACwF,MAAN,CAAa,EAAb,EAAiB,IAAjB,CAAD,CAAtC;AACA,YAAM7B,IAAI,GAAGnB,WAAW,CACtB9F,OAAO,CAACsE,GAAR,GAAe,OAAf,GAAyB,MADH,EAEtBtE,OAAO,CAAC6E,IAFc,EAGtB7E,OAAO,CAACgB,IAHc,CAAxB;AAKA,YAAM+H,YAAY,GAAG,CAACF,QAAQ,CAACG,MAAT,CAAgBT,MAAtC,CAVyE,CAWzE;AACA;AACA;AACA;;AACA,UAAIQ,YAAY,IAAIN,cAApB,EAAoC;AAClC1B,QAAAA,iBAAiB,CAAC/G,OAAO,CAAC0F,eAAR,CAAwBlF,IAAzB,EAA+ByG,IAA/B,EAAqCjH,OAAO,CAACkH,OAA7C,CAAjB;AACAE,QAAAA,wBAAwB;;AACxB,YAAIpH,OAAO,CAACiJ,IAAZ,EAAkB;AAChBC,UAAAA,OAAO,CAACC,OAAR,CAAgBlM,OAAO,CAACgK,IAAI,CAACH,kBAAN,CAAvB,EAAkDsC,KAAlD,CAAwD7I,GAAG,IACzDuC,OAAO,CAACzB,GAAR,CACG,GAAEjD,KAAK,CAACoK,MAAN,CACA,MADA,CAED,kDAHJ,CADF;AAOD;AACF;;AAEDC,MAAAA,cAAc,GAAG,KAAjB,CA7ByE,CA+BzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAE,MAAAA,IAAI;AACL,KA9DD;AA+DD,GAxOD;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["/* @flow */\n\nconst url = require(`url`)\nconst glob = require(`glob`)\nconst fs = require(`fs`)\nconst openurl = require(`better-opn`)\nconst chokidar = require(`chokidar`)\nconst express = require(`express`)\nconst graphqlHTTP = require(`express-graphql`)\nconst graphqlPlayground = require(`graphql-playground-middleware-express`)\n  .default\nconst { formatError } = require(`graphql`)\nconst got = require(`got`)\nconst rl = require(`readline`)\nconst webpack = require(`webpack`)\nconst webpackConfig = require(`../utils/webpack.config`)\nconst bootstrap = require(`../bootstrap`)\nconst { store } = require(`../redux`)\nconst { syncStaticDir } = require(`../utils/get-static-dir`)\nconst buildHTML = require(`./build-html`)\nconst { withBasePath } = require(`../utils/path`)\nconst report = require(`gatsby-cli/lib/reporter`)\nconst launchEditor = require(`react-dev-utils/launchEditor`)\nconst formatWebpackMessages = require(`react-dev-utils/formatWebpackMessages`)\nconst chalk = require(`chalk`)\nconst address = require(`address`)\nconst withResolverContext = require(`../schema/context`)\nconst sourceNodes = require(`../utils/source-nodes`)\nconst websocketManager = require(`../utils/websocket-manager`)\nconst getSslCert = require(`../utils/get-ssl-cert`)\nconst slash = require(`slash`)\nconst { initTracer } = require(`../utils/tracer`)\nconst apiRunnerNode = require(`../utils/api-runner-node`)\nconst db = require(`../db`)\nconst telemetry = require(`gatsby-telemetry`)\nconst detectPortInUseAndPrompt = require(`../utils/detect-port-in-use-and-prompt`)\nconst onExit = require(`signal-exit`)\nconst queryUtil = require(`../query`)\nconst queryQueue = require(`../query/queue`)\nconst queryWatcher = require(`../query/query-watcher`)\n\n// const isInteractive = process.stdout.isTTY\n\n// Watch the static directory and copy files to public as they're added or\n// changed. Wait 10 seconds so copying doesn't interfere with the regular\n// bootstrap.\nsetTimeout(() => {\n  syncStaticDir()\n}, 10000)\n\nconst rlInterface = rl.createInterface({\n  input: process.stdin,\n  output: process.stdout,\n})\n\n// Quit immediately on hearing ctrl-c\nrlInterface.on(`SIGINT`, () => {\n  process.exit()\n})\n\nonExit(() => {\n  telemetry.trackCli(`DEVELOP_STOP`)\n})\n\nasync function startServer(program) {\n  const directory = program.directory\n  const directoryPath = withBasePath(directory)\n  const createIndexHtml = async () => {\n    try {\n      await buildHTML.buildPages({\n        program,\n        stage: `develop-html`,\n        pagePaths: [`/`],\n      })\n    } catch (err) {\n      if (err.name !== `WebpackError`) {\n        report.panic(err)\n        return\n      }\n      report.panic(\n        report.stripIndent`\n          There was an error compiling the html.js component for the development server.\n\n          See our docs page on debugging HTML builds for help https://gatsby.dev/debug-html\n        `,\n        err\n      )\n    }\n  }\n\n  // Start bootstrap process.\n  await bootstrap(program)\n\n  db.startAutosave()\n  queryUtil.startListening(queryQueue.createDevelopQueue())\n  queryWatcher.startWatchDeletePage()\n\n  await createIndexHtml()\n\n  const devConfig = await webpackConfig(\n    program,\n    directory,\n    `develop`,\n    program.port\n  )\n\n  const compiler = webpack(devConfig)\n\n  /**\n   * Set up the express app.\n   **/\n  const app = express()\n  app.use(telemetry.expressMiddleware(`DEVELOP`))\n  app.use(\n    require(`webpack-hot-middleware`)(compiler, {\n      log: false,\n      path: `/__webpack_hmr`,\n      heartbeat: 10 * 1000,\n    })\n  )\n\n  if (process.env.GATSBY_GRAPHQL_IDE === `playground`) {\n    app.get(\n      `/___graphql`,\n      graphqlPlayground({\n        endpoint: `/___graphql`,\n      }),\n      () => {}\n    )\n  }\n\n  app.use(\n    `/___graphql`,\n    graphqlHTTP(() => {\n      const schema = store.getState().schema\n      return {\n        schema,\n        graphiql:\n          process.env.GATSBY_GRAPHQL_IDE === `playground` ? false : true,\n        context: withResolverContext({}, schema),\n        formatError(err) {\n          return {\n            ...formatError(err),\n            stack: err.stack ? err.stack.split(`\\n`) : [],\n          }\n        },\n      }\n    })\n  )\n\n  // Allow requests from any origin. Avoids CORS issues when using the `--host` flag.\n  app.use((req, res, next) => {\n    res.header(`Access-Control-Allow-Origin`, `*`)\n    res.header(\n      `Access-Control-Allow-Headers`,\n      `Origin, X-Requested-With, Content-Type, Accept`\n    )\n    next()\n  })\n\n  /**\n   * Refresh external data sources.\n   * This behavior is disabled by default, but the ENABLE_REFRESH_ENDPOINT env var enables it\n   * If no GATSBY_REFRESH_TOKEN env var is available, then no Authorization header is required\n   **/\n  app.post(`/__refresh`, (req, res) => {\n    const enableRefresh = process.env.ENABLE_GATSBY_REFRESH_ENDPOINT\n    const refreshToken = process.env.GATSBY_REFRESH_TOKEN\n    const authorizedRefresh =\n      !refreshToken || req.headers.authorization === refreshToken\n\n    if (enableRefresh && authorizedRefresh) {\n      console.log(`Refreshing source data`)\n      sourceNodes()\n    }\n    res.end()\n  })\n\n  app.get(`/__open-stack-frame-in-editor`, (req, res) => {\n    launchEditor(req.query.fileName, req.query.lineNumber)\n    res.end()\n  })\n\n  // Disable directory indexing i.e. serving index.html from a directory.\n  // This can lead to serving stale html files during development.\n  //\n  // We serve by default an empty index.html that sets up the dev environment.\n  app.use(require(`./develop-static`)(`public`, { index: false }))\n\n  app.use(\n    require(`webpack-dev-middleware`)(compiler, {\n      logLevel: `trace`,\n      publicPath: devConfig.output.publicPath,\n      stats: `errors-only`,\n    })\n  )\n\n  // Expose access to app for advanced use cases\n  const { developMiddleware } = store.getState().config\n\n  if (developMiddleware) {\n    developMiddleware(app)\n  }\n\n  // Set up API proxy.\n  const { proxy } = store.getState().config\n  if (proxy) {\n    const { prefix, url } = proxy\n    app.use(`${prefix}/*`, (req, res) => {\n      const proxiedUrl = url + req.originalUrl\n      const { headers, method } = req\n      req\n        .pipe(\n          got.stream(proxiedUrl, { headers, method }).on(`error`, err => {\n            const message = `Error when trying to proxy request \"${\n              req.originalUrl\n            }\" to \"${proxiedUrl}\"`\n\n            report.error(message, err)\n            res.status(500).end()\n          })\n        )\n        .pipe(res)\n    })\n  }\n\n  await apiRunnerNode(`onCreateDevServer`, { app })\n\n  // Render an HTML page and serve it.\n  app.use((req, res, next) => {\n    res.sendFile(directoryPath(`public/index.html`), err => {\n      if (err) {\n        res.status(500).end()\n      }\n    })\n  })\n\n  /**\n   * Set up the HTTP server and socket.io.\n   **/\n  let server = require(`http`).Server(app)\n\n  // If a SSL cert exists in program, use it with `createServer`.\n  if (program.ssl) {\n    server = require(`https`).createServer(program.ssl, app)\n  }\n  websocketManager.init({ server, directory: program.directory })\n  const socket = websocketManager.getSocket()\n\n  const listener = server.listen(program.port, program.host, err => {\n    if (err) {\n      if (err.code === `EADDRINUSE`) {\n        // eslint-disable-next-line max-len\n        report.panic(\n          `Unable to start Gatsby on port ${\n            program.port\n          } as there's already a process listening on that port.`\n        )\n        return\n      }\n\n      report.panic(`There was a problem starting the development server`, err)\n    }\n  })\n\n  // Register watcher that rebuilds index.html every time html.js changes.\n  const watchGlobs = [`src/html.js`, `plugins/**/gatsby-ssr.js`].map(path =>\n    slash(directoryPath(path))\n  )\n\n  chokidar.watch(watchGlobs).on(`change`, async () => {\n    await createIndexHtml()\n    socket.to(`clients`).emit(`reload`)\n  })\n\n  return [compiler, listener]\n}\n\nmodule.exports = async (program: any) => {\n  initTracer(program.openTracingConfigFile)\n  telemetry.trackCli(`DEVELOP_START`)\n  telemetry.startBackgroundUpdate()\n\n  const port =\n    typeof program.port === `string` ? parseInt(program.port, 10) : program.port\n\n  // In order to enable custom ssl, --cert-file --key-file and -https flags must all be\n  // used together\n  if ((program[`cert-file`] || program[`key-file`]) && !program.https) {\n    report.panic(\n      `for custom ssl --https, --cert-file, and --key-file must be used together`\n    )\n  }\n\n  // Check if https is enabled, then create or get SSL cert.\n  // Certs are named after `name` inside the project's package.json.\n  // Scoped names are converted from @npm/package-name to npm--package-name\n  if (program.https) {\n    program.ssl = await getSslCert({\n      name: program.sitePackageJson.name.replace(`@`, ``).replace(`/`, `--`),\n      certFile: program[`cert-file`],\n      keyFile: program[`key-file`],\n      directory: program.directory,\n    })\n  }\n\n  program.port = await detectPortInUseAndPrompt(port, rlInterface)\n\n  const [compiler] = await startServer(program)\n\n  function prepareUrls(protocol, host, port) {\n    const formatUrl = hostname =>\n      url.format({\n        protocol,\n        hostname,\n        port,\n        pathname: `/`,\n      })\n    const prettyPrintUrl = hostname =>\n      url.format({\n        protocol,\n        hostname,\n        port: chalk.bold(port),\n        pathname: `/`,\n      })\n\n    const isUnspecifiedHost = host === `0.0.0.0` || host === `::`\n    let lanUrlForConfig, lanUrlForTerminal\n    if (isUnspecifiedHost) {\n      try {\n        // This can only return an IPv4 address\n        lanUrlForConfig = address.ip()\n        if (lanUrlForConfig) {\n          // Check if the address is a private ip\n          // https://en.wikipedia.org/wiki/Private_network#Private_IPv4_address_spaces\n          if (\n            /^10[.]|^172[.](1[6-9]|2[0-9]|3[0-1])[.]|^192[.]168[.]/.test(\n              lanUrlForConfig\n            )\n          ) {\n            // Address is private, format it for later use\n            lanUrlForTerminal = prettyPrintUrl(lanUrlForConfig)\n          } else {\n            // Address is not private, so we will discard it\n            lanUrlForConfig = undefined\n          }\n        }\n      } catch (_e) {\n        // ignored\n      }\n    }\n    // TODO collect errors (GraphQL + Webpack) in Redux so we\n    // can clear terminal and print them out on every compile.\n    // Borrow pretty printing code from webpack plugin.\n    const localUrlForTerminal = prettyPrintUrl(host)\n    const localUrlForBrowser = formatUrl(host)\n    return {\n      lanUrlForConfig,\n      lanUrlForTerminal,\n      localUrlForTerminal,\n      localUrlForBrowser,\n    }\n  }\n\n  function printInstructions(appName, urls, useYarn) {\n    console.log()\n    console.log(`You can now view ${chalk.bold(appName)} in the browser.`)\n    console.log()\n\n    if (urls.lanUrlForTerminal) {\n      console.log(\n        `  ${chalk.bold(`Local:`)}            ${urls.localUrlForTerminal}`\n      )\n      console.log(\n        `  ${chalk.bold(`On Your Network:`)}  ${urls.lanUrlForTerminal}`\n      )\n    } else {\n      console.log(`  ${urls.localUrlForTerminal}`)\n    }\n\n    console.log()\n    console.log(\n      `View ${\n        process.env.GATSBY_GRAPHQL_IDE === `playground`\n          ? `the GraphQL Playground`\n          : `GraphiQL`\n      }, an in-browser IDE, to explore your site's data and schema`\n    )\n    console.log()\n    console.log(`  ${urls.localUrlForTerminal}___graphql`)\n\n    console.log()\n    console.log(`Note that the development build is not optimized.`)\n    console.log(\n      `To create a production build, use ` + `${chalk.cyan(`npm run build`)}`\n    )\n    console.log()\n  }\n\n  function printDeprecationWarnings() {\n    const deprecatedApis = [`boundActionCreators`, `pathContext`]\n    const fixMap = {\n      boundActionCreators: {\n        newName: `actions`,\n        docsLink: `https://gatsby.dev/boundActionCreators`,\n      },\n      pathContext: {\n        newName: `pageContext`,\n        docsLink: `https://gatsby.dev/pathContext`,\n      },\n    }\n    const deprecatedLocations = {}\n    deprecatedApis.forEach(api => (deprecatedLocations[api] = []))\n\n    glob\n      .sync(`{,!(node_modules|public)/**/}*.js`, { nodir: true })\n      .forEach(file => {\n        const fileText = fs.readFileSync(file)\n        const matchingApis = deprecatedApis.filter(\n          api => fileText.indexOf(api) !== -1\n        )\n        matchingApis.forEach(api => deprecatedLocations[api].push(file))\n      })\n\n    deprecatedApis.forEach(api => {\n      if (deprecatedLocations[api].length) {\n        console.log(\n          `%s %s %s %s`,\n          chalk.cyan(api),\n          chalk.yellow(`is deprecated. Please use`),\n          chalk.cyan(fixMap[api].newName),\n          chalk.yellow(\n            `instead. For migration instructions, see ${\n              fixMap[api].docsLink\n            }\\nCheck the following files:`\n          )\n        )\n        console.log()\n        deprecatedLocations[api].forEach(file => console.log(file))\n        console.log()\n      }\n    })\n  }\n\n  let isFirstCompile = true\n  // \"done\" event fires when Webpack has finished recompiling the bundle.\n  // Whether or not you have warnings or errors, you will get this event.\n  compiler.hooks.done.tapAsync(`print getsby instructions`, (stats, done) => {\n    // We have switched off the default Webpack output in WebpackDevServer\n    // options so we are going to \"massage\" the warnings and errors and present\n    // them in a readable focused way.\n    const messages = formatWebpackMessages(stats.toJson({}, true))\n    const urls = prepareUrls(\n      program.ssl ? `https` : `http`,\n      program.host,\n      program.port\n    )\n    const isSuccessful = !messages.errors.length\n    // if (isSuccessful) {\n    // console.log(chalk.green(`Compiled successfully!`))\n    // }\n    // if (isSuccessful && (isInteractive || isFirstCompile)) {\n    if (isSuccessful && isFirstCompile) {\n      printInstructions(program.sitePackageJson.name, urls, program.useYarn)\n      printDeprecationWarnings()\n      if (program.open) {\n        Promise.resolve(openurl(urls.localUrlForBrowser)).catch(err =>\n          console.log(\n            `${chalk.yellow(\n              `warn`\n            )} Browser not opened because no browser was found`\n          )\n        )\n      }\n    }\n\n    isFirstCompile = false\n\n    // If errors exist, only show errors.\n    // if (messages.errors.length) {\n    // // Only keep the first error. Others are often indicative\n    // // of the same problem, but confuse the reader with noise.\n    // if (messages.errors.length > 1) {\n    // messages.errors.length = 1\n    // }\n    // console.log(chalk.red(\"Failed to compile.\\n\"))\n    // console.log(messages.errors.join(\"\\n\\n\"))\n    // return\n    // }\n\n    // Show warnings if no errors were found.\n    // if (messages.warnings.length) {\n    // console.log(chalk.yellow(\"Compiled with warnings.\\n\"))\n    // console.log(messages.warnings.join(\"\\n\\n\"))\n\n    // // Teach some ESLint tricks.\n    // console.log(\n    // \"\\nSearch for the \" +\n    // chalk.underline(chalk.yellow(\"keywords\")) +\n    // \" to learn more about each warning.\"\n    // )\n    // console.log(\n    // \"To ignore, add \" +\n    // chalk.cyan(\"// eslint-disable-next-line\") +\n    // \" to the line before.\\n\"\n    // )\n    // }\n\n    done()\n  })\n}\n"],"file":"develop.js"}
\ No newline at end of file
+{"version":3,"sources":["../../src/commands/develop.js"],"names":["url","require","glob","fs","openurl","chokidar","express","graphqlHTTP","graphqlPlayground","default","formatError","request","rl","webpack","webpackConfig","bootstrap","store","emitter","syncStaticDir","buildHTML","withBasePath","report","launchEditor","formatWebpackMessages","chalk","address","withResolverContext","sourceNodes","websocketManager","getSslCert","slash","initTracer","apiRunnerNode","telemetry","queryRunner","queryWatcher","writeJsRequires","db","detectPortInUseAndPrompt","onExit","setTimeout","rlInterface","createInterface","input","process","stdin","output","stdout","on","exit","startQueryListener","processing","Set","waiting","Map","betterQueueOptions","priority","job","cb","activePaths","Array","from","values","id","includes","merge","oldTask","newTask","filter","has","set","postHandler","queryJob","result","isPage","emitPageData","emitStaticQueryData","delete","queue","push","get","createQueue","startListener","runPageQueries","queryIds","activity","activityTimer","start","processPageQueries","end","boundActionCreators","setProgramStatus","waitJobsFinished","Promise","resolve","reject","onEndJob","getState","jobs","active","length","off","trackCli","startServer","program","directory","directoryPath","createIndexHtml","buildRenderer","buildPages","pagePaths","err","name","panic","stripIndent","devConfig","port","compiler","app","use","expressMiddleware","log","path","heartbeat","env","GATSBY_GRAPHQL_IDE","endpoint","schema","graphiql","context","stack","split","mapToObject","map","obj","key","value","req","res","json","pages","next","header","post","enableRefresh","ENABLE_GATSBY_REFRESH_ENDPOINT","refreshToken","GATSBY_REFRESH_TOKEN","authorizedRefresh","headers","authorization","console","query","fileName","lineNumber","index","logLevel","publicPath","stats","developMiddleware","config","proxy","prefix","proxiedUrl","originalUrl","pipe","message","error","status","sendFile","server","Server","ssl","createServer","init","socket","getSocket","listener","listen","host","code","watchGlobs","watch","to","emit","module","exports","openTracingConfigFile","startBackgroundUpdate","parseInt","https","sitePackageJson","replace","certFile","keyFile","newPort","prepareUrls","protocol","formatUrl","hostname","format","pathname","prettyPrintUrl","bold","isUnspecifiedHost","lanUrlForConfig","lanUrlForTerminal","ip","test","undefined","_e","localUrlForTerminal","localUrlForBrowser","printInstructions","appName","urls","useYarn","cyan","printDeprecationWarnings","deprecatedApis","fixMap","newName","docsLink","pathContext","deprecatedLocations","forEach","api","sync","nodir","file","fileText","readFileSync","matchingApis","indexOf","yellow","graphqlRunner","calcBootstrapDirtyQueryIds","groupQueryIds","staticQueryIds","pageQueryIds","processStaticQueries","startPageListener","saveState","startAutosave","startWatchDeletePage","isFirstCompile","hooks","done","tapAsync","messages","toJson","isSuccessful","errors","open","catch"],"mappings":"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","sourcesContent":["/* @flow */\n\nconst url = require(`url`)\nconst glob = require(`glob`)\nconst fs = require(`fs`)\nconst openurl = require(`better-opn`)\nconst chokidar = require(`chokidar`)\nconst express = require(`express`)\nconst graphqlHTTP = require(`express-graphql`)\nconst graphqlPlayground = require(`graphql-playground-middleware-express`)\n  .default\nconst { formatError } = require(`graphql`)\nconst request = require(`request`)\nconst rl = require(`readline`)\nconst webpack = require(`webpack`)\nconst webpackConfig = require(`../utils/webpack.config`)\nconst bootstrap = require(`../bootstrap`)\nconst { store, emitter } = require(`../redux`)\nconst { syncStaticDir } = require(`../utils/get-static-dir`)\nconst buildHTML = require(`./build-html`)\nconst { withBasePath } = require(`../utils/path`)\nconst report = require(`gatsby-cli/lib/reporter`)\nconst launchEditor = require(`react-dev-utils/launchEditor`)\nconst formatWebpackMessages = require(`react-dev-utils/formatWebpackMessages`)\nconst chalk = require(`chalk`)\nconst address = require(`address`)\nconst withResolverContext = require(`../schema/context`)\nconst sourceNodes = require(`../utils/source-nodes`)\nconst websocketManager = require(`../utils/websocket-manager`)\nconst getSslCert = require(`../utils/get-ssl-cert`)\nconst slash = require(`slash`)\nconst { initTracer } = require(`../utils/tracer`)\nconst apiRunnerNode = require(`../utils/api-runner-node`)\nconst telemetry = require(`gatsby-telemetry`)\nconst queryRunner = require(`../query`)\nconst queryWatcher = require(`../query/query-watcher`)\nconst writeJsRequires = require(`../bootstrap/write-js-requires`)\nconst db = require(`../db`)\nconst detectPortInUseAndPrompt = require(`../utils/detect-port-in-use-and-prompt`)\nconst onExit = require(`signal-exit`)\n\n// const isInteractive = process.stdout.isTTY\n\n// Watch the static directory and copy files to public as they're added or\n// changed. Wait 10 seconds so copying doesn't interfere with the regular\n// bootstrap.\nsetTimeout(() => {\n  syncStaticDir()\n}, 10000)\n\nconst rlInterface = rl.createInterface({\n  input: process.stdin,\n  output: process.stdout,\n})\n\n// Quit immediately on hearing ctrl-c\nrlInterface.on(`SIGINT`, () => {\n  process.exit()\n})\n\nfunction startQueryListener() {\n  const processing = new Set()\n  const waiting = new Map()\n\n  const betterQueueOptions = {\n    priority: (job, cb) => {\n      const activePaths = Array.from(websocketManager.activePaths.values())\n      if (job.id && activePaths.includes(job.id)) {\n        cb(null, 10)\n      } else {\n        cb(null, 1)\n      }\n    },\n    merge: (oldTask, newTask, cb) => {\n      cb(null, newTask)\n    },\n    filter: (job, cb) => {\n      if (processing.has(job.id)) {\n        waiting.set(job.id, job)\n        cb(`already running`)\n      } else {\n        cb(null, job)\n      }\n    },\n  }\n\n  const postHandler = async ({ queryJob, result }) => {\n    if (queryJob.isPage) {\n      websocketManager.emitPageData({\n        ...result,\n        id: queryJob.id,\n      })\n    } else {\n      websocketManager.emitStaticQueryData({\n        ...result,\n        id: queryJob.id,\n      })\n    }\n    processing.delete(queryJob.id)\n    if (waiting.has(queryJob.id)) {\n      queue.push(waiting.get(queryJob.id))\n      waiting.delete(queryJob.id)\n    }\n  }\n\n  const queue = queryRunner.createQueue({ postHandler, betterQueueOptions })\n  queryRunner.startListener(queue)\n}\n\nconst runPageQueries = async queryIds => {\n  let activity = report.activityTimer(`run page queries`)\n  activity.start()\n  await queryRunner.processPageQueries(queryIds, { activity })\n  activity.end()\n\n  require(`../redux/actions`).boundActionCreators.setProgramStatus(\n    `BOOTSTRAP_QUERY_RUNNING_FINISHED`\n  )\n}\n\nconst waitJobsFinished = () =>\n  new Promise((resolve, reject) => {\n    const onEndJob = () => {\n      if (store.getState().jobs.active.length === 0) {\n        resolve()\n        emitter.off(`END_JOB`, onEndJob)\n      }\n    }\n    emitter.on(`END_JOB`, onEndJob)\n    onEndJob()\n  })\n\nonExit(() => {\n  telemetry.trackCli(`DEVELOP_STOP`)\n})\n\nasync function startServer(program) {\n  const directory = program.directory\n  const directoryPath = withBasePath(directory)\n  const createIndexHtml = async () => {\n    try {\n      await buildHTML.buildRenderer(program, `develop-html`)\n      await buildHTML.buildPages({ program, pagePaths: [`/`] })\n    } catch (err) {\n      if (err.name !== `WebpackError`) {\n        report.panic(err)\n        return\n      }\n      report.panic(\n        report.stripIndent`\n          There was an error compiling the html.js component for the development server.\n\n          See our docs page on debugging HTML builds for help https://gatsby.dev/debug-html\n        `,\n        err\n      )\n    }\n  }\n\n  await createIndexHtml()\n\n  const devConfig = await webpackConfig(\n    program,\n    directory,\n    `develop`,\n    program.port\n  )\n\n  const compiler = webpack(devConfig)\n\n  /**\n   * Set up the express app.\n   **/\n  const app = express()\n  app.use(telemetry.expressMiddleware(`DEVELOP`))\n  app.use(\n    require(`webpack-hot-middleware`)(compiler, {\n      log: false,\n      path: `/__webpack_hmr`,\n      heartbeat: 10 * 1000,\n    })\n  )\n\n  if (process.env.GATSBY_GRAPHQL_IDE === `playground`) {\n    app.get(\n      `/___graphql`,\n      graphqlPlayground({\n        endpoint: `/___graphql`,\n      }),\n      () => {}\n    )\n  }\n\n  app.use(\n    `/___graphql`,\n    graphqlHTTP(() => {\n      const schema = store.getState().schema\n      return {\n        schema,\n        graphiql:\n          process.env.GATSBY_GRAPHQL_IDE === `playground` ? false : true,\n        context: withResolverContext({}, schema),\n        formatError(err) {\n          return {\n            ...formatError(err),\n            stack: err.stack ? err.stack.split(`\\n`) : [],\n          }\n        },\n      }\n    })\n  )\n\n  const mapToObject = map => {\n    const obj = {}\n    for (let [key, value] of map) {\n      obj[key] = value\n    }\n    return obj\n  }\n\n  app.get(`/___pages`, (req, res) => {\n    res.json(mapToObject(store.getState().pages))\n  })\n\n  // Allow requests from any origin. Avoids CORS issues when using the `--host` flag.\n  app.use((req, res, next) => {\n    res.header(`Access-Control-Allow-Origin`, `*`)\n    res.header(\n      `Access-Control-Allow-Headers`,\n      `Origin, X-Requested-With, Content-Type, Accept`\n    )\n    next()\n  })\n\n  /**\n   * Refresh external data sources.\n   * This behavior is disabled by default, but the ENABLE_REFRESH_ENDPOINT env var enables it\n   * If no GATSBY_REFRESH_TOKEN env var is available, then no Authorization header is required\n   **/\n  app.post(`/__refresh`, (req, res) => {\n    const enableRefresh = process.env.ENABLE_GATSBY_REFRESH_ENDPOINT\n    const refreshToken = process.env.GATSBY_REFRESH_TOKEN\n    const authorizedRefresh =\n      !refreshToken || req.headers.authorization === refreshToken\n\n    if (enableRefresh && authorizedRefresh) {\n      console.log(`Refreshing source data`)\n      sourceNodes()\n    }\n    res.end()\n  })\n\n  app.get(`/__open-stack-frame-in-editor`, (req, res) => {\n    launchEditor(req.query.fileName, req.query.lineNumber)\n    res.end()\n  })\n\n  // Disable directory indexing i.e. serving index.html from a directory.\n  // This can lead to serving stale html files during development.\n  //\n  // We serve by default an empty index.html that sets up the dev environment.\n  app.use(require(`./develop-static`)(`public`, { index: false }))\n\n  app.use(\n    require(`webpack-dev-middleware`)(compiler, {\n      logLevel: `trace`,\n      publicPath: devConfig.output.publicPath,\n      stats: `errors-only`,\n    })\n  )\n\n  // Expose access to app for advanced use cases\n  const { developMiddleware } = store.getState().config\n\n  if (developMiddleware) {\n    developMiddleware(app)\n  }\n\n  // Set up API proxy.\n  const { proxy } = store.getState().config\n  if (proxy) {\n    const { prefix, url } = proxy\n    app.use(`${prefix}/*`, (req, res) => {\n      const proxiedUrl = url + req.originalUrl\n      req\n        .pipe(\n          request(proxiedUrl).on(`error`, err => {\n            const message = `Error when trying to proxy request \"${\n              req.originalUrl\n            }\" to \"${proxiedUrl}\"`\n\n            report.error(message, err)\n            res.status(500).end()\n          })\n        )\n        .pipe(res)\n    })\n  }\n\n  await apiRunnerNode(`onCreateDevServer`, { app })\n\n  // Render an HTML page and serve it.\n  app.use((req, res, next) => {\n    res.sendFile(directoryPath(`public/index.html`), err => {\n      if (err) {\n        res.status(500).end()\n      }\n    })\n  })\n\n  /**\n   * Set up the HTTP server and socket.io.\n   **/\n  let server = require(`http`).Server(app)\n\n  // If a SSL cert exists in program, use it with `createServer`.\n  if (program.ssl) {\n    server = require(`https`).createServer(program.ssl, app)\n  }\n  websocketManager.init({ server, directory: program.directory })\n  const socket = websocketManager.getSocket()\n\n  const listener = server.listen(program.port, program.host, err => {\n    if (err) {\n      if (err.code === `EADDRINUSE`) {\n        // eslint-disable-next-line max-len\n        report.panic(\n          `Unable to start Gatsby on port ${\n            program.port\n          } as there's already a process listening on that port.`\n        )\n        return\n      }\n\n      report.panic(`There was a problem starting the development server`, err)\n    }\n  })\n\n  // Register watcher that rebuilds index.html every time html.js changes.\n  const watchGlobs = [`src/html.js`, `plugins/**/gatsby-ssr.js`].map(path =>\n    slash(directoryPath(path))\n  )\n\n  chokidar.watch(watchGlobs).on(`change`, async () => {\n    await createIndexHtml()\n    socket.to(`clients`).emit(`reload`)\n  })\n\n  return [compiler, listener]\n}\n\nmodule.exports = async (program: any) => {\n  initTracer(program.openTracingConfigFile)\n  telemetry.trackCli(`DEVELOP_START`)\n  telemetry.startBackgroundUpdate()\n\n  const port =\n    typeof program.port === `string` ? parseInt(program.port, 10) : program.port\n\n  // In order to enable custom ssl, --cert-file --key-file and -https flags must all be\n  // used together\n  if ((program[`cert-file`] || program[`key-file`]) && !program.https) {\n    report.panic(\n      `for custom ssl --https, --cert-file, and --key-file must be used together`\n    )\n  }\n\n  // Check if https is enabled, then create or get SSL cert.\n  // Certs are named after `name` inside the project's package.json.\n  // Scoped names are converted from @npm/package-name to npm--package-name\n  if (program.https) {\n    program.ssl = await getSslCert({\n      name: program.sitePackageJson.name.replace(`@`, ``).replace(`/`, `--`),\n      certFile: program[`cert-file`],\n      keyFile: program[`key-file`],\n      directory: program.directory,\n    })\n  }\n\n  program.port = await new Promise(resolve => {\n    detectPortInUseAndPrompt(port, rlInterface, newPort => {\n      resolve(newPort)\n    })\n  })\n\n  function prepareUrls(protocol, host, port) {\n    const formatUrl = hostname =>\n      url.format({\n        protocol,\n        hostname,\n        port,\n        pathname: `/`,\n      })\n    const prettyPrintUrl = hostname =>\n      url.format({\n        protocol,\n        hostname,\n        port: chalk.bold(port),\n        pathname: `/`,\n      })\n\n    const isUnspecifiedHost = host === `0.0.0.0` || host === `::`\n    let lanUrlForConfig, lanUrlForTerminal\n    if (isUnspecifiedHost) {\n      try {\n        // This can only return an IPv4 address\n        lanUrlForConfig = address.ip()\n        if (lanUrlForConfig) {\n          // Check if the address is a private ip\n          // https://en.wikipedia.org/wiki/Private_network#Private_IPv4_address_spaces\n          if (\n            /^10[.]|^172[.](1[6-9]|2[0-9]|3[0-1])[.]|^192[.]168[.]/.test(\n              lanUrlForConfig\n            )\n          ) {\n            // Address is private, format it for later use\n            lanUrlForTerminal = prettyPrintUrl(lanUrlForConfig)\n          } else {\n            // Address is not private, so we will discard it\n            lanUrlForConfig = undefined\n          }\n        }\n      } catch (_e) {\n        // ignored\n      }\n    }\n    // TODO collect errors (GraphQL + Webpack) in Redux so we\n    // can clear terminal and print them out on every compile.\n    // Borrow pretty printing code from webpack plugin.\n    const localUrlForTerminal = prettyPrintUrl(host)\n    const localUrlForBrowser = formatUrl(host)\n    return {\n      lanUrlForConfig,\n      lanUrlForTerminal,\n      localUrlForTerminal,\n      localUrlForBrowser,\n    }\n  }\n\n  function printInstructions(appName, urls, useYarn) {\n    console.log()\n    console.log(`You can now view ${chalk.bold(appName)} in the browser.`)\n    console.log()\n\n    if (urls.lanUrlForTerminal) {\n      console.log(\n        `  ${chalk.bold(`Local:`)}            ${urls.localUrlForTerminal}`\n      )\n      console.log(\n        `  ${chalk.bold(`On Your Network:`)}  ${urls.lanUrlForTerminal}`\n      )\n    } else {\n      console.log(`  ${urls.localUrlForTerminal}`)\n    }\n\n    console.log()\n    console.log(\n      `View ${\n        process.env.GATSBY_GRAPHQL_IDE === `playground`\n          ? `the GraphQL Playground`\n          : `GraphiQL`\n      }, an in-browser IDE, to explore your site's data and schema`\n    )\n    console.log()\n    console.log(`  ${urls.localUrlForTerminal}___graphql`)\n\n    console.log()\n    console.log(`Note that the development build is not optimized.`)\n    console.log(\n      `To create a production build, use ` + `${chalk.cyan(`npm run build`)}`\n    )\n    console.log()\n  }\n\n  function printDeprecationWarnings() {\n    const deprecatedApis = [`boundActionCreators`, `pathContext`]\n    const fixMap = {\n      boundActionCreators: {\n        newName: `actions`,\n        docsLink: `https://gatsby.dev/boundActionCreators`,\n      },\n      pathContext: {\n        newName: `pageContext`,\n        docsLink: `https://gatsby.dev/pathContext`,\n      },\n    }\n    const deprecatedLocations = {}\n    deprecatedApis.forEach(api => (deprecatedLocations[api] = []))\n\n    glob\n      .sync(`{,!(node_modules|public)/**/}*.js`, { nodir: true })\n      .forEach(file => {\n        const fileText = fs.readFileSync(file)\n        const matchingApis = deprecatedApis.filter(\n          api => fileText.indexOf(api) !== -1\n        )\n        matchingApis.forEach(api => deprecatedLocations[api].push(file))\n      })\n\n    deprecatedApis.forEach(api => {\n      if (deprecatedLocations[api].length) {\n        console.log(\n          `%s %s %s %s`,\n          chalk.cyan(api),\n          chalk.yellow(`is deprecated. Please use`),\n          chalk.cyan(fixMap[api].newName),\n          chalk.yellow(\n            `instead. For migration instructions, see ${\n              fixMap[api].docsLink\n            }\\nCheck the following files:`\n          )\n        )\n        console.log()\n        deprecatedLocations[api].forEach(file => console.log(file))\n        console.log()\n      }\n    })\n  }\n\n  // Start bootstrap process.\n  const { graphqlRunner } = await bootstrap(program)\n\n  // Start the createPages hot reloader.\n  require(`../bootstrap/page-hot-reloader`)(graphqlRunner)\n\n  const queryIds = queryRunner.calcBootstrapDirtyQueryIds(store.getState())\n  const { staticQueryIds, pageQueryIds } = queryRunner.groupQueryIds(queryIds)\n  let activity = report.activityTimer(`run static queries`)\n  activity.start()\n  await queryRunner.processStaticQueries(staticQueryIds, { activity })\n  activity.end()\n\n  await runPageQueries(pageQueryIds)\n  await waitJobsFinished()\n  await writeJsRequires.startPageListener()\n  await db.saveState()\n  db.startAutosave()\n  startQueryListener()\n  queryWatcher.startWatchDeletePage()\n\n  const [compiler] = await startServer(program)\n\n  let isFirstCompile = true\n\n  // \"done\" event fires when Webpack has finished recompiling the bundle.\n  // Whether or not you have warnings or errors, you will get this event.\n  compiler.hooks.done.tapAsync(`print getsby instructions`, (stats, done) => {\n    // We have switched off the default Webpack output in WebpackDevServer\n    // options so we are going to \"massage\" the warnings and errors and present\n    // them in a readable focused way.\n    const messages = formatWebpackMessages(stats.toJson({}, true))\n    const urls = prepareUrls(\n      program.ssl ? `https` : `http`,\n      program.host,\n      program.port\n    )\n    const isSuccessful = !messages.errors.length\n    // if (isSuccessful) {\n    // console.log(chalk.green(`Compiled successfully!`))\n    // }\n    // if (isSuccessful && (isInteractive || isFirstCompile)) {\n    if (isSuccessful && isFirstCompile) {\n      printInstructions(program.sitePackageJson.name, urls, program.useYarn)\n      printDeprecationWarnings()\n      if (program.open) {\n        Promise.resolve(openurl(urls.localUrlForBrowser)).catch(err =>\n          console.log(\n            `${chalk.yellow(\n              `warn`\n            )} Browser not opened because no browser was found`\n          )\n        )\n      }\n    }\n\n    isFirstCompile = false\n\n    // If errors exist, only show errors.\n    // if (messages.errors.length) {\n    // // Only keep the first error. Others are often indicative\n    // // of the same problem, but confuse the reader with noise.\n    // if (messages.errors.length > 1) {\n    // messages.errors.length = 1\n    // }\n    // console.log(chalk.red(\"Failed to compile.\\n\"))\n    // console.log(messages.errors.join(\"\\n\\n\"))\n    // return\n    // }\n\n    // Show warnings if no errors were found.\n    // if (messages.warnings.length) {\n    // console.log(chalk.yellow(\"Compiled with warnings.\\n\"))\n    // console.log(messages.warnings.join(\"\\n\\n\"))\n\n    // // Teach some ESLint tricks.\n    // console.log(\n    // \"\\nSearch for the \" +\n    // chalk.underline(chalk.yellow(\"keywords\")) +\n    // \" to learn more about each warning.\"\n    // )\n    // console.log(\n    // \"To ignore, add \" +\n    // chalk.cyan(\"// eslint-disable-next-line\") +\n    // \" to the line before.\\n\"\n    // )\n    // }\n\n    done()\n  })\n}\n"],"file":"develop.js"}
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/commands/repl.js b/node_modules/gatsby/dist/commands/repl.js
index a05de8e..01ab12a 100644
--- a/node_modules/gatsby/dist/commands/repl.js
+++ b/node_modules/gatsby/dist/commands/repl.js
@@ -31,7 +31,6 @@ function () {
           schema = _store$getState.schema,
           config = _store$getState.config,
           babelrc = _store$getState.babelrc,
-          jsonDataPaths = _store$getState.jsonDataPaths,
           pages = _store$getState.pages,
           components = _store$getState.components,
           staticQueryComponents = _store$getState.staticQueryComponents;
@@ -59,7 +58,6 @@ function () {
 
     _.context.babelrc = babelrc;
     _.context.components = components;
-    _.context.dataPaths = jsonDataPaths;
     _.context.getNode = getNode;
     _.context.getNodes = getNodes;
     _.context.getNodesByType = getNodesByType;
diff --git a/node_modules/gatsby/dist/commands/repl.js.map b/node_modules/gatsby/dist/commands/repl.js.map
index eadfa46..e81fbfd 100644
--- a/node_modules/gatsby/dist/commands/repl.js.map
+++ b/node_modules/gatsby/dist/commands/repl.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/commands/repl.js"],"names":["repl","require","graphql","bootstrap","loadNodeContent","getNodes","getNode","getNodesByType","store","module","exports","program","getState","schema","config","babelrc","jsonDataPaths","pages","components","staticQueryComponents","nodes","query","result","console","log","JSON","stringify","_","start","prompt","context","dataPaths","entries","siteConfig","staticQueries","on","process","exit"],"mappings":";;;;;;AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAE,MAAF,CAApB;;iBACoBA,OAAO,CAAE,SAAF,C;MAAnBC,O,YAAAA,O;;AACR,MAAMC,SAAS,GAAGF,OAAO,CAAE,cAAF,CAAzB;;kBAMIA,OAAO,CAAE,aAAF,C;MAJTG,e,aAAAA,e;MACAC,Q,aAAAA,Q;MACAC,O,aAAAA,O;MACAC,c,aAAAA,c;;kBAEgBN,OAAO,CAAE,UAAF,C;MAAjBO,K,aAAAA,K;;AAERC,MAAM,CAACC,OAAP;AAAA;AAAA;AAAA,6CAAiB,WAAMC,OAAN,EAAiB;AAChC;AACA,UAAMR,SAAS,CAACQ,OAAD,CAAf,CAFgC,CAIhC;;AAJgC,4BAa5BH,KAAK,CAACI,QAAN,EAb4B;AAAA,UAM9BC,MAN8B,mBAM9BA,MAN8B;AAAA,UAO9BC,MAP8B,mBAO9BA,MAP8B;AAAA,UAQ9BC,OAR8B,mBAQ9BA,OAR8B;AAAA,UAS9BC,aAT8B,mBAS9BA,aAT8B;AAAA,UAU9BC,KAV8B,mBAU9BA,KAV8B;AAAA,UAW9BC,UAX8B,mBAW9BA,UAX8B;AAAA,UAY9BC,qBAZ8B,mBAY9BA,qBAZ8B;;AAehC,UAAMC,KAAK,GAAGf,QAAQ,EAAtB;;AAEA,UAAMgB,KAAK;AAAA;AAAA;AAAA,kDAAG,WAAMA,MAAN,EAAe;AAC3B,cAAMC,MAAM,SAASpB,OAAO,CAACW,MAAD,EAASQ,MAAT,EAAgB,EAAhB,EAAoB,EAApB,EAAwB,EAAxB,CAA5B;AACAE,QAAAA,OAAO,CAACC,GAAR,CAAa,iBAAgBC,IAAI,CAACC,SAAL,CAAeJ,MAAf,CAAuB,EAApD;AACD,OAHU;;AAAA;AAAA;AAAA;AAAA,OAAX,CAjBgC,CAsBhC;;;AACA,UAAMK,CAAC,GAAG3B,IAAI,CAAC4B,KAAL,CAAW;AACnBC,MAAAA,MAAM,EAAG;AADU,KAAX,CAAV,CAvBgC,CA2BhC;;;AACAF,IAAAA,CAAC,CAACG,OAAF,CAAUf,OAAV,GAAoBA,OAApB;AACAY,IAAAA,CAAC,CAACG,OAAF,CAAUZ,UAAV,GAAuBA,UAAvB;AACAS,IAAAA,CAAC,CAACG,OAAF,CAAUC,SAAV,GAAsBf,aAAtB;AACAW,IAAAA,CAAC,CAACG,OAAF,CAAUxB,OAAV,GAAoBA,OAApB;AACAqB,IAAAA,CAAC,CAACG,OAAF,CAAUzB,QAAV,GAAqBA,QAArB;AACAsB,IAAAA,CAAC,CAACG,OAAF,CAAUvB,cAAV,GAA2BA,cAA3B;AACAoB,IAAAA,CAAC,CAACG,OAAF,CAAU1B,eAAV,GAA4BA,eAA5B;AACAuB,IAAAA,CAAC,CAACG,OAAF,CAAUV,KAAV,GAAkB,CAAC,GAAGA,KAAK,CAACY,OAAN,EAAJ,CAAlB;AACAL,IAAAA,CAAC,CAACG,OAAF,CAAUb,KAAV,GAAkB,CAAC,GAAGA,KAAK,CAACe,OAAN,EAAJ,CAAlB;AACAL,IAAAA,CAAC,CAACG,OAAF,CAAU5B,OAAV,GAAoBmB,KAApB;AACAM,IAAAA,CAAC,CAACG,OAAF,CAAUjB,MAAV,GAAmBA,MAAnB;AACAc,IAAAA,CAAC,CAACG,OAAF,CAAUG,UAAV,GAAuBnB,MAAvB;AACAa,IAAAA,CAAC,CAACG,OAAF,CAAUI,aAAV,GAA0Bf,qBAA1B;;AAEAQ,IAAAA,CAAC,CAACQ,EAAF,CAAM,MAAN,EAAa,MAAMC,OAAO,CAACC,IAAR,CAAa,CAAb,CAAnB;AACD,GA3CD;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["const repl = require(`repl`)\nconst { graphql } = require(`graphql`)\nconst bootstrap = require(`../bootstrap`)\nconst {\n  loadNodeContent,\n  getNodes,\n  getNode,\n  getNodesByType,\n} = require(`../db/nodes`)\nconst { store } = require(`../redux`)\n\nmodule.exports = async program => {\n  // run bootstrap\n  await bootstrap(program)\n\n  // get all the goodies from the store\n  const {\n    schema,\n    config,\n    babelrc,\n    jsonDataPaths,\n    pages,\n    components,\n    staticQueryComponents,\n  } = store.getState()\n\n  const nodes = getNodes()\n\n  const query = async query => {\n    const result = await graphql(schema, query, {}, {}, {})\n    console.log(`query result: ${JSON.stringify(result)}`)\n  }\n\n  // init new repl\n  const _ = repl.start({\n    prompt: `gatsby > `,\n  })\n\n  // set some globals to make life easier\n  _.context.babelrc = babelrc\n  _.context.components = components\n  _.context.dataPaths = jsonDataPaths\n  _.context.getNode = getNode\n  _.context.getNodes = getNodes\n  _.context.getNodesByType = getNodesByType\n  _.context.loadNodeContent = loadNodeContent\n  _.context.nodes = [...nodes.entries()]\n  _.context.pages = [...pages.entries()]\n  _.context.graphql = query\n  _.context.schema = schema\n  _.context.siteConfig = config\n  _.context.staticQueries = staticQueryComponents\n\n  _.on(`exit`, () => process.exit(0))\n}\n"],"file":"repl.js"}
\ No newline at end of file
+{"version":3,"sources":["../../src/commands/repl.js"],"names":["repl","require","graphql","bootstrap","loadNodeContent","getNodes","getNode","getNodesByType","store","module","exports","program","getState","schema","config","babelrc","pages","components","staticQueryComponents","nodes","query","result","console","log","JSON","stringify","_","start","prompt","context","entries","siteConfig","staticQueries","on","process","exit"],"mappings":";;;;;;AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAE,MAAF,CAApB;;iBACoBA,OAAO,CAAE,SAAF,C;MAAnBC,O,YAAAA,O;;AACR,MAAMC,SAAS,GAAGF,OAAO,CAAE,cAAF,CAAzB;;kBAMIA,OAAO,CAAE,aAAF,C;MAJTG,e,aAAAA,e;MACAC,Q,aAAAA,Q;MACAC,O,aAAAA,O;MACAC,c,aAAAA,c;;kBAEgBN,OAAO,CAAE,UAAF,C;MAAjBO,K,aAAAA,K;;AAERC,MAAM,CAACC,OAAP;AAAA;AAAA;AAAA,6CAAiB,WAAMC,OAAN,EAAiB;AAChC;AACA,UAAMR,SAAS,CAACQ,OAAD,CAAf,CAFgC,CAIhC;;AAJgC,4BAY5BH,KAAK,CAACI,QAAN,EAZ4B;AAAA,UAM9BC,MAN8B,mBAM9BA,MAN8B;AAAA,UAO9BC,MAP8B,mBAO9BA,MAP8B;AAAA,UAQ9BC,OAR8B,mBAQ9BA,OAR8B;AAAA,UAS9BC,KAT8B,mBAS9BA,KAT8B;AAAA,UAU9BC,UAV8B,mBAU9BA,UAV8B;AAAA,UAW9BC,qBAX8B,mBAW9BA,qBAX8B;;AAchC,UAAMC,KAAK,GAAGd,QAAQ,EAAtB;;AAEA,UAAMe,KAAK;AAAA;AAAA;AAAA,kDAAG,WAAMA,MAAN,EAAe;AAC3B,cAAMC,MAAM,SAASnB,OAAO,CAACW,MAAD,EAASO,MAAT,EAAgB,EAAhB,EAAoB,EAApB,EAAwB,EAAxB,CAA5B;AACAE,QAAAA,OAAO,CAACC,GAAR,CAAa,iBAAgBC,IAAI,CAACC,SAAL,CAAeJ,MAAf,CAAuB,EAApD;AACD,OAHU;;AAAA;AAAA;AAAA;AAAA,OAAX,CAhBgC,CAqBhC;;;AACA,UAAMK,CAAC,GAAG1B,IAAI,CAAC2B,KAAL,CAAW;AACnBC,MAAAA,MAAM,EAAG;AADU,KAAX,CAAV,CAtBgC,CA0BhC;;;AACAF,IAAAA,CAAC,CAACG,OAAF,CAAUd,OAAV,GAAoBA,OAApB;AACAW,IAAAA,CAAC,CAACG,OAAF,CAAUZ,UAAV,GAAuBA,UAAvB;AACAS,IAAAA,CAAC,CAACG,OAAF,CAAUvB,OAAV,GAAoBA,OAApB;AACAoB,IAAAA,CAAC,CAACG,OAAF,CAAUxB,QAAV,GAAqBA,QAArB;AACAqB,IAAAA,CAAC,CAACG,OAAF,CAAUtB,cAAV,GAA2BA,cAA3B;AACAmB,IAAAA,CAAC,CAACG,OAAF,CAAUzB,eAAV,GAA4BA,eAA5B;AACAsB,IAAAA,CAAC,CAACG,OAAF,CAAUV,KAAV,GAAkB,CAAC,GAAGA,KAAK,CAACW,OAAN,EAAJ,CAAlB;AACAJ,IAAAA,CAAC,CAACG,OAAF,CAAUb,KAAV,GAAkB,CAAC,GAAGA,KAAK,CAACc,OAAN,EAAJ,CAAlB;AACAJ,IAAAA,CAAC,CAACG,OAAF,CAAU3B,OAAV,GAAoBkB,KAApB;AACAM,IAAAA,CAAC,CAACG,OAAF,CAAUhB,MAAV,GAAmBA,MAAnB;AACAa,IAAAA,CAAC,CAACG,OAAF,CAAUE,UAAV,GAAuBjB,MAAvB;AACAY,IAAAA,CAAC,CAACG,OAAF,CAAUG,aAAV,GAA0Bd,qBAA1B;;AAEAQ,IAAAA,CAAC,CAACO,EAAF,CAAM,MAAN,EAAa,MAAMC,OAAO,CAACC,IAAR,CAAa,CAAb,CAAnB;AACD,GAzCD;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["const repl = require(`repl`)\nconst { graphql } = require(`graphql`)\nconst bootstrap = require(`../bootstrap`)\nconst {\n  loadNodeContent,\n  getNodes,\n  getNode,\n  getNodesByType,\n} = require(`../db/nodes`)\nconst { store } = require(`../redux`)\n\nmodule.exports = async program => {\n  // run bootstrap\n  await bootstrap(program)\n\n  // get all the goodies from the store\n  const {\n    schema,\n    config,\n    babelrc,\n    pages,\n    components,\n    staticQueryComponents,\n  } = store.getState()\n\n  const nodes = getNodes()\n\n  const query = async query => {\n    const result = await graphql(schema, query, {}, {}, {})\n    console.log(`query result: ${JSON.stringify(result)}`)\n  }\n\n  // init new repl\n  const _ = repl.start({\n    prompt: `gatsby > `,\n  })\n\n  // set some globals to make life easier\n  _.context.babelrc = babelrc\n  _.context.components = components\n  _.context.getNode = getNode\n  _.context.getNodes = getNodes\n  _.context.getNodesByType = getNodesByType\n  _.context.loadNodeContent = loadNodeContent\n  _.context.nodes = [...nodes.entries()]\n  _.context.pages = [...pages.entries()]\n  _.context.graphql = query\n  _.context.schema = schema\n  _.context.siteConfig = config\n  _.context.staticQueries = staticQueryComponents\n\n  _.on(`exit`, () => process.exit(0))\n}\n"],"file":"repl.js"}
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/commands/serve.js b/node_modules/gatsby/dist/commands/serve.js
index 769d80c..dc28fc3 100644
--- a/node_modules/gatsby/dist/commands/serve.js
+++ b/node_modules/gatsby/dist/commands/serve.js
@@ -15,23 +15,23 @@ const compression = require(`compression`);
 
 const express = require(`express`);
 
+const getConfigFile = require(`../bootstrap/get-config-file`);
+
+const preferDefault = require(`../bootstrap/prefer-default`);
+
 const chalk = require(`chalk`);
 
 const _require = require(`@reach/router/lib/utils`),
       reachMatch = _require.match;
 
+const detectPortInUseAndPrompt = require(`../utils/detect-port-in-use-and-prompt`);
+
 const rl = require(`readline`);
 
 const onExit = require(`signal-exit`);
 
 const telemetry = require(`gatsby-telemetry`);
 
-const detectPortInUseAndPrompt = require(`../utils/detect-port-in-use-and-prompt`);
-
-const getConfigFile = require(`../bootstrap/get-config-file`);
-
-const preferDefault = require(`../bootstrap/prefer-default`);
-
 const rlInterface = rl.createInterface({
   input: process.stdin,
   output: process.stdout
@@ -79,11 +79,8 @@ function () {
         host = program.host;
     port = typeof port === `string` ? parseInt(port, 10) : port;
     const config = yield preferDefault(getConfigFile(program.directory, `gatsby-config`));
-
-    const _ref2 = config || {},
-          configPathPrefix = _ref2.pathPrefix;
-
-    const pathPrefix = prefixPaths && configPathPrefix ? configPathPrefix : `/`;
+    let pathPrefix = config && config.pathPrefix;
+    pathPrefix = prefixPaths && pathPrefix ? pathPrefix : `/`;
     const root = path.join(program.directory, `public`);
     const pages = yield getPages(program.directory);
     const app = express();
@@ -103,12 +100,6 @@ function () {
 
       return next();
     });
-    app.use(function (req, res, next) {
-      res.header(`Access-Control-Allow-Origin`, `http://${host}:${port}`);
-      res.header(`Access-Control-Allow-Credentials`, true);
-      res.header(`Access-Control-Allow-Headers`, `Origin, X-Requested-With, Content-Type, Accept`);
-      next();
-    });
     app.use(pathPrefix, router);
 
     const startListening = () => {
@@ -123,8 +114,10 @@ function () {
       });
     };
 
-    port = yield detectPortInUseAndPrompt(port, rlInterface);
-    startListening();
+    detectPortInUseAndPrompt(port, rlInterface, newPort => {
+      port = newPort;
+      startListening();
+    });
   });
 
   return function (_x) {
diff --git a/node_modules/gatsby/dist/commands/serve.js.map b/node_modules/gatsby/dist/commands/serve.js.map
index be05b4d..9405f0b 100644
--- a/node_modules/gatsby/dist/commands/serve.js.map
+++ b/node_modules/gatsby/dist/commands/serve.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/commands/serve.js"],"names":["path","require","openurl","fs","compression","express","chalk","reachMatch","match","rl","onExit","telemetry","detectPortInUseAndPrompt","getConfigFile","preferDefault","rlInterface","createInterface","input","process","stdin","output","stdout","on","exit","trackCli","getPages","directory","readFile","join","then","contents","JSON","parse","catch","clientOnlyPathsRouter","pages","options","clientOnlyRoutes","filter","page","matchPath","req","res","next","url","accepts","route","find","clientRoute","sendFile","err","module","exports","program","startBackgroundUpdate","prefixPaths","port","open","host","parseInt","config","configPathPrefix","pathPrefix","root","app","router","Router","use","expressMiddleware","static","status","header","startListening","listen","openUrlString","console","log","blue","bold","Promise","resolve","yellow"],"mappings":"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","sourcesContent":["/* @flow weak */\nconst path = require(`path`)\nconst openurl = require(`better-opn`)\nconst fs = require(`fs-extra`)\nconst compression = require(`compression`)\nconst express = require(`express`)\nconst chalk = require(`chalk`)\nconst { match: reachMatch } = require(`@reach/router/lib/utils`)\nconst rl = require(`readline`)\nconst onExit = require(`signal-exit`)\n\nconst telemetry = require(`gatsby-telemetry`)\n\nconst detectPortInUseAndPrompt = require(`../utils/detect-port-in-use-and-prompt`)\nconst getConfigFile = require(`../bootstrap/get-config-file`)\nconst preferDefault = require(`../bootstrap/prefer-default`)\n\nconst rlInterface = rl.createInterface({\n  input: process.stdin,\n  output: process.stdout,\n})\n\n// Quit immediately on hearing ctrl-c\nrlInterface.on(`SIGINT`, () => {\n  process.exit()\n})\n\nonExit(() => {\n  telemetry.trackCli(`SERVE_STOP`)\n})\n\nconst getPages = directory =>\n  fs\n    .readFile(path.join(directory, `.cache`, `pages.json`))\n    .then(contents => JSON.parse(contents))\n    .catch(() => [])\n\nconst clientOnlyPathsRouter = (pages, options) => {\n  const clientOnlyRoutes = pages.filter(page => page.matchPath)\n  return (req, res, next) => {\n    const { url } = req\n    if (req.accepts(`html`)) {\n      const route = clientOnlyRoutes.find(\n        clientRoute => reachMatch(clientRoute.matchPath, url) !== null\n      )\n      if (route && route.path) {\n        return res.sendFile(\n          path.join(route.path, `index.html`),\n          options,\n          err => {\n            if (err) {\n              next()\n            }\n          }\n        )\n      }\n    }\n    return next()\n  }\n}\n\nmodule.exports = async program => {\n  telemetry.trackCli(`SERVE_START`)\n  telemetry.startBackgroundUpdate()\n  let { prefixPaths, port, open, host } = program\n  port = typeof port === `string` ? parseInt(port, 10) : port\n\n  const config = await preferDefault(\n    getConfigFile(program.directory, `gatsby-config`)\n  )\n\n  const { pathPrefix: configPathPrefix } = config || {}\n\n  const pathPrefix = prefixPaths && configPathPrefix ? configPathPrefix : `/`\n\n  const root = path.join(program.directory, `public`)\n  const pages = await getPages(program.directory)\n\n  const app = express()\n  const router = express.Router()\n\n  app.use(telemetry.expressMiddleware(`SERVE`))\n\n  router.use(compression())\n  router.use(express.static(`public`))\n  router.use(clientOnlyPathsRouter(pages, { root }))\n  router.use((req, res, next) => {\n    if (req.accepts(`html`)) {\n      return res.status(404).sendFile(`404.html`, { root })\n    }\n    return next()\n  })\n  app.use(function(req, res, next) {\n    res.header(`Access-Control-Allow-Origin`, `http://${host}:${port}`)\n    res.header(`Access-Control-Allow-Credentials`, true)\n    res.header(\n      `Access-Control-Allow-Headers`,\n      `Origin, X-Requested-With, Content-Type, Accept`\n    )\n    next()\n  })\n  app.use(pathPrefix, router)\n\n  const startListening = () => {\n    app.listen(port, host, () => {\n      let openUrlString = `http://${host}:${port}${pathPrefix}`\n      console.log(\n        `${chalk.blue(`info`)} gatsby serve running at: ${chalk.bold(\n          openUrlString\n        )}`\n      )\n      if (open) {\n        console.log(`${chalk.blue(`info`)} Opening browser...`)\n        Promise.resolve(openurl(openUrlString)).catch(err =>\n          console.log(\n            `${chalk.yellow(\n              `warn`\n            )} Browser not opened because no browser was found`\n          )\n        )\n      }\n    })\n  }\n\n  port = await detectPortInUseAndPrompt(port, rlInterface)\n  startListening()\n}\n"],"file":"serve.js"}
\ No newline at end of file
+{"version":3,"sources":["../../src/commands/serve.js"],"names":["path","require","openurl","fs","compression","express","getConfigFile","preferDefault","chalk","reachMatch","match","detectPortInUseAndPrompt","rl","onExit","telemetry","rlInterface","createInterface","input","process","stdin","output","stdout","on","exit","trackCli","getPages","directory","readFile","join","then","contents","JSON","parse","catch","clientOnlyPathsRouter","pages","options","clientOnlyRoutes","filter","page","matchPath","req","res","next","url","accepts","route","find","clientRoute","sendFile","err","module","exports","program","startBackgroundUpdate","prefixPaths","port","open","host","parseInt","config","pathPrefix","root","app","router","Router","use","expressMiddleware","static","status","startListening","listen","openUrlString","console","log","blue","bold","Promise","resolve","yellow","newPort"],"mappings":"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","sourcesContent":["/* @flow weak */\nconst path = require(`path`)\nconst openurl = require(`better-opn`)\nconst fs = require(`fs-extra`)\nconst compression = require(`compression`)\nconst express = require(`express`)\nconst getConfigFile = require(`../bootstrap/get-config-file`)\nconst preferDefault = require(`../bootstrap/prefer-default`)\nconst chalk = require(`chalk`)\nconst { match: reachMatch } = require(`@reach/router/lib/utils`)\nconst detectPortInUseAndPrompt = require(`../utils/detect-port-in-use-and-prompt`)\nconst rl = require(`readline`)\nconst onExit = require(`signal-exit`)\n\nconst telemetry = require(`gatsby-telemetry`)\n\nconst rlInterface = rl.createInterface({\n  input: process.stdin,\n  output: process.stdout,\n})\n\n// Quit immediately on hearing ctrl-c\nrlInterface.on(`SIGINT`, () => {\n  process.exit()\n})\n\nonExit(() => {\n  telemetry.trackCli(`SERVE_STOP`)\n})\n\nconst getPages = directory =>\n  fs\n    .readFile(path.join(directory, `.cache`, `pages.json`))\n    .then(contents => JSON.parse(contents))\n    .catch(() => [])\n\nconst clientOnlyPathsRouter = (pages, options) => {\n  const clientOnlyRoutes = pages.filter(page => page.matchPath)\n  return (req, res, next) => {\n    const { url } = req\n    if (req.accepts(`html`)) {\n      const route = clientOnlyRoutes.find(\n        clientRoute => reachMatch(clientRoute.matchPath, url) !== null\n      )\n      if (route && route.path) {\n        return res.sendFile(\n          path.join(route.path, `index.html`),\n          options,\n          err => {\n            if (err) {\n              next()\n            }\n          }\n        )\n      }\n    }\n    return next()\n  }\n}\n\nmodule.exports = async program => {\n  telemetry.trackCli(`SERVE_START`)\n  telemetry.startBackgroundUpdate()\n  let { prefixPaths, port, open, host } = program\n  port = typeof port === `string` ? parseInt(port, 10) : port\n\n  const config = await preferDefault(\n    getConfigFile(program.directory, `gatsby-config`)\n  )\n\n  let pathPrefix = config && config.pathPrefix\n  pathPrefix = prefixPaths && pathPrefix ? pathPrefix : `/`\n\n  const root = path.join(program.directory, `public`)\n  const pages = await getPages(program.directory)\n\n  const app = express()\n  const router = express.Router()\n\n  app.use(telemetry.expressMiddleware(`SERVE`))\n\n  router.use(compression())\n  router.use(express.static(`public`))\n  router.use(clientOnlyPathsRouter(pages, { root }))\n  router.use((req, res, next) => {\n    if (req.accepts(`html`)) {\n      return res.status(404).sendFile(`404.html`, { root })\n    }\n    return next()\n  })\n  app.use(pathPrefix, router)\n\n  const startListening = () => {\n    app.listen(port, host, () => {\n      let openUrlString = `http://${host}:${port}${pathPrefix}`\n      console.log(\n        `${chalk.blue(`info`)} gatsby serve running at: ${chalk.bold(\n          openUrlString\n        )}`\n      )\n      if (open) {\n        console.log(`${chalk.blue(`info`)} Opening browser...`)\n        Promise.resolve(openurl(openUrlString)).catch(err =>\n          console.log(\n            `${chalk.yellow(\n              `warn`\n            )} Browser not opened because no browser was found`\n          )\n        )\n      }\n    })\n  }\n\n  detectPortInUseAndPrompt(port, rlInterface, newPort => {\n    port = newPort\n    startListening()\n  })\n}\n"],"file":"serve.js"}
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/db/index.js b/node_modules/gatsby/dist/db/index.js
index 034b866..8899c05 100644
--- a/node_modules/gatsby/dist/db/index.js
+++ b/node_modules/gatsby/dist/db/index.js
@@ -50,7 +50,6 @@ const saveStateDebounced = _.debounce(saveState, 1000);
 
 
 function startAutosave() {
-  saveStateDebounced();
   emitter.on(`*`, () => saveStateDebounced());
 }
 
diff --git a/node_modules/gatsby/dist/db/index.js.map b/node_modules/gatsby/dist/db/index.js.map
index c538774..ba7aac8 100644
--- a/node_modules/gatsby/dist/db/index.js.map
+++ b/node_modules/gatsby/dist/db/index.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/db/index.js"],"names":["_","require","report","redux","emitter","dbs","process","env","GATSBY_DB_NODES","push","saveInProgress","saveState","Promise","all","map","db","err","warn","message","saveStateDebounced","debounce","startAutosave","on","module","exports"],"mappings":";;;;;;AAAA,MAAMA,CAAC,GAAGC,OAAO,CAAE,QAAF,CAAjB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAE,yBAAF,CAAtB;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAE,UAAF,CAArB;;MACQG,O,GAAYD,K,CAAZC,O,EAER;AACA;;AACA,MAAMC,GAAG,GAAG,CAACF,KAAD,CAAZ;;AACA,IAAIG,OAAO,CAACC,GAAR,CAAYC,eAAZ,KAAiC,MAArC,EAA4C;AAC1CH,EAAAA,GAAG,CAACI,IAAJ,CAASR,OAAO,CAAE,QAAF,CAAhB;AACD,C,CAED;;;AACA,IAAIS,cAAc,GAAG,KAArB;;SACeC,S;;;;;+CAAf,aAA2B;AACzB,QAAID,cAAJ,EAAoB;AACpBA,IAAAA,cAAc,GAAG,IAAjB;;AAEA,QAAI;AACF,YAAME,OAAO,CAACC,GAAR,CAAYR,GAAG,CAACS,GAAJ,CAAQC,EAAE,IAAIA,EAAE,CAACJ,SAAH,EAAd,CAAZ,CAAN;AACD,KAFD,CAEE,OAAOK,GAAP,EAAY;AACZd,MAAAA,MAAM,CAACe,IAAP,CAAa,2BAA2BD,GAAG,IAAIA,GAAG,CAACE,OAAZ,IAAwBF,GAAI,EAAnE;AACD;;AAEDN,IAAAA,cAAc,GAAG,KAAjB;AACD,G;;;;AACD,MAAMS,kBAAkB,GAAGnB,CAAC,CAACoB,QAAF,CAAWT,SAAX,EAAsB,IAAtB,CAA3B;AAEA;;;;;;AAIA,SAASU,aAAT,GAAyB;AACvBF,EAAAA,kBAAkB;AAClBf,EAAAA,OAAO,CAACkB,EAAR,CAAY,GAAZ,EAAgB,MAAMH,kBAAkB,EAAxC;AACD;;AAEDI,MAAM,CAACC,OAAP,GAAiB;AACfH,EAAAA,aADe;AAEfV,EAAAA;AAFe,CAAjB","sourcesContent":["const _ = require(`lodash`)\nconst report = require(`gatsby-cli/lib/reporter`)\nconst redux = require(`../redux`)\nconst { emitter } = redux\n\n// Even if we are using loki, we still include redux in the list of\n// dbs since it still has pages, config, etc.\nconst dbs = [redux]\nif (process.env.GATSBY_DB_NODES === `loki`) {\n  dbs.push(require(`./loki`))\n}\n\n// calls `saveState()` on all DBs\nlet saveInProgress = false\nasync function saveState() {\n  if (saveInProgress) return\n  saveInProgress = true\n\n  try {\n    await Promise.all(dbs.map(db => db.saveState()))\n  } catch (err) {\n    report.warn(`Error persisting state: ${(err && err.message) || err}`)\n  }\n\n  saveInProgress = false\n}\nconst saveStateDebounced = _.debounce(saveState, 1000)\n\n/**\n * Starts listening to redux actions and triggers a database save to\n * disk upon any action (debounced to every 1 second)\n */\nfunction startAutosave() {\n  saveStateDebounced()\n  emitter.on(`*`, () => saveStateDebounced())\n}\n\nmodule.exports = {\n  startAutosave,\n  saveState,\n}\n"],"file":"index.js"}
\ No newline at end of file
+{"version":3,"sources":["../../src/db/index.js"],"names":["_","require","report","redux","emitter","dbs","process","env","GATSBY_DB_NODES","push","saveInProgress","saveState","Promise","all","map","db","err","warn","message","saveStateDebounced","debounce","startAutosave","on","module","exports"],"mappings":";;;;;;AAAA,MAAMA,CAAC,GAAGC,OAAO,CAAE,QAAF,CAAjB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAE,yBAAF,CAAtB;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAE,UAAF,CAArB;;MACQG,O,GAAYD,K,CAAZC,O,EAER;AACA;;AACA,MAAMC,GAAG,GAAG,CAACF,KAAD,CAAZ;;AACA,IAAIG,OAAO,CAACC,GAAR,CAAYC,eAAZ,KAAiC,MAArC,EAA4C;AAC1CH,EAAAA,GAAG,CAACI,IAAJ,CAASR,OAAO,CAAE,QAAF,CAAhB;AACD,C,CAED;;;AACA,IAAIS,cAAc,GAAG,KAArB;;SACeC,S;;;;;+CAAf,aAA2B;AACzB,QAAID,cAAJ,EAAoB;AACpBA,IAAAA,cAAc,GAAG,IAAjB;;AAEA,QAAI;AACF,YAAME,OAAO,CAACC,GAAR,CAAYR,GAAG,CAACS,GAAJ,CAAQC,EAAE,IAAIA,EAAE,CAACJ,SAAH,EAAd,CAAZ,CAAN;AACD,KAFD,CAEE,OAAOK,GAAP,EAAY;AACZd,MAAAA,MAAM,CAACe,IAAP,CAAa,2BAA2BD,GAAG,IAAIA,GAAG,CAACE,OAAZ,IAAwBF,GAAI,EAAnE;AACD;;AAEDN,IAAAA,cAAc,GAAG,KAAjB;AACD,G;;;;AACD,MAAMS,kBAAkB,GAAGnB,CAAC,CAACoB,QAAF,CAAWT,SAAX,EAAsB,IAAtB,CAA3B;AAEA;;;;;;AAIA,SAASU,aAAT,GAAyB;AACvBjB,EAAAA,OAAO,CAACkB,EAAR,CAAY,GAAZ,EAAgB,MAAMH,kBAAkB,EAAxC;AACD;;AAEDI,MAAM,CAACC,OAAP,GAAiB;AACfH,EAAAA,aADe;AAEfV,EAAAA;AAFe,CAAjB","sourcesContent":["const _ = require(`lodash`)\nconst report = require(`gatsby-cli/lib/reporter`)\nconst redux = require(`../redux`)\nconst { emitter } = redux\n\n// Even if we are using loki, we still include redux in the list of\n// dbs since it still has pages, config, etc.\nconst dbs = [redux]\nif (process.env.GATSBY_DB_NODES === `loki`) {\n  dbs.push(require(`./loki`))\n}\n\n// calls `saveState()` on all DBs\nlet saveInProgress = false\nasync function saveState() {\n  if (saveInProgress) return\n  saveInProgress = true\n\n  try {\n    await Promise.all(dbs.map(db => db.saveState()))\n  } catch (err) {\n    report.warn(`Error persisting state: ${(err && err.message) || err}`)\n  }\n\n  saveInProgress = false\n}\nconst saveStateDebounced = _.debounce(saveState, 1000)\n\n/**\n * Starts listening to redux actions and triggers a database save to\n * disk upon any action (debounced to every 1 second)\n */\nfunction startAutosave() {\n  emitter.on(`*`, () => saveStateDebounced())\n}\n\nmodule.exports = {\n  startAutosave,\n  saveState,\n}\n"],"file":"index.js"}
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/db/loki/index.js b/node_modules/gatsby/dist/db/loki/index.js
index 8fbe808..9b73a7d 100644
--- a/node_modules/gatsby/dist/db/loki/index.js
+++ b/node_modules/gatsby/dist/db/loki/index.js
@@ -10,7 +10,7 @@ const fs = require(`fs-extra`);
 
 const path = require(`path`);
 
-const loki = require(`@stefanprobst/lokijs`);
+const loki = require(`lokijs`);
 
 const uuidv4 = require(`uuid/v4`);
 
diff --git a/node_modules/gatsby/dist/db/loki/index.js.map b/node_modules/gatsby/dist/db/loki/index.js.map
index af312b9..7fa8000 100644
--- a/node_modules/gatsby/dist/db/loki/index.js.map
+++ b/node_modules/gatsby/dist/db/loki/index.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../../src/db/loki/index.js"],"names":["_","require","fs","path","loki","uuidv4","customComparators","Comparators","lt","ltHelper","gt","gtHelper","colls","nodeMeta","name","options","unique","indices","nodeTypes","db","ensureNodeCollections","forEach","collInfo","addCollection","startFileDb","saveFile","Promise","resolve","reject","dbOptions","autoload","autoloadCallback","err","startInMemory","start","isString","Error","saveDir","dirname","ensureDir","saveState","saveDatabase","getDb","module","exports"],"mappings":"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","sourcesContent":["const _ = require(`lodash`)\nconst fs = require(`fs-extra`)\nconst path = require(`path`)\nconst loki = require(`@stefanprobst/lokijs`)\nconst uuidv4 = require(`uuid/v4`)\nconst customComparators = require(`./custom-comparators`)\n\n// Ensure sorting behavior matches old lodash `orderBy`\n// implementation. See `custom-comparators.js` for why.\nloki.Comparators.lt = customComparators.ltHelper\nloki.Comparators.gt = customComparators.gtHelper\n\n// Loki is a document store with the same semantics as mongo. This\n// means there are no tables or relationships. Just a bunch of\n// collections, each with objects.\n//\n// Gatsby stores nodes in collections by splitting them up by their\n// `node.internal.type`. All nodes of a particular type go in 1\n// collection. The below `colls` object contains the metadata for\n// these collections, and the \"meta collections\" used to track them.\n//\n// You won't use these directly. They are used by the collection\n// functions in `./nodes.js`. E.g `getTypeCollName()` and\n// `getNodeTypeCollection`\nconst colls = {\n  // Each object has keys `id` and `typeCollName`. It's a way of\n  // quickly looking up the collection that a node is contained in.\n  // E.g { id: `someNodeId`, typeCollName: `gatsby:nodeType:myType` }\n  nodeMeta: {\n    name: `gatsby:nodeMeta`,\n    options: {\n      unique: [`id`],\n      indices: [`id`],\n    },\n  },\n  // The list of all node type collections. Each object has keys\n  // `type` and `collName` so you can quickly look up the collection\n  // name for a node type.\n  // e.g { type: `myType`, collName: `gatsby:nodeType:myType` }\n  nodeTypes: {\n    name: `gatsby:nodeTypes`,\n    options: {\n      unique: [`type`, `collName`],\n      indices: [`type`],\n    },\n  },\n}\n\n// Must be set using `start()`\nlet db\n\n/**\n * Ensures that the collections that support nodes have been\n * created. See `colls` var in this file\n */\nfunction ensureNodeCollections(db) {\n  _.forEach(colls, collInfo => {\n    const { name, options } = collInfo\n    db.addCollection(name, options)\n  })\n}\n\nfunction startFileDb(saveFile) {\n  return new Promise((resolve, reject) => {\n    const dbOptions = {\n      autoload: true,\n      autoloadCallback: err => {\n        if (err) {\n          reject(err)\n        } else {\n          resolve()\n        }\n      },\n    }\n    db = new loki(saveFile, dbOptions)\n  })\n}\n\nasync function startInMemory() {\n  // Use uuid purely for a random name\n  db = new loki(uuidv4())\n}\n\n/**\n * Starts a loki database. If the file already exists, it will be\n * loaded as the database state. If not, a new database will be\n * created. If `saveFile` is omitted, an in-memory DB will be created.\n *\n * @param {string} saveFile on disk file that the database will be\n * saved and loaded from. If this is omitted, an in-memory database\n * will be created instead\n * @returns {Promise} promise that is resolved once the database and\n * the existing state has been loaded (if there was an existing\n * saveFile)\n */\nasync function start({ saveFile } = {}) {\n  if (saveFile && !_.isString(saveFile)) {\n    throw new Error(`saveFile must be a path`)\n  }\n  if (saveFile) {\n    const saveDir = path.dirname(saveFile)\n    await fs.ensureDir(saveDir)\n    await startFileDb(saveFile)\n  } else {\n    await startInMemory()\n  }\n  ensureNodeCollections(db)\n}\n\n// Saves the database to disk and returns a promise that will be\n// resolved once the save has finished\nfunction saveState() {\n  return new Promise((resolve, reject) => {\n    if (db) {\n      db.saveDatabase(err => {\n        if (err) {\n          reject(err)\n        } else {\n          resolve()\n        }\n      })\n    } else {\n      reject(`No database found.`)\n    }\n  })\n}\n\n/**\n * Returns a reference to the database. If undefined, the db has not been\n * initalized yet. Call `start()`\n *\n * @returns {Object} database, or undefined\n */\nfunction getDb() {\n  return db\n}\n\nmodule.exports = {\n  start,\n  getDb,\n  colls,\n  saveState,\n}\n"],"file":"index.js"}
\ No newline at end of file
+{"version":3,"sources":["../../../src/db/loki/index.js"],"names":["_","require","fs","path","loki","uuidv4","customComparators","Comparators","lt","ltHelper","gt","gtHelper","colls","nodeMeta","name","options","unique","indices","nodeTypes","db","ensureNodeCollections","forEach","collInfo","addCollection","startFileDb","saveFile","Promise","resolve","reject","dbOptions","autoload","autoloadCallback","err","startInMemory","start","isString","Error","saveDir","dirname","ensureDir","saveState","saveDatabase","getDb","module","exports"],"mappings":"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","sourcesContent":["const _ = require(`lodash`)\nconst fs = require(`fs-extra`)\nconst path = require(`path`)\nconst loki = require(`lokijs`)\nconst uuidv4 = require(`uuid/v4`)\nconst customComparators = require(`./custom-comparators`)\n\n// Ensure sorting behavior matches old lodash `orderBy`\n// implementation. See `custom-comparators.js` for why.\nloki.Comparators.lt = customComparators.ltHelper\nloki.Comparators.gt = customComparators.gtHelper\n\n// Loki is a document store with the same semantics as mongo. This\n// means there are no tables or relationships. Just a bunch of\n// collections, each with objects.\n//\n// Gatsby stores nodes in collections by splitting them up by their\n// `node.internal.type`. All nodes of a particular type go in 1\n// collection. The below `colls` object contains the metadata for\n// these collections, and the \"meta collections\" used to track them.\n//\n// You won't use these directly. They are used by the collection\n// functions in `./nodes.js`. E.g `getTypeCollName()` and\n// `getNodeTypeCollection`\nconst colls = {\n  // Each object has keys `id` and `typeCollName`. It's a way of\n  // quickly looking up the collection that a node is contained in.\n  // E.g { id: `someNodeId`, typeCollName: `gatsby:nodeType:myType` }\n  nodeMeta: {\n    name: `gatsby:nodeMeta`,\n    options: {\n      unique: [`id`],\n      indices: [`id`],\n    },\n  },\n  // The list of all node type collections. Each object has keys\n  // `type` and `collName` so you can quickly look up the collection\n  // name for a node type.\n  // e.g { type: `myType`, collName: `gatsby:nodeType:myType` }\n  nodeTypes: {\n    name: `gatsby:nodeTypes`,\n    options: {\n      unique: [`type`, `collName`],\n      indices: [`type`],\n    },\n  },\n}\n\n// Must be set using `start()`\nlet db\n\n/**\n * Ensures that the collections that support nodes have been\n * created. See `colls` var in this file\n */\nfunction ensureNodeCollections(db) {\n  _.forEach(colls, collInfo => {\n    const { name, options } = collInfo\n    db.addCollection(name, options)\n  })\n}\n\nfunction startFileDb(saveFile) {\n  return new Promise((resolve, reject) => {\n    const dbOptions = {\n      autoload: true,\n      autoloadCallback: err => {\n        if (err) {\n          reject(err)\n        } else {\n          resolve()\n        }\n      },\n    }\n    db = new loki(saveFile, dbOptions)\n  })\n}\n\nasync function startInMemory() {\n  // Use uuid purely for a random name\n  db = new loki(uuidv4())\n}\n\n/**\n * Starts a loki database. If the file already exists, it will be\n * loaded as the database state. If not, a new database will be\n * created. If `saveFile` is omitted, an in-memory DB will be created.\n *\n * @param {string} saveFile on disk file that the database will be\n * saved and loaded from. If this is omitted, an in-memory database\n * will be created instead\n * @returns {Promise} promise that is resolved once the database and\n * the existing state has been loaded (if there was an existing\n * saveFile)\n */\nasync function start({ saveFile } = {}) {\n  if (saveFile && !_.isString(saveFile)) {\n    throw new Error(`saveFile must be a path`)\n  }\n  if (saveFile) {\n    const saveDir = path.dirname(saveFile)\n    await fs.ensureDir(saveDir)\n    await startFileDb(saveFile)\n  } else {\n    await startInMemory()\n  }\n  ensureNodeCollections(db)\n}\n\n// Saves the database to disk and returns a promise that will be\n// resolved once the save has finished\nfunction saveState() {\n  return new Promise((resolve, reject) => {\n    if (db) {\n      db.saveDatabase(err => {\n        if (err) {\n          reject(err)\n        } else {\n          resolve()\n        }\n      })\n    } else {\n      reject(`No database found.`)\n    }\n  })\n}\n\n/**\n * Returns a reference to the database. If undefined, the db has not been\n * initalized yet. Call `start()`\n *\n * @returns {Object} database, or undefined\n */\nfunction getDb() {\n  return db\n}\n\nmodule.exports = {\n  start,\n  getDb,\n  colls,\n  saveState,\n}\n"],"file":"index.js"}
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/db/loki/nodes-query.js b/node_modules/gatsby/dist/db/loki/nodes-query.js
index b758eb6..6bddabd 100644
--- a/node_modules/gatsby/dist/db/loki/nodes-query.js
+++ b/node_modules/gatsby/dist/db/loki/nodes-query.js
@@ -11,6 +11,8 @@ const prepareRegex = require(`../../utils/prepare-regex`);
 const _require = require(`./nodes`),
       getNodeTypeCollection = _require.getNodeTypeCollection;
 
+const sift = require(`sift`);
+
 const _require2 = require(`../../redux`),
       emitter = _require2.emitter; // Cleared on DELETE_CACHE
 
@@ -22,6 +24,52 @@ emitter.on(`DELETE_CACHE`, () => {
     delete fieldUsages[field];
   }
 }); // Takes a raw graphql filter and converts it into a mongo-like args
+// object that can be understood by the `sift` library. E.g `eq`
+// becomes `$eq`
+
+function siftifyArgs(object) {
+  const newObject = {};
+
+  _.each(object, (v, k) => {
+    if (_.isPlainObject(v)) {
+      if (k === `elemMatch`) {
+        k = `$elemMatch`;
+      }
+
+      newObject[k] = siftifyArgs(v);
+    } else {
+      // Compile regex first.
+      if (k === `regex`) {
+        newObject[`$regex`] = prepareRegex(v);
+      } else if (k === `glob`) {
+        const Minimatch = require(`minimatch`).Minimatch;
+
+        const mm = new Minimatch(v);
+        newObject[`$regex`] = mm.makeRe();
+      } else {
+        newObject[`$${k}`] = v;
+      }
+    }
+  });
+
+  return newObject;
+} // filter nodes using the `sift` library. But isn't this a loki query
+// file? Yes, but we need to support all functionality provided by
+// `run-sift`, and there are some operators that loki can't
+// support. Like `elemMatch`, so for those fields, we fall back to
+// sift
+
+
+function runSift(nodes, query) {
+  if (nodes) {
+    const siftQuery = {
+      $elemMatch: siftifyArgs(query)
+    };
+    return sift(siftQuery, nodes);
+  } else {
+    return null;
+  }
+} // Takes a raw graphql filter and converts it into a mongo-like args
 // object that can be understood by loki. E.g `eq` becomes
 // `$eq`. gqlFilter should be the raw graphql filter returned from
 // graphql-js. e.g gqlFilter:
@@ -56,14 +104,19 @@ emitter.on(`DELETE_CACHE`, () => {
 //   }
 // }
 
+
 function toMongoArgs(gqlFilter, lastFieldType) {
   const mongoArgs = {};
 
   _.each(gqlFilter, (v, k) => {
     if (_.isPlainObject(v)) {
       if (k === `elemMatch`) {
-        const gqlFieldType = lastFieldType.ofType;
-        mongoArgs[`$elemMatch`] = toMongoArgs(v, gqlFieldType);
+        // loki doesn't support elemMatch, so use sift (see runSift
+        // comment above)
+        mongoArgs[`$where`] = obj => {
+          const result = runSift(obj, v);
+          return result && result.length > 0;
+        };
       } else {
         const gqlFieldType = lastFieldType.getFields()[k].type;
         mongoArgs[k] = toMongoArgs(v, gqlFieldType);
@@ -138,11 +191,7 @@ const toDottedFields = (filter, acc = {}, path = []) => {
     const value = filter[key];
     const nextValue = _.isPlainObject(value) && value[Object.keys(value)[0]];
 
-    if (key === `$elemMatch`) {
-      acc[path.join(`.`)] = {
-        [`$elemMatch`]: toDottedFields(value)
-      };
-    } else if (_.isPlainObject(nextValue)) {
+    if (_.isPlainObject(nextValue)) {
       toDottedFields(value, acc, path.concat(key));
     } else {
       acc[path.concat(key).join(`.`)] = value;
@@ -189,7 +238,8 @@ const fixNeTrue = filter => Object.keys(filter).reduce((acc, key) => {
 
 const convertArgs = (gqlArgs, gqlType) => fixNeTrue(toDottedFields(toMongoArgs(gqlArgs.filter, gqlType))); // Converts graphql Sort args into the form expected by loki, which is
 // a vector where the first value is a field name, and the second is a
-// boolean `isDesc`. E.g
+// boolean `isDesc`. Nested fields delimited by `___` are replaced by
+// periods. E.g
 //
 // {
 //   fields: [ `frontmatter___date`, `id` ],
@@ -239,7 +289,7 @@ function ensureFieldIndexes(coll, lokiArgs) {
  *
  * @param {Object} args. Object with:
  *
- * {Object} gqlType: A GraphQL type
+ * {Object} gqlType: built during `./build-node-types.js`
  *
  * {Object} queryArgs: The raw graphql query as a js object. E.g `{
  * filter: { fields { slug: { eq: "/somepath" } } } }`
diff --git a/node_modules/gatsby/dist/db/loki/nodes-query.js.map b/node_modules/gatsby/dist/db/loki/nodes-query.js.map
index e1d065a..78b0c1a 100644
--- a/node_modules/gatsby/dist/db/loki/nodes-query.js.map
+++ b/node_modules/gatsby/dist/db/loki/nodes-query.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../../src/db/loki/nodes-query.js"],"names":["_","require","prepareRegex","getNodeTypeCollection","emitter","fieldUsages","FIELD_INDEX_THRESHOLD","on","field","toMongoArgs","gqlFilter","lastFieldType","mongoArgs","each","v","k","isPlainObject","gqlFieldType","ofType","getFields","type","re","obj","isUndefined","test","Minimatch","mm","makeRe","undefined","constructor","name","concat","toDottedFields","filter","acc","path","Object","keys","forEach","key","value","nextValue","join","isNeTrue","length","first","rest","fixNeTrue","reduce","split","convertArgs","gqlArgs","gqlType","toSortFields","sortArgs","fields","order","lokiSortFields","i","dottedField","isDesc","toLowerCase","push","ensureFieldIndexes","coll","lokiArgs","fieldName","update","n","get","ensureIndex","runQuery","queryArgs","firstOnly","JSON","parse","stringify","chain","find","sort","sortFields","sortField","compoundsort","data","module","exports"],"mappings":"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","sourcesContent":["const _ = require(`lodash`)\nconst prepareRegex = require(`../../utils/prepare-regex`)\nconst { getNodeTypeCollection } = require(`./nodes`)\nconst { emitter } = require(`../../redux`)\n\n// Cleared on DELETE_CACHE\nconst fieldUsages = {}\nconst FIELD_INDEX_THRESHOLD = 5\n\nemitter.on(`DELETE_CACHE`, () => {\n  for (var field in fieldUsages) {\n    delete fieldUsages[field]\n  }\n})\n\n// Takes a raw graphql filter and converts it into a mongo-like args\n// object that can be understood by loki. E.g `eq` becomes\n// `$eq`. gqlFilter should be the raw graphql filter returned from\n// graphql-js. e.g gqlFilter:\n//\n// {\n//   internal: {\n//     type: {\n//       eq: \"TestNode\"\n//     },\n//     content: {\n//       glob: \"et\"\n//     }\n//   },\n//   id: {\n//     glob: \"12*\"\n//   }\n// }\n//\n// would return\n//\n// {\n//   internal: {\n//     type: {\n//       $eq: \"TestNode\"  // append $ to eq\n//     },\n//     content: {\n//       $regex: new MiniMatch(v) // convert glob to regex\n//     }\n//   },\n//   id: {\n//     $regex: // as above\n//   }\n// }\nfunction toMongoArgs(gqlFilter, lastFieldType) {\n  const mongoArgs = {}\n  _.each(gqlFilter, (v, k) => {\n    if (_.isPlainObject(v)) {\n      if (k === `elemMatch`) {\n        const gqlFieldType = lastFieldType.ofType\n        mongoArgs[`$elemMatch`] = toMongoArgs(v, gqlFieldType)\n      } else {\n        const gqlFieldType = lastFieldType.getFields()[k].type\n        mongoArgs[k] = toMongoArgs(v, gqlFieldType)\n      }\n    } else {\n      if (k === `regex`) {\n        const re = prepareRegex(v)\n        // To ensure that false is returned if a field doesn't\n        // exist. E.g `{nested.field: {$regex: /.*/}}`\n        mongoArgs[`$where`] = obj => !_.isUndefined(obj) && re.test(obj)\n      } else if (k === `glob`) {\n        const Minimatch = require(`minimatch`).Minimatch\n        const mm = new Minimatch(v)\n        mongoArgs[`$regex`] = mm.makeRe()\n      } else if (k === `eq` && v === null) {\n        mongoArgs[`$in`] = [null, undefined]\n      } else if (\n        k === `eq` &&\n        lastFieldType &&\n        lastFieldType.constructor.name === `GraphQLList`\n      ) {\n        mongoArgs[`$contains`] = v\n      } else if (\n        k === `ne` &&\n        lastFieldType &&\n        lastFieldType.constructor.name === `GraphQLList`\n      ) {\n        mongoArgs[`$containsNone`] = v\n      } else if (\n        k === `in` &&\n        lastFieldType &&\n        lastFieldType.constructor.name === `GraphQLList`\n      ) {\n        mongoArgs[`$containsAny`] = v\n      } else if (\n        k === `nin` &&\n        lastFieldType &&\n        lastFieldType.constructor.name === `GraphQLList`\n      ) {\n        mongoArgs[`$containsNone`] = v\n      } else if (k === `ne` && v === null) {\n        mongoArgs[`$ne`] = undefined\n      } else if (k === `nin` && lastFieldType.name === `Boolean`) {\n        mongoArgs[`$nin`] = v.concat([undefined])\n      } else {\n        mongoArgs[`$${k}`] = v\n      }\n    }\n  })\n  return mongoArgs\n}\n\n// Converts a nested mongo args object into a dotted notation. acc\n// (accumulator) must be a reference to an empty object. The converted\n// fields will be added to it. E.g\n//\n// {\n//   internal: {\n//     type: {\n//       $eq: \"TestNode\"\n//     },\n//     content: {\n//       $regex: new MiniMatch(v)\n//     }\n//   },\n//   id: {\n//     $regex: newMiniMatch(v)\n//   }\n// }\n//\n// After execution, acc would be:\n//\n// {\n//   \"internal.type\": {\n//     $eq: \"TestNode\"\n//   },\n//   \"internal.content\": {\n//     $regex: new MiniMatch(v)\n//   },\n//   \"id\": {\n//     $regex: // as above\n//   }\n// }\nconst toDottedFields = (filter, acc = {}, path = []) => {\n  Object.keys(filter).forEach(key => {\n    const value = filter[key]\n    const nextValue = _.isPlainObject(value) && value[Object.keys(value)[0]]\n    if (key === `$elemMatch`) {\n      acc[path.join(`.`)] = { [`$elemMatch`]: toDottedFields(value) }\n    } else if (_.isPlainObject(nextValue)) {\n      toDottedFields(value, acc, path.concat(key))\n    } else {\n      acc[path.concat(key).join(`.`)] = value\n    }\n  })\n  return acc\n}\n\n// The query language that Gatsby has used since day 1 is `sift`. Both\n// sift and loki are mongo-like query languages, but they have some\n// subtle differences. One is that in sift, a nested filter such as\n// `{foo: {bar: {ne: true} } }` will return true if the foo field\n// doesn't exist, is null, or bar is null. Whereas loki will return\n// false if the foo field doesn't exist or is null. This ensures that\n// loki queries behave like sift\nconst isNeTrue = (obj, path) => {\n  if (path.length) {\n    const [first, ...rest] = path\n    return obj == null || obj[first] == null || isNeTrue(obj[first], rest)\n  } else {\n    return obj !== true\n  }\n}\n\nconst fixNeTrue = filter =>\n  Object.keys(filter).reduce((acc, key) => {\n    const value = filter[key]\n    if (value[`$ne`] === true) {\n      const [first, ...path] = key.split(`.`)\n      acc[first] = { [`$where`]: obj => isNeTrue(obj, path) }\n    } else {\n      acc[key] = value\n    }\n    return acc\n  }, {})\n\n// Converts graphQL args to a loki filter\nconst convertArgs = (gqlArgs, gqlType) =>\n  fixNeTrue(toDottedFields(toMongoArgs(gqlArgs.filter, gqlType)))\n\n// Converts graphql Sort args into the form expected by loki, which is\n// a vector where the first value is a field name, and the second is a\n// boolean `isDesc`. E.g\n//\n// {\n//   fields: [ `frontmatter___date`, `id` ],\n//   order: [`desc`]\n// }\n//\n// would return\n//\n// [ [ `frontmatter.date`, true ], [ `id`, false ] ]\n//\nfunction toSortFields(sortArgs) {\n  const { fields, order } = sortArgs\n  const lokiSortFields = []\n  for (let i = 0; i < fields.length; i++) {\n    const dottedField = fields[i]\n    const isDesc = order[i] && order[i].toLowerCase() === `desc`\n    lokiSortFields.push([dottedField, isDesc])\n  }\n  return lokiSortFields\n}\n\n// Every time we run a query, we increment a counter for each of its\n// fields, so that we can determine which fields are used the\n// most. Any time a field is seen more than `FIELD_INDEX_THRESHOLD`\n// times, we create a loki index so that future queries with that\n// field will execute faster.\nfunction ensureFieldIndexes(coll, lokiArgs) {\n  _.forEach(lokiArgs, (v, fieldName) => {\n    // Increment the usages of the field\n    _.update(fieldUsages, fieldName, n => (n ? n + 1 : 1))\n    // If we have crossed the threshold, then create the index\n    if (_.get(fieldUsages, fieldName) === FIELD_INDEX_THRESHOLD) {\n      // Loki ensures that this is a noop if index already exists. E.g\n      // if it was previously added via a sort field\n      coll.ensureIndex(fieldName)\n    }\n  })\n}\n\n/**\n * Runs the graphql query over the loki nodes db.\n *\n * @param {Object} args. Object with:\n *\n * {Object} gqlType: A GraphQL type\n *\n * {Object} queryArgs: The raw graphql query as a js object. E.g `{\n * filter: { fields { slug: { eq: \"/somepath\" } } } }`\n *\n * {Object} context: The context from the QueryJob\n *\n * {boolean} firstOnly: Whether to return the first found match, or\n * all matching results\n *\n * @returns {promise} A promise that will eventually be resolved with\n * a collection of matching objects (even if `firstOnly` is true)\n */\nasync function runQuery({ gqlType, queryArgs, firstOnly }) {\n  // Clone args as for some reason graphql-js removes the constructor\n  // from nested objects which breaks a check in sift.js.\n  const gqlArgs = JSON.parse(JSON.stringify(queryArgs))\n  const lokiArgs = convertArgs(gqlArgs, gqlType)\n  const coll = getNodeTypeCollection(gqlType.name)\n  ensureFieldIndexes(coll, lokiArgs)\n  let chain = coll.chain().find(lokiArgs, firstOnly)\n\n  if (queryArgs.sort) {\n    const sortFields = toSortFields(queryArgs.sort)\n\n    // Create an index for each sort field. Indexing requires sorting\n    // so we lose nothing by ensuring an index is added for each sort\n    // field. Loki ensures this is a noop if the index already exists\n    for (const sortField of sortFields) {\n      coll.ensureIndex(sortField[0])\n    }\n    chain = chain.compoundsort(sortFields)\n  }\n\n  return chain.data()\n}\n\nmodule.exports = runQuery\n"],"file":"nodes-query.js"}
\ No newline at end of file
+{"version":3,"sources":["../../../src/db/loki/nodes-query.js"],"names":["_","require","prepareRegex","getNodeTypeCollection","sift","emitter","fieldUsages","FIELD_INDEX_THRESHOLD","on","field","siftifyArgs","object","newObject","each","v","k","isPlainObject","Minimatch","mm","makeRe","runSift","nodes","query","siftQuery","$elemMatch","toMongoArgs","gqlFilter","lastFieldType","mongoArgs","obj","result","length","gqlFieldType","getFields","type","re","isUndefined","test","undefined","constructor","name","concat","toDottedFields","filter","acc","path","Object","keys","forEach","key","value","nextValue","join","isNeTrue","first","rest","fixNeTrue","reduce","split","convertArgs","gqlArgs","gqlType","toSortFields","sortArgs","fields","order","lokiSortFields","i","dottedField","isDesc","toLowerCase","push","ensureFieldIndexes","coll","lokiArgs","fieldName","update","n","get","ensureIndex","runQuery","queryArgs","firstOnly","JSON","parse","stringify","chain","find","sort","sortFields","sortField","compoundsort","data","module","exports"],"mappings":"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","sourcesContent":["const _ = require(`lodash`)\nconst prepareRegex = require(`../../utils/prepare-regex`)\nconst { getNodeTypeCollection } = require(`./nodes`)\nconst sift = require(`sift`)\nconst { emitter } = require(`../../redux`)\n\n// Cleared on DELETE_CACHE\nconst fieldUsages = {}\nconst FIELD_INDEX_THRESHOLD = 5\n\nemitter.on(`DELETE_CACHE`, () => {\n  for (var field in fieldUsages) {\n    delete fieldUsages[field]\n  }\n})\n\n// Takes a raw graphql filter and converts it into a mongo-like args\n// object that can be understood by the `sift` library. E.g `eq`\n// becomes `$eq`\nfunction siftifyArgs(object) {\n  const newObject = {}\n  _.each(object, (v, k) => {\n    if (_.isPlainObject(v)) {\n      if (k === `elemMatch`) {\n        k = `$elemMatch`\n      }\n      newObject[k] = siftifyArgs(v)\n    } else {\n      // Compile regex first.\n      if (k === `regex`) {\n        newObject[`$regex`] = prepareRegex(v)\n      } else if (k === `glob`) {\n        const Minimatch = require(`minimatch`).Minimatch\n        const mm = new Minimatch(v)\n        newObject[`$regex`] = mm.makeRe()\n      } else {\n        newObject[`$${k}`] = v\n      }\n    }\n  })\n  return newObject\n}\n\n// filter nodes using the `sift` library. But isn't this a loki query\n// file? Yes, but we need to support all functionality provided by\n// `run-sift`, and there are some operators that loki can't\n// support. Like `elemMatch`, so for those fields, we fall back to\n// sift\nfunction runSift(nodes, query) {\n  if (nodes) {\n    const siftQuery = {\n      $elemMatch: siftifyArgs(query),\n    }\n    return sift(siftQuery, nodes)\n  } else {\n    return null\n  }\n}\n\n// Takes a raw graphql filter and converts it into a mongo-like args\n// object that can be understood by loki. E.g `eq` becomes\n// `$eq`. gqlFilter should be the raw graphql filter returned from\n// graphql-js. e.g gqlFilter:\n//\n// {\n//   internal: {\n//     type: {\n//       eq: \"TestNode\"\n//     },\n//     content: {\n//       glob: \"et\"\n//     }\n//   },\n//   id: {\n//     glob: \"12*\"\n//   }\n// }\n//\n// would return\n//\n// {\n//   internal: {\n//     type: {\n//       $eq: \"TestNode\"  // append $ to eq\n//     },\n//     content: {\n//       $regex: new MiniMatch(v) // convert glob to regex\n//     }\n//   },\n//   id: {\n//     $regex: // as above\n//   }\n// }\nfunction toMongoArgs(gqlFilter, lastFieldType) {\n  const mongoArgs = {}\n  _.each(gqlFilter, (v, k) => {\n    if (_.isPlainObject(v)) {\n      if (k === `elemMatch`) {\n        // loki doesn't support elemMatch, so use sift (see runSift\n        // comment above)\n        mongoArgs[`$where`] = obj => {\n          const result = runSift(obj, v)\n          return result && result.length > 0\n        }\n      } else {\n        const gqlFieldType = lastFieldType.getFields()[k].type\n        mongoArgs[k] = toMongoArgs(v, gqlFieldType)\n      }\n    } else {\n      if (k === `regex`) {\n        const re = prepareRegex(v)\n        // To ensure that false is returned if a field doesn't\n        // exist. E.g `{nested.field: {$regex: /.*/}}`\n        mongoArgs[`$where`] = obj => !_.isUndefined(obj) && re.test(obj)\n      } else if (k === `glob`) {\n        const Minimatch = require(`minimatch`).Minimatch\n        const mm = new Minimatch(v)\n        mongoArgs[`$regex`] = mm.makeRe()\n      } else if (k === `eq` && v === null) {\n        mongoArgs[`$in`] = [null, undefined]\n      } else if (\n        k === `eq` &&\n        lastFieldType &&\n        lastFieldType.constructor.name === `GraphQLList`\n      ) {\n        mongoArgs[`$contains`] = v\n      } else if (\n        k === `ne` &&\n        lastFieldType &&\n        lastFieldType.constructor.name === `GraphQLList`\n      ) {\n        mongoArgs[`$containsNone`] = v\n      } else if (\n        k === `in` &&\n        lastFieldType &&\n        lastFieldType.constructor.name === `GraphQLList`\n      ) {\n        mongoArgs[`$containsAny`] = v\n      } else if (\n        k === `nin` &&\n        lastFieldType &&\n        lastFieldType.constructor.name === `GraphQLList`\n      ) {\n        mongoArgs[`$containsNone`] = v\n      } else if (k === `ne` && v === null) {\n        mongoArgs[`$ne`] = undefined\n      } else if (k === `nin` && lastFieldType.name === `Boolean`) {\n        mongoArgs[`$nin`] = v.concat([undefined])\n      } else {\n        mongoArgs[`$${k}`] = v\n      }\n    }\n  })\n  return mongoArgs\n}\n\n// Converts a nested mongo args object into a dotted notation. acc\n// (accumulator) must be a reference to an empty object. The converted\n// fields will be added to it. E.g\n//\n// {\n//   internal: {\n//     type: {\n//       $eq: \"TestNode\"\n//     },\n//     content: {\n//       $regex: new MiniMatch(v)\n//     }\n//   },\n//   id: {\n//     $regex: newMiniMatch(v)\n//   }\n// }\n//\n// After execution, acc would be:\n//\n// {\n//   \"internal.type\": {\n//     $eq: \"TestNode\"\n//   },\n//   \"internal.content\": {\n//     $regex: new MiniMatch(v)\n//   },\n//   \"id\": {\n//     $regex: // as above\n//   }\n// }\nconst toDottedFields = (filter, acc = {}, path = []) => {\n  Object.keys(filter).forEach(key => {\n    const value = filter[key]\n    const nextValue = _.isPlainObject(value) && value[Object.keys(value)[0]]\n    if (_.isPlainObject(nextValue)) {\n      toDottedFields(value, acc, path.concat(key))\n    } else {\n      acc[path.concat(key).join(`.`)] = value\n    }\n  })\n  return acc\n}\n\n// The query language that Gatsby has used since day 1 is `sift`. Both\n// sift and loki are mongo-like query languages, but they have some\n// subtle differences. One is that in sift, a nested filter such as\n// `{foo: {bar: {ne: true} } }` will return true if the foo field\n// doesn't exist, is null, or bar is null. Whereas loki will return\n// false if the foo field doesn't exist or is null. This ensures that\n// loki queries behave like sift\nconst isNeTrue = (obj, path) => {\n  if (path.length) {\n    const [first, ...rest] = path\n    return obj == null || obj[first] == null || isNeTrue(obj[first], rest)\n  } else {\n    return obj !== true\n  }\n}\n\nconst fixNeTrue = filter =>\n  Object.keys(filter).reduce((acc, key) => {\n    const value = filter[key]\n    if (value[`$ne`] === true) {\n      const [first, ...path] = key.split(`.`)\n      acc[first] = { [`$where`]: obj => isNeTrue(obj, path) }\n    } else {\n      acc[key] = value\n    }\n    return acc\n  }, {})\n\n// Converts graphQL args to a loki filter\nconst convertArgs = (gqlArgs, gqlType) =>\n  fixNeTrue(toDottedFields(toMongoArgs(gqlArgs.filter, gqlType)))\n\n// Converts graphql Sort args into the form expected by loki, which is\n// a vector where the first value is a field name, and the second is a\n// boolean `isDesc`. Nested fields delimited by `___` are replaced by\n// periods. E.g\n//\n// {\n//   fields: [ `frontmatter___date`, `id` ],\n//   order: [`desc`]\n// }\n//\n// would return\n//\n// [ [ `frontmatter.date`, true ], [ `id`, false ] ]\n//\nfunction toSortFields(sortArgs) {\n  const { fields, order } = sortArgs\n  const lokiSortFields = []\n  for (let i = 0; i < fields.length; i++) {\n    const dottedField = fields[i]\n    const isDesc = order[i] && order[i].toLowerCase() === `desc`\n    lokiSortFields.push([dottedField, isDesc])\n  }\n  return lokiSortFields\n}\n\n// Every time we run a query, we increment a counter for each of its\n// fields, so that we can determine which fields are used the\n// most. Any time a field is seen more than `FIELD_INDEX_THRESHOLD`\n// times, we create a loki index so that future queries with that\n// field will execute faster.\nfunction ensureFieldIndexes(coll, lokiArgs) {\n  _.forEach(lokiArgs, (v, fieldName) => {\n    // Increment the usages of the field\n    _.update(fieldUsages, fieldName, n => (n ? n + 1 : 1))\n    // If we have crossed the threshold, then create the index\n    if (_.get(fieldUsages, fieldName) === FIELD_INDEX_THRESHOLD) {\n      // Loki ensures that this is a noop if index already exists. E.g\n      // if it was previously added via a sort field\n      coll.ensureIndex(fieldName)\n    }\n  })\n}\n\n/**\n * Runs the graphql query over the loki nodes db.\n *\n * @param {Object} args. Object with:\n *\n * {Object} gqlType: built during `./build-node-types.js`\n *\n * {Object} queryArgs: The raw graphql query as a js object. E.g `{\n * filter: { fields { slug: { eq: \"/somepath\" } } } }`\n *\n * {Object} context: The context from the QueryJob\n *\n * {boolean} firstOnly: Whether to return the first found match, or\n * all matching results\n *\n * @returns {promise} A promise that will eventually be resolved with\n * a collection of matching objects (even if `firstOnly` is true)\n */\nasync function runQuery({ gqlType, queryArgs, firstOnly }) {\n  // Clone args as for some reason graphql-js removes the constructor\n  // from nested objects which breaks a check in sift.js.\n  const gqlArgs = JSON.parse(JSON.stringify(queryArgs))\n  const lokiArgs = convertArgs(gqlArgs, gqlType)\n  const coll = getNodeTypeCollection(gqlType.name)\n  ensureFieldIndexes(coll, lokiArgs)\n  let chain = coll.chain().find(lokiArgs, firstOnly)\n\n  if (queryArgs.sort) {\n    const sortFields = toSortFields(queryArgs.sort)\n\n    // Create an index for each sort field. Indexing requires sorting\n    // so we lose nothing by ensuring an index is added for each sort\n    // field. Loki ensures this is a noop if the index already exists\n    for (const sortField of sortFields) {\n      coll.ensureIndex(sortField[0])\n    }\n    chain = chain.compoundsort(sortFields)\n  }\n\n  return chain.data()\n}\n\nmodule.exports = runQuery\n"],"file":"nodes-query.js"}
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/db/node-tracking.js b/node_modules/gatsby/dist/db/node-tracking.js
index 0a092dc..e5cabd1 100644
--- a/node_modules/gatsby/dist/db/node-tracking.js
+++ b/node_modules/gatsby/dist/db/node-tracking.js
@@ -11,92 +11,21 @@ const _ = require(`lodash`);
 const rootNodeMap = new WeakMap();
 
 const getRootNodeId = node => rootNodeMap.get(node);
-/**
- * @param {Object} data
- * @returns {Object} data without undefined values
- */
-
-
-const omitUndefined = data => {
-  const isPlainObject = _.isPlainObject(data);
-
-  if (isPlainObject) {
-    return _.pickBy(data, p => p !== undefined);
-  }
-
-  return data.filter(p => p !== undefined);
-};
-/**
- * @param {*} data
- * @return {boolean}
- */
-
-
-const isTypeSupported = data => {
-  if (data === null) {
-    return true;
-  }
-
-  const type = typeof data;
-  const isSupported = type === `number` || type === `string` || type === `boolean` || data instanceof Date;
-  return isSupported;
-};
 /**
  * Add link between passed data and Node. This function shouldn't be used
  * directly. Use higher level `trackInlineObjectsInRootNode`
  * @see trackInlineObjectsInRootNode
  * @param {(Object|Array)} data Inline object or array
  * @param {string} nodeId Id of node that contains data passed in first parameter
- * @param {boolean} sanitize Wether to strip objects of unuspported and not serializable fields
- * @param {string} [ignore] Fieldname that doesn't need to be tracked and sanitized
- *
  */
 
 
-const addRootNodeToInlineObject = (data, nodeId, sanitize, isNode = false) => {
-  const isPlainObject = _.isPlainObject(data);
-
-  if (isPlainObject || _.isArray(data)) {
-    let returnData = data;
-
-    if (sanitize) {
-      returnData = isPlainObject ? {} : [];
-    }
-
-    let anyFieldChanged = false;
-
-    _.each(data, (o, key) => {
-      if (isNode && key === `internal`) {
-        returnData[key] = o;
-        return;
-      }
-
-      returnData[key] = addRootNodeToInlineObject(o, nodeId, sanitize);
-
-      if (returnData[key] !== o) {
-        anyFieldChanged = true;
-      }
-    });
-
-    if (anyFieldChanged) {
-      data = omitUndefined(returnData);
-    } // don't need to track node itself
-
-
-    if (!isNode) {
-      rootNodeMap.set(data, nodeId);
-    } // arrays and plain objects are supported - no need to to sanitize
-
+const addRootNodeToInlineObject = (data, nodeId) => {
+  if (_.isPlainObject(data) || _.isArray(data)) {
+    _.each(data, o => addRootNodeToInlineObject(o, nodeId));
 
-    return data;
+    rootNodeMap.set(data, nodeId);
   }
-
-  if (sanitize && !isTypeSupported(data)) {
-    return undefined;
-  } // either supported or not sanitizing
-
-
-  return data;
 };
 /**
  * Adds link between inline objects/arrays contained in Node object
@@ -105,7 +34,18 @@ const addRootNodeToInlineObject = (data, nodeId, sanitize, isNode = false) => {
  */
 
 
-const trackInlineObjectsInRootNode = (node, sanitize = false) => addRootNodeToInlineObject(node, node.id, sanitize, true);
+const trackInlineObjectsInRootNode = node => {
+  _.each(node, (v, k) => {
+    // Ignore the node internal object.
+    if (k === `internal`) {
+      return;
+    }
+
+    addRootNodeToInlineObject(v, node.id);
+  });
+
+  return node;
+};
 
 exports.trackInlineObjectsInRootNode = trackInlineObjectsInRootNode;
 /**
diff --git a/node_modules/gatsby/dist/db/node-tracking.js.map b/node_modules/gatsby/dist/db/node-tracking.js.map
index 97a03bb..5a4a4e5 100644
--- a/node_modules/gatsby/dist/db/node-tracking.js.map
+++ b/node_modules/gatsby/dist/db/node-tracking.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/db/node-tracking.js"],"names":["_","require","rootNodeMap","WeakMap","getRootNodeId","node","get","omitUndefined","data","isPlainObject","pickBy","p","undefined","filter","isTypeSupported","type","isSupported","Date","addRootNodeToInlineObject","nodeId","sanitize","isNode","isArray","returnData","anyFieldChanged","each","o","key","set","trackInlineObjectsInRootNode","id","exports","findRootNodeAncestor","obj","predicate","getNode","rootNode","whileCount","rootNodeId","parent","console","log","trackDbNodes","getNodes"],"mappings":"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","sourcesContent":["const _ = require(`lodash`)\n\n/**\n * Map containing links between inline objects or arrays\n * and Node that contains them\n * @type {Object.<(Object|Array),string>}\n */\nconst rootNodeMap = new WeakMap()\n\nconst getRootNodeId = node => rootNodeMap.get(node)\n\n/**\n * @param {Object} data\n * @returns {Object} data without undefined values\n */\nconst omitUndefined = data => {\n  const isPlainObject = _.isPlainObject(data)\n  if (isPlainObject) {\n    return _.pickBy(data, p => p !== undefined)\n  }\n\n  return data.filter(p => p !== undefined)\n}\n\n/**\n * @param {*} data\n * @return {boolean}\n */\nconst isTypeSupported = data => {\n  if (data === null) {\n    return true\n  }\n\n  const type = typeof data\n  const isSupported =\n    type === `number` ||\n    type === `string` ||\n    type === `boolean` ||\n    data instanceof Date\n\n  return isSupported\n}\n\n/**\n * Add link between passed data and Node. This function shouldn't be used\n * directly. Use higher level `trackInlineObjectsInRootNode`\n * @see trackInlineObjectsInRootNode\n * @param {(Object|Array)} data Inline object or array\n * @param {string} nodeId Id of node that contains data passed in first parameter\n * @param {boolean} sanitize Wether to strip objects of unuspported and not serializable fields\n * @param {string} [ignore] Fieldname that doesn't need to be tracked and sanitized\n *\n */\nconst addRootNodeToInlineObject = (data, nodeId, sanitize, isNode = false) => {\n  const isPlainObject = _.isPlainObject(data)\n\n  if (isPlainObject || _.isArray(data)) {\n    let returnData = data\n    if (sanitize) {\n      returnData = isPlainObject ? {} : []\n    }\n    let anyFieldChanged = false\n    _.each(data, (o, key) => {\n      if (isNode && key === `internal`) {\n        returnData[key] = o\n        return\n      }\n      returnData[key] = addRootNodeToInlineObject(o, nodeId, sanitize)\n\n      if (returnData[key] !== o) {\n        anyFieldChanged = true\n      }\n    })\n\n    if (anyFieldChanged) {\n      data = omitUndefined(returnData)\n    }\n\n    // don't need to track node itself\n    if (!isNode) {\n      rootNodeMap.set(data, nodeId)\n    }\n\n    // arrays and plain objects are supported - no need to to sanitize\n    return data\n  }\n\n  if (sanitize && !isTypeSupported(data)) {\n    return undefined\n  }\n  // either supported or not sanitizing\n  return data\n}\n\n/**\n * Adds link between inline objects/arrays contained in Node object\n * and that Node object.\n * @param {Node} node Root Node\n */\nconst trackInlineObjectsInRootNode = (node, sanitize = false) =>\n  addRootNodeToInlineObject(node, node.id, sanitize, true)\nexports.trackInlineObjectsInRootNode = trackInlineObjectsInRootNode\n\n/**\n * Finds top most ancestor of node that contains passed Object or Array\n * @param {(Object|Array)} obj Object/Array belonging to Node object or Node object\n * @param {nodePredicate} [predicate] Optional callback to check if ancestor meets defined conditions\n * @returns {Node} Top most ancestor if predicate is not specified\n * or first node that meet predicate conditions if predicate is specified\n */\nconst findRootNodeAncestor = (obj, predicate = null) => {\n  const { getNode } = require(`./nodes`)\n\n  // Find the root node.\n  let rootNode = obj\n  let whileCount = 0\n  let rootNodeId\n  while (\n    (!predicate || !predicate(rootNode)) &&\n    (rootNodeId = getRootNodeId(rootNode) || rootNode.parent) &&\n    ((rootNode.parent && getNode(rootNode.parent) !== undefined) ||\n      getNode(rootNodeId)) &&\n    whileCount < 101\n  ) {\n    if (rootNodeId) {\n      rootNode = getNode(rootNodeId)\n    } else {\n      rootNode = getNode(rootNode.parent)\n    }\n    whileCount += 1\n    if (whileCount > 100) {\n      console.log(\n        `It looks like you have a node that's set its parent as itself`,\n        rootNode\n      )\n    }\n  }\n\n  return !predicate || predicate(rootNode) ? rootNode : null\n}\n\nfunction trackDbNodes() {\n  const { getNodes } = require(`./nodes`)\n  _.each(getNodes(), node => {\n    trackInlineObjectsInRootNode(node)\n  })\n}\n\n/**\n * @callback nodePredicate\n * @param {Node} node Node that is examined\n */\nexports.findRootNodeAncestor = findRootNodeAncestor\nexports.trackDbNodes = trackDbNodes\n"],"file":"node-tracking.js"}
\ No newline at end of file
+{"version":3,"sources":["../../src/db/node-tracking.js"],"names":["_","require","rootNodeMap","WeakMap","getRootNodeId","node","get","addRootNodeToInlineObject","data","nodeId","isPlainObject","isArray","each","o","set","trackInlineObjectsInRootNode","v","k","id","exports","findRootNodeAncestor","obj","predicate","getNode","rootNode","whileCount","rootNodeId","parent","undefined","console","log","trackDbNodes","getNodes"],"mappings":";;AAAA,MAAMA,CAAC,GAAGC,OAAO,CAAE,QAAF,CAAjB;AAEA;;;;;;;AAKA,MAAMC,WAAW,GAAG,IAAIC,OAAJ,EAApB;;AAEA,MAAMC,aAAa,GAAGC,IAAI,IAAIH,WAAW,CAACI,GAAZ,CAAgBD,IAAhB,CAA9B;AAEA;;;;;;;;;AAOA,MAAME,yBAAyB,GAAG,CAACC,IAAD,EAAOC,MAAP,KAAkB;AAClD,MAAIT,CAAC,CAACU,aAAF,CAAgBF,IAAhB,KAAyBR,CAAC,CAACW,OAAF,CAAUH,IAAV,CAA7B,EAA8C;AAC5CR,IAAAA,CAAC,CAACY,IAAF,CAAOJ,IAAP,EAAaK,CAAC,IAAIN,yBAAyB,CAACM,CAAD,EAAIJ,MAAJ,CAA3C;;AACAP,IAAAA,WAAW,CAACY,GAAZ,CAAgBN,IAAhB,EAAsBC,MAAtB;AACD;AACF,CALD;AAOA;;;;;;;AAKA,MAAMM,4BAA4B,GAAGV,IAAI,IAAI;AAC3CL,EAAAA,CAAC,CAACY,IAAF,CAAOP,IAAP,EAAa,CAACW,CAAD,EAAIC,CAAJ,KAAU;AACrB;AACA,QAAIA,CAAC,KAAM,UAAX,EAAsB;AACpB;AACD;;AACDV,IAAAA,yBAAyB,CAACS,CAAD,EAAIX,IAAI,CAACa,EAAT,CAAzB;AACD,GAND;;AAQA,SAAOb,IAAP;AACD,CAVD;;AAWAc,OAAO,CAACJ,4BAAR,GAAuCA,4BAAvC;AAEA;;;;;;;;AAOA,MAAMK,oBAAoB,GAAG,CAACC,GAAD,EAAMC,SAAS,GAAG,IAAlB,KAA2B;AAAA,mBAClCrB,OAAO,CAAE,SAAF,CAD2B;AAAA,QAC9CsB,OAD8C,YAC9CA,OAD8C,EAGtD;;;AACA,MAAIC,QAAQ,GAAGH,GAAf;AACA,MAAII,UAAU,GAAG,CAAjB;AACA,MAAIC,UAAJ;;AACA,SACE,CAAC,CAACJ,SAAD,IAAc,CAACA,SAAS,CAACE,QAAD,CAAzB,MACCE,UAAU,GAAGtB,aAAa,CAACoB,QAAD,CAAb,IAA2BA,QAAQ,CAACG,MADlD,MAEEH,QAAQ,CAACG,MAAT,IAAmBJ,OAAO,CAACC,QAAQ,CAACG,MAAV,CAAP,KAA6BC,SAAjD,IACCL,OAAO,CAACG,UAAD,CAHT,KAIAD,UAAU,GAAG,GALf,EAME;AACA,QAAIC,UAAJ,EAAgB;AACdF,MAAAA,QAAQ,GAAGD,OAAO,CAACG,UAAD,CAAlB;AACD,KAFD,MAEO;AACLF,MAAAA,QAAQ,GAAGD,OAAO,CAACC,QAAQ,CAACG,MAAV,CAAlB;AACD;;AACDF,IAAAA,UAAU,IAAI,CAAd;;AACA,QAAIA,UAAU,GAAG,GAAjB,EAAsB;AACpBI,MAAAA,OAAO,CAACC,GAAR,CACG,+DADH,EAEEN,QAFF;AAID;AACF;;AAED,SAAO,CAACF,SAAD,IAAcA,SAAS,CAACE,QAAD,CAAvB,GAAoCA,QAApC,GAA+C,IAAtD;AACD,CA7BD;;AA+BA,SAASO,YAAT,GAAwB;AAAA,oBACD9B,OAAO,CAAE,SAAF,CADN;AAAA,QACd+B,QADc,aACdA,QADc;;AAEtBhC,EAAAA,CAAC,CAACY,IAAF,CAAOoB,QAAQ,EAAf,EAAmB3B,IAAI,IAAI;AACzBU,IAAAA,4BAA4B,CAACV,IAAD,CAA5B;AACD,GAFD;AAGD;AAED;;;;;;AAIAc,OAAO,CAACC,oBAAR,GAA+BA,oBAA/B;AACAD,OAAO,CAACY,YAAR,GAAuBA,YAAvB","sourcesContent":["const _ = require(`lodash`)\n\n/**\n * Map containing links between inline objects or arrays\n * and Node that contains them\n * @type {Object.<(Object|Array),string>}\n */\nconst rootNodeMap = new WeakMap()\n\nconst getRootNodeId = node => rootNodeMap.get(node)\n\n/**\n * Add link between passed data and Node. This function shouldn't be used\n * directly. Use higher level `trackInlineObjectsInRootNode`\n * @see trackInlineObjectsInRootNode\n * @param {(Object|Array)} data Inline object or array\n * @param {string} nodeId Id of node that contains data passed in first parameter\n */\nconst addRootNodeToInlineObject = (data, nodeId) => {\n  if (_.isPlainObject(data) || _.isArray(data)) {\n    _.each(data, o => addRootNodeToInlineObject(o, nodeId))\n    rootNodeMap.set(data, nodeId)\n  }\n}\n\n/**\n * Adds link between inline objects/arrays contained in Node object\n * and that Node object.\n * @param {Node} node Root Node\n */\nconst trackInlineObjectsInRootNode = node => {\n  _.each(node, (v, k) => {\n    // Ignore the node internal object.\n    if (k === `internal`) {\n      return\n    }\n    addRootNodeToInlineObject(v, node.id)\n  })\n\n  return node\n}\nexports.trackInlineObjectsInRootNode = trackInlineObjectsInRootNode\n\n/**\n * Finds top most ancestor of node that contains passed Object or Array\n * @param {(Object|Array)} obj Object/Array belonging to Node object or Node object\n * @param {nodePredicate} [predicate] Optional callback to check if ancestor meets defined conditions\n * @returns {Node} Top most ancestor if predicate is not specified\n * or first node that meet predicate conditions if predicate is specified\n */\nconst findRootNodeAncestor = (obj, predicate = null) => {\n  const { getNode } = require(`./nodes`)\n\n  // Find the root node.\n  let rootNode = obj\n  let whileCount = 0\n  let rootNodeId\n  while (\n    (!predicate || !predicate(rootNode)) &&\n    (rootNodeId = getRootNodeId(rootNode) || rootNode.parent) &&\n    ((rootNode.parent && getNode(rootNode.parent) !== undefined) ||\n      getNode(rootNodeId)) &&\n    whileCount < 101\n  ) {\n    if (rootNodeId) {\n      rootNode = getNode(rootNodeId)\n    } else {\n      rootNode = getNode(rootNode.parent)\n    }\n    whileCount += 1\n    if (whileCount > 100) {\n      console.log(\n        `It looks like you have a node that's set its parent as itself`,\n        rootNode\n      )\n    }\n  }\n\n  return !predicate || predicate(rootNode) ? rootNode : null\n}\n\nfunction trackDbNodes() {\n  const { getNodes } = require(`./nodes`)\n  _.each(getNodes(), node => {\n    trackInlineObjectsInRootNode(node)\n  })\n}\n\n/**\n * @callback nodePredicate\n * @param {Node} node Node that is examined\n */\nexports.findRootNodeAncestor = findRootNodeAncestor\nexports.trackDbNodes = trackDbNodes\n"],"file":"node-tracking.js"}
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/internal-plugins/dev-404-page/raw_dev-404-page.js b/node_modules/gatsby/dist/internal-plugins/dev-404-page/raw_dev-404-page.js
index 4004551..aefadc8 100644
--- a/node_modules/gatsby/dist/internal-plugins/dev-404-page/raw_dev-404-page.js
+++ b/node_modules/gatsby/dist/internal-plugins/dev-404-page/raw_dev-404-page.js
@@ -1,50 +1,29 @@
 import React from "react"
 import PropTypes from "prop-types"
-import { graphql, Link } from "gatsby"
+import { Link } from "gatsby"
 
 class Dev404Page extends React.Component {
   static propTypes = {
-    data: PropTypes.object,
+    pages: PropTypes.arrayOf(PropTypes.object),
     custom404: PropTypes.element,
     location: PropTypes.object,
   }
 
   constructor(props) {
     super(props)
-    const { data } = this.props
-    const pagePaths = data.allSitePage.nodes.map(node => node.path)
-    this.state = {
-      showCustom404: false,
-      initPagePaths: pagePaths,
-      pagePaths: pagePaths,
-      pagePathSearchTerms: ``,
-    }
+    this.state = { showCustom404: false }
     this.showCustom404 = this.showCustom404.bind(this)
-    this.handlePagePathSearch = this.handlePagePathSearch.bind(this)
-    this.handleSearchTermChange = this.handleSearchTermChange.bind(this)
   }
 
   showCustom404() {
     this.setState({ showCustom404: true })
   }
 
-  handleSearchTermChange(event) {
-    this.setState({
-      pagePathSearchTerms: event.target.value,
-    })
-  }
-
-  handlePagePathSearch(event) {
-    event.preventDefault()
-    const tempPagePaths = [...this.state.initPagePaths]
-    const searchTerm = new RegExp(`${this.state.pagePathSearchTerms}`)
-    this.setState({
-      pagePaths: tempPagePaths.filter(pagePath => searchTerm.test(pagePath)),
-    })
-  }
-
   render() {
     const { pathname } = this.props.location
+    const paths = this.props.pagePaths.filter(
+      p => !/^\/dev-404-page\/$/.test(p)
+    )
     let newFilePath
     if (pathname === `/`) {
       newFilePath = `src/pages/index.js`
@@ -83,49 +62,19 @@ class Dev404Page extends React.Component {
           and this page will automatically refresh to show the new page
           component you created.
         </p>
-        {this.state.initPagePaths.length > 0 && (
+        {paths.length > 0 && (
           <div>
             <p>
               If you were trying to reach another page, perhaps you can find it
               below.
             </p>
-            <h2>
-              Pages (
-              {this.state.pagePaths.length != this.state.initPagePaths.length
-                ? `${this.state.pagePaths.length}/${
-                    this.state.initPagePaths.length
-                  }`
-                : this.state.initPagePaths.length}
-              )
-            </h2>
-
-            <form onSubmit={this.handlePagePathSearch}>
-              <label>
-                Search:
-                <input
-                  type="text"
-                  id="search"
-                  placeholder="Search pages..."
-                  value={this.state.pageSearchTerm}
-                  onChange={this.handleSearchTermChange}
-                />
-              </label>
-              <input type="submit" value="Submit" />
-            </form>
+            <h2>Pages ({paths.length})</h2>
             <ul>
-              {this.state.pagePaths.map(
-                (pagePath, index) =>
-                  index < 100 && (
-                    <li key={pagePath}>
-                      <Link to={pagePath}>{pagePath}</Link>
-                    </li>
-                  )
-              )}
-              {this.state.pagePaths.length > 100 && (
-                <p style={{ fontWeight: `bold` }}>
-                  ... and {this.state.pagePaths.length - 100} more.
-                </p>
-              )}
+              {paths.map(path => (
+                <li key={path}>
+                  <Link to={path}>{path}</Link>
+                </li>
+              ))}
             </ul>
           </div>
         )}
@@ -135,13 +84,3 @@ class Dev404Page extends React.Component {
 }
 
 export default Dev404Page
-
-export const pagesQuery = graphql`
-  query PagesQuery {
-    allSitePage(filter: { path: { ne: "/dev-404-page/" } }) {
-      nodes {
-        path
-      }
-    }
-  }
-`
diff --git a/node_modules/gatsby/dist/internal-plugins/dev-404-page/raw_dev-404-page.js.map b/node_modules/gatsby/dist/internal-plugins/dev-404-page/raw_dev-404-page.js.map
new file mode 100644
index 0000000..e435599
--- /dev/null
+++ b/node_modules/gatsby/dist/internal-plugins/dev-404-page/raw_dev-404-page.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":["../../../src/internal-plugins/dev-404-page/raw_dev-404-page.js"],"names":["Dev404Page","React","Component","constructor","props","state","showCustom404","bind","setState","render","pathname","location","paths","pagePaths","filter","p","test","newFilePath","slice","custom404","length","map","path","pages","PropTypes","arrayOf","object","element"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAEA,MAAMA,UAAN,SAAyBC,eAAMC,SAA/B,CAAyC;AAOvCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,aAAa,EAAE;AAAjB,KAAb;AACA,SAAKA,aAAL,GAAqB,KAAKA,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAArB;AACD;;AAEDD,EAAAA,aAAa,GAAG;AACd,SAAKE,QAAL,CAAc;AAAEF,MAAAA,aAAa,EAAE;AAAjB,KAAd;AACD;;AAEDG,EAAAA,MAAM,GAAG;AAAA,UACCC,QADD,GACc,KAAKN,KAAL,CAAWO,QADzB,CACCD,QADD;AAEP,UAAME,KAAK,GAAG,KAAKR,KAAL,CAAWS,SAAX,CAAqBC,MAArB,CACZC,CAAC,IAAI,CAAC,qBAAqBC,IAArB,CAA0BD,CAA1B,CADM,CAAd;AAGA,QAAIE,WAAJ;;AACA,QAAIP,QAAQ,KAAM,GAAlB,EAAsB;AACpBO,MAAAA,WAAW,GAAI,oBAAf;AACD,KAFD,MAEO,IAAIP,QAAQ,CAACQ,KAAT,CAAe,CAAC,CAAhB,MAAwB,GAA5B,EAAgC;AACrCD,MAAAA,WAAW,GAAI,YAAWP,QAAQ,CAACQ,KAAT,CAAe,CAAf,EAAkB,CAAC,CAAnB,CAAsB,KAAhD;AACD,KAFM,MAEA;AACLD,MAAAA,WAAW,GAAI,YAAWP,QAAS,KAAnC;AACD;;AAED,WAAO,KAAKL,KAAL,CAAWC,aAAX,GACL,KAAKF,KAAL,CAAWe,SADN,GAGL,0CACE,0EADF,EAEE,wCACI,4BADJ,EAEE,2CAAOT,QAAP,CAFF,CAFF,EAMG,KAAKN,KAAL,CAAWe,SAAX,GACC,wCACE;AAAQ,MAAA,OAAO,EAAE,KAAKb;AAAtB,iCADF,CADD,GAOC,wCACI,iHADJ,EAEE,8DAFF,MAbJ,EAkBE,iGAEI,GAFJ,EAGE,2CAAOW,WAAP,CAHF,EAII,GAJJ,yFAlBF,EA0BGL,KAAK,CAACQ,MAAN,GAAe,CAAf,IACC,0CACE,mHADF,EAKE,oDAAYR,KAAK,CAACQ,MAAlB,MALF,EAME,yCACGR,KAAK,CAACS,GAAN,CAAUC,IAAI,IACb;AAAI,MAAA,GAAG,EAAEA;AAAT,OACE,6BAAC,YAAD;AAAM,MAAA,EAAE,EAAEA;AAAV,OAAiBA,IAAjB,CADF,CADD,CADH,CANF,CA3BJ,CAHF;AA+CD;;AA9EsC;;8BAAnCtB,U,eACe;AACjBuB,EAAAA,KAAK,EAAEC,mBAAUC,OAAV,CAAkBD,mBAAUE,MAA5B,CADU;AAEjBP,EAAAA,SAAS,EAAEK,mBAAUG,OAFJ;AAGjBhB,EAAAA,QAAQ,EAAEa,mBAAUE;AAHH,C;eAgFN1B,U","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Link } from \"gatsby\"\n\nclass Dev404Page extends React.Component {\n  static propTypes = {\n    pages: PropTypes.arrayOf(PropTypes.object),\n    custom404: PropTypes.element,\n    location: PropTypes.object,\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = { showCustom404: false }\n    this.showCustom404 = this.showCustom404.bind(this)\n  }\n\n  showCustom404() {\n    this.setState({ showCustom404: true })\n  }\n\n  render() {\n    const { pathname } = this.props.location\n    const paths = this.props.pagePaths.filter(\n      p => !/^\\/dev-404-page\\/$/.test(p)\n    )\n    let newFilePath\n    if (pathname === `/`) {\n      newFilePath = `src/pages/index.js`\n    } else if (pathname.slice(-1) === `/`) {\n      newFilePath = `src/pages${pathname.slice(0, -1)}.js`\n    } else {\n      newFilePath = `src/pages${pathname}.js`\n    }\n\n    return this.state.showCustom404 ? (\n      this.props.custom404\n    ) : (\n      <div>\n        <h1>Gatsby.js development 404 page</h1>\n        <p>\n          {`There's not a page yet at `}\n          <code>{pathname}</code>\n        </p>\n        {this.props.custom404 ? (\n          <p>\n            <button onClick={this.showCustom404}>\n              Preview custom 404 page\n            </button>\n          </p>\n        ) : (\n          <p>\n            {`A custom 404 page wasn't detected - if you would like to add one, create a component in your site directory at `}\n            <code>src/pages/404.js</code>.\n          </p>\n        )}\n        <p>\n          Create a React.js component in your site directory at\n          {` `}\n          <code>{newFilePath}</code>\n          {` `}\n          and this page will automatically refresh to show the new page\n          component you created.\n        </p>\n        {paths.length > 0 && (\n          <div>\n            <p>\n              If you were trying to reach another page, perhaps you can find it\n              below.\n            </p>\n            <h2>Pages ({paths.length})</h2>\n            <ul>\n              {paths.map(path => (\n                <li key={path}>\n                  <Link to={path}>{path}</Link>\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n      </div>\n    )\n  }\n}\n\nexport default Dev404Page\n"],"file":"raw_dev-404-page.js"}
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/internal-plugins/webpack-theme-component-shadowing/gatsby-node.js b/node_modules/gatsby/dist/internal-plugins/webpack-theme-component-shadowing/gatsby-node.js
index 535e21d..1b02c3a 100644
--- a/node_modules/gatsby/dist/internal-plugins/webpack-theme-component-shadowing/gatsby-node.js
+++ b/node_modules/gatsby/dist/internal-plugins/webpack-theme-component-shadowing/gatsby-node.js
@@ -18,7 +18,9 @@ exports.onCreateWebpackConfig = ({
     actions.setWebpackConfig({
       resolve: {
         plugins: [new GatsbyThemeComponentShadowingResolverPlugin({
-          themes: themes.themes,
+          themes: themes.themes.map(({
+            themeName
+          }) => themeName),
           projectRoot: program.directory
         })]
       }
diff --git a/node_modules/gatsby/dist/internal-plugins/webpack-theme-component-shadowing/gatsby-node.js.map b/node_modules/gatsby/dist/internal-plugins/webpack-theme-component-shadowing/gatsby-node.js.map
index dfe27b3..0bed86c 100644
--- a/node_modules/gatsby/dist/internal-plugins/webpack-theme-component-shadowing/gatsby-node.js.map
+++ b/node_modules/gatsby/dist/internal-plugins/webpack-theme-component-shadowing/gatsby-node.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../../src/internal-plugins/webpack-theme-component-shadowing/gatsby-node.js"],"names":["GatsbyThemeComponentShadowingResolverPlugin","require","exports","onCreateWebpackConfig","store","stage","getConfig","rules","loaders","actions","pluginOptions","getState","program","themes","setWebpackConfig","resolve","plugins","projectRoot","directory"],"mappings":";;AAAA,MAAMA,2CAA2C,GAAGC,OAAO,CAAE,GAAF,CAA3D;;AAEAC,OAAO,CAACC,qBAAR,GAAgC,CAC9B;AAAEC,EAAAA,KAAF;AAASC,EAAAA,KAAT;AAAgBC,EAAAA,SAAhB;AAA2BC,EAAAA,KAA3B;AAAkCC,EAAAA,OAAlC;AAA2CC,EAAAA;AAA3C,CAD8B,EAE9BC,aAF8B,KAG3B;AAAA,0BACyBN,KAAK,CAACO,QAAN,EADzB;AAAA,QACKC,OADL,mBACKA,OADL;AAAA,QACcC,MADd,mBACcA,MADd;;AAGH,MAAIA,MAAM,CAACA,MAAX,EAAmB;AACjBJ,IAAAA,OAAO,CAACK,gBAAR,CAAyB;AACvBC,MAAAA,OAAO,EAAE;AACPC,QAAAA,OAAO,EAAE,CACP,IAAIhB,2CAAJ,CAAgD;AAC9Ca,UAAAA,MAAM,EAAEA,MAAM,CAACA,MAD+B;AAE9CI,UAAAA,WAAW,EAAEL,OAAO,CAACM;AAFyB,SAAhD,CADO;AADF;AADc,KAAzB;AAUD;AACF,CAlBD","sourcesContent":["const GatsbyThemeComponentShadowingResolverPlugin = require(`.`)\n\nexports.onCreateWebpackConfig = (\n  { store, stage, getConfig, rules, loaders, actions },\n  pluginOptions\n) => {\n  const { program, themes } = store.getState()\n\n  if (themes.themes) {\n    actions.setWebpackConfig({\n      resolve: {\n        plugins: [\n          new GatsbyThemeComponentShadowingResolverPlugin({\n            themes: themes.themes,\n            projectRoot: program.directory,\n          }),\n        ],\n      },\n    })\n  }\n}\n"],"file":"gatsby-node.js"}
\ No newline at end of file
+{"version":3,"sources":["../../../src/internal-plugins/webpack-theme-component-shadowing/gatsby-node.js"],"names":["GatsbyThemeComponentShadowingResolverPlugin","require","exports","onCreateWebpackConfig","store","stage","getConfig","rules","loaders","actions","pluginOptions","getState","program","themes","setWebpackConfig","resolve","plugins","map","themeName","projectRoot","directory"],"mappings":";;AAAA,MAAMA,2CAA2C,GAAGC,OAAO,CAAE,GAAF,CAA3D;;AAEAC,OAAO,CAACC,qBAAR,GAAgC,CAC9B;AAAEC,EAAAA,KAAF;AAASC,EAAAA,KAAT;AAAgBC,EAAAA,SAAhB;AAA2BC,EAAAA,KAA3B;AAAkCC,EAAAA,OAAlC;AAA2CC,EAAAA;AAA3C,CAD8B,EAE9BC,aAF8B,KAG3B;AAAA,0BACyBN,KAAK,CAACO,QAAN,EADzB;AAAA,QACKC,OADL,mBACKA,OADL;AAAA,QACcC,MADd,mBACcA,MADd;;AAGH,MAAIA,MAAM,CAACA,MAAX,EAAmB;AACjBJ,IAAAA,OAAO,CAACK,gBAAR,CAAyB;AACvBC,MAAAA,OAAO,EAAE;AACPC,QAAAA,OAAO,EAAE,CACP,IAAIhB,2CAAJ,CAAgD;AAC9Ca,UAAAA,MAAM,EAAEA,MAAM,CAACA,MAAP,CAAcI,GAAd,CAAkB,CAAC;AAAEC,YAAAA;AAAF,WAAD,KAAmBA,SAArC,CADsC;AAE9CC,UAAAA,WAAW,EAAEP,OAAO,CAACQ;AAFyB,SAAhD,CADO;AADF;AADc,KAAzB;AAUD;AACF,CAlBD","sourcesContent":["const GatsbyThemeComponentShadowingResolverPlugin = require(`.`)\n\nexports.onCreateWebpackConfig = (\n  { store, stage, getConfig, rules, loaders, actions },\n  pluginOptions\n) => {\n  const { program, themes } = store.getState()\n\n  if (themes.themes) {\n    actions.setWebpackConfig({\n      resolve: {\n        plugins: [\n          new GatsbyThemeComponentShadowingResolverPlugin({\n            themes: themes.themes.map(({ themeName }) => themeName),\n            projectRoot: program.directory,\n          }),\n        ],\n      },\n    })\n  }\n}\n"],"file":"gatsby-node.js"}
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/internal-plugins/webpack-theme-component-shadowing/index.js b/node_modules/gatsby/dist/internal-plugins/webpack-theme-component-shadowing/index.js
index 47efeb2..b1a5d70 100644
--- a/node_modules/gatsby/dist/internal-plugins/webpack-theme-component-shadowing/index.js
+++ b/node_modules/gatsby/dist/internal-plugins/webpack-theme-component-shadowing/index.js
@@ -12,30 +12,28 @@ const fs = require(`fs`);
 
 const _ = require(`lodash`);
 
-const pathWithoutExtension = fullPath => {
-  const parsed = path.parse(fullPath);
-  return path.join(parsed.dir, parsed.name);
-};
-
 module.exports = class GatsbyThemeComponentShadowingResolverPlugin {
   constructor({
     projectRoot,
     themes
   }) {
     (0, _defineProperty2.default)(this, "cache", {});
-    debug(`themes list`, themes.map(({
-      themeName
-    }) => themeName));
+    debug(`themes list`, themes);
     this.themes = themes;
     this.projectRoot = projectRoot;
   }
 
   apply(resolver) {
     resolver.plugin(`relative`, (request, callback) => {
-      const matchingThemes = this.getMatchingThemesForPath(request.path); // 0 matching themes happens a lot for paths we don't want to handle
+      // find out which theme's src/components dir we're requiring from
+      const allMatchingThemes = this.themes.filter(name => request.path.includes(path.join(name, `src`))); // The same theme can be included twice in the themes list causing multiple
+      // matches. This case should only be counted as a single match for that theme.
+
+      const matchingThemes = _.uniq(allMatchingThemes); // 0 matching themes happens a lot for paths we don't want to handle
       // > 1 matching theme means we have a path like
       //   `gatsby-theme-blog/src/components/gatsby-theme-something/src/components`
 
+
       if (matchingThemes.length > 1) {
         throw new Error(`Gatsby can't differentiate between themes ${matchingThemes.join(` and `)} for path ${request.path}`);
       }
@@ -49,8 +47,6 @@ module.exports = class GatsbyThemeComponentShadowingResolverPlugin {
 
       const _request$path$split = request.path.split(path.join(theme, `src`)),
             component = _request$path$split[1];
-
-      if (
       /**
        * if someone adds
        * ```
@@ -61,27 +57,21 @@ module.exports = class GatsbyThemeComponentShadowingResolverPlugin {
        * like this in a theme, but we also shouldn't artificially break
        * people that do.
        */
-      request.context.issuer &&
-      /**
-       * An issuer is the file making the require request. It can
-       * be in a user's site or a theme. If the issuer is requesting
-       * a path in the shadow chain that it participates in, then we
-       * will let the request through as normal. Otherwise, we
-       * engage the shadowing algorithm.
-       */
-      this.requestPathIsIssuerShadowPath({
-        requestPath: request.path,
-        issuerPath: request.context.issuer,
-        userSiteDir: path.resolve(`.`)
-      })) {
-        return resolver.doResolve(`describedRelative`, request, null, {}, callback);
-      } // This is the shadowing algorithm.
 
 
+      if (request.context.issuer) {
+        const issuerExtension = path.extname(request.context.issuer);
+
+        if (request.context.issuer.slice(0, -issuerExtension.length).endsWith(component)) {
+          return resolver.doResolve(`describedRelative`, request, null, {}, callback);
+        }
+      }
+
       const builtComponentPath = this.resolveComponentPath({
         matchingTheme: theme,
         themes: this.themes,
-        component
+        component,
+        projectRoot: this.projectRoot
       });
       return resolver.doResolve(`describedRelative`, Object.assign({}, request, {
         path: builtComponentPath || request.path
@@ -93,17 +83,14 @@ module.exports = class GatsbyThemeComponentShadowingResolverPlugin {
   resolveComponentPath({
     matchingTheme: theme,
     themes: ogThemes,
-    component
+    component,
+    projectRoot
   }) {
     // don't include matching theme in possible shadowing paths
-    const themes = ogThemes.filter(({
-      themeName
-    }) => themeName !== theme);
+    const themes = ogThemes.filter(t => t !== theme);
 
     if (!this.cache[`${theme}-${component}`]) {
-      this.cache[`${theme}-${component}`] = [path.join(path.resolve(`.`), `src`, theme)].concat(Array.from(themes).reverse().map(({
-        themeDir
-      }) => path.join(themeDir, `src`, theme))).map(dir => path.join(dir, component)).find(possibleComponentPath => {
+      this.cache[`${theme}-${component}`] = [path.join(path.resolve(`.`), `src`, theme)].concat(Array.from(themes).reverse().map(aTheme => path.join(path.dirname(require.resolve(aTheme)), `src`, theme))).map(dir => path.join(dir, component)).find(possibleComponentPath => {
         debug(`possibleComponentPath`, possibleComponentPath);
         let dir;
 
@@ -127,54 +114,5 @@ module.exports = class GatsbyThemeComponentShadowingResolverPlugin {
     return this.cache[`${theme}-${component}`];
   }
 
-  getMatchingThemesForPath(filepath) {
-    // find out which theme's src/components dir we're requiring from
-    const allMatchingThemes = this.themes.filter(({
-      themeName
-    }) => filepath.includes(path.join(themeName, `src`))); // The same theme can be included twice in the themes list causing multiple
-    // matches. This case should only be counted as a single match for that theme.
-
-    return _.uniq(allMatchingThemes.map(({
-      themeName
-    }) => themeName));
-  } // given a theme name, return all of the possible shadow locations
-
-
-  getBaseShadowDirsForThemes(theme) {
-    return Array.from(this.themes).reverse().map(({
-      themeName,
-      themeDir
-    }) => {
-      if (themeName === theme) {
-        return path.join(themeDir, `src`);
-      } else {
-        return path.join(themeDir, `src`, theme);
-      }
-    });
-  }
-
-  requestPathIsIssuerShadowPath({
-    requestPath,
-    issuerPath,
-    userSiteDir
-  }) {
-    // get the issuer's theme
-    const matchingThemes = this.getMatchingThemesForPath(requestPath);
-
-    if (matchingThemes.length !== 1) {
-      return false;
-    }
-
-    const theme = matchingThemes[0]; // get the location of the component relative to src/
-
-    const _requestPath$split = requestPath.split(path.join(theme, `src`)),
-          component = _requestPath$split[1]; // get list of potential shadow locations
-
-
-    const shadowFiles = this.getBaseShadowDirsForThemes(theme).concat(path.join(userSiteDir, `src`, theme)).map(dir => path.join(dir, component)); // if the issuer is requesting a path that is a potential shadow path of itself
-
-    return shadowFiles.includes(pathWithoutExtension(issuerPath));
-  }
-
 };
 //# sourceMappingURL=index.js.map
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/internal-plugins/webpack-theme-component-shadowing/index.js.map b/node_modules/gatsby/dist/internal-plugins/webpack-theme-component-shadowing/index.js.map
index 6463e70..39dde13 100644
--- a/node_modules/gatsby/dist/internal-plugins/webpack-theme-component-shadowing/index.js.map
+++ b/node_modules/gatsby/dist/internal-plugins/webpack-theme-component-shadowing/index.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../../src/internal-plugins/webpack-theme-component-shadowing/index.js"],"names":["path","require","debug","fs","_","pathWithoutExtension","fullPath","parsed","parse","join","dir","name","module","exports","GatsbyThemeComponentShadowingResolverPlugin","constructor","projectRoot","themes","map","themeName","apply","resolver","plugin","request","callback","matchingThemes","getMatchingThemesForPath","length","Error","theme","split","component","context","issuer","requestPathIsIssuerShadowPath","requestPath","issuerPath","userSiteDir","resolve","doResolve","builtComponentPath","resolveComponentPath","matchingTheme","ogThemes","filter","cache","concat","Array","from","reverse","themeDir","find","possibleComponentPath","readdirSync","dirname","e","exists","filepath","ext","extname","filenameWithoutExtension","basename","includes","allMatchingThemes","uniq","getBaseShadowDirsForThemes","shadowFiles"],"mappings":"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","sourcesContent":["const path = require(`path`)\nconst debug = require(`debug`)(`gatsby:component-shadowing`)\nconst fs = require(`fs`)\nconst _ = require(`lodash`)\n\nconst pathWithoutExtension = fullPath => {\n  const parsed = path.parse(fullPath)\n  return path.join(parsed.dir, parsed.name)\n}\n\nmodule.exports = class GatsbyThemeComponentShadowingResolverPlugin {\n  cache = {}\n\n  constructor({ projectRoot, themes }) {\n    debug(`themes list`, themes.map(({ themeName }) => themeName))\n    this.themes = themes\n    this.projectRoot = projectRoot\n  }\n\n  apply(resolver) {\n    resolver.plugin(`relative`, (request, callback) => {\n      const matchingThemes = this.getMatchingThemesForPath(request.path)\n\n      // 0 matching themes happens a lot for paths we don't want to handle\n      // > 1 matching theme means we have a path like\n      //   `gatsby-theme-blog/src/components/gatsby-theme-something/src/components`\n      if (matchingThemes.length > 1) {\n        throw new Error(\n          `Gatsby can't differentiate between themes ${matchingThemes.join(\n            ` and `\n          )} for path ${request.path}`\n        )\n      }\n\n      if (matchingThemes.length !== 1) {\n        return callback()\n      }\n\n      // theme is the theme package from which we're requiring the relative component\n      const [theme] = matchingThemes\n      // get the location of the component relative to src/\n      const [, component] = request.path.split(path.join(theme, `src`))\n\n      if (\n        /**\n         * if someone adds\n         * ```\n         * modules: [path.resolve(__dirname, 'src'), 'node_modules'],\n         * ```\n         * to the webpack config, `issuer` is `null`, so we skip this check.\n         * note that it's probably a bad idea in general to set `modules`\n         * like this in a theme, but we also shouldn't artificially break\n         * people that do.\n         */\n        request.context.issuer &&\n        /**\n         * An issuer is the file making the require request. It can\n         * be in a user's site or a theme. If the issuer is requesting\n         * a path in the shadow chain that it participates in, then we\n         * will let the request through as normal. Otherwise, we\n         * engage the shadowing algorithm.\n         */\n        this.requestPathIsIssuerShadowPath({\n          requestPath: request.path,\n          issuerPath: request.context.issuer,\n          userSiteDir: path.resolve(`.`),\n        })\n      ) {\n        return resolver.doResolve(\n          `describedRelative`,\n          request,\n          null,\n          {},\n          callback\n        )\n      }\n\n      // This is the shadowing algorithm.\n      const builtComponentPath = this.resolveComponentPath({\n        matchingTheme: theme,\n        themes: this.themes,\n        component,\n      })\n\n      return resolver.doResolve(\n        `describedRelative`,\n        { ...request, path: builtComponentPath || request.path },\n        null,\n        {},\n        callback\n      )\n    })\n  }\n\n  // check the cache, the user's project, and finally the theme files\n  resolveComponentPath({ matchingTheme: theme, themes: ogThemes, component }) {\n    // don't include matching theme in possible shadowing paths\n    const themes = ogThemes.filter(({ themeName }) => themeName !== theme)\n    if (!this.cache[`${theme}-${component}`]) {\n      this.cache[`${theme}-${component}`] = [\n        path.join(path.resolve(`.`), `src`, theme),\n      ]\n        .concat(\n          Array.from(themes)\n            .reverse()\n            .map(({ themeDir }) => path.join(themeDir, `src`, theme))\n        )\n        .map(dir => path.join(dir, component))\n        .find(possibleComponentPath => {\n          debug(`possibleComponentPath`, possibleComponentPath)\n          let dir\n          try {\n            // we use fs/path instead of require.resolve to work with\n            // TypeScript and alternate syntaxes\n            dir = fs.readdirSync(path.dirname(possibleComponentPath))\n          } catch (e) {\n            return false\n          }\n          const exists = dir\n            .map(filepath => {\n              const ext = path.extname(filepath)\n              const filenameWithoutExtension = path.basename(filepath, ext)\n              return filenameWithoutExtension\n            })\n            .includes(\n              path.basename(\n                possibleComponentPath,\n                path.extname(possibleComponentPath)\n              )\n            )\n          return exists\n        })\n    }\n\n    return this.cache[`${theme}-${component}`]\n  }\n\n  getMatchingThemesForPath(filepath) {\n    // find out which theme's src/components dir we're requiring from\n    const allMatchingThemes = this.themes.filter(({ themeName }) =>\n      filepath.includes(path.join(themeName, `src`))\n    )\n\n    // The same theme can be included twice in the themes list causing multiple\n    // matches. This case should only be counted as a single match for that theme.\n    return _.uniq(allMatchingThemes.map(({ themeName }) => themeName))\n  }\n\n  // given a theme name, return all of the possible shadow locations\n  getBaseShadowDirsForThemes(theme) {\n    return Array.from(this.themes)\n      .reverse()\n      .map(({ themeName, themeDir }) => {\n        if (themeName === theme) {\n          return path.join(themeDir, `src`)\n        } else {\n          return path.join(themeDir, `src`, theme)\n        }\n      })\n  }\n\n  requestPathIsIssuerShadowPath({ requestPath, issuerPath, userSiteDir }) {\n    // get the issuer's theme\n    const matchingThemes = this.getMatchingThemesForPath(requestPath)\n    if (matchingThemes.length !== 1) {\n      return false\n    }\n    const [theme] = matchingThemes\n\n    // get the location of the component relative to src/\n    const [, component] = requestPath.split(path.join(theme, `src`))\n\n    // get list of potential shadow locations\n    const shadowFiles = this.getBaseShadowDirsForThemes(theme)\n      .concat(path.join(userSiteDir, `src`, theme))\n      .map(dir => path.join(dir, component))\n\n    // if the issuer is requesting a path that is a potential shadow path of itself\n    return shadowFiles.includes(pathWithoutExtension(issuerPath))\n  }\n}\n"],"file":"index.js"}
\ No newline at end of file
+{"version":3,"sources":["../../../src/internal-plugins/webpack-theme-component-shadowing/index.js"],"names":["path","require","debug","fs","_","module","exports","GatsbyThemeComponentShadowingResolverPlugin","constructor","projectRoot","themes","apply","resolver","plugin","request","callback","allMatchingThemes","filter","name","includes","join","matchingThemes","uniq","length","Error","theme","split","component","context","issuer","issuerExtension","extname","slice","endsWith","doResolve","builtComponentPath","resolveComponentPath","matchingTheme","ogThemes","t","cache","resolve","concat","Array","from","reverse","map","aTheme","dirname","dir","find","possibleComponentPath","readdirSync","e","exists","filepath","ext","filenameWithoutExtension","basename"],"mappings":"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","sourcesContent":["const path = require(`path`)\nconst debug = require(`debug`)(`gatsby:component-shadowing`)\nconst fs = require(`fs`)\nconst _ = require(`lodash`)\n\nmodule.exports = class GatsbyThemeComponentShadowingResolverPlugin {\n  cache = {}\n\n  constructor({ projectRoot, themes }) {\n    debug(`themes list`, themes)\n    this.themes = themes\n    this.projectRoot = projectRoot\n  }\n\n  apply(resolver) {\n    resolver.plugin(`relative`, (request, callback) => {\n      // find out which theme's src/components dir we're requiring from\n      const allMatchingThemes = this.themes.filter(name =>\n        request.path.includes(path.join(name, `src`))\n      )\n\n      // The same theme can be included twice in the themes list causing multiple\n      // matches. This case should only be counted as a single match for that theme.\n      const matchingThemes = _.uniq(allMatchingThemes)\n\n      // 0 matching themes happens a lot for paths we don't want to handle\n      // > 1 matching theme means we have a path like\n      //   `gatsby-theme-blog/src/components/gatsby-theme-something/src/components`\n      if (matchingThemes.length > 1) {\n        throw new Error(\n          `Gatsby can't differentiate between themes ${matchingThemes.join(\n            ` and `\n          )} for path ${request.path}`\n        )\n      }\n      if (matchingThemes.length !== 1) {\n        return callback()\n      }\n      // theme is the theme package from which we're requiring the relative component\n      const [theme] = matchingThemes\n      // get the location of the component relative to src/\n      const [, component] = request.path.split(path.join(theme, `src`))\n\n      /**\n       * if someone adds\n       * ```\n       * modules: [path.resolve(__dirname, 'src'), 'node_modules'],\n       * ```\n       * to the webpack config, `issuer` is `null`, so we skip this check.\n       * note that it's probably a bad idea in general to set `modules`\n       * like this in a theme, but we also shouldn't artificially break\n       * people that do.\n       */\n      if (request.context.issuer) {\n        const issuerExtension = path.extname(request.context.issuer)\n\n        if (\n          request.context.issuer\n            .slice(0, -issuerExtension.length)\n            .endsWith(component)\n        ) {\n          return resolver.doResolve(\n            `describedRelative`,\n            request,\n            null,\n            {},\n            callback\n          )\n        }\n      }\n      const builtComponentPath = this.resolveComponentPath({\n        matchingTheme: theme,\n        themes: this.themes,\n        component,\n        projectRoot: this.projectRoot,\n      })\n\n      return resolver.doResolve(\n        `describedRelative`,\n        { ...request, path: builtComponentPath || request.path },\n        null,\n        {},\n        callback\n      )\n    })\n  }\n\n  // check the cache, the user's project, and finally the theme files\n  resolveComponentPath({\n    matchingTheme: theme,\n    themes: ogThemes,\n    component,\n    projectRoot,\n  }) {\n    // don't include matching theme in possible shadowing paths\n    const themes = ogThemes.filter(t => t !== theme)\n    if (!this.cache[`${theme}-${component}`]) {\n      this.cache[`${theme}-${component}`] = [\n        path.join(path.resolve(`.`), `src`, theme),\n      ]\n        .concat(\n          Array.from(themes)\n            .reverse()\n            .map(aTheme =>\n              path.join(path.dirname(require.resolve(aTheme)), `src`, theme)\n            )\n        )\n        .map(dir => path.join(dir, component))\n        .find(possibleComponentPath => {\n          debug(`possibleComponentPath`, possibleComponentPath)\n          let dir\n          try {\n            // we use fs/path instead of require.resolve to work with\n            // TypeScript and alternate syntaxes\n            dir = fs.readdirSync(path.dirname(possibleComponentPath))\n          } catch (e) {\n            return false\n          }\n          const exists = dir\n            .map(filepath => {\n              const ext = path.extname(filepath)\n              const filenameWithoutExtension = path.basename(filepath, ext)\n              return filenameWithoutExtension\n            })\n            .includes(\n              path.basename(\n                possibleComponentPath,\n                path.extname(possibleComponentPath)\n              )\n            )\n          return exists\n        })\n    }\n\n    return this.cache[`${theme}-${component}`]\n  }\n}\n"],"file":"index.js"}
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/joi-schemas/joi.js b/node_modules/gatsby/dist/joi-schemas/joi.js
index 90faebf..19a6289 100644
--- a/node_modules/gatsby/dist/joi-schemas/joi.js
+++ b/node_modules/gatsby/dist/joi-schemas/joi.js
@@ -5,21 +5,11 @@ exports.nodeSchema = exports.pageSchema = exports.gatsbyConfigSchema = void 0;
 
 const Joi = require(`joi`);
 
-const stripTrailingSlash = chain => chain.replace(/(\w)\/+$/, `$1`);
-
 const gatsbyConfigSchema = Joi.object().keys({
   __experimentalThemes: Joi.array(),
   polyfill: Joi.boolean(),
-  assetPrefix: stripTrailingSlash(Joi.string().uri({
-    allowRelative: true
-  })),
-  pathPrefix: stripTrailingSlash(Joi.string().uri({
-    allowRelative: true,
-    relativeOnly: true
-  })),
-  siteMetadata: Joi.object({
-    siteUrl: stripTrailingSlash(Joi.string()).uri()
-  }).unknown(),
+  siteMetadata: Joi.object(),
+  pathPrefix: Joi.string(),
   mapping: Joi.object(),
   plugins: Joi.array(),
   proxy: Joi.object().keys({
@@ -27,22 +17,6 @@ const gatsbyConfigSchema = Joi.object().keys({
     url: Joi.string().required()
   }),
   developMiddleware: Joi.func()
-}) // throws when both assetPrefix and pathPrefix are defined
-.when(Joi.object({
-  assetPrefix: Joi.string().uri({
-    allowRelative: true,
-    relativeOnly: true
-  }),
-  pathPrefix: Joi.string().uri({
-    allowRelative: true,
-    relativeOnly: true
-  })
-}), {
-  then: Joi.object({
-    assetPrefix: Joi.string().uri({
-      allowRelative: false
-    }).error(new Error(`assetPrefix must be an absolute URI when used with pathPrefix`))
-  })
 });
 exports.gatsbyConfigSchema = gatsbyConfigSchema;
 const pageSchema = Joi.object().keys({
diff --git a/node_modules/gatsby/dist/joi-schemas/joi.js.map b/node_modules/gatsby/dist/joi-schemas/joi.js.map
index 6a664a5..10f29a6 100644
--- a/node_modules/gatsby/dist/joi-schemas/joi.js.map
+++ b/node_modules/gatsby/dist/joi-schemas/joi.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/joi-schemas/joi.js"],"names":["Joi","require","stripTrailingSlash","chain","replace","gatsbyConfigSchema","object","keys","__experimentalThemes","array","polyfill","boolean","assetPrefix","string","uri","allowRelative","pathPrefix","relativeOnly","siteMetadata","siteUrl","unknown","mapping","plugins","proxy","prefix","required","url","developMiddleware","func","when","then","error","Error","pageSchema","path","matchPath","component","componentChunkName","context","pluginCreator___NODE","pluginCreatorId","nodeSchema","id","children","items","forbidden","parent","allow","fields","internal","contentDigest","mediaType","type","owner","fieldOwners","content","description","ignoreType"],"mappings":"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","sourcesContent":["const Joi = require(`joi`)\n\nconst stripTrailingSlash = chain => chain.replace(/(\\w)\\/+$/, `$1`)\n\nexport const gatsbyConfigSchema = Joi.object()\n  .keys({\n    __experimentalThemes: Joi.array(),\n    polyfill: Joi.boolean(),\n    assetPrefix: stripTrailingSlash(\n      Joi.string().uri({\n        allowRelative: true,\n      })\n    ),\n    pathPrefix: stripTrailingSlash(\n      Joi.string().uri({\n        allowRelative: true,\n        relativeOnly: true,\n      })\n    ),\n    siteMetadata: Joi.object({\n      siteUrl: stripTrailingSlash(Joi.string()).uri(),\n    }).unknown(),\n    mapping: Joi.object(),\n    plugins: Joi.array(),\n    proxy: Joi.object().keys({\n      prefix: Joi.string().required(),\n      url: Joi.string().required(),\n    }),\n    developMiddleware: Joi.func(),\n  })\n  // throws when both assetPrefix and pathPrefix are defined\n  .when(\n    Joi.object({\n      assetPrefix: Joi.string().uri({\n        allowRelative: true,\n        relativeOnly: true,\n      }),\n      pathPrefix: Joi.string().uri({\n        allowRelative: true,\n        relativeOnly: true,\n      }),\n    }),\n    {\n      then: Joi.object({\n        assetPrefix: Joi.string()\n          .uri({\n            allowRelative: false,\n          })\n          .error(\n            new Error(\n              `assetPrefix must be an absolute URI when used with pathPrefix`\n            )\n          ),\n      }),\n    }\n  )\n\nexport const pageSchema = Joi.object()\n  .keys({\n    path: Joi.string().required(),\n    matchPath: Joi.string(),\n    component: Joi.string().required(),\n    componentChunkName: Joi.string().required(),\n    context: Joi.object(),\n    pluginCreator___NODE: Joi.string(),\n    pluginCreatorId: Joi.string(),\n  })\n  .unknown()\n\nexport const nodeSchema = Joi.object()\n  .keys({\n    id: Joi.string().required(),\n    children: Joi.array().items(Joi.string(), Joi.object().forbidden()),\n    parent: Joi.string().allow(null),\n    fields: Joi.object(),\n    internal: Joi.object()\n      .keys({\n        contentDigest: Joi.string().required(),\n        mediaType: Joi.string(),\n        type: Joi.string().required(),\n        owner: Joi.string().required(),\n        fieldOwners: Joi.object(),\n        content: Joi.string().allow(``),\n        description: Joi.string(),\n        ignoreType: Joi.boolean(),\n      })\n      .unknown({\n        allow: false,\n      }), // Don't allow non-standard fields\n  })\n  .unknown()\n"],"file":"joi.js"}
\ No newline at end of file
+{"version":3,"sources":["../../src/joi-schemas/joi.js"],"names":["Joi","require","gatsbyConfigSchema","object","keys","__experimentalThemes","array","polyfill","boolean","siteMetadata","pathPrefix","string","mapping","plugins","proxy","prefix","required","url","developMiddleware","func","pageSchema","path","matchPath","component","componentChunkName","context","pluginCreator___NODE","pluginCreatorId","unknown","nodeSchema","id","children","items","forbidden","parent","allow","fields","internal","contentDigest","mediaType","type","owner","fieldOwners","content","description","ignoreType"],"mappings":"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","sourcesContent":["const Joi = require(`joi`)\n\nexport const gatsbyConfigSchema = Joi.object().keys({\n  __experimentalThemes: Joi.array(),\n  polyfill: Joi.boolean(),\n  siteMetadata: Joi.object(),\n  pathPrefix: Joi.string(),\n  mapping: Joi.object(),\n  plugins: Joi.array(),\n  proxy: Joi.object().keys({\n    prefix: Joi.string().required(),\n    url: Joi.string().required(),\n  }),\n  developMiddleware: Joi.func(),\n})\n\nexport const pageSchema = Joi.object()\n  .keys({\n    path: Joi.string().required(),\n    matchPath: Joi.string(),\n    component: Joi.string().required(),\n    componentChunkName: Joi.string().required(),\n    context: Joi.object(),\n    pluginCreator___NODE: Joi.string(),\n    pluginCreatorId: Joi.string(),\n  })\n  .unknown()\n\nexport const nodeSchema = Joi.object()\n  .keys({\n    id: Joi.string().required(),\n    children: Joi.array().items(Joi.string(), Joi.object().forbidden()),\n    parent: Joi.string().allow(null),\n    fields: Joi.object(),\n    internal: Joi.object()\n      .keys({\n        contentDigest: Joi.string().required(),\n        mediaType: Joi.string(),\n        type: Joi.string().required(),\n        owner: Joi.string().required(),\n        fieldOwners: Joi.object(),\n        content: Joi.string().allow(``),\n        description: Joi.string(),\n        ignoreType: Joi.boolean(),\n      })\n      .unknown({\n        allow: false,\n      }), // Don't allow non-standard fields\n  })\n  .unknown()\n"],"file":"joi.js"}
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/query/index.js b/node_modules/gatsby/dist/query/index.js
index 5da6ca4..7b242b3 100644
--- a/node_modules/gatsby/dist/query/index.js
+++ b/node_modules/gatsby/dist/query/index.js
@@ -6,18 +6,15 @@ var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/
 
 const _ = require(`lodash`);
 
-const Queue = require(`better-queue`);
-
 const convertHrtime = require(`convert-hrtime`);
 
 const _require = require(`../redux`),
       store = _require.store,
       emitter = _require.emitter;
 
-const queryQueue = require(`./queue`);
+const queryQueue = require(`./query-queue`);
 
-const _require2 = require(`../redux/actions`),
-      boundActionCreators = _require2.boundActionCreators;
+const jobHandler = require(`./job-handler`);
 
 let seenIdsWithoutDataDependencies = [];
 let queuedDirtyActions = [];
@@ -34,21 +31,20 @@ emitter.on(`DELETE_NODE`, action => {
   queuedDirtyActions.push({
     payload: action.payload
   });
-}); /////////////////////////////////////////////////////////////////////
+});
+
+const enqueueExtractedQueryId = queryId => {
+  extractedQueryIds.add(queryId);
+}; /////////////////////////////////////////////////////////////////////
 // Calculate dirty static/page queries
 
-const popExtractedQueries = () => {
-  const queries = [...extractedQueryIds];
-  extractedQueryIds.clear();
-  return queries;
-};
 
 const findIdsWithoutDataDependencies = state => {
   const allTrackedIds = _.uniq(_.flatten(_.concat(_.values(state.componentDataDependencies.nodes), _.values(state.componentDataDependencies.connections)))); // Get list of paths not already tracked and run the queries for these
   // paths.
 
 
-  const notTrackedIds = _.difference([...Array.from(state.pages.values(), p => p.path), ...[...state.staticQueryComponents.values()].map(c => c.jsonName)], [...allTrackedIds, ...seenIdsWithoutDataDependencies]); // Add new IDs to our seen array so we don't keep trying to run queries for them.
+  const notTrackedIds = _.difference([...Array.from(state.pages.values(), p => p.path), ...[...state.staticQueryComponents.values()].map(c => c.id)], [...allTrackedIds, ...seenIdsWithoutDataDependencies]); // Add new IDs to our seen array so we don't keep trying to run queries for them.
   // Pages without queries can't be tracked.
 
 
@@ -56,7 +52,9 @@ const findIdsWithoutDataDependencies = state => {
   return notTrackedIds;
 };
 
-const popNodeQueries = state => {
+const popNodeQueries = ({
+  state
+}) => {
   const actions = _.uniq(queuedDirtyActions, a => a.payload.id);
 
   const uniqDirties = _.uniq(actions.reduce((dirtyIds, action) => {
@@ -74,10 +72,18 @@ const popNodeQueries = state => {
 };
 
 const popNodeAndDepQueries = state => {
-  const nodeQueries = popNodeQueries(state);
+  const nodeQueries = popNodeQueries({
+    state
+  });
   const noDepQueries = findIdsWithoutDataDependencies(state);
   return _.uniq([...nodeQueries, ...noDepQueries]);
 };
+
+const popExtractedQueries = () => {
+  const queries = [...extractedQueryIds];
+  extractedQueryIds.clear();
+  return queries;
+};
 /**
  * Calculates the set of dirty query IDs (page.paths, or
  * staticQuery.hash's). These are queries that:
@@ -105,7 +111,7 @@ const calcDirtyQueryIds = state => _.union(popNodeAndDepQueries(state), popExtra
  */
 
 
-const calcInitialDirtyQueryIds = state => {
+const calcBootstrapDirtyQueryIds = state => {
   const nodeAndNoDepQueries = popNodeAndDepQueries(state);
 
   const extractedQueriesThatNeedRunning = _.intersection(popExtractedQueries(), nodeAndNoDepQueries);
@@ -118,29 +124,42 @@ const calcInitialDirtyQueryIds = state => {
 
 
 const groupQueryIds = queryIds => {
-  const grouped = _.groupBy(queryIds, p => p.slice(0, 4) === `sq--` ? `static` : `page`);
+  const grouped = _.groupBy(queryIds, p => p.slice(0, 4) === `sq--`);
 
   return {
-    staticQueryIds: grouped.static || [],
-    pageQueryIds: grouped.page || []
+    staticQueryIds: grouped[true] || [],
+    pageQueryIds: grouped[false] || []
   };
-};
+}; /////////////////////////////////////////////////////////////////////
+// Create Query Jobs
 
-const reportStats = (queue, activity) => {
-  const startQueries = process.hrtime();
-  queue.on(`task_finish`, () => {
-    const stats = queue.getStats();
-    activity.setStatus(`${stats.total}/${stats.peak} ${(stats.total / convertHrtime(process.hrtime(startQueries)).seconds).toFixed(2)} queries/second`);
-  });
-};
 
 const processQueries =
 /*#__PURE__*/
 function () {
-  var _ref = (0, _asyncToGenerator2.default)(function* (queryJobs, activity) {
-    const queue = queryQueue.createBuildQueue();
-    reportStats(queue, activity);
-    yield queryQueue.processBatch(queue, queryJobs);
+  var _ref = (0, _asyncToGenerator2.default)(function* (queryJobs, {
+    activity
+  }) {
+    if (queryJobs.length == 0) {
+      return;
+    }
+
+    const startQueries = process.hrtime();
+    const queue = queryQueue.create();
+    queue.on(`task_finish`, () => {
+      const stats = queue.getStats();
+
+      if (activity) {
+        activity.setStatus(`${stats.total}/${stats.peak} ${(stats.total / convertHrtime(process.hrtime(startQueries)).seconds).toFixed(2)} queries/second`);
+      }
+    });
+    const drainedPromise = new Promise(resolve => {
+      queue.once(`drain`, resolve);
+    });
+    queryJobs.forEach(queryJob => {
+      queue.push(queryJob);
+    });
+    yield drainedPromise;
   });
 
   return function processQueries(_x, _x2) {
@@ -148,25 +167,23 @@ function () {
   };
 }();
 
-const createStaticQueryJob = (state, queryId) => {
-  const component = state.staticQueryComponents.get(queryId);
-  const hash = component.hash,
-        jsonName = component.jsonName,
-        query = component.query,
-        componentPath = component.componentPath;
+const makePageQueryJob = (state, queryId) => {
+  const page = state.pages.get(queryId);
+  const component = state.components.get(page.componentPath);
+  const path = page.path,
+        componentPath = page.componentPath,
+        context = page.context;
+  const query = component.query;
   return {
-    id: hash,
-    hash,
-    jsonName,
+    id: path,
     query,
+    isPage: true,
     componentPath,
-    context: {
-      path: jsonName
-    }
+    context: Object.assign({}, page, context)
   };
 };
 
-const processStaticQueries =
+const processPageQueries =
 /*#__PURE__*/
 function () {
   var _ref2 = (0, _asyncToGenerator2.default)(function* (queryIds, {
@@ -174,123 +191,107 @@ function () {
     activity
   }) {
     state = state || store.getState();
-    yield processQueries(queryIds.map(id => createStaticQueryJob(state, id)), activity);
+    yield processQueries(queryIds.map(id => makePageQueryJob(state, id)), {
+      activity
+    });
   });
 
-  return function processStaticQueries(_x3, _x4) {
+  return function processPageQueries(_x3, _x4) {
     return _ref2.apply(this, arguments);
   };
 }();
 
-const createPageQueryJob = (state, page) => {
-  const component = state.components.get(page.componentPath);
-  const path = page.path,
-        jsonName = page.jsonName,
-        componentPath = page.componentPath,
-        context = page.context;
-  const query = component.query;
+const makeStaticQueryJob = (state, queryId) => {
+  const component = state.staticQueryComponents.get(queryId);
+  const hash = component.hash,
+        id = component.id,
+        query = component.query,
+        componentPath = component.componentPath;
   return {
-    id: path,
-    jsonName,
+    id,
+    hash,
     query,
-    isPage: true,
     componentPath,
-    context: Object.assign({}, page, context)
+    context: {
+      path: id
+    }
   };
 };
 
-const processPageQueries =
+const processStaticQueries =
 /*#__PURE__*/
 function () {
   var _ref3 = (0, _asyncToGenerator2.default)(function* (queryIds, {
     state,
     activity
   }) {
-    state = state || store.getState(); // Make sure we filter out pages that don't exist. An example is
-    // /dev-404-page/, whose SitePage node is created via
-    // `internal-data-bridge`, but the actual page object is only
-    // created during `gatsby develop`.
-
-    const pages = _.filter(queryIds.map(id => state.pages.get(id)));
-
-    yield processQueries(pages.map(page => createPageQueryJob(state, page)), activity);
+    state = state || store.getState();
+    yield processQueries(queryIds.map(id => makeStaticQueryJob(state, id)), {
+      activity
+    });
   });
 
-  return function processPageQueries(_x5, _x6) {
+  return function processStaticQueries(_x5, _x6) {
     return _ref3.apply(this, arguments);
   };
 }(); /////////////////////////////////////////////////////////////////////
-// Listener for gatsby develop
-// Initialized via `startListening`
-
+// Background query daemon (for gatsby develop)
 
-let listenerQueue;
-/**
- * Run any dirty queries. See `calcQueries` for what constitutes a
- * dirty query
- */
-
-const runQueuedQueries = () => {
-  if (listenerQueue) {
-    const state = store.getState();
-
-    const _groupQueryIds = groupQueryIds(calcDirtyQueryIds(state)),
-          staticQueryIds = _groupQueryIds.staticQueryIds,
-          pageQueryIds = _groupQueryIds.pageQueryIds;
-
-    const pages = _.filter(pageQueryIds.map(id => state.pages.get(id)));
-
-    const queryJobs = [...staticQueryIds.map(id => createStaticQueryJob(state, id)), ...pages.map(page => createPageQueryJob(state, page))];
-    listenerQueue.push(queryJobs);
-  }
-};
 /**
  * Starts a background process that processes any dirty queries
- * whenever one of the following occurs:
+ * whenever one of the following occurs.
  *
  * 1. A node has changed (but only after the api call has finished
  * running)
  * 2. A component query (e.g by editing a React Component) has
  * changed
  *
- * For what constitutes a dirty query, see `calcQueries`
+ * For what constitutes a dirty query, see `calcDirtyQueryIds`
  */
 
 
-const startListening = queue => {
-  // We use a queue to process batches of queries so that they are
-  // processed consecutively
-  listenerQueue = new Queue((queryJobs, callback) => queryQueue.processBatch(queue, queryJobs).then(() => callback(null)).catch(callback));
-  emitter.on(`API_RUNNING_QUEUE_EMPTY`, runQueuedQueries);
-};
+const startListener = queue => {
+  const runQueuedActions = () => {
+    const state = store.getState();
+    const dirtyQueryIds = calcDirtyQueryIds(state);
 
-const enqueueExtractedQueryId = pathname => {
-  extractedQueryIds.add(pathname);
-};
+    const _groupQueryIds = groupQueryIds(dirtyQueryIds),
+          staticQueryIds = _groupQueryIds.staticQueryIds,
+          pageQueryIds = _groupQueryIds.pageQueryIds;
 
-const getPagesForComponent = componentPath => {
-  const state = store.getState();
-  return [...state.pages.values()].filter(p => p.componentPath === componentPath);
+    staticQueryIds.map(id => makeStaticQueryJob(state, id)).forEach(queryJob => {
+      queue.push(queryJob);
+    });
+    pageQueryIds.map(id => makePageQueryJob(state, id)).forEach(queryJob => {
+      queue.push(queryJob);
+    });
+  };
+
+  runQueuedActions();
+  emitter.on(`API_RUNNING_QUEUE_EMPTY`, runQueuedActions);
+  emitter.on(`QUERY_RUNNER_QUERIES_ENQUEUED`, runQueuedActions);
 };
+/**
+ * Force query processing to run. Noop until `startDaemon` has been
+ * called.
+ */
 
-const enqueueExtractedPageComponent = componentPath => {
-  const pages = getPagesForComponent(componentPath); // Remove page data dependencies before re-running queries because
-  // the changing of the query could have changed the data dependencies.
-  // Re-running the queries will add back data dependencies.
 
-  boundActionCreators.deleteComponentsDependencies(pages.map(p => p.path || p.id));
-  pages.forEach(page => enqueueExtractedQueryId(page.path));
-  runQueuedQueries();
+const runQueries = () => {
+  // A bit hacky bit it works well.
+  emitter.emit(`QUERY_RUNNER_QUERIES_ENQUEUED`);
 };
 
 module.exports = {
-  calcInitialDirtyQueryIds,
+  enqueueExtractedQueryId,
+  calcBootstrapDirtyQueryIds,
   groupQueryIds,
-  processStaticQueries,
+  processQueries,
   processPageQueries,
-  startListening,
-  runQueuedQueries,
-  enqueueExtractedQueryId,
-  enqueueExtractedPageComponent
+  processStaticQueries,
+  runQueries,
+  startListener,
+  createQueue: queryQueue.create,
+  jobHandler
 };
 //# sourceMappingURL=index.js.map
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/query/index.js.map b/node_modules/gatsby/dist/query/index.js.map
index e2bdb23..5d75ffc 100644
--- a/node_modules/gatsby/dist/query/index.js.map
+++ b/node_modules/gatsby/dist/query/index.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/query/index.js"],"names":["_","require","Queue","convertHrtime","store","emitter","queryQueue","boundActionCreators","seenIdsWithoutDataDependencies","queuedDirtyActions","extractedQueryIds","Set","on","action","filter","p","payload","path","push","popExtractedQueries","queries","clear","findIdsWithoutDataDependencies","state","allTrackedIds","uniq","flatten","concat","values","componentDataDependencies","nodes","connections","notTrackedIds","difference","Array","from","pages","staticQueryComponents","map","c","jsonName","popNodeQueries","actions","a","id","uniqDirties","reduce","dirtyIds","node","internal","type","compact","popNodeAndDepQueries","nodeQueries","noDepQueries","calcDirtyQueryIds","union","calcInitialDirtyQueryIds","nodeAndNoDepQueries","extractedQueriesThatNeedRunning","intersection","groupQueryIds","queryIds","grouped","groupBy","slice","staticQueryIds","static","pageQueryIds","page","reportStats","queue","activity","startQueries","process","hrtime","stats","getStats","setStatus","total","peak","seconds","toFixed","processQueries","queryJobs","createBuildQueue","processBatch","createStaticQueryJob","queryId","component","get","hash","query","componentPath","context","processStaticQueries","getState","createPageQueryJob","components","isPage","processPageQueries","listenerQueue","runQueuedQueries","startListening","callback","then","catch","enqueueExtractedQueryId","pathname","add","getPagesForComponent","enqueueExtractedPageComponent","deleteComponentsDependencies","forEach","module","exports"],"mappings":";;;;;;AAEA,MAAMA,CAAC,GAAGC,OAAO,CAAE,QAAF,CAAjB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAE,cAAF,CAArB;;AACA,MAAME,aAAa,GAAGF,OAAO,CAAE,gBAAF,CAA7B;;iBAC2BA,OAAO,CAAE,UAAF,C;MAA1BG,K,YAAAA,K;MAAOC,O,YAAAA,O;;AACf,MAAMC,UAAU,GAAGL,OAAO,CAAE,SAAF,CAA1B;;kBACgCA,OAAO,CAAE,kBAAF,C;MAA/BM,mB,aAAAA,mB;;AAER,IAAIC,8BAA8B,GAAG,EAArC;AACA,IAAIC,kBAAkB,GAAG,EAAzB;AACA,MAAMC,iBAAiB,GAAG,IAAIC,GAAJ,EAA1B,C,CAEA;AACA;;AACAN,OAAO,CAACO,EAAR,CAAY,aAAZ,EAA0BC,MAAM,IAAI;AAClCL,EAAAA,8BAA8B,GAAGA,8BAA8B,CAACM,MAA/B,CAC/BC,CAAC,IAAIA,CAAC,KAAKF,MAAM,CAACG,OAAP,CAAeC,IADK,CAAjC;AAGD,CAJD;AAMAZ,OAAO,CAACO,EAAR,CAAY,aAAZ,EAA0BC,MAAM,IAAI;AAClCJ,EAAAA,kBAAkB,CAACS,IAAnB,CAAwBL,MAAxB;AACD,CAFD;AAIAR,OAAO,CAACO,EAAR,CAAY,aAAZ,EAA0BC,MAAM,IAAI;AAClCJ,EAAAA,kBAAkB,CAACS,IAAnB,CAAwB;AAAEF,IAAAA,OAAO,EAAEH,MAAM,CAACG;AAAlB,GAAxB;AACD,CAFD,E,CAIA;AACA;;AAEA,MAAMG,mBAAmB,GAAG,MAAM;AAChC,QAAMC,OAAO,GAAG,CAAC,GAAGV,iBAAJ,CAAhB;AACAA,EAAAA,iBAAiB,CAACW,KAAlB;AACA,SAAOD,OAAP;AACD,CAJD;;AAMA,MAAME,8BAA8B,GAAGC,KAAK,IAAI;AAC9C,QAAMC,aAAa,GAAGxB,CAAC,CAACyB,IAAF,CACpBzB,CAAC,CAAC0B,OAAF,CACE1B,CAAC,CAAC2B,MAAF,CACE3B,CAAC,CAAC4B,MAAF,CAASL,KAAK,CAACM,yBAAN,CAAgCC,KAAzC,CADF,EAEE9B,CAAC,CAAC4B,MAAF,CAASL,KAAK,CAACM,yBAAN,CAAgCE,WAAzC,CAFF,CADF,CADoB,CAAtB,CAD8C,CAU9C;AACA;;;AACA,QAAMC,aAAa,GAAGhC,CAAC,CAACiC,UAAF,CACpB,CACE,GAAGC,KAAK,CAACC,IAAN,CAAWZ,KAAK,CAACa,KAAN,CAAYR,MAAZ,EAAX,EAAiCb,CAAC,IAAIA,CAAC,CAACE,IAAxC,CADL,EAEE,GAAG,CAAC,GAAGM,KAAK,CAACc,qBAAN,CAA4BT,MAA5B,EAAJ,EAA0CU,GAA1C,CAA8CC,CAAC,IAAIA,CAAC,CAACC,QAArD,CAFL,CADoB,EAKpB,CAAC,GAAGhB,aAAJ,EAAmB,GAAGhB,8BAAtB,CALoB,CAAtB,CAZ8C,CAoB9C;AACA;;;AACAA,EAAAA,8BAA8B,GAAGR,CAAC,CAACyB,IAAF,CAAO,CACtC,GAAGO,aADmC,EAEtC,GAAGxB,8BAFmC,CAAP,CAAjC;AAKA,SAAOwB,aAAP;AACD,CA5BD;;AA8BA,MAAMS,cAAc,GAAGlB,KAAK,IAAI;AAC9B,QAAMmB,OAAO,GAAG1C,CAAC,CAACyB,IAAF,CAAOhB,kBAAP,EAA2BkC,CAAC,IAAIA,CAAC,CAAC3B,OAAF,CAAU4B,EAA1C,CAAhB;;AACA,QAAMC,WAAW,GAAG7C,CAAC,CAACyB,IAAF,CAClBiB,OAAO,CAACI,MAAR,CAAe,CAACC,QAAD,EAAWlC,MAAX,KAAsB;AACnC,UAAMmC,IAAI,GAAGnC,MAAM,CAACG,OAApB;AAEA,QAAI,CAACgC,IAAD,IAAS,CAACA,IAAI,CAACJ,EAAf,IAAqB,CAACI,IAAI,CAACC,QAAL,CAAcC,IAAxC,EAA8C,OAAOH,QAAP,CAHX,CAKnC;;AACAA,IAAAA,QAAQ,GAAGA,QAAQ,CAACpB,MAAT,CAAgBJ,KAAK,CAACM,yBAAN,CAAgCC,KAAhC,CAAsCkB,IAAI,CAACJ,EAA3C,CAAhB,CAAX,CANmC,CAQnC;;AACAG,IAAAA,QAAQ,GAAGA,QAAQ,CAACpB,MAAT,CACTJ,KAAK,CAACM,yBAAN,CAAgCE,WAAhC,CAA4CiB,IAAI,CAACC,QAAL,CAAcC,IAA1D,CADS,CAAX;AAIA,WAAOlD,CAAC,CAACmD,OAAF,CAAUJ,QAAV,CAAP;AACD,GAdD,EAcG,EAdH,CADkB,CAApB;;AAiBAtC,EAAAA,kBAAkB,GAAG,EAArB;AACA,SAAOoC,WAAP;AACD,CArBD;;AAuBA,MAAMO,oBAAoB,GAAG7B,KAAK,IAAI;AACpC,QAAM8B,WAAW,GAAGZ,cAAc,CAAClB,KAAD,CAAlC;AAEA,QAAM+B,YAAY,GAAGhC,8BAA8B,CAACC,KAAD,CAAnD;AAEA,SAAOvB,CAAC,CAACyB,IAAF,CAAO,CAAC,GAAG4B,WAAJ,EAAiB,GAAGC,YAApB,CAAP,CAAP;AACD,CAND;AAQA;;;;;;;;;;;;;;;;AAeA,MAAMC,iBAAiB,GAAGhC,KAAK,IAC7BvB,CAAC,CAACwD,KAAF,CAAQJ,oBAAoB,CAAC7B,KAAD,CAA5B,EAAqCJ,mBAAmB,EAAxD,CADF;AAGA;;;;;;;;;;AAQA,MAAMsC,wBAAwB,GAAGlC,KAAK,IAAI;AACxC,QAAMmC,mBAAmB,GAAGN,oBAAoB,CAAC7B,KAAD,CAAhD;;AAEA,QAAMoC,+BAA+B,GAAG3D,CAAC,CAAC4D,YAAF,CACtCzC,mBAAmB,EADmB,EAEtCuC,mBAFsC,CAAxC;;AAIA,SAAO1D,CAAC,CAACwD,KAAF,CAAQG,+BAAR,EAAyCD,mBAAzC,CAAP;AACD,CARD;AAUA;;;;;AAGA,MAAMG,aAAa,GAAGC,QAAQ,IAAI;AAChC,QAAMC,OAAO,GAAG/D,CAAC,CAACgE,OAAF,CAAUF,QAAV,EAAoB/C,CAAC,IACnCA,CAAC,CAACkD,KAAF,CAAQ,CAAR,EAAW,CAAX,MAAmB,MAAnB,GAA4B,QAA5B,GAAuC,MADzB,CAAhB;;AAGA,SAAO;AACLC,IAAAA,cAAc,EAAEH,OAAO,CAACI,MAAR,IAAkB,EAD7B;AAELC,IAAAA,YAAY,EAAEL,OAAO,CAACM,IAAR,IAAgB;AAFzB,GAAP;AAID,CARD;;AAUA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACvC,QAAMC,YAAY,GAAGC,OAAO,CAACC,MAAR,EAArB;AACAJ,EAAAA,KAAK,CAAC3D,EAAN,CAAU,aAAV,EAAwB,MAAM;AAC5B,UAAMgE,KAAK,GAAGL,KAAK,CAACM,QAAN,EAAd;AACAL,IAAAA,QAAQ,CAACM,SAAT,CACG,GAAEF,KAAK,CAACG,KAAM,IAAGH,KAAK,CAACI,IAAK,IAAG,CAC9BJ,KAAK,CAACG,KAAN,GAAc5E,aAAa,CAACuE,OAAO,CAACC,MAAR,CAAeF,YAAf,CAAD,CAAb,CAA4CQ,OAD5B,EAE9BC,OAF8B,CAEtB,CAFsB,CAEnB,iBAHf;AAKD,GAPD;AAQD,CAVD;;AAYA,MAAMC,cAAc;AAAA;AAAA;AAAA,6CAAG,WAAOC,SAAP,EAAkBZ,QAAlB,EAA+B;AACpD,UAAMD,KAAK,GAAGjE,UAAU,CAAC+E,gBAAX,EAAd;AACAf,IAAAA,WAAW,CAACC,KAAD,EAAQC,QAAR,CAAX;AACA,UAAMlE,UAAU,CAACgF,YAAX,CAAwBf,KAAxB,EAA+Ba,SAA/B,CAAN;AACD,GAJmB;;AAAA,kBAAdD,cAAc;AAAA;AAAA;AAAA,GAApB;;AAMA,MAAMI,oBAAoB,GAAG,CAAChE,KAAD,EAAQiE,OAAR,KAAoB;AAC/C,QAAMC,SAAS,GAAGlE,KAAK,CAACc,qBAAN,CAA4BqD,GAA5B,CAAgCF,OAAhC,CAAlB;AAD+C,QAEvCG,IAFuC,GAEEF,SAFF,CAEvCE,IAFuC;AAAA,QAEjCnD,QAFiC,GAEEiD,SAFF,CAEjCjD,QAFiC;AAAA,QAEvBoD,KAFuB,GAEEH,SAFF,CAEvBG,KAFuB;AAAA,QAEhBC,aAFgB,GAEEJ,SAFF,CAEhBI,aAFgB;AAG/C,SAAO;AACLjD,IAAAA,EAAE,EAAE+C,IADC;AAELA,IAAAA,IAFK;AAGLnD,IAAAA,QAHK;AAILoD,IAAAA,KAJK;AAKLC,IAAAA,aALK;AAMLC,IAAAA,OAAO,EAAE;AAAE7E,MAAAA,IAAI,EAAEuB;AAAR;AANJ,GAAP;AAQD,CAXD;;AAaA,MAAMuD,oBAAoB;AAAA;AAAA;AAAA,8CAAG,WAAOjC,QAAP,EAAiB;AAAEvC,IAAAA,KAAF;AAASiD,IAAAA;AAAT,GAAjB,EAAyC;AACpEjD,IAAAA,KAAK,GAAGA,KAAK,IAAInB,KAAK,CAAC4F,QAAN,EAAjB;AACA,UAAMb,cAAc,CAClBrB,QAAQ,CAACxB,GAAT,CAAaM,EAAE,IAAI2C,oBAAoB,CAAChE,KAAD,EAAQqB,EAAR,CAAvC,CADkB,EAElB4B,QAFkB,CAApB;AAID,GANyB;;AAAA,kBAApBuB,oBAAoB;AAAA;AAAA;AAAA,GAA1B;;AAQA,MAAME,kBAAkB,GAAG,CAAC1E,KAAD,EAAQ8C,IAAR,KAAiB;AAC1C,QAAMoB,SAAS,GAAGlE,KAAK,CAAC2E,UAAN,CAAiBR,GAAjB,CAAqBrB,IAAI,CAACwB,aAA1B,CAAlB;AAD0C,QAElC5E,IAFkC,GAESoD,IAFT,CAElCpD,IAFkC;AAAA,QAE5BuB,QAF4B,GAES6B,IAFT,CAE5B7B,QAF4B;AAAA,QAElBqD,aAFkB,GAESxB,IAFT,CAElBwB,aAFkB;AAAA,QAEHC,OAFG,GAESzB,IAFT,CAEHyB,OAFG;AAAA,QAGlCF,KAHkC,GAGxBH,SAHwB,CAGlCG,KAHkC;AAI1C,SAAO;AACLhD,IAAAA,EAAE,EAAE3B,IADC;AAELuB,IAAAA,QAFK;AAGLoD,IAAAA,KAHK;AAILO,IAAAA,MAAM,EAAE,IAJH;AAKLN,IAAAA,aALK;AAMLC,IAAAA,OAAO,oBACFzB,IADE,EAEFyB,OAFE;AANF,GAAP;AAWD,CAfD;;AAiBA,MAAMM,kBAAkB;AAAA;AAAA;AAAA,8CAAG,WAAOtC,QAAP,EAAiB;AAAEvC,IAAAA,KAAF;AAASiD,IAAAA;AAAT,GAAjB,EAAyC;AAClEjD,IAAAA,KAAK,GAAGA,KAAK,IAAInB,KAAK,CAAC4F,QAAN,EAAjB,CADkE,CAElE;AACA;AACA;AACA;;AACA,UAAM5D,KAAK,GAAGpC,CAAC,CAACc,MAAF,CAASgD,QAAQ,CAACxB,GAAT,CAAaM,EAAE,IAAIrB,KAAK,CAACa,KAAN,CAAYsD,GAAZ,CAAgB9C,EAAhB,CAAnB,CAAT,CAAd;;AACA,UAAMuC,cAAc,CAClB/C,KAAK,CAACE,GAAN,CAAU+B,IAAI,IAAI4B,kBAAkB,CAAC1E,KAAD,EAAQ8C,IAAR,CAApC,CADkB,EAElBG,QAFkB,CAApB;AAID,GAXuB;;AAAA,kBAAlB4B,kBAAkB;AAAA;AAAA;AAAA,GAAxB,C,CAaA;AACA;AAEA;;;AACA,IAAIC,aAAJ;AAEA;;;;;AAIA,MAAMC,gBAAgB,GAAG,MAAM;AAC7B,MAAID,aAAJ,EAAmB;AACjB,UAAM9E,KAAK,GAAGnB,KAAK,CAAC4F,QAAN,EAAd;;AADiB,2BAEwBnC,aAAa,CACpDN,iBAAiB,CAAChC,KAAD,CADmC,CAFrC;AAAA,UAET2C,cAFS,kBAETA,cAFS;AAAA,UAEOE,YAFP,kBAEOA,YAFP;;AAKjB,UAAMhC,KAAK,GAAGpC,CAAC,CAACc,MAAF,CAASsD,YAAY,CAAC9B,GAAb,CAAiBM,EAAE,IAAIrB,KAAK,CAACa,KAAN,CAAYsD,GAAZ,CAAgB9C,EAAhB,CAAvB,CAAT,CAAd;;AACA,UAAMwC,SAAS,GAAG,CAChB,GAAGlB,cAAc,CAAC5B,GAAf,CAAmBM,EAAE,IAAI2C,oBAAoB,CAAChE,KAAD,EAAQqB,EAAR,CAA7C,CADa,EAEhB,GAAGR,KAAK,CAACE,GAAN,CAAU+B,IAAI,IAAI4B,kBAAkB,CAAC1E,KAAD,EAAQ8C,IAAR,CAApC,CAFa,CAAlB;AAIAgC,IAAAA,aAAa,CAACnF,IAAd,CAAmBkE,SAAnB;AACD;AACF,CAbD;AAeA;;;;;;;;;;;;;AAWA,MAAMmB,cAAc,GAAGhC,KAAK,IAAI;AAC9B;AACA;AACA8B,EAAAA,aAAa,GAAG,IAAInG,KAAJ,CAAU,CAACkF,SAAD,EAAYoB,QAAZ,KACxBlG,UAAU,CACPgF,YADH,CACgBf,KADhB,EACuBa,SADvB,EAEGqB,IAFH,CAEQ,MAAMD,QAAQ,CAAC,IAAD,CAFtB,EAGGE,KAHH,CAGSF,QAHT,CADc,CAAhB;AAOAnG,EAAAA,OAAO,CAACO,EAAR,CAAY,yBAAZ,EAAsC0F,gBAAtC;AACD,CAXD;;AAaA,MAAMK,uBAAuB,GAAGC,QAAQ,IAAI;AAC1ClG,EAAAA,iBAAiB,CAACmG,GAAlB,CAAsBD,QAAtB;AACD,CAFD;;AAIA,MAAME,oBAAoB,GAAGjB,aAAa,IAAI;AAC5C,QAAMtE,KAAK,GAAGnB,KAAK,CAAC4F,QAAN,EAAd;AACA,SAAO,CAAC,GAAGzE,KAAK,CAACa,KAAN,CAAYR,MAAZ,EAAJ,EAA0Bd,MAA1B,CACLC,CAAC,IAAIA,CAAC,CAAC8E,aAAF,KAAoBA,aADpB,CAAP;AAGD,CALD;;AAOA,MAAMkB,6BAA6B,GAAGlB,aAAa,IAAI;AACrD,QAAMzD,KAAK,GAAG0E,oBAAoB,CAACjB,aAAD,CAAlC,CADqD,CAErD;AACA;AACA;;AACAtF,EAAAA,mBAAmB,CAACyG,4BAApB,CACE5E,KAAK,CAACE,GAAN,CAAUvB,CAAC,IAAIA,CAAC,CAACE,IAAF,IAAUF,CAAC,CAAC6B,EAA3B,CADF;AAGAR,EAAAA,KAAK,CAAC6E,OAAN,CAAc5C,IAAI,IAAIsC,uBAAuB,CAACtC,IAAI,CAACpD,IAAN,CAA7C;AACAqF,EAAAA,gBAAgB;AACjB,CAVD;;AAYAY,MAAM,CAACC,OAAP,GAAiB;AACf1D,EAAAA,wBADe;AAEfI,EAAAA,aAFe;AAGfkC,EAAAA,oBAHe;AAIfK,EAAAA,kBAJe;AAKfG,EAAAA,cALe;AAMfD,EAAAA,gBANe;AAOfK,EAAAA,uBAPe;AAQfI,EAAAA;AARe,CAAjB","sourcesContent":["// @flow\n\nconst _ = require(`lodash`)\nconst Queue = require(`better-queue`)\nconst convertHrtime = require(`convert-hrtime`)\nconst { store, emitter } = require(`../redux`)\nconst queryQueue = require(`./queue`)\nconst { boundActionCreators } = require(`../redux/actions`)\n\nlet seenIdsWithoutDataDependencies = []\nlet queuedDirtyActions = []\nconst extractedQueryIds = new Set()\n\n// Remove pages from seenIdsWithoutDataDependencies when they're deleted\n// so their query will be run again if they're created again.\nemitter.on(`DELETE_PAGE`, action => {\n  seenIdsWithoutDataDependencies = seenIdsWithoutDataDependencies.filter(\n    p => p !== action.payload.path\n  )\n})\n\nemitter.on(`CREATE_NODE`, action => {\n  queuedDirtyActions.push(action)\n})\n\nemitter.on(`DELETE_NODE`, action => {\n  queuedDirtyActions.push({ payload: action.payload })\n})\n\n/////////////////////////////////////////////////////////////////////\n// Calculate dirty static/page queries\n\nconst popExtractedQueries = () => {\n  const queries = [...extractedQueryIds]\n  extractedQueryIds.clear()\n  return queries\n}\n\nconst findIdsWithoutDataDependencies = state => {\n  const allTrackedIds = _.uniq(\n    _.flatten(\n      _.concat(\n        _.values(state.componentDataDependencies.nodes),\n        _.values(state.componentDataDependencies.connections)\n      )\n    )\n  )\n\n  // Get list of paths not already tracked and run the queries for these\n  // paths.\n  const notTrackedIds = _.difference(\n    [\n      ...Array.from(state.pages.values(), p => p.path),\n      ...[...state.staticQueryComponents.values()].map(c => c.jsonName),\n    ],\n    [...allTrackedIds, ...seenIdsWithoutDataDependencies]\n  )\n\n  // Add new IDs to our seen array so we don't keep trying to run queries for them.\n  // Pages without queries can't be tracked.\n  seenIdsWithoutDataDependencies = _.uniq([\n    ...notTrackedIds,\n    ...seenIdsWithoutDataDependencies,\n  ])\n\n  return notTrackedIds\n}\n\nconst popNodeQueries = state => {\n  const actions = _.uniq(queuedDirtyActions, a => a.payload.id)\n  const uniqDirties = _.uniq(\n    actions.reduce((dirtyIds, action) => {\n      const node = action.payload\n\n      if (!node || !node.id || !node.internal.type) return dirtyIds\n\n      // Find components that depend on this node so are now dirty.\n      dirtyIds = dirtyIds.concat(state.componentDataDependencies.nodes[node.id])\n\n      // Find connections that depend on this node so are now invalid.\n      dirtyIds = dirtyIds.concat(\n        state.componentDataDependencies.connections[node.internal.type]\n      )\n\n      return _.compact(dirtyIds)\n    }, [])\n  )\n  queuedDirtyActions = []\n  return uniqDirties\n}\n\nconst popNodeAndDepQueries = state => {\n  const nodeQueries = popNodeQueries(state)\n\n  const noDepQueries = findIdsWithoutDataDependencies(state)\n\n  return _.uniq([...nodeQueries, ...noDepQueries])\n}\n\n/**\n * Calculates the set of dirty query IDs (page.paths, or\n * staticQuery.hash's). These are queries that:\n *\n * - depend on nodes or node collections (via\n *   `actions.createPageDependency`) that have changed.\n * - do NOT have node dependencies. Since all queries should return\n *   data, then this implies that node dependencies have not been\n *   tracked, and therefore these queries haven't been run before\n * - have been recently extracted (see `./query-watcher.js`)\n *\n * Note, this function pops queries off internal queues, so it's up\n * to the caller to reference the results\n */\n\nconst calcDirtyQueryIds = state =>\n  _.union(popNodeAndDepQueries(state), popExtractedQueries())\n\n/**\n * Same as `calcDirtyQueryIds`, except that we only include extracted\n * queries that depend on nodes or haven't been run yet. We do this\n * because the page component reducer/machine always enqueues\n * extractedQueryIds but during bootstrap we may not want to run those\n * page queries if their data hasn't changed since the last time we\n * ran Gatsby.\n */\nconst calcInitialDirtyQueryIds = state => {\n  const nodeAndNoDepQueries = popNodeAndDepQueries(state)\n\n  const extractedQueriesThatNeedRunning = _.intersection(\n    popExtractedQueries(),\n    nodeAndNoDepQueries\n  )\n  return _.union(extractedQueriesThatNeedRunning, nodeAndNoDepQueries)\n}\n\n/**\n * groups queryIds by whether they are static or page queries.\n */\nconst groupQueryIds = queryIds => {\n  const grouped = _.groupBy(queryIds, p =>\n    p.slice(0, 4) === `sq--` ? `static` : `page`\n  )\n  return {\n    staticQueryIds: grouped.static || [],\n    pageQueryIds: grouped.page || [],\n  }\n}\n\nconst reportStats = (queue, activity) => {\n  const startQueries = process.hrtime()\n  queue.on(`task_finish`, () => {\n    const stats = queue.getStats()\n    activity.setStatus(\n      `${stats.total}/${stats.peak} ${(\n        stats.total / convertHrtime(process.hrtime(startQueries)).seconds\n      ).toFixed(2)} queries/second`\n    )\n  })\n}\n\nconst processQueries = async (queryJobs, activity) => {\n  const queue = queryQueue.createBuildQueue()\n  reportStats(queue, activity)\n  await queryQueue.processBatch(queue, queryJobs)\n}\n\nconst createStaticQueryJob = (state, queryId) => {\n  const component = state.staticQueryComponents.get(queryId)\n  const { hash, jsonName, query, componentPath } = component\n  return {\n    id: hash,\n    hash,\n    jsonName,\n    query,\n    componentPath,\n    context: { path: jsonName },\n  }\n}\n\nconst processStaticQueries = async (queryIds, { state, activity }) => {\n  state = state || store.getState()\n  await processQueries(\n    queryIds.map(id => createStaticQueryJob(state, id)),\n    activity\n  )\n}\n\nconst createPageQueryJob = (state, page) => {\n  const component = state.components.get(page.componentPath)\n  const { path, jsonName, componentPath, context } = page\n  const { query } = component\n  return {\n    id: path,\n    jsonName,\n    query,\n    isPage: true,\n    componentPath,\n    context: {\n      ...page,\n      ...context,\n    },\n  }\n}\n\nconst processPageQueries = async (queryIds, { state, activity }) => {\n  state = state || store.getState()\n  // Make sure we filter out pages that don't exist. An example is\n  // /dev-404-page/, whose SitePage node is created via\n  // `internal-data-bridge`, but the actual page object is only\n  // created during `gatsby develop`.\n  const pages = _.filter(queryIds.map(id => state.pages.get(id)))\n  await processQueries(\n    pages.map(page => createPageQueryJob(state, page)),\n    activity\n  )\n}\n\n/////////////////////////////////////////////////////////////////////\n// Listener for gatsby develop\n\n// Initialized via `startListening`\nlet listenerQueue\n\n/**\n * Run any dirty queries. See `calcQueries` for what constitutes a\n * dirty query\n */\nconst runQueuedQueries = () => {\n  if (listenerQueue) {\n    const state = store.getState()\n    const { staticQueryIds, pageQueryIds } = groupQueryIds(\n      calcDirtyQueryIds(state)\n    )\n    const pages = _.filter(pageQueryIds.map(id => state.pages.get(id)))\n    const queryJobs = [\n      ...staticQueryIds.map(id => createStaticQueryJob(state, id)),\n      ...pages.map(page => createPageQueryJob(state, page)),\n    ]\n    listenerQueue.push(queryJobs)\n  }\n}\n\n/**\n * Starts a background process that processes any dirty queries\n * whenever one of the following occurs:\n *\n * 1. A node has changed (but only after the api call has finished\n * running)\n * 2. A component query (e.g by editing a React Component) has\n * changed\n *\n * For what constitutes a dirty query, see `calcQueries`\n */\nconst startListening = queue => {\n  // We use a queue to process batches of queries so that they are\n  // processed consecutively\n  listenerQueue = new Queue((queryJobs, callback) =>\n    queryQueue\n      .processBatch(queue, queryJobs)\n      .then(() => callback(null))\n      .catch(callback)\n  )\n\n  emitter.on(`API_RUNNING_QUEUE_EMPTY`, runQueuedQueries)\n}\n\nconst enqueueExtractedQueryId = pathname => {\n  extractedQueryIds.add(pathname)\n}\n\nconst getPagesForComponent = componentPath => {\n  const state = store.getState()\n  return [...state.pages.values()].filter(\n    p => p.componentPath === componentPath\n  )\n}\n\nconst enqueueExtractedPageComponent = componentPath => {\n  const pages = getPagesForComponent(componentPath)\n  // Remove page data dependencies before re-running queries because\n  // the changing of the query could have changed the data dependencies.\n  // Re-running the queries will add back data dependencies.\n  boundActionCreators.deleteComponentsDependencies(\n    pages.map(p => p.path || p.id)\n  )\n  pages.forEach(page => enqueueExtractedQueryId(page.path))\n  runQueuedQueries()\n}\n\nmodule.exports = {\n  calcInitialDirtyQueryIds,\n  groupQueryIds,\n  processStaticQueries,\n  processPageQueries,\n  startListening,\n  runQueuedQueries,\n  enqueueExtractedQueryId,\n  enqueueExtractedPageComponent,\n}\n"],"file":"index.js"}
\ No newline at end of file
+{"version":3,"sources":["../../src/query/index.js"],"names":["_","require","convertHrtime","store","emitter","queryQueue","jobHandler","seenIdsWithoutDataDependencies","queuedDirtyActions","extractedQueryIds","Set","on","action","filter","p","payload","path","push","enqueueExtractedQueryId","queryId","add","findIdsWithoutDataDependencies","state","allTrackedIds","uniq","flatten","concat","values","componentDataDependencies","nodes","connections","notTrackedIds","difference","Array","from","pages","staticQueryComponents","map","c","id","popNodeQueries","actions","a","uniqDirties","reduce","dirtyIds","node","internal","type","compact","popNodeAndDepQueries","nodeQueries","noDepQueries","popExtractedQueries","queries","clear","calcDirtyQueryIds","union","calcBootstrapDirtyQueryIds","nodeAndNoDepQueries","extractedQueriesThatNeedRunning","intersection","groupQueryIds","queryIds","grouped","groupBy","slice","staticQueryIds","pageQueryIds","processQueries","queryJobs","activity","length","startQueries","process","hrtime","queue","create","stats","getStats","setStatus","total","peak","seconds","toFixed","drainedPromise","Promise","resolve","once","forEach","queryJob","makePageQueryJob","page","get","component","components","componentPath","context","query","isPage","processPageQueries","getState","makeStaticQueryJob","hash","processStaticQueries","startListener","runQueuedActions","dirtyQueryIds","runQueries","emit","module","exports","createQueue"],"mappings":"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","sourcesContent":["const _ = require(`lodash`)\nconst convertHrtime = require(`convert-hrtime`)\nconst { store, emitter } = require(`../redux`)\nconst queryQueue = require(`./query-queue`)\nconst jobHandler = require(`./job-handler`)\n\nlet seenIdsWithoutDataDependencies = []\nlet queuedDirtyActions = []\nconst extractedQueryIds = new Set()\n\n// Remove pages from seenIdsWithoutDataDependencies when they're deleted\n// so their query will be run again if they're created again.\nemitter.on(`DELETE_PAGE`, action => {\n  seenIdsWithoutDataDependencies = seenIdsWithoutDataDependencies.filter(\n    p => p !== action.payload.path\n  )\n})\n\nemitter.on(`CREATE_NODE`, action => {\n  queuedDirtyActions.push(action)\n})\n\nemitter.on(`DELETE_NODE`, action => {\n  queuedDirtyActions.push({ payload: action.payload })\n})\n\nconst enqueueExtractedQueryId = queryId => {\n  extractedQueryIds.add(queryId)\n}\n\n/////////////////////////////////////////////////////////////////////\n// Calculate dirty static/page queries\n\nconst findIdsWithoutDataDependencies = state => {\n  const allTrackedIds = _.uniq(\n    _.flatten(\n      _.concat(\n        _.values(state.componentDataDependencies.nodes),\n        _.values(state.componentDataDependencies.connections)\n      )\n    )\n  )\n\n  // Get list of paths not already tracked and run the queries for these\n  // paths.\n  const notTrackedIds = _.difference(\n    [\n      ...Array.from(state.pages.values(), p => p.path),\n      ...[...state.staticQueryComponents.values()].map(c => c.id),\n    ],\n    [...allTrackedIds, ...seenIdsWithoutDataDependencies]\n  )\n\n  // Add new IDs to our seen array so we don't keep trying to run queries for them.\n  // Pages without queries can't be tracked.\n  seenIdsWithoutDataDependencies = _.uniq([\n    ...notTrackedIds,\n    ...seenIdsWithoutDataDependencies,\n  ])\n\n  return notTrackedIds\n}\n\nconst popNodeQueries = ({ state }) => {\n  const actions = _.uniq(queuedDirtyActions, a => a.payload.id)\n\n  const uniqDirties = _.uniq(\n    actions.reduce((dirtyIds, action) => {\n      const node = action.payload\n\n      if (!node || !node.id || !node.internal.type) return dirtyIds\n\n      // Find components that depend on this node so are now dirty.\n      dirtyIds = dirtyIds.concat(state.componentDataDependencies.nodes[node.id])\n\n      // Find connections that depend on this node so are now invalid.\n      dirtyIds = dirtyIds.concat(\n        state.componentDataDependencies.connections[node.internal.type]\n      )\n\n      return _.compact(dirtyIds)\n    }, [])\n  )\n  queuedDirtyActions = []\n  return uniqDirties\n}\n\nconst popNodeAndDepQueries = state => {\n  const nodeQueries = popNodeQueries({ state })\n\n  const noDepQueries = findIdsWithoutDataDependencies(state)\n\n  return _.uniq([...nodeQueries, ...noDepQueries])\n}\n\nconst popExtractedQueries = () => {\n  const queries = [...extractedQueryIds]\n  extractedQueryIds.clear()\n  return queries\n}\n\n/**\n * Calculates the set of dirty query IDs (page.paths, or\n * staticQuery.hash's). These are queries that:\n *\n * - depend on nodes or node collections (via\n *   `actions.createPageDependency`) that have changed.\n * - do NOT have node dependencies. Since all queries should return\n *   data, then this implies that node dependencies have not been\n *   tracked, and therefore these queries haven't been run before\n * - have been recently extracted (see `./query-watcher.js`)\n *\n * Note, this function pops queries off internal queues, so it's up\n * to the caller to reference the results\n */\n\nconst calcDirtyQueryIds = state =>\n  _.union(popNodeAndDepQueries(state), popExtractedQueries())\n\n/**\n * Same as `calcDirtyQueryIds`, except that we only include extracted\n * queries that depend on nodes or haven't been run yet. We do this\n * because the page component reducer/machine always enqueues\n * extractedQueryIds but during bootstrap we may not want to run those\n * page queries if their data hasn't changed since the last time we\n * ran Gatsby.\n */\nconst calcBootstrapDirtyQueryIds = state => {\n  const nodeAndNoDepQueries = popNodeAndDepQueries(state)\n\n  const extractedQueriesThatNeedRunning = _.intersection(\n    popExtractedQueries(),\n    nodeAndNoDepQueries\n  )\n  return _.union(extractedQueriesThatNeedRunning, nodeAndNoDepQueries)\n}\n\n/**\n * groups queryIds by whether they are static or page queries.\n */\nconst groupQueryIds = queryIds => {\n  const grouped = _.groupBy(queryIds, p => p.slice(0, 4) === `sq--`)\n  return {\n    staticQueryIds: grouped[true] || [],\n    pageQueryIds: grouped[false] || [],\n  }\n}\n\n/////////////////////////////////////////////////////////////////////\n// Create Query Jobs\n\nconst processQueries = async (queryJobs, { activity }) => {\n  if (queryJobs.length == 0) {\n    return\n  }\n  const startQueries = process.hrtime()\n\n  const queue = queryQueue.create()\n  queue.on(`task_finish`, () => {\n    const stats = queue.getStats()\n    if (activity) {\n      activity.setStatus(\n        `${stats.total}/${stats.peak} ${(\n          stats.total / convertHrtime(process.hrtime(startQueries)).seconds\n        ).toFixed(2)} queries/second`\n      )\n    }\n  })\n  const drainedPromise = new Promise(resolve => {\n    queue.once(`drain`, resolve)\n  })\n\n  queryJobs.forEach(queryJob => {\n    queue.push(queryJob)\n  })\n  await drainedPromise\n}\n\nconst makePageQueryJob = (state, queryId) => {\n  const page = state.pages.get(queryId)\n  const component = state.components.get(page.componentPath)\n  const { path, componentPath, context } = page\n  const { query } = component\n  return {\n    id: path,\n    query,\n    isPage: true,\n    componentPath,\n    context: {\n      ...page,\n      ...context,\n    },\n  }\n}\n\nconst processPageQueries = async (queryIds, { state, activity }) => {\n  state = state || store.getState()\n  await processQueries(queryIds.map(id => makePageQueryJob(state, id)), {\n    activity,\n  })\n}\n\nconst makeStaticQueryJob = (state, queryId) => {\n  const component = state.staticQueryComponents.get(queryId)\n  const { hash, id, query, componentPath } = component\n  return {\n    id,\n    hash,\n    query,\n    componentPath,\n    context: { path: id },\n  }\n}\n\nconst processStaticQueries = async (queryIds, { state, activity }) => {\n  state = state || store.getState()\n  await processQueries(queryIds.map(id => makeStaticQueryJob(state, id)), {\n    activity,\n  })\n}\n\n/////////////////////////////////////////////////////////////////////\n// Background query daemon (for gatsby develop)\n\n/**\n * Starts a background process that processes any dirty queries\n * whenever one of the following occurs.\n *\n * 1. A node has changed (but only after the api call has finished\n * running)\n * 2. A component query (e.g by editing a React Component) has\n * changed\n *\n * For what constitutes a dirty query, see `calcDirtyQueryIds`\n */\nconst startListener = queue => {\n  const runQueuedActions = () => {\n    const state = store.getState()\n\n    const dirtyQueryIds = calcDirtyQueryIds(state)\n    const { staticQueryIds, pageQueryIds } = groupQueryIds(dirtyQueryIds)\n\n    staticQueryIds\n      .map(id => makeStaticQueryJob(state, id))\n      .forEach(queryJob => {\n        queue.push(queryJob)\n      })\n\n    pageQueryIds\n      .map(id => makePageQueryJob(state, id))\n      .forEach(queryJob => {\n        queue.push(queryJob)\n      })\n  }\n  runQueuedActions()\n  emitter.on(`API_RUNNING_QUEUE_EMPTY`, runQueuedActions)\n  emitter.on(`QUERY_RUNNER_QUERIES_ENQUEUED`, runQueuedActions)\n}\n\n/**\n * Force query processing to run. Noop until `startDaemon` has been\n * called.\n */\nconst runQueries = () => {\n  // A bit hacky bit it works well.\n  emitter.emit(`QUERY_RUNNER_QUERIES_ENQUEUED`)\n}\n\nmodule.exports = {\n  enqueueExtractedQueryId,\n  calcBootstrapDirtyQueryIds,\n  groupQueryIds,\n  processQueries,\n  processPageQueries,\n  processStaticQueries,\n  runQueries,\n  startListener,\n  createQueue: queryQueue.create,\n  jobHandler,\n}\n"],"file":"index.js"}
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/query/query-runner.js b/node_modules/gatsby/dist/query/job-handler.js
similarity index 62%
rename from node_modules/gatsby/dist/query/query-runner.js
rename to node_modules/gatsby/dist/query/job-handler.js
index 0039f5a..1645bed 100644
--- a/node_modules/gatsby/dist/query/query-runner.js
+++ b/node_modules/gatsby/dist/query/job-handler.js
@@ -8,36 +8,36 @@ var _graphql = require("graphql");
 
 const fs = require(`fs-extra`);
 
+const path = require(`path`);
+
 const report = require(`gatsby-cli/lib/reporter`);
 
-const path = require(`path`);
+const _require = require(`../redux/actions`),
+      boundActionCreators = _require.boundActionCreators;
 
-const _require = require(`../redux`),
-      store = _require.store;
+const _require2 = require(`../redux`),
+      store = _require2.store;
 
 const withResolverContext = require(`../schema/context`);
 
-const _require2 = require(`../utils/js-chunk-names`),
-      generatePathChunkName = _require2.generatePathChunkName;
-
 const _require3 = require(`./utils`),
       formatErrorDetails = _require3.formatErrorDetails;
 
-const mod = require(`hash-mod`)(999);
-
-const _require4 = require(`../redux/actions`),
-      boundActionCreators = _require4.boundActionCreators;
+const pageDataUtil = require(`../utils/page-data`);
 
 const resultHashes = {};
 
-// Run query
-module.exports =
+const jobHandler =
 /*#__PURE__*/
 function () {
-  var _ref = (0, _asyncToGenerator2.default)(function* (queryJob) {
+  var _ref = (0, _asyncToGenerator2.default)(function* ({
+    queryJob
+  }) {
     const _store$getState = store.getState(),
           schema = _store$getState.schema,
-          program = _store$getState.program;
+          program = _store$getState.program,
+          pages = _store$getState.pages,
+          webpackCompilationHash = _store$getState.webpackCompilationHash;
 
     const graphql = (query, context) => (0, _graphql.graphql)(schema, query, context, withResolverContext(context, schema), context); // Run query
 
@@ -76,7 +76,6 @@ ${formatErrorDetails(errorDetails)}`);
 
 
     if (result.pageContext) {
-      delete result.pageContext.jsonName;
       delete result.pageContext.path;
       delete result.pageContext.internalComponentName;
       delete result.pageContext.component;
@@ -90,45 +89,24 @@ ${formatErrorDetails(errorDetails)}`);
 
     const resultJSON = JSON.stringify(result);
 
-    const resultHash = require(`crypto`).createHash(`sha1`).update(resultJSON).digest(`base64`) // Remove potentially unsafe characters. This increases chances of collisions
-    // slightly but it should still be very safe + we get a shorter
-    // url vs hex.
-    .replace(/[^a-zA-Z0-9-_]/g, ``);
-
-    let dataPath;
-
-    if (queryJob.isPage) {
-      dataPath = `${generatePathChunkName(queryJob.jsonName)}-${resultHash}`;
-    } else {
-      dataPath = queryJob.hash;
-    }
+    const resultHash = require(`crypto`).createHash(`sha1`).update(resultJSON).digest(`base64`);
 
     if (resultHashes[queryJob.id] !== resultHash) {
       resultHashes[queryJob.id] = resultHash;
-      let modInt = ``; // We leave StaticQuery results at public/static/d
-      // as the babel plugin has that path hard-coded
-      // for importing static query results.
+      const publicDir = path.join(program.directory, `public`);
 
       if (queryJob.isPage) {
-        modInt = mod(dataPath).toString();
-      } // Always write file to public/static/d/ folder.
-
-
-      const resultPath = path.join(program.directory, `public`, `static`, `d`, modInt, `${dataPath}.json`);
-
-      if (queryJob.isPage) {
-        dataPath = `${modInt}/${dataPath}`;
+        const page = pages.get(queryJob.id);
+        yield pageDataUtil.write({
+          publicDir
+        }, page, result, webpackCompilationHash);
+      } else {
+        const staticDir = path.join(publicDir, `static`);
+        const resultPath = path.join(staticDir, `d`, `${queryJob.hash}.json`);
+        yield fs.outputFile(resultPath, resultJSON);
       }
+    } // Send event that the page query finished.
 
-      yield fs.outputFile(resultPath, resultJSON);
-      store.dispatch({
-        type: `SET_JSON_DATA_PATH`,
-        payload: {
-          key: queryJob.jsonName,
-          value: dataPath
-        }
-      });
-    }
 
     boundActionCreators.pageQueryRun({
       path: queryJob.id,
@@ -138,8 +116,10 @@ ${formatErrorDetails(errorDetails)}`);
     return result;
   });
 
-  return function (_x) {
+  return function jobHandler(_x) {
     return _ref.apply(this, arguments);
   };
 }();
-//# sourceMappingURL=query-runner.js.map
\ No newline at end of file
+
+module.exports = jobHandler;
+//# sourceMappingURL=job-handler.js.map
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/query/job-handler.js.map b/node_modules/gatsby/dist/query/job-handler.js.map
new file mode 100644
index 0000000..4b0e2f3
--- /dev/null
+++ b/node_modules/gatsby/dist/query/job-handler.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":["../../src/query/job-handler.js"],"names":["fs","require","path","report","boundActionCreators","store","withResolverContext","formatErrorDetails","pageDataUtil","resultHashes","jobHandler","queryJob","getState","schema","program","pages","webpackCompilationHash","graphql","query","context","result","errors","errorDetails","Map","set","isPage","JSON","stringify","pluginCreatorId","panicOnBuild","componentPath","Object","assign","pageContext","internalComponentName","component","componentChunkName","updatedAt","pluginCreator___NODE","resultJSON","resultHash","createHash","update","digest","id","publicDir","join","directory","page","get","write","staticDir","resultPath","hash","outputFile","pageQueryRun","module","exports"],"mappings":"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","sourcesContent":["// @flow\n\nimport { graphql as graphqlFunction } from \"graphql\"\nconst fs = require(`fs-extra`)\nconst path = require(`path`)\nconst report = require(`gatsby-cli/lib/reporter`)\nconst { boundActionCreators } = require(`../redux/actions`)\nconst { store } = require(`../redux`)\nconst withResolverContext = require(`../schema/context`)\nconst { formatErrorDetails } = require(`./utils`)\nconst pageDataUtil = require(`../utils/page-data`)\n\nconst resultHashes = {}\n\nconst jobHandler = async ({ queryJob }) => {\n  const { schema, program, pages, webpackCompilationHash } = store.getState()\n\n  const graphql = (query, context) =>\n    graphqlFunction(\n      schema,\n      query,\n      context,\n      withResolverContext(context, schema),\n      context\n    )\n\n  // Run query\n  let result\n  // Nothing to do if the query doesn't exist.\n  if (!queryJob.query || queryJob.query === ``) {\n    result = {}\n  } else {\n    result = await graphql(queryJob.query, queryJob.context)\n  }\n\n  // If there's a graphql error then log the error. If we're building, also\n  // quit.\n  if (result && result.errors) {\n    const errorDetails = new Map()\n    errorDetails.set(`Errors`, result.errors || [])\n    if (queryJob.isPage) {\n      errorDetails.set(`URL path`, queryJob.context.path)\n      errorDetails.set(\n        `Context`,\n        JSON.stringify(queryJob.context.context, null, 2)\n      )\n    }\n    errorDetails.set(`Plugin`, queryJob.pluginCreatorId || `none`)\n    errorDetails.set(`Query`, queryJob.query)\n\n    report.panicOnBuild(`\nThe GraphQL query from ${queryJob.componentPath} failed.\n\n${formatErrorDetails(errorDetails)}`)\n  }\n\n  // Add the page context onto the results.\n  if (queryJob && queryJob.isPage) {\n    result[`pageContext`] = Object.assign({}, queryJob.context)\n  }\n\n  // Delete internal data from pageContext\n  if (result.pageContext) {\n    delete result.pageContext.path\n    delete result.pageContext.internalComponentName\n    delete result.pageContext.component\n    delete result.pageContext.componentChunkName\n    delete result.pageContext.updatedAt\n    delete result.pageContext.pluginCreator___NODE\n    delete result.pageContext.pluginCreatorId\n    delete result.pageContext.componentPath\n    delete result.pageContext.context\n  }\n\n  const resultJSON = JSON.stringify(result)\n  const resultHash = require(`crypto`)\n    .createHash(`sha1`)\n    .update(resultJSON)\n    .digest(`base64`)\n\n  if (resultHashes[queryJob.id] !== resultHash) {\n    resultHashes[queryJob.id] = resultHash\n\n    const publicDir = path.join(program.directory, `public`)\n    if (queryJob.isPage) {\n      const page = pages.get(queryJob.id)\n      await pageDataUtil.write(\n        { publicDir },\n        page,\n        result,\n        webpackCompilationHash\n      )\n    } else {\n      const staticDir = path.join(publicDir, `static`)\n      const resultPath = path.join(staticDir, `d`, `${queryJob.hash}.json`)\n      await fs.outputFile(resultPath, resultJSON)\n    }\n  }\n\n  // Send event that the page query finished.\n  boundActionCreators.pageQueryRun({\n    path: queryJob.id,\n    componentPath: queryJob.componentPath,\n    isPage: queryJob.isPage,\n  })\n\n  return result\n}\n\nmodule.exports = jobHandler\n"],"file":"job-handler.js"}
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/query/pages-writer.js b/node_modules/gatsby/dist/query/pages-writer.js
deleted file mode 100644
index 6d80cc6..0000000
--- a/node_modules/gatsby/dist/query/pages-writer.js
+++ /dev/null
@@ -1,161 +0,0 @@
-"use strict";
-
-var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
-
-var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
-
-var _path = require("../utils/path");
-
-const _ = require(`lodash`);
-
-const fs = require(`fs-extra`);
-
-const crypto = require(`crypto`);
-
-const _require = require(`../redux/`),
-      store = _require.store,
-      emitter = _require.emitter;
-
-let lastHash = null; // Write out pages information.
-
-const writePages =
-/*#__PURE__*/
-function () {
-  var _ref = (0, _asyncToGenerator2.default)(function* () {
-    bootstrapFinished = true;
-
-    let _store$getState = store.getState(),
-        program = _store$getState.program,
-        jsonDataPaths = _store$getState.jsonDataPaths,
-        pages = _store$getState.pages;
-
-    pages = [...pages.values()];
-    const pagesComponentDependencies = {}; // Write out pages.json
-
-    let pagesData = [];
-    let matchPaths = [];
-    pages.forEach(({
-      path,
-      matchPath,
-      componentChunkName,
-      jsonName
-    }) => {
-      const pageComponentsChunkNames = {
-        componentChunkName
-      };
-
-      if (program._[0] === `develop`) {
-        pagesComponentDependencies[path] = pageComponentsChunkNames;
-      }
-
-      pagesData.push(Object.assign({}, pageComponentsChunkNames, {
-        jsonName,
-        path,
-        matchPath
-      }));
-
-      if (matchPath) {
-        matchPaths[matchPath] = path;
-      }
-    });
-    pagesData = _(pagesData) // Ensure pages keep the same sorting through builds.
-    // Pages without matchPath come first, then pages with matchPath,
-    // where more specific patterns come before less specific patterns.
-    // This ensures explicit routes will match before general.
-    // Specificity is inferred from number of path segments.
-    .sortBy(p => `${p.matchPath ? 9999 - p.matchPath.split(`/`).length : `0000`}${p.path}`).value();
-    const newHash = crypto.createHash(`md5`).update(JSON.stringify(pagesComponentDependencies)).digest(`hex`);
-
-    if (newHash === lastHash) {
-      // components didn't change - no need to rewrite pages.json
-      return Promise.resolve();
-    }
-
-    lastHash = newHash; // Get list of components, and json files.
-
-    let components = [];
-    pages.forEach(p => {
-      components.push({
-        componentChunkName: p.componentChunkName,
-        component: p.component
-      });
-    });
-    components = _.uniqBy(components, c => c.componentChunkName); // Create file with sync requires of components/json files.
-
-    let syncRequires = `const { hot } = require("react-hot-loader/root")
-
-// prefer default export if available
-const preferDefault = m => m && m.default || m
-\n\n`;
-    syncRequires += `exports.components = {\n${components.map(c => `  "${c.componentChunkName}": hot(preferDefault(require("${(0, _path.joinPath)(c.component)}")))`).join(`,\n`)}
-}\n\n`; // Create file with async requires of components/json files.
-
-    let asyncRequires = `// prefer default export if available
-const preferDefault = m => m && m.default || m
-\n`;
-    asyncRequires += `exports.components = {\n${components.map(c => `  "${c.componentChunkName}": () => import("${(0, _path.joinPath)(c.component)}" /* webpackChunkName: "${c.componentChunkName}" */)`).join(`,\n`)}
-}\n\n`;
-    asyncRequires += `exports.data = () => import(/* webpackChunkName: "pages-manifest" */ "${(0, _path.joinPath)(program.directory, `.cache`, `data.json`)}")\n\n`;
-
-    const writeAndMove = (file, data) => {
-      const destination = (0, _path.joinPath)(program.directory, `.cache`, file);
-      const tmp = `${destination}.${Date.now()}`;
-      return fs.writeFile(tmp, data).then(() => fs.move(tmp, destination, {
-        overwrite: true
-      }));
-    };
-
-    const result = yield Promise.all([writeAndMove(`pages.json`, JSON.stringify(pagesData, null, 4)), writeAndMove(`sync-requires.js`, syncRequires), writeAndMove(`async-requires.js`, asyncRequires), writeAndMove(`match-paths.json`, JSON.stringify(matchPaths, null, 4)), writeAndMove(`data.json`, JSON.stringify({
-      pages: pagesData,
-      // Sort dataPaths by keys to ensure keeping the same
-      // sorting through builds
-      dataPaths: _(jsonDataPaths).toPairs().sortBy(0).fromPairs().value()
-    }))]);
-    return result;
-  });
-
-  return function writePages() {
-    return _ref.apply(this, arguments);
-  };
-}();
-
-exports.writePages = writePages;
-
-const resetLastHash = () => {
-  lastHash = null;
-};
-
-exports.resetLastHash = resetLastHash;
-let bootstrapFinished = false;
-
-const debouncedWritePages = _.debounce(() => {
-  // Don't write pages again until bootstrap has finished.
-  if (bootstrapFinished) {
-    writePages();
-  }
-}, 500, {
-  leading: true
-});
-
-emitter.on(`CREATE_PAGE`, () => {
-  // Ignore CREATE_PAGE until bootstrap is finished
-  // as this is called many many times during bootstrap and
-  // we can ignore them until CREATE_PAGE_END is called.
-  //
-  // After bootstrap, we need to listen for this as stateful page
-  // creators e.g. the plugin "gatsby-plugin-page-creator"
-  // calls createPage directly so CREATE_PAGE_END won't get fired.
-  if (bootstrapFinished) {
-    debouncedWritePages();
-  }
-});
-emitter.on(`CREATE_PAGE_END`, () => {
-  debouncedWritePages();
-});
-emitter.on(`DELETE_PAGE`, () => {
-  debouncedWritePages();
-});
-emitter.on(`DELETE_PAGE_BY_PATH`, () => {
-  debouncedWritePages();
-});
-//# sourceMappingURL=pages-writer.js.map
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/query/pages-writer.js.map b/node_modules/gatsby/dist/query/pages-writer.js.map
deleted file mode 100644
index ea8c4bc..0000000
--- a/node_modules/gatsby/dist/query/pages-writer.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"sources":["../../src/query/pages-writer.js"],"names":["_","require","fs","crypto","store","emitter","lastHash","writePages","bootstrapFinished","getState","program","jsonDataPaths","pages","values","pagesComponentDependencies","pagesData","matchPaths","forEach","path","matchPath","componentChunkName","jsonName","pageComponentsChunkNames","push","sortBy","p","split","length","value","newHash","createHash","update","JSON","stringify","digest","Promise","resolve","components","component","uniqBy","c","syncRequires","map","join","asyncRequires","directory","writeAndMove","file","data","destination","tmp","Date","now","writeFile","then","move","overwrite","result","all","dataPaths","toPairs","fromPairs","exports","resetLastHash","debouncedWritePages","debounce","leading","on"],"mappings":"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","sourcesContent":["const _ = require(`lodash`)\nconst fs = require(`fs-extra`)\nconst crypto = require(`crypto`)\n\nconst { store, emitter } = require(`../redux/`)\n\nimport { joinPath } from \"../utils/path\"\n\nlet lastHash = null\n\n// Write out pages information.\nconst writePages = async () => {\n  bootstrapFinished = true\n  let { program, jsonDataPaths, pages } = store.getState()\n  pages = [...pages.values()]\n\n  const pagesComponentDependencies = {}\n\n  // Write out pages.json\n  let pagesData = []\n  let matchPaths = []\n  pages.forEach(({ path, matchPath, componentChunkName, jsonName }) => {\n    const pageComponentsChunkNames = {\n      componentChunkName,\n    }\n\n    if (program._[0] === `develop`) {\n      pagesComponentDependencies[path] = pageComponentsChunkNames\n    }\n\n    pagesData.push({\n      ...pageComponentsChunkNames,\n      jsonName,\n      path,\n      matchPath,\n    })\n\n    if (matchPath) {\n      matchPaths[matchPath] = path\n    }\n  })\n\n  pagesData = _(pagesData)\n    // Ensure pages keep the same sorting through builds.\n    // Pages without matchPath come first, then pages with matchPath,\n    // where more specific patterns come before less specific patterns.\n    // This ensures explicit routes will match before general.\n    // Specificity is inferred from number of path segments.\n    .sortBy(\n      p =>\n        `${p.matchPath ? 9999 - p.matchPath.split(`/`).length : `0000`}${\n          p.path\n        }`\n    )\n    .value()\n  const newHash = crypto\n    .createHash(`md5`)\n    .update(JSON.stringify(pagesComponentDependencies))\n    .digest(`hex`)\n\n  if (newHash === lastHash) {\n    // components didn't change - no need to rewrite pages.json\n    return Promise.resolve()\n  }\n\n  lastHash = newHash\n\n  // Get list of components, and json files.\n  let components = []\n  pages.forEach(p => {\n    components.push({\n      componentChunkName: p.componentChunkName,\n      component: p.component,\n    })\n  })\n\n  components = _.uniqBy(components, c => c.componentChunkName)\n\n  // Create file with sync requires of components/json files.\n  let syncRequires = `const { hot } = require(\"react-hot-loader/root\")\n\n// prefer default export if available\nconst preferDefault = m => m && m.default || m\n\\n\\n`\n  syncRequires += `exports.components = {\\n${components\n    .map(\n      c =>\n        `  \"${c.componentChunkName}\": hot(preferDefault(require(\"${joinPath(\n          c.component\n        )}\")))`\n    )\n    .join(`,\\n`)}\n}\\n\\n`\n\n  // Create file with async requires of components/json files.\n  let asyncRequires = `// prefer default export if available\nconst preferDefault = m => m && m.default || m\n\\n`\n  asyncRequires += `exports.components = {\\n${components\n    .map(\n      c =>\n        `  \"${c.componentChunkName}\": () => import(\"${joinPath(\n          c.component\n        )}\" /* webpackChunkName: \"${c.componentChunkName}\" */)`\n    )\n    .join(`,\\n`)}\n}\\n\\n`\n\n  asyncRequires += `exports.data = () => import(/* webpackChunkName: \"pages-manifest\" */ \"${joinPath(\n    program.directory,\n    `.cache`,\n    `data.json`\n  )}\")\\n\\n`\n\n  const writeAndMove = (file, data) => {\n    const destination = joinPath(program.directory, `.cache`, file)\n    const tmp = `${destination}.${Date.now()}`\n    return fs\n      .writeFile(tmp, data)\n      .then(() => fs.move(tmp, destination, { overwrite: true }))\n  }\n\n  const result = await Promise.all([\n    writeAndMove(`pages.json`, JSON.stringify(pagesData, null, 4)),\n    writeAndMove(`sync-requires.js`, syncRequires),\n    writeAndMove(`async-requires.js`, asyncRequires),\n    writeAndMove(`match-paths.json`, JSON.stringify(matchPaths, null, 4)),\n    writeAndMove(\n      `data.json`,\n      JSON.stringify({\n        pages: pagesData,\n        // Sort dataPaths by keys to ensure keeping the same\n        // sorting through builds\n        dataPaths: _(jsonDataPaths)\n          .toPairs()\n          .sortBy(0)\n          .fromPairs()\n          .value(),\n      })\n    ),\n  ])\n\n  return result\n}\n\nexports.writePages = writePages\n\nconst resetLastHash = () => {\n  lastHash = null\n}\n\nexports.resetLastHash = resetLastHash\n\nlet bootstrapFinished = false\nconst debouncedWritePages = _.debounce(\n  () => {\n    // Don't write pages again until bootstrap has finished.\n    if (bootstrapFinished) {\n      writePages()\n    }\n  },\n  500,\n  { leading: true }\n)\nemitter.on(`CREATE_PAGE`, () => {\n  // Ignore CREATE_PAGE until bootstrap is finished\n  // as this is called many many times during bootstrap and\n  // we can ignore them until CREATE_PAGE_END is called.\n  //\n  // After bootstrap, we need to listen for this as stateful page\n  // creators e.g. the plugin \"gatsby-plugin-page-creator\"\n  // calls createPage directly so CREATE_PAGE_END won't get fired.\n  if (bootstrapFinished) {\n    debouncedWritePages()\n  }\n})\n\nemitter.on(`CREATE_PAGE_END`, () => {\n  debouncedWritePages()\n})\nemitter.on(`DELETE_PAGE`, () => {\n  debouncedWritePages()\n})\nemitter.on(`DELETE_PAGE_BY_PATH`, () => {\n  debouncedWritePages()\n})\n"],"file":"pages-writer.js"}
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/query/query-compiler.js b/node_modules/gatsby/dist/query/query-compiler.js
index 5b75d4e..0492683 100644
--- a/node_modules/gatsby/dist/query/query-compiler.js
+++ b/node_modules/gatsby/dist/query/query-compiler.js
@@ -228,7 +228,7 @@ class Runner {
         };
 
         if (query.isStaticQuery) {
-          query.jsonName = `sq--` + _.kebabCase(`${_path.default.relative(_redux.store.getState().program.directory, filePath)}`);
+          query.id = `sq--` + _.kebabCase(`${_path.default.relative(_redux.store.getState().program.directory, filePath)}`);
         }
 
         if (query.isHook && process.env.NODE_ENV === `production` && typeof require(`react`).useContext !== `function`) {
diff --git a/node_modules/gatsby/dist/query/query-compiler.js.map b/node_modules/gatsby/dist/query/query-compiler.js.map
index 97eaf09..921511c 100644
--- a/node_modules/gatsby/dist/query/query-compiler.js.map
+++ b/node_modules/gatsby/dist/query/query-compiler.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/query/query-compiler.js"],"names":["normalize","require","_","boundActionCreators","websocketManager","printTransforms","IRTransforms","ValuesOfCorrectTypeRule","FragmentsOnCompositeTypesRule","KnownTypeNamesRule","LoneAnonymousOperationRule","PossibleFragmentSpreadsRule","ScalarLeafsRule","VariablesAreInputTypesRule","VariablesInAllowedPositionRule","validationRules","lastRunHadErrors","overlayErrorID","resolveThemes","themes","reduce","merged","theme","push","themeDir","Runner","constructor","base","additional","schema","reportError","message","queryErrorMessage","report","format","red","panicOnBuild","process","env","gatsby_executing_command","emitError","compileAll","nodes","parseEverything","write","filesRegex","path","join","files","concat","map","folderPath","glob","sync","nodir","filter","d","match","Array","from","store","getState","components","keys","c","uniq","parser","FileParser","parseFiles","compiledNodes","Map","namePathMap","nameDefMap","nameErrorMap","documents","entries","filePath","doc","errors","length","queryExtractionGraphQLError","componentPath","definitions","forEach","def","name","value","set","compilerContext","GraphQLCompilerContext","addAll","ASTConvert","convertASTDocuments","RelayParser","transform","bind","error","formattedMessage","docName","codeBlock","get","printContext","slice","ctx","node","kind","has","otherNode","text","getRoot","GraphQLIRPrinter","print","query","originalText","isHook","isStaticQuery","hash","jsonName","kebabCase","relative","program","directory","NODE_ENV","useContext","compile","runner","queries"],"mappings":"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","sourcesContent":["// @flow\nimport path from \"path\"\nconst normalize = require(`normalize-path`)\nimport glob from \"glob\"\n\nimport { validate } from \"graphql\"\nimport { IRTransforms } from \"@gatsbyjs/relay-compiler\"\nimport RelayParser from \"@gatsbyjs/relay-compiler/lib/RelayParser\"\nimport ASTConvert from \"@gatsbyjs/relay-compiler/lib/ASTConvert\"\nimport GraphQLCompilerContext from \"@gatsbyjs/relay-compiler/lib/GraphQLCompilerContext\"\nimport filterContextForNode from \"@gatsbyjs/relay-compiler/lib/filterContextForNode\"\nconst _ = require(`lodash`)\n\nimport { store } from \"../redux\"\nconst { boundActionCreators } = require(`../redux/actions`)\nimport FileParser from \"./file-parser\"\nimport GraphQLIRPrinter from \"@gatsbyjs/relay-compiler/lib/GraphQLIRPrinter\"\nimport {\n  graphqlError,\n  graphqlValidationError,\n  multipleRootQueriesError,\n} from \"./graphql-errors\"\nimport report from \"gatsby-cli/lib/reporter\"\nconst websocketManager = require(`../utils/websocket-manager`)\n\nimport type { DocumentNode, GraphQLSchema } from \"graphql\"\n\nconst { printTransforms } = IRTransforms\n\nconst {\n  ValuesOfCorrectTypeRule,\n  FragmentsOnCompositeTypesRule,\n  KnownTypeNamesRule,\n  LoneAnonymousOperationRule,\n  PossibleFragmentSpreadsRule,\n  ScalarLeafsRule,\n  VariablesAreInputTypesRule,\n  VariablesInAllowedPositionRule,\n} = require(`graphql`)\n\ntype RootQuery = {\n  name: string,\n  path: string,\n  text: string,\n  originalText: string,\n  isStaticQuery: boolean,\n  hash: string,\n}\n\ntype Queries = Map<string, RootQuery>\n\nconst validationRules = [\n  ValuesOfCorrectTypeRule,\n  FragmentsOnCompositeTypesRule,\n  KnownTypeNamesRule,\n  LoneAnonymousOperationRule,\n  PossibleFragmentSpreadsRule,\n  ScalarLeafsRule,\n  VariablesAreInputTypesRule,\n  VariablesInAllowedPositionRule,\n]\n\nlet lastRunHadErrors = null\nconst overlayErrorID = `graphql-compiler`\n\nconst resolveThemes = (themes = []) =>\n  themes.reduce((merged, theme) => {\n    merged.push(theme.themeDir)\n    return merged\n  }, [])\n\nclass Runner {\n  base: string\n  additional: string[]\n  schema: GraphQLSchema\n  errors: string[]\n  fragmentsDir: string\n\n  constructor(base: string, additional: string[], schema: GraphQLSchema) {\n    this.base = base\n    this.additional = additional\n    this.schema = schema\n  }\n\n  reportError(message) {\n    const queryErrorMessage = `${report.format.red(`GraphQL Error`)} ${message}`\n    report.panicOnBuild(queryErrorMessage)\n    if (process.env.gatsby_executing_command === `develop`) {\n      websocketManager.emitError(overlayErrorID, queryErrorMessage)\n      lastRunHadErrors = true\n    }\n  }\n\n  async compileAll() {\n    let nodes = await this.parseEverything()\n    return await this.write(nodes)\n  }\n\n  async parseEverything() {\n    const filesRegex = path.join(`/**`, `*.+(t|j)s?(x)`)\n    let files = [\n      path.join(this.base, `src`),\n      path.join(this.base, `.cache`, `fragments`),\n    ]\n      .concat(this.additional.map(additional => path.join(additional, `src`)))\n      .reduce(\n        (merged, folderPath) =>\n          merged.concat(\n            glob.sync(path.join(folderPath, filesRegex), {\n              nodir: true,\n            })\n          ),\n        []\n      )\n    files = files.filter(d => !d.match(/\\.d\\.ts$/))\n    files = files.map(normalize)\n\n    // Ensure all page components added as they're not necessarily in the\n    // pages directory e.g. a plugin could add a page component.  Plugins\n    // *should* copy their components (if they add a query) to .cache so that\n    // our babel plugin to remove the query on building is active (we don't\n    // run babel on code in node_modules). Otherwise the component will throw\n    // an error in the browser of \"graphql is not defined\".\n    files = files.concat(\n      Array.from(store.getState().components.keys(), c => normalize(c))\n    )\n    files = _.uniq(files)\n\n    let parser = new FileParser()\n\n    return await parser.parseFiles(files)\n  }\n\n  async write(nodes: Map<string, DocumentNode>): Promise<Queries> {\n    const compiledNodes: Queries = new Map()\n    const namePathMap = new Map()\n    const nameDefMap = new Map()\n    const nameErrorMap = new Map()\n    const documents = []\n\n    for (let [filePath, doc] of nodes.entries()) {\n      let errors = validate(this.schema, doc, validationRules)\n\n      if (errors && errors.length) {\n        this.reportError(graphqlValidationError(errors, filePath))\n        boundActionCreators.queryExtractionGraphQLError({\n          componentPath: filePath,\n        })\n        return compiledNodes\n      }\n\n      documents.push(doc)\n      doc.definitions.forEach((def: any) => {\n        const name: string = def.name.value\n        namePathMap.set(name, filePath)\n        nameDefMap.set(name, def)\n      })\n    }\n\n    let compilerContext = new GraphQLCompilerContext(this.schema)\n    try {\n      compilerContext = compilerContext.addAll(\n        ASTConvert.convertASTDocuments(\n          this.schema,\n          documents,\n          validationRules,\n          RelayParser.transform.bind(RelayParser)\n        )\n      )\n    } catch (error) {\n      const { formattedMessage, docName, message, codeBlock } = graphqlError(\n        namePathMap,\n        nameDefMap,\n        error\n      )\n      nameErrorMap.set(docName, { formattedMessage, message, codeBlock })\n      boundActionCreators.queryExtractionGraphQLError({\n        componentPath: namePathMap.get(docName),\n        error: formattedMessage,\n      })\n      this.reportError(formattedMessage)\n      return false\n    }\n\n    // relay-compiler v1.5.0 added \"StripUnusedVariablesTransform\" to\n    // printTransforms. Unfortunately it currently doesn't detect variables\n    // in input objects widely used in gatsby, and therefore removing\n    // variable declaration from queries.\n    // As a temporary workaround remove that transform by slicing printTransforms.\n    const printContext = printTransforms\n      .slice(0, -1)\n      .reduce((ctx, transform) => transform(ctx, this.schema), compilerContext)\n\n    compilerContext.documents().forEach((node: { name: string }) => {\n      if (node.kind !== `Root`) return\n\n      const { name } = node\n      let filePath = namePathMap.get(name) || ``\n\n      if (compiledNodes.has(filePath)) {\n        let otherNode = compiledNodes.get(filePath)\n        this.reportError(\n          multipleRootQueriesError(\n            filePath,\n            nameDefMap.get(name),\n            otherNode && nameDefMap.get(otherNode.name)\n          )\n        )\n        boundActionCreators.queryExtractionGraphQLError({\n          componentPath: filePath,\n        })\n        return\n      }\n\n      let text = filterContextForNode(printContext.getRoot(name), printContext)\n        .documents()\n        .map(GraphQLIRPrinter.print)\n        .join(`\\n`)\n\n      const query = {\n        name,\n        text,\n        originalText: nameDefMap.get(name).text,\n        path: filePath,\n        isHook: nameDefMap.get(name).isHook,\n        isStaticQuery: nameDefMap.get(name).isStaticQuery,\n        hash: nameDefMap.get(name).hash,\n      }\n\n      if (query.isStaticQuery) {\n        query.jsonName =\n          `sq--` +\n          _.kebabCase(\n            `${path.relative(store.getState().program.directory, filePath)}`\n          )\n      }\n\n      if (\n        query.isHook &&\n        process.env.NODE_ENV === `production` &&\n        typeof require(`react`).useContext !== `function`\n      ) {\n        report.panicOnBuild(\n          `You're likely using a version of React that doesn't support Hooks\\n` +\n            `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n        )\n      }\n\n      compiledNodes.set(filePath, query)\n    })\n\n    if (\n      process.env.gatsby_executing_command === `develop` &&\n      lastRunHadErrors\n    ) {\n      websocketManager.emitError(overlayErrorID, null)\n      lastRunHadErrors = false\n    }\n\n    return compiledNodes\n  }\n}\nexport { Runner, resolveThemes }\n\nexport default async function compile(): Promise<Map<string, RootQuery>> {\n  // TODO: swap plugins to themes\n  const { program, schema, themes } = store.getState()\n\n  const runner = new Runner(\n    program.directory,\n    resolveThemes(themes.themes),\n    schema\n  )\n\n  const queries = await runner.compileAll()\n\n  return queries\n}\n"],"file":"query-compiler.js"}
\ No newline at end of file
+{"version":3,"sources":["../../src/query/query-compiler.js"],"names":["normalize","require","_","boundActionCreators","websocketManager","printTransforms","IRTransforms","ValuesOfCorrectTypeRule","FragmentsOnCompositeTypesRule","KnownTypeNamesRule","LoneAnonymousOperationRule","PossibleFragmentSpreadsRule","ScalarLeafsRule","VariablesAreInputTypesRule","VariablesInAllowedPositionRule","validationRules","lastRunHadErrors","overlayErrorID","resolveThemes","themes","reduce","merged","theme","push","themeDir","Runner","constructor","base","additional","schema","reportError","message","queryErrorMessage","report","format","red","panicOnBuild","process","env","gatsby_executing_command","emitError","compileAll","nodes","parseEverything","write","filesRegex","path","join","files","concat","map","folderPath","glob","sync","nodir","filter","d","match","Array","from","store","getState","components","keys","c","uniq","parser","FileParser","parseFiles","compiledNodes","Map","namePathMap","nameDefMap","nameErrorMap","documents","entries","filePath","doc","errors","length","queryExtractionGraphQLError","componentPath","definitions","forEach","def","name","value","set","compilerContext","GraphQLCompilerContext","addAll","ASTConvert","convertASTDocuments","RelayParser","transform","bind","error","formattedMessage","docName","codeBlock","get","printContext","slice","ctx","node","kind","has","otherNode","text","getRoot","GraphQLIRPrinter","print","query","originalText","isHook","isStaticQuery","hash","id","kebabCase","relative","program","directory","NODE_ENV","useContext","compile","runner","queries"],"mappings":"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","sourcesContent":["// @flow\nimport path from \"path\"\nconst normalize = require(`normalize-path`)\nimport glob from \"glob\"\n\nimport { validate } from \"graphql\"\nimport { IRTransforms } from \"@gatsbyjs/relay-compiler\"\nimport RelayParser from \"@gatsbyjs/relay-compiler/lib/RelayParser\"\nimport ASTConvert from \"@gatsbyjs/relay-compiler/lib/ASTConvert\"\nimport GraphQLCompilerContext from \"@gatsbyjs/relay-compiler/lib/GraphQLCompilerContext\"\nimport filterContextForNode from \"@gatsbyjs/relay-compiler/lib/filterContextForNode\"\nconst _ = require(`lodash`)\n\nimport { store } from \"../redux\"\nconst { boundActionCreators } = require(`../redux/actions`)\nimport FileParser from \"./file-parser\"\nimport GraphQLIRPrinter from \"@gatsbyjs/relay-compiler/lib/GraphQLIRPrinter\"\nimport {\n  graphqlError,\n  graphqlValidationError,\n  multipleRootQueriesError,\n} from \"./graphql-errors\"\nimport report from \"gatsby-cli/lib/reporter\"\nconst websocketManager = require(`../utils/websocket-manager`)\n\nimport type { DocumentNode, GraphQLSchema } from \"graphql\"\n\nconst { printTransforms } = IRTransforms\n\nconst {\n  ValuesOfCorrectTypeRule,\n  FragmentsOnCompositeTypesRule,\n  KnownTypeNamesRule,\n  LoneAnonymousOperationRule,\n  PossibleFragmentSpreadsRule,\n  ScalarLeafsRule,\n  VariablesAreInputTypesRule,\n  VariablesInAllowedPositionRule,\n} = require(`graphql`)\n\ntype RootQuery = {\n  name: string,\n  path: string,\n  text: string,\n  originalText: string,\n  isStaticQuery: boolean,\n  hash: string,\n}\n\ntype Queries = Map<string, RootQuery>\n\nconst validationRules = [\n  ValuesOfCorrectTypeRule,\n  FragmentsOnCompositeTypesRule,\n  KnownTypeNamesRule,\n  LoneAnonymousOperationRule,\n  PossibleFragmentSpreadsRule,\n  ScalarLeafsRule,\n  VariablesAreInputTypesRule,\n  VariablesInAllowedPositionRule,\n]\n\nlet lastRunHadErrors = null\nconst overlayErrorID = `graphql-compiler`\n\nconst resolveThemes = (themes = []) =>\n  themes.reduce((merged, theme) => {\n    merged.push(theme.themeDir)\n    return merged\n  }, [])\n\nclass Runner {\n  base: string\n  additional: string[]\n  schema: GraphQLSchema\n  errors: string[]\n  fragmentsDir: string\n\n  constructor(base: string, additional: string[], schema: GraphQLSchema) {\n    this.base = base\n    this.additional = additional\n    this.schema = schema\n  }\n\n  reportError(message) {\n    const queryErrorMessage = `${report.format.red(`GraphQL Error`)} ${message}`\n    report.panicOnBuild(queryErrorMessage)\n    if (process.env.gatsby_executing_command === `develop`) {\n      websocketManager.emitError(overlayErrorID, queryErrorMessage)\n      lastRunHadErrors = true\n    }\n  }\n\n  async compileAll() {\n    let nodes = await this.parseEverything()\n    return await this.write(nodes)\n  }\n\n  async parseEverything() {\n    const filesRegex = path.join(`/**`, `*.+(t|j)s?(x)`)\n    let files = [\n      path.join(this.base, `src`),\n      path.join(this.base, `.cache`, `fragments`),\n    ]\n      .concat(this.additional.map(additional => path.join(additional, `src`)))\n      .reduce(\n        (merged, folderPath) =>\n          merged.concat(\n            glob.sync(path.join(folderPath, filesRegex), {\n              nodir: true,\n            })\n          ),\n        []\n      )\n    files = files.filter(d => !d.match(/\\.d\\.ts$/))\n    files = files.map(normalize)\n\n    // Ensure all page components added as they're not necessarily in the\n    // pages directory e.g. a plugin could add a page component.  Plugins\n    // *should* copy their components (if they add a query) to .cache so that\n    // our babel plugin to remove the query on building is active (we don't\n    // run babel on code in node_modules). Otherwise the component will throw\n    // an error in the browser of \"graphql is not defined\".\n    files = files.concat(\n      Array.from(store.getState().components.keys(), c => normalize(c))\n    )\n    files = _.uniq(files)\n\n    let parser = new FileParser()\n\n    return await parser.parseFiles(files)\n  }\n\n  async write(nodes: Map<string, DocumentNode>): Promise<Queries> {\n    const compiledNodes: Queries = new Map()\n    const namePathMap = new Map()\n    const nameDefMap = new Map()\n    const nameErrorMap = new Map()\n    const documents = []\n\n    for (let [filePath, doc] of nodes.entries()) {\n      let errors = validate(this.schema, doc, validationRules)\n\n      if (errors && errors.length) {\n        this.reportError(graphqlValidationError(errors, filePath))\n        boundActionCreators.queryExtractionGraphQLError({\n          componentPath: filePath,\n        })\n        return compiledNodes\n      }\n\n      documents.push(doc)\n      doc.definitions.forEach((def: any) => {\n        const name: string = def.name.value\n        namePathMap.set(name, filePath)\n        nameDefMap.set(name, def)\n      })\n    }\n\n    let compilerContext = new GraphQLCompilerContext(this.schema)\n    try {\n      compilerContext = compilerContext.addAll(\n        ASTConvert.convertASTDocuments(\n          this.schema,\n          documents,\n          validationRules,\n          RelayParser.transform.bind(RelayParser)\n        )\n      )\n    } catch (error) {\n      const { formattedMessage, docName, message, codeBlock } = graphqlError(\n        namePathMap,\n        nameDefMap,\n        error\n      )\n      nameErrorMap.set(docName, { formattedMessage, message, codeBlock })\n      boundActionCreators.queryExtractionGraphQLError({\n        componentPath: namePathMap.get(docName),\n        error: formattedMessage,\n      })\n      this.reportError(formattedMessage)\n      return false\n    }\n\n    // relay-compiler v1.5.0 added \"StripUnusedVariablesTransform\" to\n    // printTransforms. Unfortunately it currently doesn't detect variables\n    // in input objects widely used in gatsby, and therefore removing\n    // variable declaration from queries.\n    // As a temporary workaround remove that transform by slicing printTransforms.\n    const printContext = printTransforms\n      .slice(0, -1)\n      .reduce((ctx, transform) => transform(ctx, this.schema), compilerContext)\n\n    compilerContext.documents().forEach((node: { name: string }) => {\n      if (node.kind !== `Root`) return\n\n      const { name } = node\n      let filePath = namePathMap.get(name) || ``\n\n      if (compiledNodes.has(filePath)) {\n        let otherNode = compiledNodes.get(filePath)\n        this.reportError(\n          multipleRootQueriesError(\n            filePath,\n            nameDefMap.get(name),\n            otherNode && nameDefMap.get(otherNode.name)\n          )\n        )\n        boundActionCreators.queryExtractionGraphQLError({\n          componentPath: filePath,\n        })\n        return\n      }\n\n      let text = filterContextForNode(printContext.getRoot(name), printContext)\n        .documents()\n        .map(GraphQLIRPrinter.print)\n        .join(`\\n`)\n\n      const query = {\n        name,\n        text,\n        originalText: nameDefMap.get(name).text,\n        path: filePath,\n        isHook: nameDefMap.get(name).isHook,\n        isStaticQuery: nameDefMap.get(name).isStaticQuery,\n        hash: nameDefMap.get(name).hash,\n      }\n\n      if (query.isStaticQuery) {\n        query.id =\n          `sq--` +\n          _.kebabCase(\n            `${path.relative(store.getState().program.directory, filePath)}`\n          )\n      }\n\n      if (\n        query.isHook &&\n        process.env.NODE_ENV === `production` &&\n        typeof require(`react`).useContext !== `function`\n      ) {\n        report.panicOnBuild(\n          `You're likely using a version of React that doesn't support Hooks\\n` +\n            `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n        )\n      }\n\n      compiledNodes.set(filePath, query)\n    })\n\n    if (\n      process.env.gatsby_executing_command === `develop` &&\n      lastRunHadErrors\n    ) {\n      websocketManager.emitError(overlayErrorID, null)\n      lastRunHadErrors = false\n    }\n\n    return compiledNodes\n  }\n}\nexport { Runner, resolveThemes }\n\nexport default async function compile(): Promise<Map<string, RootQuery>> {\n  // TODO: swap plugins to themes\n  const { program, schema, themes } = store.getState()\n\n  const runner = new Runner(\n    program.directory,\n    resolveThemes(themes.themes),\n    schema\n  )\n\n  const queries = await runner.compileAll()\n\n  return queries\n}\n"],"file":"query-compiler.js"}
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/query/query-queue.js b/node_modules/gatsby/dist/query/query-queue.js
new file mode 100644
index 0000000..68eff91
--- /dev/null
+++ b/node_modules/gatsby/dist/query/query-queue.js
@@ -0,0 +1,59 @@
+"use strict";
+
+var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
+
+var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
+
+const Queue = require(`better-queue`);
+
+const FastMemoryStore = require(`./better-queue-custom-store`);
+
+const jobHandler = require(`./job-handler`);
+
+const makeBaseOptions = () => {
+  return {
+    concurrent: 4,
+    store: FastMemoryStore()
+  };
+};
+
+const defaultPostHandler = ({
+  queryJob,
+  result
+}) => result;
+
+const create = ({
+  postHandler = defaultPostHandler,
+  betterQueueOptions = {}
+} = {}) => {
+  const queueOptions = Object.assign({}, makeBaseOptions, betterQueueOptions);
+  const queue = new Queue(
+  /*#__PURE__*/
+  function () {
+    var _ref = (0, _asyncToGenerator2.default)(function* (queryJob, callback) {
+      try {
+        const result = yield jobHandler({
+          queryJob
+        });
+        postHandler({
+          queryJob,
+          result
+        });
+        callback(null, result);
+      } catch (err) {
+        console.log(`Error running queryRunner`, err);
+        callback(err);
+      }
+    });
+
+    return function (_x, _x2) {
+      return _ref.apply(this, arguments);
+    };
+  }(), queueOptions);
+  return queue;
+};
+
+module.exports = {
+  create
+};
+//# sourceMappingURL=query-queue.js.map
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/query/query-queue.js.map b/node_modules/gatsby/dist/query/query-queue.js.map
new file mode 100644
index 0000000..2583274
--- /dev/null
+++ b/node_modules/gatsby/dist/query/query-queue.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":["../../src/query/query-queue.js"],"names":["Queue","require","FastMemoryStore","jobHandler","makeBaseOptions","concurrent","store","defaultPostHandler","queryJob","result","create","postHandler","betterQueueOptions","queueOptions","queue","callback","err","console","log","module","exports"],"mappings":";;;;;;AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAE,cAAF,CAArB;;AAEA,MAAMC,eAAe,GAAGD,OAAO,CAAE,6BAAF,CAA/B;;AACA,MAAME,UAAU,GAAGF,OAAO,CAAE,eAAF,CAA1B;;AAEA,MAAMG,eAAe,GAAG,MAAM;AAC5B,SAAO;AACLC,IAAAA,UAAU,EAAE,CADP;AAELC,IAAAA,KAAK,EAAEJ,eAAe;AAFjB,GAAP;AAID,CALD;;AAOA,MAAMK,kBAAkB,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAA0BA,MAArD;;AAEA,MAAMC,MAAM,GAAG,CAAC;AACdC,EAAAA,WAAW,GAAGJ,kBADA;AAEdK,EAAAA,kBAAkB,GAAG;AAFP,IAGZ,EAHW,KAGJ;AACT,QAAMC,YAAY,qBAAQT,eAAR,EAA4BQ,kBAA5B,CAAlB;AACA,QAAME,KAAK,GAAG,IAAId,KAAJ;AAAA;AAAA;AAAA,+CAAU,WAAOQ,QAAP,EAAiBO,QAAjB,EAA8B;AACpD,UAAI;AACF,cAAMN,MAAM,SAASN,UAAU,CAAC;AAAEK,UAAAA;AAAF,SAAD,CAA/B;AACAG,QAAAA,WAAW,CAAC;AAAEH,UAAAA,QAAF;AAAYC,UAAAA;AAAZ,SAAD,CAAX;AACAM,QAAAA,QAAQ,CAAC,IAAD,EAAON,MAAP,CAAR;AACD,OAJD,CAIE,OAAOO,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAa,2BAAb,EAAyCF,GAAzC;AACAD,QAAAA,QAAQ,CAACC,GAAD,CAAR;AACD;AACF,KATa;;AAAA;AAAA;AAAA;AAAA,OASXH,YATW,CAAd;AAUA,SAAOC,KAAP;AACD,CAhBD;;AAkBAK,MAAM,CAACC,OAAP,GAAiB;AACfV,EAAAA;AADe,CAAjB","sourcesContent":["const Queue = require(`better-queue`)\n\nconst FastMemoryStore = require(`./better-queue-custom-store`)\nconst jobHandler = require(`./job-handler`)\n\nconst makeBaseOptions = () => {\n  return {\n    concurrent: 4,\n    store: FastMemoryStore(),\n  }\n}\n\nconst defaultPostHandler = ({ queryJob, result }) => result\n\nconst create = ({\n  postHandler = defaultPostHandler,\n  betterQueueOptions = {},\n} = {}) => {\n  const queueOptions = { ...makeBaseOptions, ...betterQueueOptions }\n  const queue = new Queue(async (queryJob, callback) => {\n    try {\n      const result = await jobHandler({ queryJob })\n      postHandler({ queryJob, result })\n      callback(null, result)\n    } catch (err) {\n      console.log(`Error running queryRunner`, err)\n      callback(err)\n    }\n  }, queueOptions)\n  return queue\n}\n\nmodule.exports = {\n  create,\n}\n"],"file":"query-queue.js"}
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/query/query-runner.js.map b/node_modules/gatsby/dist/query/query-runner.js.map
deleted file mode 100644
index 60ef3fe..0000000
--- a/node_modules/gatsby/dist/query/query-runner.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"sources":["../../src/query/query-runner.js"],"names":["fs","require","report","path","store","withResolverContext","generatePathChunkName","formatErrorDetails","mod","boundActionCreators","resultHashes","module","exports","queryJob","getState","schema","program","graphql","query","context","result","errors","errorDetails","Map","set","isPage","JSON","stringify","pluginCreatorId","panicOnBuild","componentPath","Object","assign","pageContext","jsonName","internalComponentName","component","componentChunkName","updatedAt","pluginCreator___NODE","resultJSON","resultHash","createHash","update","digest","replace","dataPath","hash","id","modInt","toString","resultPath","join","directory","outputFile","dispatch","type","payload","key","value","pageQueryRun"],"mappings":"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","sourcesContent":["// @flow\n\nimport { graphql as graphqlFunction } from \"graphql\"\nconst fs = require(`fs-extra`)\nconst report = require(`gatsby-cli/lib/reporter`)\n\nconst path = require(`path`)\nconst { store } = require(`../redux`)\nconst withResolverContext = require(`../schema/context`)\nconst { generatePathChunkName } = require(`../utils/js-chunk-names`)\nconst { formatErrorDetails } = require(`./utils`)\nconst mod = require(`hash-mod`)(999)\nconst { boundActionCreators } = require(`../redux/actions`)\n\nconst resultHashes = {}\n\ntype QueryJob = {\n  id: string,\n  hash?: string,\n  jsonName: string,\n  query: string,\n  componentPath: string,\n  context: Object,\n  isPage: Boolean,\n}\n\n// Run query\nmodule.exports = async (queryJob: QueryJob) => {\n  const { schema, program } = store.getState()\n\n  const graphql = (query, context) =>\n    graphqlFunction(\n      schema,\n      query,\n      context,\n      withResolverContext(context, schema),\n      context\n    )\n\n  // Run query\n  let result\n  // Nothing to do if the query doesn't exist.\n  if (!queryJob.query || queryJob.query === ``) {\n    result = {}\n  } else {\n    result = await graphql(queryJob.query, queryJob.context)\n  }\n\n  // If there's a graphql error then log the error. If we're building, also\n  // quit.\n  if (result && result.errors) {\n    const errorDetails = new Map()\n    errorDetails.set(`Errors`, result.errors || [])\n    if (queryJob.isPage) {\n      errorDetails.set(`URL path`, queryJob.context.path)\n      errorDetails.set(\n        `Context`,\n        JSON.stringify(queryJob.context.context, null, 2)\n      )\n    }\n    errorDetails.set(`Plugin`, queryJob.pluginCreatorId || `none`)\n    errorDetails.set(`Query`, queryJob.query)\n\n    report.panicOnBuild(`\nThe GraphQL query from ${queryJob.componentPath} failed.\n\n${formatErrorDetails(errorDetails)}`)\n  }\n\n  // Add the page context onto the results.\n  if (queryJob && queryJob.isPage) {\n    result[`pageContext`] = Object.assign({}, queryJob.context)\n  }\n\n  // Delete internal data from pageContext\n  if (result.pageContext) {\n    delete result.pageContext.jsonName\n    delete result.pageContext.path\n    delete result.pageContext.internalComponentName\n    delete result.pageContext.component\n    delete result.pageContext.componentChunkName\n    delete result.pageContext.updatedAt\n    delete result.pageContext.pluginCreator___NODE\n    delete result.pageContext.pluginCreatorId\n    delete result.pageContext.componentPath\n    delete result.pageContext.context\n  }\n\n  const resultJSON = JSON.stringify(result)\n  const resultHash = require(`crypto`)\n    .createHash(`sha1`)\n    .update(resultJSON)\n    .digest(`base64`)\n    // Remove potentially unsafe characters. This increases chances of collisions\n    // slightly but it should still be very safe + we get a shorter\n    // url vs hex.\n    .replace(/[^a-zA-Z0-9-_]/g, ``)\n\n  let dataPath\n  if (queryJob.isPage) {\n    dataPath = `${generatePathChunkName(queryJob.jsonName)}-${resultHash}`\n  } else {\n    dataPath = queryJob.hash\n  }\n\n  if (resultHashes[queryJob.id] !== resultHash) {\n    resultHashes[queryJob.id] = resultHash\n    let modInt = ``\n    // We leave StaticQuery results at public/static/d\n    // as the babel plugin has that path hard-coded\n    // for importing static query results.\n    if (queryJob.isPage) {\n      modInt = mod(dataPath).toString()\n    }\n\n    // Always write file to public/static/d/ folder.\n    const resultPath = path.join(\n      program.directory,\n      `public`,\n      `static`,\n      `d`,\n      modInt,\n      `${dataPath}.json`\n    )\n\n    if (queryJob.isPage) {\n      dataPath = `${modInt}/${dataPath}`\n    }\n\n    await fs.outputFile(resultPath, resultJSON)\n\n    store.dispatch({\n      type: `SET_JSON_DATA_PATH`,\n      payload: {\n        key: queryJob.jsonName,\n        value: dataPath,\n      },\n    })\n  }\n\n  boundActionCreators.pageQueryRun({\n    path: queryJob.id,\n    componentPath: queryJob.componentPath,\n    isPage: queryJob.isPage,\n  })\n\n  return result\n}\n"],"file":"query-runner.js"}
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/query/query-watcher.js b/node_modules/gatsby/dist/query/query-watcher.js
index 8c33c6a..748b24c 100644
--- a/node_modules/gatsby/dist/query/query-watcher.js
+++ b/node_modules/gatsby/dist/query/query-watcher.js
@@ -28,7 +28,7 @@ const queryCompiler = require(`./query-compiler`).default;
 
 const report = require(`gatsby-cli/lib/reporter`);
 
-const queryUtil = require(`./index`);
+const queryRunner = require(`./index`);
 
 const debug = require(`debug`)(`gatsby:query-watcher`);
 
@@ -52,9 +52,9 @@ const handleComponentsWithRemovedQueries = ({
       debug(`Static query was removed from ${c.componentPath}`);
       store.dispatch({
         type: `REMOVE_STATIC_QUERY`,
-        payload: c.jsonName
+        payload: c.id
       });
-      boundActionCreators.deleteComponentsDependencies([c.jsonName]);
+      boundActionCreators.deleteComponentsDependencies([c.id]);
     }
   });
 };
@@ -66,7 +66,7 @@ const handleQuery = ({
   // If this is a static query
   // Add action / reducer + watch staticquery files
   if (query.isStaticQuery) {
-    const oldQuery = staticQueryComponents.get(query.jsonName);
+    const oldQuery = staticQueryComponents.get(query.id);
     const isNewQuery = !oldQuery; // Compare query text because text is compiled query with any attached
     // fragments and we want to rerun queries if fragments are edited.
     // Compare hash because hash is used for identyfing query and
@@ -75,16 +75,15 @@ const handleQuery = ({
 
     if (isNewQuery || oldQuery.hash !== query.hash || oldQuery.text !== query.text) {
       boundActionCreators.replaceStaticQuery({
+        id: query.id,
         name: query.name,
         componentPath: query.path,
-        id: query.jsonName,
-        jsonName: query.jsonName,
         query: query.text,
         hash: query.hash
       });
       debug(`Static query in ${component} ${isNewQuery ? `was added` : `has changed`}.`);
-      boundActionCreators.deleteComponentsDependencies([query.jsonName]);
-      queryUtil.enqueueExtractedQueryId(query.jsonName);
+      boundActionCreators.deleteComponentsDependencies([query.id]);
+      queryRunner.enqueueExtractedQueryId(query.id);
     }
 
     return true;
@@ -147,7 +146,7 @@ const updateStateAndRunQueries = isFirstRun => {
       `);
     }
 
-    queryUtil.runQueuedQueries();
+    queryRunner.runQueries();
     return null;
   });
 };
@@ -192,6 +191,29 @@ exports.extractQueries = () => {
   });
 };
 
+const queueQueriesForPageComponent = componentPath => {
+  const pages = getPagesForComponent(componentPath); // Remove page data dependencies before re-running queries because
+  // the changing of the query could have changed the data dependencies.
+  // Re-running the queries will add back data dependencies.
+
+  boundActionCreators.deleteComponentsDependencies(pages.map(p => p.path || p.id));
+  pages.forEach(page => queryRunner.enqueueExtractedQueryId(page.path));
+  queryRunner.runQueries();
+};
+
+const runQueryForPage = path => {
+  queryRunner.enqueueExtractedQueryId(path);
+  queryRunner.runQueries();
+};
+
+exports.queueQueriesForPageComponent = queueQueriesForPageComponent;
+exports.runQueryForPage = runQueryForPage;
+
+const getPagesForComponent = componentPath => {
+  const state = store.getState();
+  return [...state.pages.values()].filter(p => p.componentPath === componentPath);
+};
+
 const filesToWatch = new Set();
 let watcher;
 
@@ -213,6 +235,9 @@ const debounceCompile = _.debounce(() => {
   updateStateAndRunQueries();
 }, 100);
 
+exports.watchComponent = watchComponent;
+exports.debounceCompile = debounceCompile;
+
 const watch = rootDir => {
   if (watcher) return;
   watcher = chokidar.watch(slash(path.join(rootDir, `/src/**/*.{js,jsx,ts,tsx}`))).on(`change`, path => {
diff --git a/node_modules/gatsby/dist/query/query-watcher.js.map b/node_modules/gatsby/dist/query/query-watcher.js.map
index 3a79bf5..0a5d192 100644
--- a/node_modules/gatsby/dist/query/query-watcher.js.map
+++ b/node_modules/gatsby/dist/query/query-watcher.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/query/query-watcher.js"],"names":["_","require","chokidar","path","slash","store","emitter","boundActionCreators","queryCompiler","default","report","queryUtil","debug","getQueriesSnapshot","state","getState","snapshot","components","Map","staticQueryComponents","handleComponentsWithRemovedQueries","queries","forEach","c","query","has","componentPath","dispatch","type","payload","jsonName","deleteComponentsDependencies","handleQuery","component","isStaticQuery","oldQuery","get","isNewQuery","hash","text","replaceStaticQuery","name","id","enqueueExtractedQueryId","updateStateAndRunQueries","isFirstRun","then","size","queryExtracted","queriesWillNotRun","queryWillRun","watchComponent","warn","log","stripIndent","runQueuedQueries","clearInactiveComponents","pages","activeTemplates","Set","page","add","exports","extractQueries","process","env","NODE_ENV","watch","program","directory","filesToWatch","watcher","debounceCompile","debounce","rootDir","join","on","filePath","startWatchDeletePage","action","otherPageWithTemplateExists","values"],"mappings":"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","sourcesContent":["/** *\n * Jobs of this module\n * - Maintain the list of components in the Redux store. So monitor new components\n *   and add/remove components.\n * - Watch components for query changes and extract these and update the store.\n * - Ensure all page queries are run as part of bootstrap and report back when\n *   this is done\n * - Whenever a query changes, re-run all pages that rely on this query.\n ***/\n\nconst _ = require(`lodash`)\nconst chokidar = require(`chokidar`)\nconst path = require(`path`)\nconst slash = require(`slash`)\n\nconst { store, emitter } = require(`../redux/`)\nconst { boundActionCreators } = require(`../redux/actions`)\nconst queryCompiler = require(`./query-compiler`).default\nconst report = require(`gatsby-cli/lib/reporter`)\nconst queryUtil = require(`./index`)\nconst debug = require(`debug`)(`gatsby:query-watcher`)\n\nconst getQueriesSnapshot = () => {\n  const state = store.getState()\n\n  const snapshot = {\n    components: new Map(state.components),\n    staticQueryComponents: new Map(state.staticQueryComponents),\n  }\n\n  return snapshot\n}\n\nconst handleComponentsWithRemovedQueries = (\n  { components, staticQueryComponents },\n  queries\n) => {\n  // If a component had static query and it doesn't have it\n  // anymore - update the store\n  staticQueryComponents.forEach(c => {\n    if (c.query !== `` && !queries.has(c.componentPath)) {\n      debug(`Static query was removed from ${c.componentPath}`)\n      store.dispatch({\n        type: `REMOVE_STATIC_QUERY`,\n        payload: c.jsonName,\n      })\n      boundActionCreators.deleteComponentsDependencies([c.jsonName])\n    }\n  })\n}\n\nconst handleQuery = (\n  { components, staticQueryComponents },\n  query,\n  component\n) => {\n  // If this is a static query\n  // Add action / reducer + watch staticquery files\n  if (query.isStaticQuery) {\n    const oldQuery = staticQueryComponents.get(query.jsonName)\n    const isNewQuery = !oldQuery\n\n    // Compare query text because text is compiled query with any attached\n    // fragments and we want to rerun queries if fragments are edited.\n    // Compare hash because hash is used for identyfing query and\n    // passing data to component in development. Hash can change if user will\n    // format query text, but it doesn't mean that compiled text will change.\n    if (\n      isNewQuery ||\n      oldQuery.hash !== query.hash ||\n      oldQuery.text !== query.text\n    ) {\n      boundActionCreators.replaceStaticQuery({\n        name: query.name,\n        componentPath: query.path,\n        id: query.jsonName,\n        jsonName: query.jsonName,\n        query: query.text,\n        hash: query.hash,\n      })\n\n      debug(\n        `Static query in ${component} ${\n          isNewQuery ? `was added` : `has changed`\n        }.`\n      )\n\n      boundActionCreators.deleteComponentsDependencies([query.jsonName])\n      queryUtil.enqueueExtractedQueryId(query.jsonName)\n    }\n    return true\n  }\n\n  return false\n}\n\nconst updateStateAndRunQueries = isFirstRun => {\n  const snapshot = getQueriesSnapshot()\n  return queryCompiler().then(queries => {\n    // If there's an error while extracting queries, the queryCompiler returns false\n    // or zero results.\n    // Yeah, should probably be an error but don't feel like threading the error\n    // all the way here.\n    if (!queries || queries.size === 0) {\n      return null\n    }\n    handleComponentsWithRemovedQueries(snapshot, queries)\n\n    // Run action for each component\n    const { components } = snapshot\n    components.forEach(c =>\n      boundActionCreators.queryExtracted({\n        componentPath: c.componentPath,\n        query: queries.get(c.componentPath)?.text || ``,\n      })\n    )\n\n    let queriesWillNotRun = false\n    queries.forEach((query, component) => {\n      const queryWillRun = handleQuery(snapshot, query, component)\n\n      if (queryWillRun) {\n        watchComponent(component)\n        // Check if this is a page component.\n        // If it is and this is our first run during bootstrap,\n        // show a warning about having a query in a non-page component.\n      } else if (isFirstRun && !snapshot.components.has(component)) {\n        report.warn(\n          `The GraphQL query in the non-page component \"${component}\" will not be run.`\n        )\n        queriesWillNotRun = true\n      }\n    })\n\n    if (queriesWillNotRun) {\n      report.log(report.stripIndent`\n\n        Exported queries are only executed for Page components. It's possible you're\n        trying to create pages in your gatsby-node.js and that's failing for some\n        reason.\n\n        If the failing component(s) is a regular component and not intended to be a page\n        component, you generally want to use a <StaticQuery> (https://gatsbyjs.org/docs/static-query)\n        instead of exporting a page query.\n\n        If you're more experienced with GraphQL, you can also export GraphQL\n        fragments from components and compose the fragments in the Page component\n        query and pass data down into the child component — http://graphql.org/learn/queries/#fragments\n\n      `)\n    }\n\n    queryUtil.runQueuedQueries()\n\n    return null\n  })\n}\n\n/**\n * Removes components templates that aren't used by any page from redux store.\n */\nconst clearInactiveComponents = () => {\n  const { components, pages } = store.getState()\n\n  const activeTemplates = new Set()\n  pages.forEach(page => {\n    // Set will guarantee uniqeness of entires\n    activeTemplates.add(slash(page.component))\n  })\n\n  components.forEach(component => {\n    if (!activeTemplates.has(component.componentPath)) {\n      debug(\n        `${\n          component.componentPath\n        } component was removed because it isn't used by any page`\n      )\n      store.dispatch({\n        type: `REMOVE_TEMPLATE_COMPONENT`,\n        payload: component,\n      })\n    }\n  })\n}\n\nexports.extractQueries = () => {\n  // Remove template components that point to not existing page templates.\n  // We need to do this, because components data is cached and there might\n  // be changes applied when development server isn't running. This is needed\n  // only in initial run, because during development state will be adjusted.\n  clearInactiveComponents()\n\n  return updateStateAndRunQueries(true).then(() => {\n    // During development start watching files to recompile & run\n    // queries on the fly.\n    if (process.env.NODE_ENV !== `production`) {\n      watch(store.getState().program.directory)\n    }\n  })\n}\n\nconst filesToWatch = new Set()\nlet watcher\nconst watchComponent = componentPath => {\n  // We don't start watching until mid-way through the bootstrap so ignore\n  // new components being added until then. This doesn't affect anything as\n  // when extractQueries is called from bootstrap, we make sure that all\n  // components are being watched.\n  if (\n    process.env.NODE_ENV !== `production` &&\n    !filesToWatch.has(componentPath)\n  ) {\n    filesToWatch.add(componentPath)\n    if (watcher) {\n      watcher.add(componentPath)\n    }\n  }\n}\n\nconst debounceCompile = _.debounce(() => {\n  updateStateAndRunQueries()\n}, 100)\n\nconst watch = rootDir => {\n  if (watcher) return\n\n  watcher = chokidar\n    .watch(slash(path.join(rootDir, `/src/**/*.{js,jsx,ts,tsx}`)))\n    .on(`change`, path => {\n      debounceCompile()\n    })\n\n  filesToWatch.forEach(filePath => watcher.add(filePath))\n}\n\nexports.startWatchDeletePage = () => {\n  emitter.on(`DELETE_PAGE`, action => {\n    const componentPath = slash(action.payload.component)\n    const { pages } = store.getState()\n    let otherPageWithTemplateExists = false\n    for (let page of pages.values()) {\n      if (slash(page.component) === componentPath) {\n        otherPageWithTemplateExists = true\n        break\n      }\n    }\n    if (!otherPageWithTemplateExists) {\n      store.dispatch({\n        type: `REMOVE_TEMPLATE_COMPONENT`,\n        payload: {\n          componentPath,\n        },\n      })\n    }\n  })\n}\n"],"file":"query-watcher.js"}
\ No newline at end of file
+{"version":3,"sources":["../../src/query/query-watcher.js"],"names":["_","require","chokidar","path","slash","store","emitter","boundActionCreators","queryCompiler","default","report","queryRunner","debug","getQueriesSnapshot","state","getState","snapshot","components","Map","staticQueryComponents","handleComponentsWithRemovedQueries","queries","forEach","c","query","has","componentPath","dispatch","type","payload","id","deleteComponentsDependencies","handleQuery","component","isStaticQuery","oldQuery","get","isNewQuery","hash","text","replaceStaticQuery","name","enqueueExtractedQueryId","updateStateAndRunQueries","isFirstRun","then","size","queryExtracted","queriesWillNotRun","queryWillRun","watchComponent","warn","log","stripIndent","runQueries","clearInactiveComponents","pages","activeTemplates","Set","page","add","exports","extractQueries","process","env","NODE_ENV","watch","program","directory","queueQueriesForPageComponent","getPagesForComponent","map","p","runQueryForPage","values","filter","filesToWatch","watcher","debounceCompile","debounce","rootDir","join","on","filePath","startWatchDeletePage","action","otherPageWithTemplateExists"],"mappings":";;AAAA;;;;;;;;;AAUA,MAAMA,CAAC,GAAGC,OAAO,CAAE,QAAF,CAAjB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAE,UAAF,CAAxB;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAE,MAAF,CAApB;;AACA,MAAMG,KAAK,GAAGH,OAAO,CAAE,OAAF,CAArB;;iBAE2BA,OAAO,CAAE,WAAF,C;MAA1BI,K,YAAAA,K;MAAOC,O,YAAAA,O;;kBACiBL,OAAO,CAAE,kBAAF,C;MAA/BM,mB,aAAAA,mB;;AACR,MAAMC,aAAa,GAAGP,OAAO,CAAE,kBAAF,CAAP,CAA4BQ,OAAlD;;AACA,MAAMC,MAAM,GAAGT,OAAO,CAAE,yBAAF,CAAtB;;AACA,MAAMU,WAAW,GAAGV,OAAO,CAAE,SAAF,CAA3B;;AACA,MAAMW,KAAK,GAAGX,OAAO,CAAE,OAAF,CAAP,CAAkB,sBAAlB,CAAd;;AAEA,MAAMY,kBAAkB,GAAG,MAAM;AAC/B,QAAMC,KAAK,GAAGT,KAAK,CAACU,QAAN,EAAd;AAEA,QAAMC,QAAQ,GAAG;AACfC,IAAAA,UAAU,EAAE,IAAIC,GAAJ,CAAQJ,KAAK,CAACG,UAAd,CADG;AAEfE,IAAAA,qBAAqB,EAAE,IAAID,GAAJ,CAAQJ,KAAK,CAACK,qBAAd;AAFR,GAAjB;AAKA,SAAOH,QAAP;AACD,CATD;;AAWA,MAAMI,kCAAkC,GAAG,CACzC;AAAEH,EAAAA,UAAF;AAAcE,EAAAA;AAAd,CADyC,EAEzCE,OAFyC,KAGtC;AACH;AACA;AACAF,EAAAA,qBAAqB,CAACG,OAAtB,CAA8BC,CAAC,IAAI;AACjC,QAAIA,CAAC,CAACC,KAAF,KAAa,EAAb,IAAkB,CAACH,OAAO,CAACI,GAAR,CAAYF,CAAC,CAACG,aAAd,CAAvB,EAAqD;AACnDd,MAAAA,KAAK,CAAE,iCAAgCW,CAAC,CAACG,aAAc,EAAlD,CAAL;AACArB,MAAAA,KAAK,CAACsB,QAAN,CAAe;AACbC,QAAAA,IAAI,EAAG,qBADM;AAEbC,QAAAA,OAAO,EAAEN,CAAC,CAACO;AAFE,OAAf;AAIAvB,MAAAA,mBAAmB,CAACwB,4BAApB,CAAiD,CAACR,CAAC,CAACO,EAAH,CAAjD;AACD;AACF,GATD;AAUD,CAhBD;;AAkBA,MAAME,WAAW,GAAG,CAClB;AAAEf,EAAAA,UAAF;AAAcE,EAAAA;AAAd,CADkB,EAElBK,KAFkB,EAGlBS,SAHkB,KAIf;AACH;AACA;AACA,MAAIT,KAAK,CAACU,aAAV,EAAyB;AACvB,UAAMC,QAAQ,GAAGhB,qBAAqB,CAACiB,GAAtB,CAA0BZ,KAAK,CAACM,EAAhC,CAAjB;AACA,UAAMO,UAAU,GAAG,CAACF,QAApB,CAFuB,CAIvB;AACA;AACA;AACA;AACA;;AACA,QACEE,UAAU,IACVF,QAAQ,CAACG,IAAT,KAAkBd,KAAK,CAACc,IADxB,IAEAH,QAAQ,CAACI,IAAT,KAAkBf,KAAK,CAACe,IAH1B,EAIE;AACAhC,MAAAA,mBAAmB,CAACiC,kBAApB,CAAuC;AACrCV,QAAAA,EAAE,EAAEN,KAAK,CAACM,EAD2B;AAErCW,QAAAA,IAAI,EAAEjB,KAAK,CAACiB,IAFyB;AAGrCf,QAAAA,aAAa,EAAEF,KAAK,CAACrB,IAHgB;AAIrCqB,QAAAA,KAAK,EAAEA,KAAK,CAACe,IAJwB;AAKrCD,QAAAA,IAAI,EAAEd,KAAK,CAACc;AALyB,OAAvC;AAQA1B,MAAAA,KAAK,CACF,mBAAkBqB,SAAU,IAC3BI,UAAU,GAAI,WAAJ,GAAkB,aAC7B,GAHE,CAAL;AAMA9B,MAAAA,mBAAmB,CAACwB,4BAApB,CAAiD,CAACP,KAAK,CAACM,EAAP,CAAjD;AACAnB,MAAAA,WAAW,CAAC+B,uBAAZ,CAAoClB,KAAK,CAACM,EAA1C;AACD;;AACD,WAAO,IAAP;AACD;;AAED,SAAO,KAAP;AACD,CA1CD;;AA4CA,MAAMa,wBAAwB,GAAGC,UAAU,IAAI;AAC7C,QAAM5B,QAAQ,GAAGH,kBAAkB,EAAnC;AACA,SAAOL,aAAa,GAAGqC,IAAhB,CAAqBxB,OAAO,IAAI;AACrC;AACA;AACA;AACA;AACA,QAAI,CAACA,OAAD,IAAYA,OAAO,CAACyB,IAAR,KAAiB,CAAjC,EAAoC;AAClC,aAAO,IAAP;AACD;;AACD1B,IAAAA,kCAAkC,CAACJ,QAAD,EAAWK,OAAX,CAAlC,CARqC,CAUrC;;AAVqC,UAW7BJ,UAX6B,GAWdD,QAXc,CAW7BC,UAX6B;AAYrCA,IAAAA,UAAU,CAACK,OAAX,CAAmBC,CAAC;AAAA;;AAAA,aAClBhB,mBAAmB,CAACwC,cAApB,CAAmC;AACjCrB,QAAAA,aAAa,EAAEH,CAAC,CAACG,aADgB;AAEjCF,QAAAA,KAAK,EAAE,iBAAAH,OAAO,CAACe,GAAR,CAAYb,CAAC,CAACG,aAAd,+DAA8Ba,IAA9B,KAAuC;AAFb,OAAnC,CADkB;AAAA,KAApB;AAOA,QAAIS,iBAAiB,GAAG,KAAxB;AACA3B,IAAAA,OAAO,CAACC,OAAR,CAAgB,CAACE,KAAD,EAAQS,SAAR,KAAsB;AACpC,YAAMgB,YAAY,GAAGjB,WAAW,CAAChB,QAAD,EAAWQ,KAAX,EAAkBS,SAAlB,CAAhC;;AAEA,UAAIgB,YAAJ,EAAkB;AAChBC,QAAAA,cAAc,CAACjB,SAAD,CAAd,CADgB,CAEhB;AACA;AACA;AACD,OALD,MAKO,IAAIW,UAAU,IAAI,CAAC5B,QAAQ,CAACC,UAAT,CAAoBQ,GAApB,CAAwBQ,SAAxB,CAAnB,EAAuD;AAC5DvB,QAAAA,MAAM,CAACyC,IAAP,CACG,gDAA+ClB,SAAU,oBAD5D;AAGAe,QAAAA,iBAAiB,GAAG,IAApB;AACD;AACF,KAdD;;AAgBA,QAAIA,iBAAJ,EAAuB;AACrBtC,MAAAA,MAAM,CAAC0C,GAAP,CAAW1C,MAAM,CAAC2C,WAAY;;;;;;;;;;;;;;OAA9B;AAeD;;AAED1C,IAAAA,WAAW,CAAC2C,UAAZ;AAEA,WAAO,IAAP;AACD,GAzDM,CAAP;AA0DD,CA5DD;AA8DA;;;;;AAGA,MAAMC,uBAAuB,GAAG,MAAM;AAAA,0BACNlD,KAAK,CAACU,QAAN,EADM;AAAA,QAC5BE,UAD4B,mBAC5BA,UAD4B;AAAA,QAChBuC,KADgB,mBAChBA,KADgB;;AAGpC,QAAMC,eAAe,GAAG,IAAIC,GAAJ,EAAxB;AACAF,EAAAA,KAAK,CAAClC,OAAN,CAAcqC,IAAI,IAAI;AACpB;AACAF,IAAAA,eAAe,CAACG,GAAhB,CAAoBxD,KAAK,CAACuD,IAAI,CAAC1B,SAAN,CAAzB;AACD,GAHD;AAKAhB,EAAAA,UAAU,CAACK,OAAX,CAAmBW,SAAS,IAAI;AAC9B,QAAI,CAACwB,eAAe,CAAChC,GAAhB,CAAoBQ,SAAS,CAACP,aAA9B,CAAL,EAAmD;AACjDd,MAAAA,KAAK,CACF,GACCqB,SAAS,CAACP,aACX,0DAHE,CAAL;AAKArB,MAAAA,KAAK,CAACsB,QAAN,CAAe;AACbC,QAAAA,IAAI,EAAG,2BADM;AAEbC,QAAAA,OAAO,EAAEI;AAFI,OAAf;AAID;AACF,GAZD;AAaD,CAtBD;;AAwBA4B,OAAO,CAACC,cAAR,GAAyB,MAAM;AAC7B;AACA;AACA;AACA;AACAP,EAAAA,uBAAuB;AAEvB,SAAOZ,wBAAwB,CAAC,IAAD,CAAxB,CAA+BE,IAA/B,CAAoC,MAAM;AAC/C;AACA;AACA,QAAIkB,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAA0B,YAA9B,EAA2C;AACzCC,MAAAA,KAAK,CAAC7D,KAAK,CAACU,QAAN,GAAiBoD,OAAjB,CAAyBC,SAA1B,CAAL;AACD;AACF,GANM,CAAP;AAOD,CAdD;;AAgBA,MAAMC,4BAA4B,GAAG3C,aAAa,IAAI;AACpD,QAAM8B,KAAK,GAAGc,oBAAoB,CAAC5C,aAAD,CAAlC,CADoD,CAEpD;AACA;AACA;;AACAnB,EAAAA,mBAAmB,CAACwB,4BAApB,CACEyB,KAAK,CAACe,GAAN,CAAUC,CAAC,IAAIA,CAAC,CAACrE,IAAF,IAAUqE,CAAC,CAAC1C,EAA3B,CADF;AAGA0B,EAAAA,KAAK,CAAClC,OAAN,CAAcqC,IAAI,IAAIhD,WAAW,CAAC+B,uBAAZ,CAAoCiB,IAAI,CAACxD,IAAzC,CAAtB;AACAQ,EAAAA,WAAW,CAAC2C,UAAZ;AACD,CAVD;;AAYA,MAAMmB,eAAe,GAAGtE,IAAI,IAAI;AAC9BQ,EAAAA,WAAW,CAAC+B,uBAAZ,CAAoCvC,IAApC;AACAQ,EAAAA,WAAW,CAAC2C,UAAZ;AACD,CAHD;;AAKAO,OAAO,CAACQ,4BAAR,GAAuCA,4BAAvC;AACAR,OAAO,CAACY,eAAR,GAA0BA,eAA1B;;AAEA,MAAMH,oBAAoB,GAAG5C,aAAa,IAAI;AAC5C,QAAMZ,KAAK,GAAGT,KAAK,CAACU,QAAN,EAAd;AACA,SAAO,CAAC,GAAGD,KAAK,CAAC0C,KAAN,CAAYkB,MAAZ,EAAJ,EAA0BC,MAA1B,CACLH,CAAC,IAAIA,CAAC,CAAC9C,aAAF,KAAoBA,aADpB,CAAP;AAGD,CALD;;AAOA,MAAMkD,YAAY,GAAG,IAAIlB,GAAJ,EAArB;AACA,IAAImB,OAAJ;;AACA,MAAM3B,cAAc,GAAGxB,aAAa,IAAI;AACtC;AACA;AACA;AACA;AACA,MACEqC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAA0B,YAA1B,IACA,CAACW,YAAY,CAACnD,GAAb,CAAiBC,aAAjB,CAFH,EAGE;AACAkD,IAAAA,YAAY,CAAChB,GAAb,CAAiBlC,aAAjB;;AACA,QAAImD,OAAJ,EAAa;AACXA,MAAAA,OAAO,CAACjB,GAAR,CAAYlC,aAAZ;AACD;AACF;AACF,CAdD;;AAgBA,MAAMoD,eAAe,GAAG9E,CAAC,CAAC+E,QAAF,CAAW,MAAM;AACvCpC,EAAAA,wBAAwB;AACzB,CAFuB,EAErB,GAFqB,CAAxB;;AAIAkB,OAAO,CAACX,cAAR,GAAyBA,cAAzB;AACAW,OAAO,CAACiB,eAAR,GAA0BA,eAA1B;;AAEA,MAAMZ,KAAK,GAAGc,OAAO,IAAI;AACvB,MAAIH,OAAJ,EAAa;AAEbA,EAAAA,OAAO,GAAG3E,QAAQ,CACfgE,KADO,CACD9D,KAAK,CAACD,IAAI,CAAC8E,IAAL,CAAUD,OAAV,EAAoB,2BAApB,CAAD,CADJ,EAEPE,EAFO,CAEH,QAFG,EAEM/E,IAAI,IAAI;AACpB2E,IAAAA,eAAe;AAChB,GAJO,CAAV;AAMAF,EAAAA,YAAY,CAACtD,OAAb,CAAqB6D,QAAQ,IAAIN,OAAO,CAACjB,GAAR,CAAYuB,QAAZ,CAAjC;AACD,CAVD;;AAYAtB,OAAO,CAACuB,oBAAR,GAA+B,MAAM;AACnC9E,EAAAA,OAAO,CAAC4E,EAAR,CAAY,aAAZ,EAA0BG,MAAM,IAAI;AAClC,UAAM3D,aAAa,GAAGtB,KAAK,CAACiF,MAAM,CAACxD,OAAP,CAAeI,SAAhB,CAA3B;;AADkC,6BAEhB5B,KAAK,CAACU,QAAN,EAFgB;AAAA,UAE1ByC,KAF0B,oBAE1BA,KAF0B;;AAGlC,QAAI8B,2BAA2B,GAAG,KAAlC;;AACA,yBAAiB9B,KAAK,CAACkB,MAAN,EAAjB,kHAAiC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,UAAxBf,IAAwB;;AAC/B,UAAIvD,KAAK,CAACuD,IAAI,CAAC1B,SAAN,CAAL,KAA0BP,aAA9B,EAA6C;AAC3C4D,QAAAA,2BAA2B,GAAG,IAA9B;AACA;AACD;AACF;;AACD,QAAI,CAACA,2BAAL,EAAkC;AAChCjF,MAAAA,KAAK,CAACsB,QAAN,CAAe;AACbC,QAAAA,IAAI,EAAG,2BADM;AAEbC,QAAAA,OAAO,EAAE;AACPH,UAAAA;AADO;AAFI,OAAf;AAMD;AACF,GAlBD;AAmBD,CApBD","sourcesContent":["/** *\n * Jobs of this module\n * - Maintain the list of components in the Redux store. So monitor new components\n *   and add/remove components.\n * - Watch components for query changes and extract these and update the store.\n * - Ensure all page queries are run as part of bootstrap and report back when\n *   this is done\n * - Whenever a query changes, re-run all pages that rely on this query.\n ***/\n\nconst _ = require(`lodash`)\nconst chokidar = require(`chokidar`)\nconst path = require(`path`)\nconst slash = require(`slash`)\n\nconst { store, emitter } = require(`../redux/`)\nconst { boundActionCreators } = require(`../redux/actions`)\nconst queryCompiler = require(`./query-compiler`).default\nconst report = require(`gatsby-cli/lib/reporter`)\nconst queryRunner = require(`./index`)\nconst debug = require(`debug`)(`gatsby:query-watcher`)\n\nconst getQueriesSnapshot = () => {\n  const state = store.getState()\n\n  const snapshot = {\n    components: new Map(state.components),\n    staticQueryComponents: new Map(state.staticQueryComponents),\n  }\n\n  return snapshot\n}\n\nconst handleComponentsWithRemovedQueries = (\n  { components, staticQueryComponents },\n  queries\n) => {\n  // If a component had static query and it doesn't have it\n  // anymore - update the store\n  staticQueryComponents.forEach(c => {\n    if (c.query !== `` && !queries.has(c.componentPath)) {\n      debug(`Static query was removed from ${c.componentPath}`)\n      store.dispatch({\n        type: `REMOVE_STATIC_QUERY`,\n        payload: c.id,\n      })\n      boundActionCreators.deleteComponentsDependencies([c.id])\n    }\n  })\n}\n\nconst handleQuery = (\n  { components, staticQueryComponents },\n  query,\n  component\n) => {\n  // If this is a static query\n  // Add action / reducer + watch staticquery files\n  if (query.isStaticQuery) {\n    const oldQuery = staticQueryComponents.get(query.id)\n    const isNewQuery = !oldQuery\n\n    // Compare query text because text is compiled query with any attached\n    // fragments and we want to rerun queries if fragments are edited.\n    // Compare hash because hash is used for identyfing query and\n    // passing data to component in development. Hash can change if user will\n    // format query text, but it doesn't mean that compiled text will change.\n    if (\n      isNewQuery ||\n      oldQuery.hash !== query.hash ||\n      oldQuery.text !== query.text\n    ) {\n      boundActionCreators.replaceStaticQuery({\n        id: query.id,\n        name: query.name,\n        componentPath: query.path,\n        query: query.text,\n        hash: query.hash,\n      })\n\n      debug(\n        `Static query in ${component} ${\n          isNewQuery ? `was added` : `has changed`\n        }.`\n      )\n\n      boundActionCreators.deleteComponentsDependencies([query.id])\n      queryRunner.enqueueExtractedQueryId(query.id)\n    }\n    return true\n  }\n\n  return false\n}\n\nconst updateStateAndRunQueries = isFirstRun => {\n  const snapshot = getQueriesSnapshot()\n  return queryCompiler().then(queries => {\n    // If there's an error while extracting queries, the queryCompiler returns false\n    // or zero results.\n    // Yeah, should probably be an error but don't feel like threading the error\n    // all the way here.\n    if (!queries || queries.size === 0) {\n      return null\n    }\n    handleComponentsWithRemovedQueries(snapshot, queries)\n\n    // Run action for each component\n    const { components } = snapshot\n    components.forEach(c =>\n      boundActionCreators.queryExtracted({\n        componentPath: c.componentPath,\n        query: queries.get(c.componentPath)?.text || ``,\n      })\n    )\n\n    let queriesWillNotRun = false\n    queries.forEach((query, component) => {\n      const queryWillRun = handleQuery(snapshot, query, component)\n\n      if (queryWillRun) {\n        watchComponent(component)\n        // Check if this is a page component.\n        // If it is and this is our first run during bootstrap,\n        // show a warning about having a query in a non-page component.\n      } else if (isFirstRun && !snapshot.components.has(component)) {\n        report.warn(\n          `The GraphQL query in the non-page component \"${component}\" will not be run.`\n        )\n        queriesWillNotRun = true\n      }\n    })\n\n    if (queriesWillNotRun) {\n      report.log(report.stripIndent`\n\n        Exported queries are only executed for Page components. It's possible you're\n        trying to create pages in your gatsby-node.js and that's failing for some\n        reason.\n\n        If the failing component(s) is a regular component and not intended to be a page\n        component, you generally want to use a <StaticQuery> (https://gatsbyjs.org/docs/static-query)\n        instead of exporting a page query.\n\n        If you're more experienced with GraphQL, you can also export GraphQL\n        fragments from components and compose the fragments in the Page component\n        query and pass data down into the child component — http://graphql.org/learn/queries/#fragments\n\n      `)\n    }\n\n    queryRunner.runQueries()\n\n    return null\n  })\n}\n\n/**\n * Removes components templates that aren't used by any page from redux store.\n */\nconst clearInactiveComponents = () => {\n  const { components, pages } = store.getState()\n\n  const activeTemplates = new Set()\n  pages.forEach(page => {\n    // Set will guarantee uniqeness of entires\n    activeTemplates.add(slash(page.component))\n  })\n\n  components.forEach(component => {\n    if (!activeTemplates.has(component.componentPath)) {\n      debug(\n        `${\n          component.componentPath\n        } component was removed because it isn't used by any page`\n      )\n      store.dispatch({\n        type: `REMOVE_TEMPLATE_COMPONENT`,\n        payload: component,\n      })\n    }\n  })\n}\n\nexports.extractQueries = () => {\n  // Remove template components that point to not existing page templates.\n  // We need to do this, because components data is cached and there might\n  // be changes applied when development server isn't running. This is needed\n  // only in initial run, because during development state will be adjusted.\n  clearInactiveComponents()\n\n  return updateStateAndRunQueries(true).then(() => {\n    // During development start watching files to recompile & run\n    // queries on the fly.\n    if (process.env.NODE_ENV !== `production`) {\n      watch(store.getState().program.directory)\n    }\n  })\n}\n\nconst queueQueriesForPageComponent = componentPath => {\n  const pages = getPagesForComponent(componentPath)\n  // Remove page data dependencies before re-running queries because\n  // the changing of the query could have changed the data dependencies.\n  // Re-running the queries will add back data dependencies.\n  boundActionCreators.deleteComponentsDependencies(\n    pages.map(p => p.path || p.id)\n  )\n  pages.forEach(page => queryRunner.enqueueExtractedQueryId(page.path))\n  queryRunner.runQueries()\n}\n\nconst runQueryForPage = path => {\n  queryRunner.enqueueExtractedQueryId(path)\n  queryRunner.runQueries()\n}\n\nexports.queueQueriesForPageComponent = queueQueriesForPageComponent\nexports.runQueryForPage = runQueryForPage\n\nconst getPagesForComponent = componentPath => {\n  const state = store.getState()\n  return [...state.pages.values()].filter(\n    p => p.componentPath === componentPath\n  )\n}\n\nconst filesToWatch = new Set()\nlet watcher\nconst watchComponent = componentPath => {\n  // We don't start watching until mid-way through the bootstrap so ignore\n  // new components being added until then. This doesn't affect anything as\n  // when extractQueries is called from bootstrap, we make sure that all\n  // components are being watched.\n  if (\n    process.env.NODE_ENV !== `production` &&\n    !filesToWatch.has(componentPath)\n  ) {\n    filesToWatch.add(componentPath)\n    if (watcher) {\n      watcher.add(componentPath)\n    }\n  }\n}\n\nconst debounceCompile = _.debounce(() => {\n  updateStateAndRunQueries()\n}, 100)\n\nexports.watchComponent = watchComponent\nexports.debounceCompile = debounceCompile\n\nconst watch = rootDir => {\n  if (watcher) return\n\n  watcher = chokidar\n    .watch(slash(path.join(rootDir, `/src/**/*.{js,jsx,ts,tsx}`)))\n    .on(`change`, path => {\n      debounceCompile()\n    })\n\n  filesToWatch.forEach(filePath => watcher.add(filePath))\n}\n\nexports.startWatchDeletePage = () => {\n  emitter.on(`DELETE_PAGE`, action => {\n    const componentPath = slash(action.payload.component)\n    const { pages } = store.getState()\n    let otherPageWithTemplateExists = false\n    for (let page of pages.values()) {\n      if (slash(page.component) === componentPath) {\n        otherPageWithTemplateExists = true\n        break\n      }\n    }\n    if (!otherPageWithTemplateExists) {\n      store.dispatch({\n        type: `REMOVE_TEMPLATE_COMPONENT`,\n        payload: {\n          componentPath,\n        },\n      })\n    }\n  })\n}\n"],"file":"query-watcher.js"}
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/query/queue.js b/node_modules/gatsby/dist/query/queue.js
deleted file mode 100644
index e9f59a5..0000000
--- a/node_modules/gatsby/dist/query/queue.js
+++ /dev/null
@@ -1,119 +0,0 @@
-"use strict";
-
-var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
-
-var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
-
-const Queue = require(`better-queue`);
-
-const FastMemoryStore = require(`../query/better-queue-custom-store`);
-
-const queryRunner = require(`../query/query-runner`);
-
-const websocketManager = require(`../utils/websocket-manager`);
-
-const createBaseOptions = () => {
-  return {
-    concurrent: 4,
-    store: FastMemoryStore()
-  };
-};
-
-const createBuildQueue = () => {
-  const handler = (queryJob, callback) => queryRunner(queryJob).then(result => callback(null, result)).catch(callback);
-
-  return new Queue(handler, createBaseOptions());
-};
-
-const createDevelopQueue = () => {
-  let queue;
-  const processing = new Set();
-  const waiting = new Map();
-  const queueOptions = Object.assign({}, createBaseOptions(), {
-    priority: (job, cb) => {
-      const activePaths = Array.from(websocketManager.activePaths.values());
-
-      if (job.id && activePaths.includes(job.id)) {
-        cb(null, 10);
-      } else {
-        cb(null, 1);
-      }
-    },
-    merge: (oldTask, newTask, cb) => {
-      cb(null, newTask);
-    },
-    // Filter out new query jobs if that query is already running.
-    // When the query finshes, it checks the waiting map and pushes
-    // another job to make sure all the user changes are captured.
-    filter: (job, cb) => {
-      if (processing.has(job.id)) {
-        waiting.set(job.id, job);
-        cb(`already running`);
-      } else {
-        cb(null, job);
-      }
-    }
-  });
-
-  const handler = (queryJob, callback) => {
-    queryRunner(queryJob).then(result => {
-      if (queryJob.isPage) {
-        websocketManager.emitPageData({
-          result,
-          id: queryJob.id
-        });
-      } else {
-        websocketManager.emitStaticQueryData({
-          result,
-          id: queryJob.id
-        });
-      }
-
-      processing.delete(queryJob.id);
-
-      if (waiting.has(queryJob.id)) {
-        queue.push(waiting.get(queryJob.id));
-        waiting.delete(queryJob.id);
-      }
-
-      callback(null, result);
-    }, error => callback(error));
-  };
-
-  queue = new Queue(handler, queueOptions);
-  return queue;
-};
-
-const pushJob = (queue, job) => new Promise((resolve, reject) => queue.push(job).on(`finish`, resolve).on(`failed`, reject));
-/**
- * Returns a promise that pushes jobs onto queue and resolves onces
- * they're all finished processing (or rejects if one or more jobs
- * fail)
- */
-
-
-const processBatch =
-/*#__PURE__*/
-function () {
-  var _ref = (0, _asyncToGenerator2.default)(function* (queue, jobs) {
-    let numJobs = jobs.length;
-
-    if (numJobs === 0) {
-      return Promise.resolve();
-    }
-
-    const runningJobs = jobs.map(job => pushJob(queue, job));
-    return yield Promise.all(runningJobs);
-  });
-
-  return function processBatch(_x, _x2) {
-    return _ref.apply(this, arguments);
-  };
-}();
-
-module.exports = {
-  createBuildQueue,
-  createDevelopQueue,
-  processBatch
-};
-//# sourceMappingURL=queue.js.map
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/query/queue.js.map b/node_modules/gatsby/dist/query/queue.js.map
deleted file mode 100644
index 4f31a7f..0000000
--- a/node_modules/gatsby/dist/query/queue.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"sources":["../../src/query/queue.js"],"names":["Queue","require","FastMemoryStore","queryRunner","websocketManager","createBaseOptions","concurrent","store","createBuildQueue","handler","queryJob","callback","then","result","catch","createDevelopQueue","queue","processing","Set","waiting","Map","queueOptions","priority","job","cb","activePaths","Array","from","values","id","includes","merge","oldTask","newTask","filter","has","set","isPage","emitPageData","emitStaticQueryData","delete","push","get","error","pushJob","Promise","resolve","reject","on","processBatch","jobs","numJobs","length","runningJobs","map","all","module","exports"],"mappings":"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","sourcesContent":["const Queue = require(`better-queue`)\nconst FastMemoryStore = require(`../query/better-queue-custom-store`)\nconst queryRunner = require(`../query/query-runner`)\nconst websocketManager = require(`../utils/websocket-manager`)\n\nconst createBaseOptions = () => {\n  return {\n    concurrent: 4,\n    store: FastMemoryStore(),\n  }\n}\n\nconst createBuildQueue = () => {\n  const handler = (queryJob, callback) =>\n    queryRunner(queryJob)\n      .then(result => callback(null, result))\n      .catch(callback)\n  return new Queue(handler, createBaseOptions())\n}\n\nconst createDevelopQueue = () => {\n  let queue\n  const processing = new Set()\n  const waiting = new Map()\n\n  const queueOptions = {\n    ...createBaseOptions(),\n    priority: (job, cb) => {\n      const activePaths = Array.from(websocketManager.activePaths.values())\n      if (job.id && activePaths.includes(job.id)) {\n        cb(null, 10)\n      } else {\n        cb(null, 1)\n      }\n    },\n    merge: (oldTask, newTask, cb) => {\n      cb(null, newTask)\n    },\n    // Filter out new query jobs if that query is already running.\n    // When the query finshes, it checks the waiting map and pushes\n    // another job to make sure all the user changes are captured.\n    filter: (job, cb) => {\n      if (processing.has(job.id)) {\n        waiting.set(job.id, job)\n        cb(`already running`)\n      } else {\n        cb(null, job)\n      }\n    },\n  }\n\n  const handler = (queryJob, callback) => {\n    queryRunner(queryJob).then(\n      result => {\n        if (queryJob.isPage) {\n          websocketManager.emitPageData({\n            result,\n            id: queryJob.id,\n          })\n        } else {\n          websocketManager.emitStaticQueryData({\n            result,\n            id: queryJob.id,\n          })\n        }\n\n        processing.delete(queryJob.id)\n        if (waiting.has(queryJob.id)) {\n          queue.push(waiting.get(queryJob.id))\n          waiting.delete(queryJob.id)\n        }\n        callback(null, result)\n      },\n      error => callback(error)\n    )\n  }\n\n  queue = new Queue(handler, queueOptions)\n  return queue\n}\n\nconst pushJob = (queue, job) =>\n  new Promise((resolve, reject) =>\n    queue\n      .push(job)\n      .on(`finish`, resolve)\n      .on(`failed`, reject)\n  )\n\n/**\n * Returns a promise that pushes jobs onto queue and resolves onces\n * they're all finished processing (or rejects if one or more jobs\n * fail)\n */\nconst processBatch = async (queue, jobs) => {\n  let numJobs = jobs.length\n  if (numJobs === 0) {\n    return Promise.resolve()\n  }\n  const runningJobs = jobs.map(job => pushJob(queue, job))\n  return await Promise.all(runningJobs)\n}\n\nmodule.exports = {\n  createBuildQueue,\n  createDevelopQueue,\n  processBatch,\n}\n"],"file":"queue.js"}
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/query/redirects-writer.js b/node_modules/gatsby/dist/query/redirects-writer.js
deleted file mode 100644
index 647cff8..0000000
--- a/node_modules/gatsby/dist/query/redirects-writer.js
+++ /dev/null
@@ -1,62 +0,0 @@
-"use strict";
-
-var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
-
-var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
-
-var _lodash = _interopRequireDefault(require("lodash"));
-
-var _crypto = _interopRequireDefault(require("crypto"));
-
-var _fsExtra = _interopRequireDefault(require("fs-extra"));
-
-var _redux = require("../redux/");
-
-var _path = require("../utils/path");
-
-let lastHash = null;
-
-const writeRedirects =
-/*#__PURE__*/
-function () {
-  var _ref = (0, _asyncToGenerator2.default)(function* () {
-    bootstrapFinished = true;
-
-    let _store$getState = _redux.store.getState(),
-        program = _store$getState.program,
-        redirects = _store$getState.redirects; // Filter for redirects that are meant for the browser.
-
-
-    const browserRedirects = redirects.filter(r => r.redirectInBrowser);
-
-    const newHash = _crypto.default.createHash(`md5`).update(JSON.stringify(browserRedirects)).digest(`hex`);
-
-    if (newHash === lastHash) {
-      return Promise.resolve();
-    }
-
-    lastHash = newHash;
-    return yield _fsExtra.default.writeFile((0, _path.joinPath)(program.directory, `.cache/redirects.json`), JSON.stringify(browserRedirects, null, 2));
-  });
-
-  return function writeRedirects() {
-    return _ref.apply(this, arguments);
-  };
-}();
-
-exports.writeRedirects = writeRedirects;
-let bootstrapFinished = false;
-let oldRedirects;
-
-const debouncedWriteRedirects = _lodash.default.debounce(() => {
-  // Don't write redirects again until bootstrap has finished.
-  if (bootstrapFinished && !_lodash.default.isEqual(oldRedirects, _redux.store.getState().redirects)) {
-    writeRedirects();
-    oldRedirects = _redux.store.getState().Redirects;
-  }
-}, 250);
-
-_redux.emitter.on(`CREATE_REDIRECT`, () => {
-  debouncedWriteRedirects();
-});
-//# sourceMappingURL=redirects-writer.js.map
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/query/redirects-writer.js.map b/node_modules/gatsby/dist/query/redirects-writer.js.map
deleted file mode 100644
index 4bd29e1..0000000
--- a/node_modules/gatsby/dist/query/redirects-writer.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"sources":["../../src/query/redirects-writer.js"],"names":["lastHash","writeRedirects","bootstrapFinished","store","getState","program","redirects","browserRedirects","filter","r","redirectInBrowser","newHash","crypto","createHash","update","JSON","stringify","digest","Promise","resolve","fs","writeFile","directory","exports","oldRedirects","debouncedWriteRedirects","_","debounce","isEqual","Redirects","emitter","on"],"mappings":";;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA,IAAIA,QAAQ,GAAG,IAAf;;AAEA,MAAMC,cAAc;AAAA;AAAA;AAAA,6CAAG,aAAY;AACjCC,IAAAA,iBAAiB,GAAG,IAApB;;AADiC,0BAGJC,aAAMC,QAAN,EAHI;AAAA,QAG3BC,OAH2B,mBAG3BA,OAH2B;AAAA,QAGlBC,SAHkB,mBAGlBA,SAHkB,EAKjC;;;AACA,UAAMC,gBAAgB,GAAGD,SAAS,CAACE,MAAV,CAAiBC,CAAC,IAAIA,CAAC,CAACC,iBAAxB,CAAzB;;AAEA,UAAMC,OAAO,GAAGC,gBACbC,UADa,CACD,KADC,EAEbC,MAFa,CAENC,IAAI,CAACC,SAAL,CAAeT,gBAAf,CAFM,EAGbU,MAHa,CAGL,KAHK,CAAhB;;AAKA,QAAIN,OAAO,KAAKX,QAAhB,EAA0B;AACxB,aAAOkB,OAAO,CAACC,OAAR,EAAP;AACD;;AAEDnB,IAAAA,QAAQ,GAAGW,OAAX;AAEA,iBAAaS,iBAAGC,SAAH,CACX,oBAAShB,OAAO,CAACiB,SAAjB,EAA6B,uBAA7B,CADW,EAEXP,IAAI,CAACC,SAAL,CAAeT,gBAAf,EAAiC,IAAjC,EAAuC,CAAvC,CAFW,CAAb;AAID,GAvBmB;;AAAA,kBAAdN,cAAc;AAAA;AAAA;AAAA,GAApB;;AAyBAsB,OAAO,CAACtB,cAAR,GAAyBA,cAAzB;AAEA,IAAIC,iBAAiB,GAAG,KAAxB;AACA,IAAIsB,YAAJ;;AACA,MAAMC,uBAAuB,GAAGC,gBAAEC,QAAF,CAAW,MAAM;AAC/C;AACA,MACEzB,iBAAiB,IACjB,CAACwB,gBAAEE,OAAF,CAAUJ,YAAV,EAAwBrB,aAAMC,QAAN,GAAiBE,SAAzC,CAFH,EAGE;AACAL,IAAAA,cAAc;AACduB,IAAAA,YAAY,GAAGrB,aAAMC,QAAN,GAAiByB,SAAhC;AACD;AACF,CAT+B,EAS7B,GAT6B,CAAhC;;AAWAC,eAAQC,EAAR,CAAY,iBAAZ,EAA8B,MAAM;AAClCN,EAAAA,uBAAuB;AACxB,CAFD","sourcesContent":["import _ from \"lodash\"\nimport crypto from \"crypto\"\nimport fs from \"fs-extra\"\nimport { store, emitter } from \"../redux/\"\nimport { joinPath } from \"../utils/path\"\n\nlet lastHash = null\n\nconst writeRedirects = async () => {\n  bootstrapFinished = true\n\n  let { program, redirects } = store.getState()\n\n  // Filter for redirects that are meant for the browser.\n  const browserRedirects = redirects.filter(r => r.redirectInBrowser)\n\n  const newHash = crypto\n    .createHash(`md5`)\n    .update(JSON.stringify(browserRedirects))\n    .digest(`hex`)\n\n  if (newHash === lastHash) {\n    return Promise.resolve()\n  }\n\n  lastHash = newHash\n\n  return await fs.writeFile(\n    joinPath(program.directory, `.cache/redirects.json`),\n    JSON.stringify(browserRedirects, null, 2)\n  )\n}\n\nexports.writeRedirects = writeRedirects\n\nlet bootstrapFinished = false\nlet oldRedirects\nconst debouncedWriteRedirects = _.debounce(() => {\n  // Don't write redirects again until bootstrap has finished.\n  if (\n    bootstrapFinished &&\n    !_.isEqual(oldRedirects, store.getState().redirects)\n  ) {\n    writeRedirects()\n    oldRedirects = store.getState().Redirects\n  }\n}, 250)\n\nemitter.on(`CREATE_REDIRECT`, () => {\n  debouncedWriteRedirects()\n})\n"],"file":"redirects-writer.js"}
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/redux/actions.js b/node_modules/gatsby/dist/redux/actions.js
index c15e77a..1a24e02 100644
--- a/node_modules/gatsby/dist/redux/actions.js
+++ b/node_modules/gatsby/dist/redux/actions.js
@@ -246,19 +246,15 @@ ${reservedFields.map(f => `  * "${f}"`).join(`\n`)}
     report.panic(`See the documentation for createPage https://www.gatsbyjs.org/docs/actions/#createPage`);
   }
 
-  let jsonName;
   let internalComponentName;
 
   if (page.path === `/`) {
-    jsonName = `index`;
     internalComponentName = `ComponentIndex`;
   } else {
-    jsonName = `${kebabHash(page.path)}`;
     internalComponentName = `Component${pascalCase(page.path)}`;
   }
 
   let internalPage = {
-    jsonName,
     internalComponentName,
     path: page.path,
     matchPath: page.matchPath,
@@ -311,12 +307,6 @@ ${reservedFields.map(f => `  * "${f}"`).join(`\n`)}
 
   const oldPage = store.getState().pages.get(internalPage.path);
   const contextModified = !!oldPage && !_.isEqual(oldPage.context, internalPage.context);
-  const alternateSlashPath = page.path.endsWith(`/`) ? page.path.slice(0, -1) : page.path + `/`;
-
-  if (store.getState().pages.has(alternateSlashPath)) {
-    report.warn(`Attempting to create page "${page.path}", but page "${alternateSlashPath}" already exists. This could lead to non-deterministic routing behavior`);
-  }
-
   return Object.assign({}, actionOptions, {
     type: `CREATE_PAGE`,
     contextModified,
@@ -356,23 +346,6 @@ actions.deleteNode = (options, plugin, args) => {
 
   const node = getNode(id);
 
-  if (plugin) {
-    const pluginName = plugin.name;
-    if (node && typeOwners[node.internal.type] !== pluginName) throw new Error(stripIndent`
-          The plugin "${pluginName}" deleted a node of a type owned by another plugin.
-
-          The node type "${node.internal.type}" is owned by "${typeOwners[node.internal.type]}".
-
-          The node object passed to "deleteNode":
-
-          ${JSON.stringify(node, null, 4)}
-
-          The plugin deleting the node:
-
-          ${JSON.stringify(plugin, null, 4)}
-        `);
-  }
-
   const createDeleteAction = node => {
     return {
       type: `DELETE_NODE`,
@@ -444,7 +417,7 @@ const typeOwners = {};
  * markdown transformers look for media types of
  * `text/markdown`.
  * @param {string} node.internal.type An arbitrary globally unique type
- * chosen by the plugin creating the node. Should be descriptive of the
+ * choosen by the plugin creating the node. Should be descriptive of the
  * node as the type is used in forming GraphQL types so users will query
  * for nodes based on the type choosen here. Nodes of a given type can
  * only be created by one plugin.
@@ -556,7 +529,7 @@ actions.createNode = (node, plugin, actionOptions = {}) => {
     `);
   }
 
-  node = trackInlineObjectsInRootNode(node, true);
+  trackInlineObjectsInRootNode(node);
   const oldNode = getNode(node.id); // Ensure the plugin isn't creating a node type owned by another
   // plugin. Type "ownership" is first come first served.
 
diff --git a/node_modules/gatsby/dist/redux/actions.js.map b/node_modules/gatsby/dist/redux/actions.js.map
index 19b8ad5..ee27e6e 100644
--- a/node_modules/gatsby/dist/redux/actions.js.map
+++ b/node_modules/gatsby/dist/redux/actions.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/redux/actions.js"],"names":["Joi","require","chalk","_","bindActionCreators","stripIndent","report","path","fs","truePath","url","kebabHash","slash","hasNodeChanged","getNode","trackInlineObjectsInRootNode","store","fileExistsSync","sync","joiSchemas","generateComponentChunkName","actions","findChildrenRecursively","children","concat","map","child","newChildren","isArray","length","deletePage","page","type","payload","pascalCase","flow","camelCase","upperFirst","hasWarnedForPageComponentInvalidContext","Set","hasWarnedForPageComponentInvalidCasing","pageComponentCache","fileOkCache","createPage","plugin","actionOptions","noPageOrComponent","name","message","process","env","NODE_ENV","console","log","bold","red","isObject","context","reservedFields","invalidFields","Object","keys","pick","singularMessage","pluralMessage","error","f","join","JSON","stringify","some","panic","has","component","warn","add","originalPageComponent","trueComponentPath","markers","split","letter","index","isAbsolute","jsonName","internalComponentName","internalPage","matchPath","componentChunkName","isCreatedByStatefulCreatePages","traceId","updatedAt","Date","now","includes","fileName","fileContent","readFileSync","notEmpty","includesDefaultExport","test","extname","relativePath","relative","getState","program","directory","panicOnBuild","oldPage","pages","get","contextModified","isEqual","alternateSlashPath","endsWith","slice","deleteNode","options","args","id","msg","node","pluginName","typeOwners","internal","Error","createDeleteAction","deleteAction","deleteDescendantsActions","deleteNodes","nodes","descendantNodes","flatten","n","deleteNodesAction","createNode","array","parent","owner","result","validate","nodeSchema","fields","oldNode","parentSpan","setTag","deleteActions","updateNodeAction","contentDigest","touchNode","nodeId","createNodeField","value","fieldName","fieldValue","fieldOwners","schemaFieldName","fieldOwner","createParentChildLink","push","uniq","createPageDependency","connection","deleteComponentsDependencies","paths","replaceComponentQuery","query","componentPath","replaceStaticQuery","setWebpackConfig","config","replaceWebpackConfig","setBabelOptions","exit","setBabelPlugin","setBabelPreset","createJob","job","setJob","endJob","setPluginStatus","status","maybeAddPathPrefix","pathPrefix","parsed","parse","isRelativeProtocol","startsWith","protocol","createRedirect","fromPath","isPermanent","redirectInBrowser","toPath","rest","prefixPaths","addThirdPartySchema","schema","createTypes","types","queryExtracted","queryExtractionGraphQLError","queryExtractedBabelSuccess","queryExtractionBabelError","setProgramStatus","pageQueryRun","isPage","exports","boundActionCreators","dispatch"],"mappings":"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","sourcesContent":["// @flow\nconst Joi = require(`joi`)\nconst chalk = require(`chalk`)\nconst _ = require(`lodash`)\nconst { bindActionCreators } = require(`redux`)\nconst { stripIndent } = require(`common-tags`)\nconst report = require(`gatsby-cli/lib/reporter`)\nconst path = require(`path`)\nconst fs = require(`fs`)\nconst truePath = require(`true-case-path`)\nconst url = require(`url`)\nconst kebabHash = require(`kebab-hash`)\nconst slash = require(`slash`)\nconst { hasNodeChanged, getNode } = require(`../db/nodes`)\nconst { trackInlineObjectsInRootNode } = require(`../db/node-tracking`)\nconst { store } = require(`./index`)\nconst fileExistsSync = require(`fs-exists-cached`).sync\nconst joiSchemas = require(`../joi-schemas/joi`)\nconst { generateComponentChunkName } = require(`../utils/js-chunk-names`)\n\nconst actions = {}\n\nconst findChildrenRecursively = (children = []) => {\n  children = children.concat(\n    ...children.map(child => {\n      const newChildren = getNode(child).children\n      if (_.isArray(newChildren) && newChildren.length > 0) {\n        return findChildrenRecursively(newChildren)\n      } else {\n        return []\n      }\n    })\n  )\n\n  return children\n}\n\ntype Job = {\n  id: string,\n}\ntype PageInput = {\n  path: string,\n  component: string,\n  context?: Object,\n}\n\ntype Page = {\n  path: string,\n  matchPath: ?string,\n  component: string,\n  context: Object,\n  internalComponentName: string,\n  jsonName: string,\n  componentChunkName: string,\n  updatedAt: number,\n}\n\ntype Plugin = {\n  name: string,\n}\n\ntype ActionOptions = {\n  traceId: ?string,\n  parentSpan: ?Object,\n  followsSpan: ?Object,\n}\n\n/**\n * Delete a page\n * @param {Object} page a page object\n * @param {string} page.path The path of the page\n * @param {string} page.component The absolute path to the page component\n * @example\n * deletePage(page)\n */\nactions.deletePage = (page: PageInput) => {\n  return {\n    type: `DELETE_PAGE`,\n    payload: page,\n  }\n}\n\nconst pascalCase = _.flow(\n  _.camelCase,\n  _.upperFirst\n)\nconst hasWarnedForPageComponentInvalidContext = new Set()\nconst hasWarnedForPageComponentInvalidCasing = new Set()\nconst pageComponentCache = {}\nconst fileOkCache = {}\n\n/**\n * Create a page. See [the guide on creating and modifying pages](/docs/creating-and-modifying-pages/)\n * for detailed documentation about creating pages.\n * @param {Object} page a page object\n * @param {string} page.path Any valid URL. Must start with a forward slash\n * @param {string} page.component The absolute path to the component for this page\n * @param {Object} page.context Context data for this page. Passed as props\n * to the component `this.props.pageContext` as well as to the graphql query\n * as graphql arguments.\n * @example\n * createPage({\n *   path: `/my-sweet-new-page/`,\n *   component: path.resolve(`./src/templates/my-sweet-new-page.js`),\n *   // The context is passed as props to the component as well\n *   // as into the component's GraphQL query.\n *   context: {\n *     id: `123456`,\n *   },\n * })\n */\nactions.createPage = (\n  page: PageInput,\n  plugin?: Plugin,\n  actionOptions?: ActionOptions\n) => {\n  let noPageOrComponent = false\n  let name = `The plugin \"${plugin.name}\"`\n  if (plugin.name === `default-site-plugin`) {\n    name = `Your site's \"gatsby-node.js\"`\n  }\n  if (!page.path) {\n    const message = `${name} must set the page path when creating a page`\n    // Don't log out when testing\n    if (process.env.NODE_ENV !== `test`) {\n      console.log(chalk.bold.red(message))\n      console.log(``)\n      console.log(page)\n    } else {\n      return message\n    }\n    noPageOrComponent = true\n  }\n\n  // Validate that the context object doesn't overlap with any core page fields\n  // as this will cause trouble when running graphql queries.\n  if (_.isObject(page.context)) {\n    const reservedFields = [\n      `path`,\n      `matchPath`,\n      `component`,\n      `componentChunkName`,\n      `pluginCreator___NODE`,\n      `pluginCreatorId`,\n    ]\n    const invalidFields = Object.keys(_.pick(page.context, reservedFields))\n\n    const singularMessage = `${name} used a reserved field name in the context object when creating a page:`\n    const pluralMessage = `${name} used reserved field names in the context object when creating a page:`\n    if (invalidFields.length > 0) {\n      const error = `${\n        invalidFields.length === 1 ? singularMessage : pluralMessage\n      }\n\n${invalidFields.map(f => `  * \"${f}\"`).join(`\\n`)}\n\n${JSON.stringify(page, null, 4)}\n\nData in \"context\" is passed to GraphQL as potential arguments when running the\npage query.\n\nWhen arguments for GraphQL are constructed, the context object is combined with\nthe page object so *both* page object and context data are available as\narguments. So you don't need to add the page \"path\" to the context as it's\nalready available in GraphQL. If a context field duplicates a field already\nused by the page object, this can break functionality within Gatsby so must be\navoided.\n\nPlease choose another name for the conflicting fields.\n\nThe following fields are used by the page object and should be avoided.\n\n${reservedFields.map(f => `  * \"${f}\"`).join(`\\n`)}\n\n            `\n      if (process.env.NODE_ENV === `test`) {\n        return error\n        // Only error if the context version is different than the page\n        // version.  People in v1 often thought that they needed to also pass\n        // the path to context for it to be available in GraphQL\n      } else if (invalidFields.some(f => page.context[f] !== page[f])) {\n        report.panic(error)\n      } else {\n        if (!hasWarnedForPageComponentInvalidContext.has(page.component)) {\n          report.warn(error)\n          hasWarnedForPageComponentInvalidContext.add(page.component)\n        }\n      }\n    }\n  }\n\n  // Don't check if the component exists during tests as we use a lot of fake\n  // component paths.\n  if (process.env.NODE_ENV !== `test`) {\n    if (!fileExistsSync(page.component)) {\n      const message = `${name} created a page with a component that doesn't exist. Missing component is ${\n        page.component\n      }`\n      console.log(``)\n      console.log(chalk.bold.red(message))\n      console.log(``)\n      console.log(page)\n      noPageOrComponent = true\n    } else if (page.component) {\n      // check if we've processed this component path\n      // before, before running the expensive \"truePath\"\n      // operation\n      if (pageComponentCache[page.component]) {\n        page.component = pageComponentCache[page.component]\n      } else {\n        const originalPageComponent = page.component\n\n        // normalize component path\n        page.component = slash(page.component)\n        // check if path uses correct casing - incorrect casing will\n        // cause issues in query compiler and inconsistencies when\n        // developing on Mac or Windows and trying to deploy from\n        // linux CI/CD pipeline\n        const trueComponentPath = slash(truePath(page.component))\n        if (trueComponentPath !== page.component) {\n          if (!hasWarnedForPageComponentInvalidCasing.has(page.component)) {\n            const markers = page.component\n              .split(``)\n              .map((letter, index) => {\n                if (letter !== trueComponentPath[index]) {\n                  return `^`\n                }\n                return ` `\n              })\n              .join(``)\n\n            report.warn(\n              stripIndent`\n            ${name} created a page with a component path that doesn't match the casing of the actual file. This may work locally, but will break on systems which are case-sensitive, e.g. most CI/CD pipelines.\n\n            page.component:     \"${page.component}\"\n            path in filesystem: \"${trueComponentPath}\"\n                                 ${markers}\n          `\n            )\n            hasWarnedForPageComponentInvalidCasing.add(page.component)\n          }\n\n          page.component = trueComponentPath\n        }\n        pageComponentCache[originalPageComponent] = page.component\n      }\n    }\n  }\n\n  if (!page.component || !path.isAbsolute(page.component)) {\n    const message = `${name} must set the absolute path to the page component when create creating a page`\n    // Don't log out when testing\n    if (process.env.NODE_ENV !== `test`) {\n      console.log(``)\n      console.log(chalk.bold.red(message))\n      console.log(``)\n      console.log(page)\n    } else {\n      return message\n    }\n    noPageOrComponent = true\n  }\n\n  if (noPageOrComponent) {\n    report.panic(\n      `See the documentation for createPage https://www.gatsbyjs.org/docs/actions/#createPage`\n    )\n  }\n\n  let jsonName\n  let internalComponentName\n  if (page.path === `/`) {\n    jsonName = `index`\n    internalComponentName = `ComponentIndex`\n  } else {\n    jsonName = `${kebabHash(page.path)}`\n    internalComponentName = `Component${pascalCase(page.path)}`\n  }\n\n  let internalPage: Page = {\n    jsonName,\n    internalComponentName,\n    path: page.path,\n    matchPath: page.matchPath,\n    component: page.component,\n    componentChunkName: generateComponentChunkName(page.component),\n    isCreatedByStatefulCreatePages:\n      actionOptions &&\n      actionOptions.traceId === `initial-createPagesStatefully`,\n    // Ensure the page has a context object\n    context: page.context || {},\n    updatedAt: Date.now(),\n  }\n\n  // If the path doesn't have an initial forward slash, add it.\n  if (internalPage.path[0] !== `/`) {\n    internalPage.path = `/${internalPage.path}`\n  }\n\n  // Validate that the page component imports React and exports something\n  // (hopefully a component).\n  //\n  // Only run validation once during builds.\n  if (\n    !internalPage.component.includes(`/.cache/`) &&\n    (process.env.NODE_ENV === `production` &&\n      !fileOkCache[internalPage.component])\n  ) {\n    const fileName = internalPage.component\n    const fileContent = fs.readFileSync(fileName, `utf-8`)\n    let notEmpty = true\n    let includesDefaultExport = true\n\n    if (fileContent === ``) {\n      notEmpty = false\n    }\n\n    if (\n      !fileContent.includes(`export default`) &&\n      !fileContent.includes(`module.exports`) &&\n      !fileContent.includes(`exports.default`) &&\n      // this check only applies to js and ts, not mdx\n      /\\.(jsx?|tsx?)/.test(path.extname(fileName))\n    ) {\n      includesDefaultExport = false\n    }\n    if (!notEmpty || !includesDefaultExport) {\n      const relativePath = path.relative(\n        store.getState().program.directory,\n        fileName\n      )\n\n      if (!notEmpty) {\n        report.panicOnBuild(\n          `You have an empty file in the \"src/pages\" directory at \"${relativePath}\". Please remove it or make it a valid component`\n        )\n      }\n\n      if (!includesDefaultExport) {\n        report.panicOnBuild(\n          `[${fileName}] The page component must export a React component for it to be valid`\n        )\n      }\n    }\n\n    fileOkCache[internalPage.component] = true\n  }\n\n  const oldPage: Page = store.getState().pages.get(internalPage.path)\n  const contextModified =\n    !!oldPage && !_.isEqual(oldPage.context, internalPage.context)\n\n  const alternateSlashPath = page.path.endsWith(`/`)\n    ? page.path.slice(0, -1)\n    : page.path + `/`\n\n  if (store.getState().pages.has(alternateSlashPath)) {\n    report.warn(\n      `Attempting to create page \"${\n        page.path\n      }\", but page \"${alternateSlashPath}\" already exists. This could lead to non-deterministic routing behavior`\n    )\n  }\n\n  return {\n    ...actionOptions,\n    type: `CREATE_PAGE`,\n    contextModified,\n    plugin,\n    payload: internalPage,\n  }\n}\n\n/**\n * Delete a node\n * @param {object} $0\n * @param {object} $0.node the node object\n * @example\n * deleteNode({node: node})\n */\nactions.deleteNode = (options: any, plugin: Plugin, args: any) => {\n  let id\n\n  // Check if using old method signature. Warn about incorrect usage but get\n  // node from nodeID anyway.\n  if (typeof options === `string`) {\n    let msg =\n      `Calling \"deleteNode\" with a nodeId is deprecated. Please pass an ` +\n      `object containing a full node instead: deleteNode({ node }).`\n    if (args && args.name) {\n      // `plugin` used to be the third argument\n      plugin = args\n      msg = msg + ` \"deleteNode\" was called by ${plugin.name}`\n    }\n    report.warn(msg)\n\n    id = options\n  } else {\n    id = options && options.node && options.node.id\n  }\n\n  // Always get node from the store, as the node we get as an arg\n  // might already have been deleted.\n  const node = getNode(id)\n  if (plugin) {\n    const pluginName = plugin.name\n\n    if (node && typeOwners[node.internal.type] !== pluginName)\n      throw new Error(stripIndent`\n          The plugin \"${pluginName}\" deleted a node of a type owned by another plugin.\n\n          The node type \"${node.internal.type}\" is owned by \"${\n        typeOwners[node.internal.type]\n      }\".\n\n          The node object passed to \"deleteNode\":\n\n          ${JSON.stringify(node, null, 4)}\n\n          The plugin deleting the node:\n\n          ${JSON.stringify(plugin, null, 4)}\n        `)\n  }\n\n  const createDeleteAction = node => {\n    return {\n      type: `DELETE_NODE`,\n      plugin,\n      payload: node,\n    }\n  }\n\n  const deleteAction = createDeleteAction(node)\n\n  // It's possible the file node was never created as sometimes tools will\n  // write and then immediately delete temporary files to the file system.\n  const deleteDescendantsActions =\n    node &&\n    findChildrenRecursively(node.children)\n      .map(getNode)\n      .map(createDeleteAction)\n\n  if (deleteDescendantsActions && deleteDescendantsActions.length) {\n    return [...deleteDescendantsActions, deleteAction]\n  } else {\n    return deleteAction\n  }\n}\n\n/**\n * Batch delete nodes\n * @param {Array} nodes an array of node ids\n * @example\n * deleteNodes([`node1`, `node2`])\n */\nactions.deleteNodes = (nodes: any[], plugin: Plugin) => {\n  let msg =\n    `The \"deleteNodes\" action is now deprecated and will be removed in ` +\n    `Gatsby v3. Please use \"deleteNode\" instead.`\n  if (plugin && plugin.name) {\n    msg = msg + ` \"deleteNodes\" was called by ${plugin.name}`\n  }\n  report.warn(msg)\n\n  // Also delete any nodes transformed from these.\n  const descendantNodes = _.flatten(\n    nodes.map(n => findChildrenRecursively(getNode(n).children))\n  )\n\n  const deleteNodesAction = {\n    type: `DELETE_NODES`,\n    plugin,\n    payload: [...nodes, ...descendantNodes],\n  }\n  return deleteNodesAction\n}\n\nconst typeOwners = {}\n/**\n * Create a new node.\n * @param {Object} node a node object\n * @param {string} node.id The node's ID. Must be globally unique.\n * @param {string} node.parent The ID of the parent's node. If the node is\n * derived from another node, set that node as the parent. Otherwise it can\n * just be `null`.\n * @param {Array} node.children An array of children node IDs. If you're\n * creating the children nodes while creating the parent node, add the\n * children node IDs here directly. If you're adding a child node to a\n * parent node created by a plugin, you can't mutate this value directly\n * to add your node id, instead use the action creator `createParentChildLink`.\n * @param {Object} node.internal node fields that aren't generally\n * interesting to consumers of node data but are very useful for plugin writers\n * and Gatsby core.\n * @param {string} node.internal.mediaType An optional field to indicate to\n * transformer plugins that your node has raw content they can transform.\n * Use either an official media type (we use mime-db as our source\n * (https://www.npmjs.com/package/mime-db) or a made-up one if your data\n * doesn't fit in any existing bucket. Transformer plugins use node media types\n * for deciding if they should transform a node into a new one. E.g.\n * markdown transformers look for media types of\n * `text/markdown`.\n * @param {string} node.internal.type An arbitrary globally unique type\n * chosen by the plugin creating the node. Should be descriptive of the\n * node as the type is used in forming GraphQL types so users will query\n * for nodes based on the type choosen here. Nodes of a given type can\n * only be created by one plugin.\n * @param {string} node.internal.content An optional field. This is rarely\n * used. It is used when a source plugin sources data it doesn't know how\n * to transform e.g. a markdown string pulled from an API. The source plugin\n * can defer the transformation to a specialized transformer plugin like\n * gatsby-transformer-remark. This `content` field holds the raw content\n * (so for the markdown case, the markdown string).\n *\n * Data that's already structured should be added to the top-level of the node\n * object and _not_ added here. You should not `JSON.stringify` your node's\n * data here.\n *\n * If the content is very large and can be lazy-loaded, e.g. a file on disk,\n * you can define a `loadNodeContent` function for this node and the node\n * content will be lazy loaded when it's needed.\n * @param {string} node.internal.contentDigest the digest for the content\n * of this node. Helps Gatsby avoid doing extra work on data that hasn't\n * changed.\n * @param {string} node.internal.description An optional field. Human\n * readable description of what this node represent / its source. It will\n * be displayed when type conflicts are found, making it easier to find\n * and correct type conflicts.\n * @example\n * createNode({\n *   // Data for the node.\n *   field1: `a string`,\n *   field2: 10,\n *   field3: true,\n *   ...arbitraryOtherData,\n *\n *   // Required fields.\n *   id: `a-node-id`,\n *   parent: `the-id-of-the-parent-node`, // or null if it's a source node without a parent\n *   children: [],\n *   internal: {\n *     type: `CoolServiceMarkdownField`,\n *     contentDigest: crypto\n *       .createHash(`md5`)\n *       .update(JSON.stringify(fieldData))\n *       .digest(`hex`),\n *     mediaType: `text/markdown`, // optional\n *     content: JSON.stringify(fieldData), // optional\n *     description: `Cool Service: \"Title of entry\"`, // optional\n *   }\n * })\n */\nactions.createNode = (\n  node: any,\n  plugin?: Plugin,\n  actionOptions?: ActionOptions = {}\n) => {\n  if (!_.isObject(node)) {\n    return console.log(\n      chalk.bold.red(\n        `The node passed to the \"createNode\" action creator must be an object`\n      )\n    )\n  }\n\n  // Ensure the new node has an internals object.\n  if (!node.internal) {\n    node.internal = {}\n  }\n\n  // Ensure the new node has a children array.\n  if (!node.array && !_.isArray(node.children)) {\n    node.children = []\n  }\n\n  // Ensure the new node has a parent field\n  if (!node.parent) {\n    node.parent = null\n  }\n\n  // Tell user not to set the owner name themself.\n  if (node.internal.owner) {\n    report.error(JSON.stringify(node, null, 4))\n    report.panic(\n      chalk.bold.red(\n        `The node internal.owner field is set automatically by Gatsby and not by plugins`\n      )\n    )\n  }\n\n  // Add the plugin name to the internal object.\n  if (plugin) {\n    node.internal.owner = plugin.name\n  }\n\n  const result = Joi.validate(node, joiSchemas.nodeSchema)\n  if (result.error) {\n    console.log(chalk.bold.red(`The new node didn't pass validation`))\n    console.log(chalk.bold.red(result.error))\n    console.log(node)\n    return { type: `VALIDATION_ERROR`, error: true }\n  }\n\n  // Ensure node isn't directly setting fields.\n  if (node.fields) {\n    throw new Error(\n      stripIndent`\n      Plugins creating nodes can not set data on the reserved field \"fields\"\n      as this is reserved for plugins which wish to extend your nodes.\n\n      If your plugin didn't add \"fields\" you're probably seeing this\n      error because you're reusing an old node object.\n\n      Node:\n\n      ${JSON.stringify(node, null, 4)}\n\n      Plugin that created the node:\n\n      ${JSON.stringify(plugin, null, 4)}\n    `\n    )\n  }\n\n  node = trackInlineObjectsInRootNode(node, true)\n\n  const oldNode = getNode(node.id)\n\n  // Ensure the plugin isn't creating a node type owned by another\n  // plugin. Type \"ownership\" is first come first served.\n  if (plugin) {\n    let pluginName = plugin.name\n\n    if (!typeOwners[node.internal.type])\n      typeOwners[node.internal.type] = pluginName\n    else if (typeOwners[node.internal.type] !== pluginName)\n      throw new Error(stripIndent`\n        The plugin \"${pluginName}\" created a node of a type owned by another plugin.\n\n        The node type \"${node.internal.type}\" is owned by \"${\n        typeOwners[node.internal.type]\n      }\".\n\n        If you copy and pasted code from elsewhere, you'll need to pick a new type name\n        for your new node(s).\n\n        The node object passed to \"createNode\":\n\n        ${JSON.stringify(node, null, 4)}\n\n        The plugin creating the node:\n\n        ${JSON.stringify(plugin, null, 4)}\n      `)\n\n    // If the node has been created in the past, check that\n    // the current plugin is the same as the previous.\n    if (oldNode && oldNode.internal.owner !== pluginName) {\n      throw new Error(\n        stripIndent`\n        Nodes can only be updated by their owner. Node \"${node.id}\" is\n        owned by \"${oldNode.internal.owner}\" and another plugin \"${pluginName}\"\n        tried to update it.\n\n        `\n      )\n    }\n  }\n\n  if (actionOptions.parentSpan) {\n    actionOptions.parentSpan.setTag(`nodeId`, node.id)\n    actionOptions.parentSpan.setTag(`nodeType`, node.id)\n  }\n\n  let deleteActions\n  let updateNodeAction\n  // Check if the node has already been processed.\n  if (oldNode && !hasNodeChanged(node.id, node.internal.contentDigest)) {\n    updateNodeAction = {\n      type: `TOUCH_NODE`,\n      plugin,\n      ...actionOptions,\n      payload: node.id,\n    }\n  } else {\n    // Remove any previously created descendant nodes as they're all due\n    // to be recreated.\n    if (oldNode) {\n      const createDeleteAction = node => {\n        return {\n          type: `DELETE_NODE`,\n          plugin,\n          ...actionOptions,\n          payload: node,\n        }\n      }\n      deleteActions = findChildrenRecursively(oldNode.children)\n        .map(getNode)\n        .map(createDeleteAction)\n    }\n\n    updateNodeAction = {\n      type: `CREATE_NODE`,\n      plugin,\n      oldNode,\n      ...actionOptions,\n      payload: node,\n    }\n  }\n\n  if (deleteActions && deleteActions.length) {\n    return [...deleteActions, updateNodeAction]\n  } else {\n    return updateNodeAction\n  }\n}\n\n/**\n * \"Touch\" a node. Tells Gatsby a node still exists and shouldn't\n * be garbage collected. Primarily useful for source plugins fetching\n * nodes from a remote system that can return only nodes that have\n * updated. The source plugin then touches all the nodes that haven't\n * updated but still exist so Gatsby knows to keep them.\n * @param {Object} $0\n * @param {string} $0.nodeId The id of a node\n * @example\n * touchNode({ nodeId: `a-node-id` })\n */\nactions.touchNode = (options: any, plugin?: Plugin) => {\n  let nodeId = _.get(options, `nodeId`)\n\n  // Check if using old method signature. Warn about incorrect usage\n  if (typeof options === `string`) {\n    console.warn(\n      `Calling \"touchNode\" with a nodeId is deprecated. Please pass an object containing a nodeId instead: touchNode({ nodeId: 'a-node-id' })`\n    )\n\n    if (plugin && plugin.name) {\n      console.log(`\"touchNode\" was called by ${plugin.name}`)\n    }\n\n    nodeId = options\n  }\n\n  return {\n    type: `TOUCH_NODE`,\n    plugin,\n    payload: nodeId,\n  }\n}\n\ntype CreateNodeInput = {\n  node: Object,\n  fieldName?: string,\n  fieldValue?: string,\n  name?: string,\n  value: any,\n}\n/**\n * Extend another node. The new node field is placed under the `fields`\n * key on the extended node object.\n *\n * Once a plugin has claimed a field name the field name can't be used by\n * other plugins.  Also since nodes are immutable, you can't mutate the node\n * directly. So to extend another node, use this.\n * @param {Object} $0\n * @param {Object} $0.node the target node object\n * @param {string} $0.fieldName [deprecated] the name for the field\n * @param {string} $0.fieldValue [deprecated] the value for the field\n * @param {string} $0.name the name for the field\n * @param {string} $0.value the value for the field\n * @example\n * createNodeField({\n *   node,\n *   name: `happiness`,\n *   value: `is sweet graphql queries`\n * })\n *\n * // The field value is now accessible at node.fields.happiness\n */\nactions.createNodeField = (\n  { node, name, value, fieldName, fieldValue }: CreateNodeInput,\n  plugin: Plugin,\n  actionOptions?: ActionOptions\n) => {\n  if (fieldName) {\n    console.warn(\n      `Calling \"createNodeField\" with \"fieldName\" is deprecated. Use \"name\" instead`\n    )\n    if (!name) {\n      name = fieldName\n    }\n  }\n  if (fieldValue) {\n    console.warn(\n      `Calling \"createNodeField\" with \"fieldValue\" is deprecated. Use \"value\" instead`\n    )\n    if (!value) {\n      value = fieldValue\n    }\n  }\n  // Ensure required fields are set.\n  if (!node.internal.fieldOwners) {\n    node.internal.fieldOwners = {}\n  }\n  if (!node.fields) {\n    node.fields = {}\n  }\n\n  /**\n   * Normalized name of the field that will be used in schema\n   */\n  const schemaFieldName = _.includes(name, `___NODE`)\n    ? name.split(`___`)[0]\n    : name\n\n  // Check that this field isn't owned by another plugin.\n  const fieldOwner = node.internal.fieldOwners[schemaFieldName]\n  if (fieldOwner && fieldOwner !== plugin.name) {\n    throw new Error(\n      stripIndent`\n      A plugin tried to update a node field that it doesn't own:\n\n      Node id: ${node.id}\n      Plugin: ${plugin.name}\n      name: ${name}\n      value: ${value}\n      `\n    )\n  }\n\n  // Update node\n  node.fields[name] = value\n  node.internal.fieldOwners[schemaFieldName] = plugin.name\n\n  return {\n    type: `ADD_FIELD_TO_NODE`,\n    plugin,\n    ...actionOptions,\n    payload: node,\n  }\n}\n\n/**\n * Creates a link between a parent and child node. This is used when you\n * transform content from a node creating a new child node. You need to add\n * this new child node to the `children` array of the parent but since you\n * don't have direct access to the immutable parent node, use this action\n * instead.\n * @param {Object} $0\n * @param {Object} $0.parent the parent node object\n * @param {Object} $0.child the child node object\n * @example\n * createParentChildLink({ parent: parentNode, child: childNode })\n */\nactions.createParentChildLink = (\n  { parent, child }: { parent: any, child: any },\n  plugin?: Plugin\n) => {\n  // Update parent\n  parent.children.push(child.id)\n  parent.children = _.uniq(parent.children)\n\n  return {\n    type: `ADD_CHILD_NODE_TO_PARENT_NODE`,\n    plugin,\n    payload: parent,\n  }\n}\n\n/**\n * Create a dependency between a page and data. Probably for\n * internal use only.\n * @param {Object} $0\n * @param {string} $0.path the path to the page\n * @param {string} $0.nodeId A node ID\n * @param {string} $0.connection A connection type\n * @private\n */\nactions.createPageDependency = (\n  {\n    path,\n    nodeId,\n    connection,\n  }: { path: string, nodeId: string, connection: string },\n  plugin: string = ``\n) => {\n  return {\n    type: `CREATE_COMPONENT_DEPENDENCY`,\n    plugin,\n    payload: {\n      path,\n      nodeId,\n      connection,\n    },\n  }\n}\n\n/**\n * Delete dependencies between an array of pages and data. Probably for\n * internal use only. Used when deleting pages.\n * @param {Array} paths the paths to delete.\n * @private\n */\nactions.deleteComponentsDependencies = (paths: string[]) => {\n  return {\n    type: `DELETE_COMPONENTS_DEPENDENCIES`,\n    payload: {\n      paths,\n    },\n  }\n}\n\n/**\n * When the query watcher extracts a GraphQL query, it calls\n * this to store the query with its component.\n * @private\n */\nactions.replaceComponentQuery = ({\n  query,\n  componentPath,\n}: {\n  query: string,\n  componentPath: string,\n}) => {\n  return {\n    type: `REPLACE_COMPONENT_QUERY`,\n    payload: {\n      query,\n      componentPath,\n    },\n  }\n}\n\n/**\n * When the query watcher extracts a \"static\" GraphQL query from <StaticQuery>\n * components, it calls this to store the query with its component.\n * @private\n */\nactions.replaceStaticQuery = (args: any, plugin?: ?Plugin = null) => {\n  return {\n    type: `REPLACE_STATIC_QUERY`,\n    plugin,\n    payload: args,\n  }\n}\n\n/**\n * Merge additional configuration into the current webpack config. A few\n * configurations options will be ignored if set, in order to try prevent accidental breakage.\n * Specifically, any change to `entry`, `output`, `target`, or `resolveLoaders` will be ignored.\n *\n * For full control over the webpack config, use `replaceWebpackConfig()`.\n *\n * @param {Object} config partial webpack config, to be merged into the current one\n */\nactions.setWebpackConfig = (config: Object, plugin?: ?Plugin = null) => {\n  return {\n    type: `SET_WEBPACK_CONFIG`,\n    plugin,\n    payload: config,\n  }\n}\n\n/**\n * Completely replace the webpack config for the current stage. This can be\n * dangerous and break Gatsby if certain configuration options are changed.\n *\n * Generally only useful for cases where you need to handle config merging logic\n * yourself, in which case consider using `webpack-merge`.\n *\n * @param {Object} config complete webpack config\n */\nactions.replaceWebpackConfig = (config: Object, plugin?: ?Plugin = null) => {\n  return {\n    type: `REPLACE_WEBPACK_CONFIG`,\n    plugin,\n    payload: config,\n  }\n}\n\n/**\n * Set top-level Babel options. Plugins and presets will be ignored. Use\n * setBabelPlugin and setBabelPreset for this.\n * @param {Object} config An options object in the shape of a normal babelrc JavaScript object\n * @example\n * setBabelOptions({\n *   options: {\n *     sourceMaps: `inline`,\n *   }\n * })\n */\nactions.setBabelOptions = (options: Object, plugin?: ?Plugin = null) => {\n  // Validate\n  let name = `The plugin \"${plugin.name}\"`\n  if (plugin.name === `default-site-plugin`) {\n    name = `Your site's \"gatsby-node.js\"`\n  }\n  if (!_.isObject(options)) {\n    console.log(`${name} must pass an object to \"setBabelOptions\"`)\n    console.log(JSON.stringify(options, null, 4))\n    if (process.env.NODE_ENV !== `test`) {\n      process.exit(1)\n    }\n  }\n\n  if (!_.isObject(options.options)) {\n    console.log(`${name} must pass options to \"setBabelOptions\"`)\n    console.log(JSON.stringify(options, null, 4))\n    if (process.env.NODE_ENV !== `test`) {\n      process.exit(1)\n    }\n  }\n\n  return {\n    type: `SET_BABEL_OPTIONS`,\n    plugin,\n    payload: options,\n  }\n}\n\n/**\n * Add new plugins or merge options into existing Babel plugins.\n * @param {Object} config A config object describing the Babel plugin to be added.\n * @param {string} config.name The name of the Babel plugin\n * @param {Object} config.options Options to pass to the Babel plugin.\n * @example\n * setBabelPlugin({\n *   name:  `babel-plugin-emotion`,\n *   options: {\n *     sourceMap: true,\n *   },\n * })\n */\nactions.setBabelPlugin = (config: Object, plugin?: ?Plugin = null) => {\n  // Validate\n  let name = `The plugin \"${plugin.name}\"`\n  if (plugin.name === `default-site-plugin`) {\n    name = `Your site's \"gatsby-node.js\"`\n  }\n  if (!config.name) {\n    console.log(`${name} must set the name of the Babel plugin`)\n    console.log(JSON.stringify(config, null, 4))\n    if (process.env.NODE_ENV !== `test`) {\n      process.exit(1)\n    }\n  }\n  if (!config.options) {\n    config.options = {}\n  }\n  return {\n    type: `SET_BABEL_PLUGIN`,\n    plugin,\n    payload: config,\n  }\n}\n\n/**\n * Add new presets or merge options into existing Babel presets.\n * @param {Object} config A config object describing the Babel plugin to be added.\n * @param {string} config.name The name of the Babel preset.\n * @param {Object} config.options Options to pass to the Babel preset.\n * @example\n * setBabelPreset({\n *   name: `@babel/preset-react`,\n *   options: {\n *     pragma: `Glamor.createElement`,\n *   },\n * })\n */\nactions.setBabelPreset = (config: Object, plugin?: ?Plugin = null) => {\n  // Validate\n  let name = `The plugin \"${plugin.name}\"`\n  if (plugin.name === `default-site-plugin`) {\n    name = `Your site's \"gatsby-node.js\"`\n  }\n  if (!config.name) {\n    console.log(`${name} must set the name of the Babel preset`)\n    console.log(JSON.stringify(config, null, 4))\n    if (process.env.NODE_ENV !== `test`) {\n      process.exit(1)\n    }\n  }\n  if (!config.options) {\n    config.options = {}\n  }\n  return {\n    type: `SET_BABEL_PRESET`,\n    plugin,\n    payload: config,\n  }\n}\n\n/**\n * Create a \"job\". This is a long-running process that are generally\n * started as side-effects to GraphQL queries.\n * [`gatsby-plugin-sharp`](/packages/gatsby-plugin-sharp/) uses this for\n * example.\n *\n * Gatsby doesn't finish its bootstrap until all jobs are ended.\n * @param {Object} job A job object with at least an id set\n * @param {id} job.id The id of the job\n * @example\n * createJob({ id: `write file id: 123`, fileName: `something.jpeg` })\n */\nactions.createJob = (job: Job, plugin?: ?Plugin = null) => {\n  return {\n    type: `CREATE_JOB`,\n    plugin,\n    payload: job,\n  }\n}\n\n/**\n * Set (update) a \"job\". Sometimes on really long running jobs you want\n * to update the job as it continues.\n *\n * @param {Object} job A job object with at least an id set\n * @param {id} job.id The id of the job\n * @example\n * setJob({ id: `write file id: 123`, progress: 50 })\n */\nactions.setJob = (job: Job, plugin?: ?Plugin = null) => {\n  return {\n    type: `SET_JOB`,\n    plugin,\n    payload: job,\n  }\n}\n\n/**\n * End a \"job\".\n *\n * Gatsby doesn't finish its bootstrap until all jobs are ended.\n * @param {Object} job  A job object with at least an id set\n * @param {id} job.id The id of the job\n * @example\n * endJob({ id: `write file id: 123` })\n */\nactions.endJob = (job: Job, plugin?: ?Plugin = null) => {\n  return {\n    type: `END_JOB`,\n    plugin,\n    payload: job,\n  }\n}\n\n/**\n * Set plugin status. A plugin can use this to save status keys e.g. the last\n * it fetched something. These values are persisted between runs of Gatsby.\n *\n * @param {Object} status  An object with arbitrary values set\n * @example\n * setPluginStatus({ lastFetched: Date.now() })\n */\nactions.setPluginStatus = (\n  status: { [key: string]: mixed },\n  plugin: Plugin\n) => {\n  return {\n    type: `SET_PLUGIN_STATUS`,\n    plugin,\n    payload: status,\n  }\n}\n\n/**\n * Check if path is absolute and add pathPrefix in front if it's not\n */\nconst maybeAddPathPrefix = (path, pathPrefix) => {\n  const parsed = url.parse(path)\n  const isRelativeProtocol = path.startsWith(`//`)\n  return `${\n    parsed.protocol != null || isRelativeProtocol ? `` : pathPrefix\n  }${path}`\n}\n\n/**\n * Create a redirect from one page to another. Server redirects don't work out\n * of the box. You must have a plugin setup to integrate the redirect data with\n * your hosting technology e.g. the [Netlify\n * plugin](/packages/gatsby-plugin-netlify/), or the [Amazon S3\n * plugin](/packages/gatsby-plugin-s3/).\n *\n * @param {Object} redirect Redirect data\n * @param {string} redirect.fromPath Any valid URL. Must start with a forward slash\n * @param {boolean} redirect.isPermanent This is a permanent redirect; defaults to temporary\n * @param {string} redirect.toPath URL of a created page (see `createPage`)\n * @param {boolean} redirect.redirectInBrowser Redirects are generally for redirecting legacy URLs to their new configuration. If you can't update your UI for some reason, set `redirectInBrowser` to true and Gatsby will handle redirecting in the client as well.\n * @param {boolean} redirect.force (Plugin-specific) Will trigger the redirect even if the `fromPath` matches a piece of content. This is not part of the Gatsby API, but implemented by (some) plugins that configure hosting provider redirects\n * @param {number} redirect.statusCode (Plugin-specific) Manually set the HTTP status code. This allows you to create a rewrite (status code 200) or custom error page (status code 404). Note that this will override the `isPermanent` option which also sets the status code. This is not part of the Gatsby API, but implemented by (some) plugins that configure hosting provider redirects\n * @example\n * createRedirect({ fromPath: '/old-url', toPath: '/new-url', isPermanent: true })\n * createRedirect({ fromPath: '/url', toPath: '/zn-CH/url', Language: 'zn' })\n * createRedirect({ fromPath: '/not_so-pretty_url', toPath: '/pretty/url', statusCode: 200 })\n */\nactions.createRedirect = ({\n  fromPath,\n  isPermanent = false,\n  redirectInBrowser = false,\n  toPath,\n  ...rest\n}) => {\n  let pathPrefix = ``\n  if (store.getState().program.prefixPaths) {\n    pathPrefix = store.getState().config.pathPrefix\n  }\n\n  return {\n    type: `CREATE_REDIRECT`,\n    payload: {\n      fromPath: maybeAddPathPrefix(fromPath, pathPrefix),\n      isPermanent,\n      redirectInBrowser,\n      toPath: maybeAddPathPrefix(toPath, pathPrefix),\n      ...rest,\n    },\n  }\n}\n\n/**\n * Add a third-party schema to be merged into main schema. Schema has to be a\n * graphql-js GraphQLSchema object.\n *\n * This schema is going to be merged as-is. This can easily break the main\n * Gatsby schema, so it's user's responsibility to make sure it doesn't happen\n * (by eg namespacing the schema).\n *\n * @param {Object} $0\n * @param {GraphQLSchema} $0.schema GraphQL schema to add\n */\nactions.addThirdPartySchema = (\n  { schema }: { schema: GraphQLSchema },\n  plugin: Plugin,\n  traceId?: string\n) => {\n  return {\n    type: `ADD_THIRD_PARTY_SCHEMA`,\n    plugin,\n    traceId,\n    payload: schema,\n  }\n}\n\nimport type GatsbyGraphQLType from \"../schema/types/type-builders\"\n/**\n * Add type definitions to the GraphQL schema.\n *\n * @param {string | GraphQLOutputType | GatsbyGraphQLType | string[] | GraphQLOutputType[] | GatsbyGraphQLType[]} types Type definitions\n *\n * Type definitions can be provided either as\n * [`graphql-js` types](https://graphql.org/graphql-js/), in\n * [GraphQL schema definition language (SDL)](https://graphql.org/learn/)\n * or using Gatsby Type Builders available on the `schema` API argument.\n *\n * Things to note:\n * * needs to be called *before* schema generation. It is recommended to use\n *   `createTypes` in the `sourceNodes` API.\n * * type definitions targeting node types, i.e. `MarkdownRemark` and others\n *   added in `sourceNodes` or `onCreateNode` APIs, need to implement the\n *   `Node` interface. Interface fields will be added automatically, but it\n *   is mandatory to label those types with `implements Node`.\n * * by default, explicit type definitions from `createTypes` will be merged\n *   with inferred field types, and default field resolvers for `Date` (which\n *   adds formatting options) and `File` (which resolves the field value as\n *   a `relativePath` foreign-key field) are added. This behavior can be\n *   customised with `@infer` and `@dontInfer` directives, and their\n *   `noDefaultResolvers` argument.\n *\n * @example\n * exports.sourceNodes = ({ actions }) => {\n *   const { createTypes } = actions\n *   const typeDefs = `\n *     \"\"\"\n *     Markdown Node\n *     \"\"\"\n *     type MarkdownRemark implements Node {\n *       frontmatter: Frontmatter!\n *     }\n *\n *     \"\"\"\n *     Markdown Frontmatter\n *     \"\"\"\n *     type Frontmatter {\n *       title: String!\n *       author: AuthorJson!\n *       date: Date!\n *       published: Boolean!\n *       tags: [String!]!\n *     }\n *\n *     \"\"\"\n *     Author information\n *     \"\"\"\n *     # Does not include automatically inferred fields\n *     type AuthorJson implements Node @dontInfer(noFieldResolvers: true) {\n *       name: String!\n *       birthday: Date! # no default resolvers for Date formatting added\n *     }\n *   `\n *   createTypes(typeDefs)\n * }\n *\n * // using Gatsby Type Builder API\n * exports.sourceNodes = ({ actions, schema }) => {\n *   const { createTypes } = actions\n *   const typeDefs = [\n *     schema.buildObjectType({\n *       name: 'MarkdownRemark',\n *       fields: {\n *         frontmatter: 'Frontmatter!'\n *       },\n *       interfaces: ['Node'],\n *     }),\n *     schema.buildObjectType({\n *       name: 'Frontmatter',\n *       fields: {\n *         title: {\n *           type: 'String!',\n *           resolve(parent) {\n *             return parent.title || '(Untitled)'\n *           }\n *         },\n *         author: 'AuthorJson!',\n *         date: 'Date!',\n *         published: 'Boolean!',\n *         tags: '[String!]!',\n *       }\n *     })\n *   ]\n *   createTypes(typeDefs)\n * }\n */\nactions.createTypes = (\n  types:\n    | string\n    | GraphQLOutputType\n    | GatsbyGraphQLType\n    | Array<string | GraphQLOutputType | GatsbyGraphQLType>,\n  plugin: Plugin,\n  traceId?: string\n) => {\n  return {\n    type: `CREATE_TYPES`,\n    plugin,\n    traceId,\n    payload: types,\n  }\n}\n\n/**\n *\n * Report that a query has been extracted from a component. Used by\n * query-compilier.js.\n *\n * @param {Object} $0\n * @param {componentPath} $0.componentPath The path to the component that just had\n * its query read.\n * @param {query} $0.query The GraphQL query that was extracted from the component.\n * @private\n */\nactions.queryExtracted = (\n  { componentPath, query },\n  plugin: Plugin,\n  traceId?: string\n) => {\n  return {\n    type: `QUERY_EXTRACTED`,\n    plugin,\n    traceId,\n    payload: { componentPath, query },\n  }\n}\n\n/**\n *\n * Report that the Relay Compilier found a graphql error when attempting to extract a query\n *\n * @param {Object} $0\n * @param {componentPath} $0.componentPath The path to the component that just had\n * its query read.\n * @param {error} $0.error The GraphQL query that was extracted from the component.\n * @private\n */\nactions.queryExtractionGraphQLError = (\n  { componentPath, error },\n  plugin: Plugin,\n  traceId?: string\n) => {\n  return {\n    type: `QUERY_EXTRACTION_GRAPHQL_ERROR`,\n    plugin,\n    traceId,\n    payload: { componentPath, error },\n  }\n}\n\n/**\n *\n * Report that babel was able to extract the graphql query.\n * Indicates that the file is free of JS errors.\n *\n * @param {Object} $0\n * @param {componentPath} $0.componentPath The path to the component that just had\n * its query read.\n * @private\n */\nactions.queryExtractedBabelSuccess = (\n  { componentPath },\n  plugin: Plugin,\n  traceId?: string\n) => {\n  return {\n    type: `QUERY_EXTRACTION_BABEL_SUCCESS`,\n    plugin,\n    traceId,\n    payload: { componentPath },\n  }\n}\n\n/**\n *\n * Report that the Relay Compilier found a babel error when attempting to extract a query\n *\n * @param {Object} $0\n * @param {componentPath} $0.componentPath The path to the component that just had\n * its query read.\n * @param {error} $0.error The Babel error object\n * @private\n */\nactions.queryExtractionBabelError = (\n  { componentPath, error },\n  plugin: Plugin,\n  traceId?: string\n) => {\n  return {\n    type: `QUERY_EXTRACTION_BABEL_ERROR`,\n    plugin,\n    traceId,\n    payload: { componentPath, error },\n  }\n}\n\n/**\n * Set overall program status e.g. `BOOTSTRAPING` or `BOOTSTRAP_FINISHED`.\n *\n * @param {string} Program status\n * @private\n */\nactions.setProgramStatus = (status, plugin: Plugin, traceId?: string) => {\n  return {\n    type: `SET_PROGRAM_STATUS`,\n    plugin,\n    traceId,\n    payload: status,\n  }\n}\n\n/**\n * Broadcast that a page's query was run.\n *\n * @param {string} Path to the page component that changed.\n * @private\n */\nactions.pageQueryRun = (\n  { path, componentPath, isPage },\n  plugin: Plugin,\n  traceId?: string\n) => {\n  return {\n    type: `PAGE_QUERY_RUN`,\n    plugin,\n    traceId,\n    payload: { path, componentPath, isPage },\n  }\n}\n\n/**\n * All action creators wrapped with a dispatch.\n */\nexports.actions = actions\n\n/**\n * All action creators wrapped with a dispatch. - *DEPRECATED*\n */\nexports.boundActionCreators = bindActionCreators(actions, store.dispatch)\n"],"file":"actions.js"}
\ No newline at end of file
+{"version":3,"sources":["../../src/redux/actions.js"],"names":["Joi","require","chalk","_","bindActionCreators","stripIndent","report","path","fs","truePath","url","kebabHash","slash","hasNodeChanged","getNode","trackInlineObjectsInRootNode","store","fileExistsSync","sync","joiSchemas","generateComponentChunkName","actions","findChildrenRecursively","children","concat","map","child","newChildren","isArray","length","deletePage","page","type","payload","pascalCase","flow","camelCase","upperFirst","hasWarnedForPageComponentInvalidContext","Set","hasWarnedForPageComponentInvalidCasing","pageComponentCache","fileOkCache","createPage","plugin","actionOptions","noPageOrComponent","name","message","process","env","NODE_ENV","console","log","bold","red","isObject","context","reservedFields","invalidFields","Object","keys","pick","singularMessage","pluralMessage","error","f","join","JSON","stringify","some","panic","has","component","warn","add","originalPageComponent","trueComponentPath","markers","split","letter","index","isAbsolute","internalComponentName","internalPage","matchPath","componentChunkName","isCreatedByStatefulCreatePages","traceId","updatedAt","Date","now","includes","fileName","fileContent","readFileSync","notEmpty","includesDefaultExport","test","extname","relativePath","relative","getState","program","directory","panicOnBuild","oldPage","pages","get","contextModified","isEqual","deleteNode","options","args","id","msg","node","createDeleteAction","deleteAction","deleteDescendantsActions","deleteNodes","nodes","descendantNodes","flatten","n","deleteNodesAction","typeOwners","createNode","internal","array","parent","owner","result","validate","nodeSchema","fields","Error","oldNode","pluginName","parentSpan","setTag","deleteActions","updateNodeAction","contentDigest","touchNode","nodeId","createNodeField","value","fieldName","fieldValue","fieldOwners","schemaFieldName","fieldOwner","createParentChildLink","push","uniq","createPageDependency","connection","deleteComponentsDependencies","paths","replaceComponentQuery","query","componentPath","replaceStaticQuery","setWebpackConfig","config","replaceWebpackConfig","setBabelOptions","exit","setBabelPlugin","setBabelPreset","createJob","job","setJob","endJob","setPluginStatus","status","maybeAddPathPrefix","pathPrefix","parsed","parse","isRelativeProtocol","startsWith","protocol","createRedirect","fromPath","isPermanent","redirectInBrowser","toPath","rest","prefixPaths","addThirdPartySchema","schema","createTypes","types","queryExtracted","queryExtractionGraphQLError","queryExtractedBabelSuccess","queryExtractionBabelError","setProgramStatus","pageQueryRun","isPage","exports","boundActionCreators","dispatch"],"mappings":"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","sourcesContent":["// @flow\nconst Joi = require(`joi`)\nconst chalk = require(`chalk`)\nconst _ = require(`lodash`)\nconst { bindActionCreators } = require(`redux`)\nconst { stripIndent } = require(`common-tags`)\nconst report = require(`gatsby-cli/lib/reporter`)\nconst path = require(`path`)\nconst fs = require(`fs`)\nconst truePath = require(`true-case-path`)\nconst url = require(`url`)\nconst kebabHash = require(`kebab-hash`)\nconst slash = require(`slash`)\nconst { hasNodeChanged, getNode } = require(`../db/nodes`)\nconst { trackInlineObjectsInRootNode } = require(`../db/node-tracking`)\nconst { store } = require(`./index`)\nconst fileExistsSync = require(`fs-exists-cached`).sync\nconst joiSchemas = require(`../joi-schemas/joi`)\nconst { generateComponentChunkName } = require(`../utils/js-chunk-names`)\n\nconst actions = {}\n\nconst findChildrenRecursively = (children = []) => {\n  children = children.concat(\n    ...children.map(child => {\n      const newChildren = getNode(child).children\n      if (_.isArray(newChildren) && newChildren.length > 0) {\n        return findChildrenRecursively(newChildren)\n      } else {\n        return []\n      }\n    })\n  )\n\n  return children\n}\n\ntype Job = {\n  id: string,\n}\ntype PageInput = {\n  path: string,\n  component: string,\n  context?: Object,\n}\n\ntype Page = {\n  path: string,\n  matchPath: ?string,\n  component: string,\n  context: Object,\n  internalComponentName: string,\n  componentChunkName: string,\n  updatedAt: number,\n}\n\ntype Plugin = {\n  name: string,\n}\n\ntype ActionOptions = {\n  traceId: ?string,\n  parentSpan: ?Object,\n  followsSpan: ?Object,\n}\n\n/**\n * Delete a page\n * @param {Object} page a page object\n * @param {string} page.path The path of the page\n * @param {string} page.component The absolute path to the page component\n * @example\n * deletePage(page)\n */\nactions.deletePage = (page: PageInput) => {\n  return {\n    type: `DELETE_PAGE`,\n    payload: page,\n  }\n}\n\nconst pascalCase = _.flow(\n  _.camelCase,\n  _.upperFirst\n)\nconst hasWarnedForPageComponentInvalidContext = new Set()\nconst hasWarnedForPageComponentInvalidCasing = new Set()\nconst pageComponentCache = {}\nconst fileOkCache = {}\n\n/**\n * Create a page. See [the guide on creating and modifying pages](/docs/creating-and-modifying-pages/)\n * for detailed documentation about creating pages.\n * @param {Object} page a page object\n * @param {string} page.path Any valid URL. Must start with a forward slash\n * @param {string} page.component The absolute path to the component for this page\n * @param {Object} page.context Context data for this page. Passed as props\n * to the component `this.props.pageContext` as well as to the graphql query\n * as graphql arguments.\n * @example\n * createPage({\n *   path: `/my-sweet-new-page/`,\n *   component: path.resolve(`./src/templates/my-sweet-new-page.js`),\n *   // The context is passed as props to the component as well\n *   // as into the component's GraphQL query.\n *   context: {\n *     id: `123456`,\n *   },\n * })\n */\nactions.createPage = (\n  page: PageInput,\n  plugin?: Plugin,\n  actionOptions?: ActionOptions\n) => {\n  let noPageOrComponent = false\n  let name = `The plugin \"${plugin.name}\"`\n  if (plugin.name === `default-site-plugin`) {\n    name = `Your site's \"gatsby-node.js\"`\n  }\n  if (!page.path) {\n    const message = `${name} must set the page path when creating a page`\n    // Don't log out when testing\n    if (process.env.NODE_ENV !== `test`) {\n      console.log(chalk.bold.red(message))\n      console.log(``)\n      console.log(page)\n    } else {\n      return message\n    }\n    noPageOrComponent = true\n  }\n\n  // Validate that the context object doesn't overlap with any core page fields\n  // as this will cause trouble when running graphql queries.\n  if (_.isObject(page.context)) {\n    const reservedFields = [\n      `path`,\n      `matchPath`,\n      `component`,\n      `componentChunkName`,\n      `pluginCreator___NODE`,\n      `pluginCreatorId`,\n    ]\n    const invalidFields = Object.keys(_.pick(page.context, reservedFields))\n\n    const singularMessage = `${name} used a reserved field name in the context object when creating a page:`\n    const pluralMessage = `${name} used reserved field names in the context object when creating a page:`\n    if (invalidFields.length > 0) {\n      const error = `${\n        invalidFields.length === 1 ? singularMessage : pluralMessage\n      }\n\n${invalidFields.map(f => `  * \"${f}\"`).join(`\\n`)}\n\n${JSON.stringify(page, null, 4)}\n\nData in \"context\" is passed to GraphQL as potential arguments when running the\npage query.\n\nWhen arguments for GraphQL are constructed, the context object is combined with\nthe page object so *both* page object and context data are available as\narguments. So you don't need to add the page \"path\" to the context as it's\nalready available in GraphQL. If a context field duplicates a field already\nused by the page object, this can break functionality within Gatsby so must be\navoided.\n\nPlease choose another name for the conflicting fields.\n\nThe following fields are used by the page object and should be avoided.\n\n${reservedFields.map(f => `  * \"${f}\"`).join(`\\n`)}\n\n            `\n      if (process.env.NODE_ENV === `test`) {\n        return error\n        // Only error if the context version is different than the page\n        // version.  People in v1 often thought that they needed to also pass\n        // the path to context for it to be available in GraphQL\n      } else if (invalidFields.some(f => page.context[f] !== page[f])) {\n        report.panic(error)\n      } else {\n        if (!hasWarnedForPageComponentInvalidContext.has(page.component)) {\n          report.warn(error)\n          hasWarnedForPageComponentInvalidContext.add(page.component)\n        }\n      }\n    }\n  }\n\n  // Don't check if the component exists during tests as we use a lot of fake\n  // component paths.\n  if (process.env.NODE_ENV !== `test`) {\n    if (!fileExistsSync(page.component)) {\n      const message = `${name} created a page with a component that doesn't exist. Missing component is ${\n        page.component\n      }`\n      console.log(``)\n      console.log(chalk.bold.red(message))\n      console.log(``)\n      console.log(page)\n      noPageOrComponent = true\n    } else if (page.component) {\n      // check if we've processed this component path\n      // before, before running the expensive \"truePath\"\n      // operation\n      if (pageComponentCache[page.component]) {\n        page.component = pageComponentCache[page.component]\n      } else {\n        const originalPageComponent = page.component\n\n        // normalize component path\n        page.component = slash(page.component)\n        // check if path uses correct casing - incorrect casing will\n        // cause issues in query compiler and inconsistencies when\n        // developing on Mac or Windows and trying to deploy from\n        // linux CI/CD pipeline\n        const trueComponentPath = slash(truePath(page.component))\n        if (trueComponentPath !== page.component) {\n          if (!hasWarnedForPageComponentInvalidCasing.has(page.component)) {\n            const markers = page.component\n              .split(``)\n              .map((letter, index) => {\n                if (letter !== trueComponentPath[index]) {\n                  return `^`\n                }\n                return ` `\n              })\n              .join(``)\n\n            report.warn(\n              stripIndent`\n            ${name} created a page with a component path that doesn't match the casing of the actual file. This may work locally, but will break on systems which are case-sensitive, e.g. most CI/CD pipelines.\n\n            page.component:     \"${page.component}\"\n            path in filesystem: \"${trueComponentPath}\"\n                                 ${markers}\n          `\n            )\n            hasWarnedForPageComponentInvalidCasing.add(page.component)\n          }\n\n          page.component = trueComponentPath\n        }\n        pageComponentCache[originalPageComponent] = page.component\n      }\n    }\n  }\n\n  if (!page.component || !path.isAbsolute(page.component)) {\n    const message = `${name} must set the absolute path to the page component when create creating a page`\n    // Don't log out when testing\n    if (process.env.NODE_ENV !== `test`) {\n      console.log(``)\n      console.log(chalk.bold.red(message))\n      console.log(``)\n      console.log(page)\n    } else {\n      return message\n    }\n    noPageOrComponent = true\n  }\n\n  if (noPageOrComponent) {\n    report.panic(\n      `See the documentation for createPage https://www.gatsbyjs.org/docs/actions/#createPage`\n    )\n  }\n\n  let internalComponentName\n  if (page.path === `/`) {\n    internalComponentName = `ComponentIndex`\n  } else {\n    internalComponentName = `Component${pascalCase(page.path)}`\n  }\n\n  let internalPage: Page = {\n    internalComponentName,\n    path: page.path,\n    matchPath: page.matchPath,\n    component: page.component,\n    componentChunkName: generateComponentChunkName(page.component),\n    isCreatedByStatefulCreatePages:\n      actionOptions &&\n      actionOptions.traceId === `initial-createPagesStatefully`,\n    // Ensure the page has a context object\n    context: page.context || {},\n    updatedAt: Date.now(),\n  }\n\n  // If the path doesn't have an initial forward slash, add it.\n  if (internalPage.path[0] !== `/`) {\n    internalPage.path = `/${internalPage.path}`\n  }\n\n  // Validate that the page component imports React and exports something\n  // (hopefully a component).\n  //\n  // Only run validation once during builds.\n  if (\n    !internalPage.component.includes(`/.cache/`) &&\n    (process.env.NODE_ENV === `production` &&\n      !fileOkCache[internalPage.component])\n  ) {\n    const fileName = internalPage.component\n    const fileContent = fs.readFileSync(fileName, `utf-8`)\n    let notEmpty = true\n    let includesDefaultExport = true\n\n    if (fileContent === ``) {\n      notEmpty = false\n    }\n\n    if (\n      !fileContent.includes(`export default`) &&\n      !fileContent.includes(`module.exports`) &&\n      !fileContent.includes(`exports.default`) &&\n      // this check only applies to js and ts, not mdx\n      /\\.(jsx?|tsx?)/.test(path.extname(fileName))\n    ) {\n      includesDefaultExport = false\n    }\n    if (!notEmpty || !includesDefaultExport) {\n      const relativePath = path.relative(\n        store.getState().program.directory,\n        fileName\n      )\n\n      if (!notEmpty) {\n        report.panicOnBuild(\n          `You have an empty file in the \"src/pages\" directory at \"${relativePath}\". Please remove it or make it a valid component`\n        )\n      }\n\n      if (!includesDefaultExport) {\n        report.panicOnBuild(\n          `[${fileName}] The page component must export a React component for it to be valid`\n        )\n      }\n    }\n\n    fileOkCache[internalPage.component] = true\n  }\n\n  const oldPage: Page = store.getState().pages.get(internalPage.path)\n  const contextModified =\n    !!oldPage && !_.isEqual(oldPage.context, internalPage.context)\n\n  return {\n    ...actionOptions,\n    type: `CREATE_PAGE`,\n    contextModified,\n    plugin,\n    payload: internalPage,\n  }\n}\n\n/**\n * Delete a node\n * @param {object} $0\n * @param {object} $0.node the node object\n * @example\n * deleteNode({node: node})\n */\nactions.deleteNode = (options: any, plugin: Plugin, args: any) => {\n  let id\n\n  // Check if using old method signature. Warn about incorrect usage but get\n  // node from nodeID anyway.\n  if (typeof options === `string`) {\n    let msg =\n      `Calling \"deleteNode\" with a nodeId is deprecated. Please pass an ` +\n      `object containing a full node instead: deleteNode({ node }).`\n    if (args && args.name) {\n      // `plugin` used to be the third argument\n      plugin = args\n      msg = msg + ` \"deleteNode\" was called by ${plugin.name}`\n    }\n    report.warn(msg)\n\n    id = options\n  } else {\n    id = options && options.node && options.node.id\n  }\n\n  // Always get node from the store, as the node we get as an arg\n  // might already have been deleted.\n  const node = getNode(id)\n\n  const createDeleteAction = node => {\n    return {\n      type: `DELETE_NODE`,\n      plugin,\n      payload: node,\n    }\n  }\n\n  const deleteAction = createDeleteAction(node)\n\n  // It's possible the file node was never created as sometimes tools will\n  // write and then immediately delete temporary files to the file system.\n  const deleteDescendantsActions =\n    node &&\n    findChildrenRecursively(node.children)\n      .map(getNode)\n      .map(createDeleteAction)\n\n  if (deleteDescendantsActions && deleteDescendantsActions.length) {\n    return [...deleteDescendantsActions, deleteAction]\n  } else {\n    return deleteAction\n  }\n}\n\n/**\n * Batch delete nodes\n * @param {Array} nodes an array of node ids\n * @example\n * deleteNodes([`node1`, `node2`])\n */\nactions.deleteNodes = (nodes: any[], plugin: Plugin) => {\n  let msg =\n    `The \"deleteNodes\" action is now deprecated and will be removed in ` +\n    `Gatsby v3. Please use \"deleteNode\" instead.`\n  if (plugin && plugin.name) {\n    msg = msg + ` \"deleteNodes\" was called by ${plugin.name}`\n  }\n  report.warn(msg)\n\n  // Also delete any nodes transformed from these.\n  const descendantNodes = _.flatten(\n    nodes.map(n => findChildrenRecursively(getNode(n).children))\n  )\n\n  const deleteNodesAction = {\n    type: `DELETE_NODES`,\n    plugin,\n    payload: [...nodes, ...descendantNodes],\n  }\n  return deleteNodesAction\n}\n\nconst typeOwners = {}\n/**\n * Create a new node.\n * @param {Object} node a node object\n * @param {string} node.id The node's ID. Must be globally unique.\n * @param {string} node.parent The ID of the parent's node. If the node is\n * derived from another node, set that node as the parent. Otherwise it can\n * just be `null`.\n * @param {Array} node.children An array of children node IDs. If you're\n * creating the children nodes while creating the parent node, add the\n * children node IDs here directly. If you're adding a child node to a\n * parent node created by a plugin, you can't mutate this value directly\n * to add your node id, instead use the action creator `createParentChildLink`.\n * @param {Object} node.internal node fields that aren't generally\n * interesting to consumers of node data but are very useful for plugin writers\n * and Gatsby core.\n * @param {string} node.internal.mediaType An optional field to indicate to\n * transformer plugins that your node has raw content they can transform.\n * Use either an official media type (we use mime-db as our source\n * (https://www.npmjs.com/package/mime-db) or a made-up one if your data\n * doesn't fit in any existing bucket. Transformer plugins use node media types\n * for deciding if they should transform a node into a new one. E.g.\n * markdown transformers look for media types of\n * `text/markdown`.\n * @param {string} node.internal.type An arbitrary globally unique type\n * choosen by the plugin creating the node. Should be descriptive of the\n * node as the type is used in forming GraphQL types so users will query\n * for nodes based on the type choosen here. Nodes of a given type can\n * only be created by one plugin.\n * @param {string} node.internal.content An optional field. This is rarely\n * used. It is used when a source plugin sources data it doesn't know how\n * to transform e.g. a markdown string pulled from an API. The source plugin\n * can defer the transformation to a specialized transformer plugin like\n * gatsby-transformer-remark. This `content` field holds the raw content\n * (so for the markdown case, the markdown string).\n *\n * Data that's already structured should be added to the top-level of the node\n * object and _not_ added here. You should not `JSON.stringify` your node's\n * data here.\n *\n * If the content is very large and can be lazy-loaded, e.g. a file on disk,\n * you can define a `loadNodeContent` function for this node and the node\n * content will be lazy loaded when it's needed.\n * @param {string} node.internal.contentDigest the digest for the content\n * of this node. Helps Gatsby avoid doing extra work on data that hasn't\n * changed.\n * @param {string} node.internal.description An optional field. Human\n * readable description of what this node represent / its source. It will\n * be displayed when type conflicts are found, making it easier to find\n * and correct type conflicts.\n * @example\n * createNode({\n *   // Data for the node.\n *   field1: `a string`,\n *   field2: 10,\n *   field3: true,\n *   ...arbitraryOtherData,\n *\n *   // Required fields.\n *   id: `a-node-id`,\n *   parent: `the-id-of-the-parent-node`, // or null if it's a source node without a parent\n *   children: [],\n *   internal: {\n *     type: `CoolServiceMarkdownField`,\n *     contentDigest: crypto\n *       .createHash(`md5`)\n *       .update(JSON.stringify(fieldData))\n *       .digest(`hex`),\n *     mediaType: `text/markdown`, // optional\n *     content: JSON.stringify(fieldData), // optional\n *     description: `Cool Service: \"Title of entry\"`, // optional\n *   }\n * })\n */\nactions.createNode = (\n  node: any,\n  plugin?: Plugin,\n  actionOptions?: ActionOptions = {}\n) => {\n  if (!_.isObject(node)) {\n    return console.log(\n      chalk.bold.red(\n        `The node passed to the \"createNode\" action creator must be an object`\n      )\n    )\n  }\n\n  // Ensure the new node has an internals object.\n  if (!node.internal) {\n    node.internal = {}\n  }\n\n  // Ensure the new node has a children array.\n  if (!node.array && !_.isArray(node.children)) {\n    node.children = []\n  }\n\n  // Ensure the new node has a parent field\n  if (!node.parent) {\n    node.parent = null\n  }\n\n  // Tell user not to set the owner name themself.\n  if (node.internal.owner) {\n    report.error(JSON.stringify(node, null, 4))\n    report.panic(\n      chalk.bold.red(\n        `The node internal.owner field is set automatically by Gatsby and not by plugins`\n      )\n    )\n  }\n\n  // Add the plugin name to the internal object.\n  if (plugin) {\n    node.internal.owner = plugin.name\n  }\n\n  const result = Joi.validate(node, joiSchemas.nodeSchema)\n  if (result.error) {\n    console.log(chalk.bold.red(`The new node didn't pass validation`))\n    console.log(chalk.bold.red(result.error))\n    console.log(node)\n    return { type: `VALIDATION_ERROR`, error: true }\n  }\n\n  // Ensure node isn't directly setting fields.\n  if (node.fields) {\n    throw new Error(\n      stripIndent`\n      Plugins creating nodes can not set data on the reserved field \"fields\"\n      as this is reserved for plugins which wish to extend your nodes.\n\n      If your plugin didn't add \"fields\" you're probably seeing this\n      error because you're reusing an old node object.\n\n      Node:\n\n      ${JSON.stringify(node, null, 4)}\n\n      Plugin that created the node:\n\n      ${JSON.stringify(plugin, null, 4)}\n    `\n    )\n  }\n\n  trackInlineObjectsInRootNode(node)\n\n  const oldNode = getNode(node.id)\n\n  // Ensure the plugin isn't creating a node type owned by another\n  // plugin. Type \"ownership\" is first come first served.\n  if (plugin) {\n    let pluginName = plugin.name\n\n    if (!typeOwners[node.internal.type])\n      typeOwners[node.internal.type] = pluginName\n    else if (typeOwners[node.internal.type] !== pluginName)\n      throw new Error(stripIndent`\n        The plugin \"${pluginName}\" created a node of a type owned by another plugin.\n\n        The node type \"${node.internal.type}\" is owned by \"${\n        typeOwners[node.internal.type]\n      }\".\n\n        If you copy and pasted code from elsewhere, you'll need to pick a new type name\n        for your new node(s).\n\n        The node object passed to \"createNode\":\n\n        ${JSON.stringify(node, null, 4)}\n\n        The plugin creating the node:\n\n        ${JSON.stringify(plugin, null, 4)}\n      `)\n\n    // If the node has been created in the past, check that\n    // the current plugin is the same as the previous.\n    if (oldNode && oldNode.internal.owner !== pluginName) {\n      throw new Error(\n        stripIndent`\n        Nodes can only be updated by their owner. Node \"${node.id}\" is\n        owned by \"${oldNode.internal.owner}\" and another plugin \"${pluginName}\"\n        tried to update it.\n\n        `\n      )\n    }\n  }\n\n  if (actionOptions.parentSpan) {\n    actionOptions.parentSpan.setTag(`nodeId`, node.id)\n    actionOptions.parentSpan.setTag(`nodeType`, node.id)\n  }\n\n  let deleteActions\n  let updateNodeAction\n  // Check if the node has already been processed.\n  if (oldNode && !hasNodeChanged(node.id, node.internal.contentDigest)) {\n    updateNodeAction = {\n      type: `TOUCH_NODE`,\n      plugin,\n      ...actionOptions,\n      payload: node.id,\n    }\n  } else {\n    // Remove any previously created descendant nodes as they're all due\n    // to be recreated.\n    if (oldNode) {\n      const createDeleteAction = node => {\n        return {\n          type: `DELETE_NODE`,\n          plugin,\n          ...actionOptions,\n          payload: node,\n        }\n      }\n      deleteActions = findChildrenRecursively(oldNode.children)\n        .map(getNode)\n        .map(createDeleteAction)\n    }\n\n    updateNodeAction = {\n      type: `CREATE_NODE`,\n      plugin,\n      oldNode,\n      ...actionOptions,\n      payload: node,\n    }\n  }\n\n  if (deleteActions && deleteActions.length) {\n    return [...deleteActions, updateNodeAction]\n  } else {\n    return updateNodeAction\n  }\n}\n\n/**\n * \"Touch\" a node. Tells Gatsby a node still exists and shouldn't\n * be garbage collected. Primarily useful for source plugins fetching\n * nodes from a remote system that can return only nodes that have\n * updated. The source plugin then touches all the nodes that haven't\n * updated but still exist so Gatsby knows to keep them.\n * @param {Object} $0\n * @param {string} $0.nodeId The id of a node\n * @example\n * touchNode({ nodeId: `a-node-id` })\n */\nactions.touchNode = (options: any, plugin?: Plugin) => {\n  let nodeId = _.get(options, `nodeId`)\n\n  // Check if using old method signature. Warn about incorrect usage\n  if (typeof options === `string`) {\n    console.warn(\n      `Calling \"touchNode\" with a nodeId is deprecated. Please pass an object containing a nodeId instead: touchNode({ nodeId: 'a-node-id' })`\n    )\n\n    if (plugin && plugin.name) {\n      console.log(`\"touchNode\" was called by ${plugin.name}`)\n    }\n\n    nodeId = options\n  }\n\n  return {\n    type: `TOUCH_NODE`,\n    plugin,\n    payload: nodeId,\n  }\n}\n\ntype CreateNodeInput = {\n  node: Object,\n  fieldName?: string,\n  fieldValue?: string,\n  name?: string,\n  value: any,\n}\n/**\n * Extend another node. The new node field is placed under the `fields`\n * key on the extended node object.\n *\n * Once a plugin has claimed a field name the field name can't be used by\n * other plugins.  Also since nodes are immutable, you can't mutate the node\n * directly. So to extend another node, use this.\n * @param {Object} $0\n * @param {Object} $0.node the target node object\n * @param {string} $0.fieldName [deprecated] the name for the field\n * @param {string} $0.fieldValue [deprecated] the value for the field\n * @param {string} $0.name the name for the field\n * @param {string} $0.value the value for the field\n * @example\n * createNodeField({\n *   node,\n *   name: `happiness`,\n *   value: `is sweet graphql queries`\n * })\n *\n * // The field value is now accessible at node.fields.happiness\n */\nactions.createNodeField = (\n  { node, name, value, fieldName, fieldValue }: CreateNodeInput,\n  plugin: Plugin,\n  actionOptions?: ActionOptions\n) => {\n  if (fieldName) {\n    console.warn(\n      `Calling \"createNodeField\" with \"fieldName\" is deprecated. Use \"name\" instead`\n    )\n    if (!name) {\n      name = fieldName\n    }\n  }\n  if (fieldValue) {\n    console.warn(\n      `Calling \"createNodeField\" with \"fieldValue\" is deprecated. Use \"value\" instead`\n    )\n    if (!value) {\n      value = fieldValue\n    }\n  }\n  // Ensure required fields are set.\n  if (!node.internal.fieldOwners) {\n    node.internal.fieldOwners = {}\n  }\n  if (!node.fields) {\n    node.fields = {}\n  }\n\n  /**\n   * Normalized name of the field that will be used in schema\n   */\n  const schemaFieldName = _.includes(name, `___NODE`)\n    ? name.split(`___`)[0]\n    : name\n\n  // Check that this field isn't owned by another plugin.\n  const fieldOwner = node.internal.fieldOwners[schemaFieldName]\n  if (fieldOwner && fieldOwner !== plugin.name) {\n    throw new Error(\n      stripIndent`\n      A plugin tried to update a node field that it doesn't own:\n\n      Node id: ${node.id}\n      Plugin: ${plugin.name}\n      name: ${name}\n      value: ${value}\n      `\n    )\n  }\n\n  // Update node\n  node.fields[name] = value\n  node.internal.fieldOwners[schemaFieldName] = plugin.name\n\n  return {\n    type: `ADD_FIELD_TO_NODE`,\n    plugin,\n    ...actionOptions,\n    payload: node,\n  }\n}\n\n/**\n * Creates a link between a parent and child node. This is used when you\n * transform content from a node creating a new child node. You need to add\n * this new child node to the `children` array of the parent but since you\n * don't have direct access to the immutable parent node, use this action\n * instead.\n * @param {Object} $0\n * @param {Object} $0.parent the parent node object\n * @param {Object} $0.child the child node object\n * @example\n * createParentChildLink({ parent: parentNode, child: childNode })\n */\nactions.createParentChildLink = (\n  { parent, child }: { parent: any, child: any },\n  plugin?: Plugin\n) => {\n  // Update parent\n  parent.children.push(child.id)\n  parent.children = _.uniq(parent.children)\n\n  return {\n    type: `ADD_CHILD_NODE_TO_PARENT_NODE`,\n    plugin,\n    payload: parent,\n  }\n}\n\n/**\n * Create a dependency between a page and data. Probably for\n * internal use only.\n * @param {Object} $0\n * @param {string} $0.path the path to the page\n * @param {string} $0.nodeId A node ID\n * @param {string} $0.connection A connection type\n * @private\n */\nactions.createPageDependency = (\n  {\n    path,\n    nodeId,\n    connection,\n  }: { path: string, nodeId: string, connection: string },\n  plugin: string = ``\n) => {\n  return {\n    type: `CREATE_COMPONENT_DEPENDENCY`,\n    plugin,\n    payload: {\n      path,\n      nodeId,\n      connection,\n    },\n  }\n}\n\n/**\n * Delete dependencies between an array of pages and data. Probably for\n * internal use only. Used when deleting pages.\n * @param {Array} paths the paths to delete.\n * @private\n */\nactions.deleteComponentsDependencies = (paths: string[]) => {\n  return {\n    type: `DELETE_COMPONENTS_DEPENDENCIES`,\n    payload: {\n      paths,\n    },\n  }\n}\n\n/**\n * When the query watcher extracts a GraphQL query, it calls\n * this to store the query with its component.\n * @private\n */\nactions.replaceComponentQuery = ({\n  query,\n  componentPath,\n}: {\n  query: string,\n  componentPath: string,\n}) => {\n  return {\n    type: `REPLACE_COMPONENT_QUERY`,\n    payload: {\n      query,\n      componentPath,\n    },\n  }\n}\n\n/**\n * When the query watcher extracts a \"static\" GraphQL query from <StaticQuery>\n * components, it calls this to store the query with its component.\n * @private\n */\nactions.replaceStaticQuery = (args: any, plugin?: ?Plugin = null) => {\n  return {\n    type: `REPLACE_STATIC_QUERY`,\n    plugin,\n    payload: args,\n  }\n}\n\n/**\n * Merge additional configuration into the current webpack config. A few\n * configurations options will be ignored if set, in order to try prevent accidental breakage.\n * Specifically, any change to `entry`, `output`, `target`, or `resolveLoaders` will be ignored.\n *\n * For full control over the webpack config, use `replaceWebpackConfig()`.\n *\n * @param {Object} config partial webpack config, to be merged into the current one\n */\nactions.setWebpackConfig = (config: Object, plugin?: ?Plugin = null) => {\n  return {\n    type: `SET_WEBPACK_CONFIG`,\n    plugin,\n    payload: config,\n  }\n}\n\n/**\n * Completely replace the webpack config for the current stage. This can be\n * dangerous and break Gatsby if certain configuration options are changed.\n *\n * Generally only useful for cases where you need to handle config merging logic\n * yourself, in which case consider using `webpack-merge`.\n *\n * @param {Object} config complete webpack config\n */\nactions.replaceWebpackConfig = (config: Object, plugin?: ?Plugin = null) => {\n  return {\n    type: `REPLACE_WEBPACK_CONFIG`,\n    plugin,\n    payload: config,\n  }\n}\n\n/**\n * Set top-level Babel options. Plugins and presets will be ignored. Use\n * setBabelPlugin and setBabelPreset for this.\n * @param {Object} config An options object in the shape of a normal babelrc JavaScript object\n * @example\n * setBabelOptions({\n *   options: {\n *     sourceMaps: `inline`,\n *   }\n * })\n */\nactions.setBabelOptions = (options: Object, plugin?: ?Plugin = null) => {\n  // Validate\n  let name = `The plugin \"${plugin.name}\"`\n  if (plugin.name === `default-site-plugin`) {\n    name = `Your site's \"gatsby-node.js\"`\n  }\n  if (!_.isObject(options)) {\n    console.log(`${name} must pass an object to \"setBabelOptions\"`)\n    console.log(JSON.stringify(options, null, 4))\n    if (process.env.NODE_ENV !== `test`) {\n      process.exit(1)\n    }\n  }\n\n  if (!_.isObject(options.options)) {\n    console.log(`${name} must pass options to \"setBabelOptions\"`)\n    console.log(JSON.stringify(options, null, 4))\n    if (process.env.NODE_ENV !== `test`) {\n      process.exit(1)\n    }\n  }\n\n  return {\n    type: `SET_BABEL_OPTIONS`,\n    plugin,\n    payload: options,\n  }\n}\n\n/**\n * Add new plugins or merge options into existing Babel plugins.\n * @param {Object} config A config object describing the Babel plugin to be added.\n * @param {string} config.name The name of the Babel plugin\n * @param {Object} config.options Options to pass to the Babel plugin.\n * @example\n * setBabelPlugin({\n *   name:  `babel-plugin-emotion`,\n *   options: {\n *     sourceMap: true,\n *   },\n * })\n */\nactions.setBabelPlugin = (config: Object, plugin?: ?Plugin = null) => {\n  // Validate\n  let name = `The plugin \"${plugin.name}\"`\n  if (plugin.name === `default-site-plugin`) {\n    name = `Your site's \"gatsby-node.js\"`\n  }\n  if (!config.name) {\n    console.log(`${name} must set the name of the Babel plugin`)\n    console.log(JSON.stringify(config, null, 4))\n    if (process.env.NODE_ENV !== `test`) {\n      process.exit(1)\n    }\n  }\n  if (!config.options) {\n    config.options = {}\n  }\n  return {\n    type: `SET_BABEL_PLUGIN`,\n    plugin,\n    payload: config,\n  }\n}\n\n/**\n * Add new presets or merge options into existing Babel presets.\n * @param {Object} config A config object describing the Babel plugin to be added.\n * @param {string} config.name The name of the Babel preset.\n * @param {Object} config.options Options to pass to the Babel preset.\n * @example\n * setBabelPreset({\n *   name: `@babel/preset-react`,\n *   options: {\n *     pragma: `Glamor.createElement`,\n *   },\n * })\n */\nactions.setBabelPreset = (config: Object, plugin?: ?Plugin = null) => {\n  // Validate\n  let name = `The plugin \"${plugin.name}\"`\n  if (plugin.name === `default-site-plugin`) {\n    name = `Your site's \"gatsby-node.js\"`\n  }\n  if (!config.name) {\n    console.log(`${name} must set the name of the Babel preset`)\n    console.log(JSON.stringify(config, null, 4))\n    if (process.env.NODE_ENV !== `test`) {\n      process.exit(1)\n    }\n  }\n  if (!config.options) {\n    config.options = {}\n  }\n  return {\n    type: `SET_BABEL_PRESET`,\n    plugin,\n    payload: config,\n  }\n}\n\n/**\n * Create a \"job\". This is a long-running process that are generally\n * started as side-effects to GraphQL queries.\n * [`gatsby-plugin-sharp`](/packages/gatsby-plugin-sharp/) uses this for\n * example.\n *\n * Gatsby doesn't finish its bootstrap until all jobs are ended.\n * @param {Object} job A job object with at least an id set\n * @param {id} job.id The id of the job\n * @example\n * createJob({ id: `write file id: 123`, fileName: `something.jpeg` })\n */\nactions.createJob = (job: Job, plugin?: ?Plugin = null) => {\n  return {\n    type: `CREATE_JOB`,\n    plugin,\n    payload: job,\n  }\n}\n\n/**\n * Set (update) a \"job\". Sometimes on really long running jobs you want\n * to update the job as it continues.\n *\n * @param {Object} job A job object with at least an id set\n * @param {id} job.id The id of the job\n * @example\n * setJob({ id: `write file id: 123`, progress: 50 })\n */\nactions.setJob = (job: Job, plugin?: ?Plugin = null) => {\n  return {\n    type: `SET_JOB`,\n    plugin,\n    payload: job,\n  }\n}\n\n/**\n * End a \"job\".\n *\n * Gatsby doesn't finish its bootstrap until all jobs are ended.\n * @param {Object} job  A job object with at least an id set\n * @param {id} job.id The id of the job\n * @example\n * endJob({ id: `write file id: 123` })\n */\nactions.endJob = (job: Job, plugin?: ?Plugin = null) => {\n  return {\n    type: `END_JOB`,\n    plugin,\n    payload: job,\n  }\n}\n\n/**\n * Set plugin status. A plugin can use this to save status keys e.g. the last\n * it fetched something. These values are persisted between runs of Gatsby.\n *\n * @param {Object} status  An object with arbitrary values set\n * @example\n * setPluginStatus({ lastFetched: Date.now() })\n */\nactions.setPluginStatus = (\n  status: { [key: string]: mixed },\n  plugin: Plugin\n) => {\n  return {\n    type: `SET_PLUGIN_STATUS`,\n    plugin,\n    payload: status,\n  }\n}\n\n/**\n * Check if path is absolute and add pathPrefix in front if it's not\n */\nconst maybeAddPathPrefix = (path, pathPrefix) => {\n  const parsed = url.parse(path)\n  const isRelativeProtocol = path.startsWith(`//`)\n  return `${\n    parsed.protocol != null || isRelativeProtocol ? `` : pathPrefix\n  }${path}`\n}\n\n/**\n * Create a redirect from one page to another. Server redirects don't work out\n * of the box. You must have a plugin setup to integrate the redirect data with\n * your hosting technology e.g. the [Netlify\n * plugin](/packages/gatsby-plugin-netlify/), or the [Amazon S3\n * plugin](/packages/gatsby-plugin-s3/).\n *\n * @param {Object} redirect Redirect data\n * @param {string} redirect.fromPath Any valid URL. Must start with a forward slash\n * @param {boolean} redirect.isPermanent This is a permanent redirect; defaults to temporary\n * @param {string} redirect.toPath URL of a created page (see `createPage`)\n * @param {boolean} redirect.redirectInBrowser Redirects are generally for redirecting legacy URLs to their new configuration. If you can't update your UI for some reason, set `redirectInBrowser` to true and Gatsby will handle redirecting in the client as well.\n * @param {boolean} redirect.force (Plugin-specific) Will trigger the redirect even if the `fromPath` matches a piece of content. This is not part of the Gatsby API, but implemented by (some) plugins that configure hosting provider redirects\n * @param {number} redirect.statusCode (Plugin-specific) Manually set the HTTP status code. This allows you to create a rewrite (status code 200) or custom error page (status code 404). Note that this will override the `isPermanent` option which also sets the status code. This is not part of the Gatsby API, but implemented by (some) plugins that configure hosting provider redirects\n * @example\n * createRedirect({ fromPath: '/old-url', toPath: '/new-url', isPermanent: true })\n * createRedirect({ fromPath: '/url', toPath: '/zn-CH/url', Language: 'zn' })\n * createRedirect({ fromPath: '/not_so-pretty_url', toPath: '/pretty/url', statusCode: 200 })\n */\nactions.createRedirect = ({\n  fromPath,\n  isPermanent = false,\n  redirectInBrowser = false,\n  toPath,\n  ...rest\n}) => {\n  let pathPrefix = ``\n  if (store.getState().program.prefixPaths) {\n    pathPrefix = store.getState().config.pathPrefix\n  }\n\n  return {\n    type: `CREATE_REDIRECT`,\n    payload: {\n      fromPath: maybeAddPathPrefix(fromPath, pathPrefix),\n      isPermanent,\n      redirectInBrowser,\n      toPath: maybeAddPathPrefix(toPath, pathPrefix),\n      ...rest,\n    },\n  }\n}\n\n/**\n * Add a third-party schema to be merged into main schema. Schema has to be a\n * graphql-js GraphQLSchema object.\n *\n * This schema is going to be merged as-is. This can easily break the main\n * Gatsby schema, so it's user's responsibility to make sure it doesn't happen\n * (by eg namespacing the schema).\n *\n * @param {Object} $0\n * @param {GraphQLSchema} $0.schema GraphQL schema to add\n */\nactions.addThirdPartySchema = (\n  { schema }: { schema: GraphQLSchema },\n  plugin: Plugin,\n  traceId?: string\n) => {\n  return {\n    type: `ADD_THIRD_PARTY_SCHEMA`,\n    plugin,\n    traceId,\n    payload: schema,\n  }\n}\n\nimport type GatsbyGraphQLType from \"../schema/types/type-builders\"\n/**\n * Add type definitions to the GraphQL schema.\n *\n * @param {string | GraphQLOutputType | GatsbyGraphQLType | string[] | GraphQLOutputType[] | GatsbyGraphQLType[]} types Type definitions\n *\n * Type definitions can be provided either as\n * [`graphql-js` types](https://graphql.org/graphql-js/), in\n * [GraphQL schema definition language (SDL)](https://graphql.org/learn/)\n * or using Gatsby Type Builders available on the `schema` API argument.\n *\n * Things to note:\n * * needs to be called *before* schema generation. It is recommended to use\n *   `createTypes` in the `sourceNodes` API.\n * * type definitions targeting node types, i.e. `MarkdownRemark` and others\n *   added in `sourceNodes` or `onCreateNode` APIs, need to implement the\n *   `Node` interface. Interface fields will be added automatically, but it\n *   is mandatory to label those types with `implements Node`.\n * * by default, explicit type definitions from `createTypes` will be merged\n *   with inferred field types, and default field resolvers for `Date` (which\n *   adds formatting options) and `File` (which resolves the field value as\n *   a `relativePath` foreign-key field) are added. This behavior can be\n *   customised with `@infer` and `@dontInfer` directives, and their\n *   `noDefaultResolvers` argument.\n *\n * @example\n * exports.sourceNodes = ({ actions }) => {\n *   const { createTypes } = actions\n *   const typeDefs = `\n *     \"\"\"\n *     Markdown Node\n *     \"\"\"\n *     type MarkdownRemark implements Node {\n *       frontmatter: Frontmatter!\n *     }\n *\n *     \"\"\"\n *     Markdown Frontmatter\n *     \"\"\"\n *     type Frontmatter {\n *       title: String!\n *       author: AuthorJson!\n *       date: Date!\n *       published: Boolean!\n *       tags: [String!]!\n *     }\n *\n *     \"\"\"\n *     Author information\n *     \"\"\"\n *     # Does not include automatically inferred fields\n *     type AuthorJson implements Node @dontInfer(noFieldResolvers: true) {\n *       name: String!\n *       birthday: Date! # no default resolvers for Date formatting added\n *     }\n *   `\n *   createTypes(typeDefs)\n * }\n *\n * // using Gatsby Type Builder API\n * exports.sourceNodes = ({ actions, schema }) => {\n *   const { createTypes } = actions\n *   const typeDefs = [\n *     schema.buildObjectType({\n *       name: 'MarkdownRemark',\n *       fields: {\n *         frontmatter: 'Frontmatter!'\n *       },\n *       interfaces: ['Node'],\n *     }),\n *     schema.buildObjectType({\n *       name: 'Frontmatter',\n *       fields: {\n *         title: {\n *           type: 'String!',\n *           resolve(parent) {\n *             return parent.title || '(Untitled)'\n *           }\n *         },\n *         author: 'AuthorJson!',\n *         date: 'Date!',\n *         published: 'Boolean!',\n *         tags: '[String!]!',\n *       }\n *     })\n *   ]\n *   createTypes(typeDefs)\n * }\n */\nactions.createTypes = (\n  types:\n    | string\n    | GraphQLOutputType\n    | GatsbyGraphQLType\n    | Array<string | GraphQLOutputType | GatsbyGraphQLType>,\n  plugin: Plugin,\n  traceId?: string\n) => {\n  return {\n    type: `CREATE_TYPES`,\n    plugin,\n    traceId,\n    payload: types,\n  }\n}\n\n/**\n *\n * Report that a query has been extracted from a component. Used by\n * query-compilier.js.\n *\n * @param {Object} $0\n * @param {componentPath} $0.componentPath The path to the component that just had\n * its query read.\n * @param {query} $0.query The GraphQL query that was extracted from the component.\n * @private\n */\nactions.queryExtracted = (\n  { componentPath, query },\n  plugin: Plugin,\n  traceId?: string\n) => {\n  return {\n    type: `QUERY_EXTRACTED`,\n    plugin,\n    traceId,\n    payload: { componentPath, query },\n  }\n}\n\n/**\n *\n * Report that the Relay Compilier found a graphql error when attempting to extract a query\n *\n * @param {Object} $0\n * @param {componentPath} $0.componentPath The path to the component that just had\n * its query read.\n * @param {error} $0.error The GraphQL query that was extracted from the component.\n * @private\n */\nactions.queryExtractionGraphQLError = (\n  { componentPath, error },\n  plugin: Plugin,\n  traceId?: string\n) => {\n  return {\n    type: `QUERY_EXTRACTION_GRAPHQL_ERROR`,\n    plugin,\n    traceId,\n    payload: { componentPath, error },\n  }\n}\n\n/**\n *\n * Report that babel was able to extract the graphql query.\n * Indicates that the file is free of JS errors.\n *\n * @param {Object} $0\n * @param {componentPath} $0.componentPath The path to the component that just had\n * its query read.\n * @private\n */\nactions.queryExtractedBabelSuccess = (\n  { componentPath },\n  plugin: Plugin,\n  traceId?: string\n) => {\n  return {\n    type: `QUERY_EXTRACTION_BABEL_SUCCESS`,\n    plugin,\n    traceId,\n    payload: { componentPath },\n  }\n}\n\n/**\n *\n * Report that the Relay Compilier found a babel error when attempting to extract a query\n *\n * @param {Object} $0\n * @param {componentPath} $0.componentPath The path to the component that just had\n * its query read.\n * @param {error} $0.error The Babel error object\n * @private\n */\nactions.queryExtractionBabelError = (\n  { componentPath, error },\n  plugin: Plugin,\n  traceId?: string\n) => {\n  return {\n    type: `QUERY_EXTRACTION_BABEL_ERROR`,\n    plugin,\n    traceId,\n    payload: { componentPath, error },\n  }\n}\n\n/**\n * Set overall program status e.g. `BOOTSTRAPING` or `BOOTSTRAP_FINISHED`.\n *\n * @param {string} Program status\n * @private\n */\nactions.setProgramStatus = (status, plugin: Plugin, traceId?: string) => {\n  return {\n    type: `SET_PROGRAM_STATUS`,\n    plugin,\n    traceId,\n    payload: status,\n  }\n}\n\n/**\n * Broadcast that a page's query was run.\n *\n * @param {string} Path to the page component that changed.\n * @private\n */\nactions.pageQueryRun = (\n  { path, componentPath, isPage },\n  plugin: Plugin,\n  traceId?: string\n) => {\n  return {\n    type: `PAGE_QUERY_RUN`,\n    plugin,\n    traceId,\n    payload: { path, componentPath, isPage },\n  }\n}\n\n/**\n * All action creators wrapped with a dispatch.\n */\nexports.actions = actions\n\n/**\n * All action creators wrapped with a dispatch. - *DEPRECATED*\n */\nexports.boundActionCreators = bindActionCreators(actions, store.dispatch)\n"],"file":"actions.js"}
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/redux/index.js b/node_modules/gatsby/dist/redux/index.js
index 990992f..095edd1 100644
--- a/node_modules/gatsby/dist/redux/index.js
+++ b/node_modules/gatsby/dist/redux/index.js
@@ -4,60 +4,101 @@ const Redux = require(`redux`);
 
 const _ = require(`lodash`);
 
-const mitt = require(`mitt`); // Create event emitter for actions
+const fs = require(`fs-extra`);
+
+const mitt = require(`mitt`);
+
+const stringify = require(`json-stringify-safe`); // Create event emitter for actions
 
 
 const emitter = mitt(); // Reducers
 
 const reducers = require(`./reducers`);
 
-const _require = require(`./persist`),
-      writeToCache = _require.writeToCache,
-      readFromCache = _require.readFromCache; // Read old node data from cache.
+const objectToMap = obj => {
+  let map = new Map();
+  Object.keys(obj).forEach(key => {
+    map.set(key, obj[key]);
+  });
+  return map;
+};
+
+const mapToObject = map => {
+  const obj = {};
+
+  for (var _iterator = map, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
+    var _ref;
 
+    if (_isArray) {
+      if (_i >= _iterator.length) break;
+      _ref = _iterator[_i++];
+    } else {
+      _i = _iterator.next();
+      if (_i.done) break;
+      _ref = _i.value;
+    }
 
-const readState = () => {
-  try {
-    const state = readFromCache();
+    let _ref2 = _ref,
+        key = _ref2[0],
+        value = _ref2[1];
+    obj[key] = value;
+  }
 
-    if (state.nodes) {
-      // re-create nodesByType
-      state.nodesByType = new Map();
-      state.nodes.forEach(node => {
-        const type = node.internal.type;
+  return obj;
+}; // Read from cache the old node data.
 
-        if (!state.nodesByType.has(type)) {
-          state.nodesByType.set(type, new Map());
-        }
 
-        state.nodesByType.get(type).set(node.id, node);
-      });
-    }
+let initialState = {};
 
-    return state;
-  } catch (e) {// ignore errors.
+try {
+  const file = fs.readFileSync(`${process.cwd()}/.cache/redux-state.json`); // Apparently the file mocking in node-tracking-test.js
+  // can override the file reading replacing the mocked string with
+  // an already parsed object.
+
+  if (Buffer.isBuffer(file) || typeof file === `string`) {
+    initialState = JSON.parse(file);
   }
 
-  return {};
-};
+  if (initialState.staticQueryComponents) {
+    initialState.staticQueryComponents = objectToMap(initialState.staticQueryComponents);
+  }
+
+  if (initialState.components) {
+    initialState.components = objectToMap(initialState.components);
+  }
+
+  if (initialState.nodes) {
+    initialState.nodes = objectToMap(initialState.nodes);
+    initialState.nodesByType = new Map();
+    initialState.nodes.forEach(node => {
+      const type = node.internal.type;
+
+      if (!initialState.nodesByType.has(type)) {
+        initialState.nodesByType.set(type, new Map());
+      }
 
-exports.readState = readState;
-const store = Redux.createStore(Redux.combineReducers(Object.assign({}, reducers)), readState(), Redux.applyMiddleware(function multi({
+      initialState.nodesByType.get(type).set(node.id, node);
+    });
+  }
+} catch (e) {// ignore errors.
+}
+
+const store = Redux.createStore(Redux.combineReducers(Object.assign({}, reducers)), initialState, Redux.applyMiddleware(function multi({
   dispatch
 }) {
   return next => action => Array.isArray(action) ? action.filter(Boolean).map(dispatch) : next(action);
 })); // Persist state.
 
 function saveState() {
-  if (process.env.DANGEROUSLY_DISABLE_OOM) {
-    return Promise.resolve();
-  }
-
   const state = store.getState();
 
-  const pickedState = _.pick(state, [`nodes`, `status`, `componentDataDependencies`, `jsonDataPaths`, `components`, `staticQueryComponents`]);
+  const pickedState = _.pick(state, [`nodes`, `status`, `componentDataDependencies`, `components`, `staticQueryComponents`, `webpackCompilationHash`]);
 
-  return writeToCache(pickedState);
+  pickedState.staticQueryComponents = mapToObject(pickedState.staticQueryComponents);
+  pickedState.components = mapToObject(pickedState.components);
+  pickedState.nodes = pickedState.nodes ? mapToObject(pickedState.nodes) : [];
+  const stringified = stringify(pickedState, null, 2);
+  return fs.writeFile(`${process.cwd()}/.cache/redux-state.json`, stringified);
 }
 
 exports.saveState = saveState;
diff --git a/node_modules/gatsby/dist/redux/index.js.map b/node_modules/gatsby/dist/redux/index.js.map
index 9ad4901..a229517 100644
--- a/node_modules/gatsby/dist/redux/index.js.map
+++ b/node_modules/gatsby/dist/redux/index.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/redux/index.js"],"names":["Redux","require","_","mitt","emitter","reducers","writeToCache","readFromCache","readState","state","nodes","nodesByType","Map","forEach","node","type","internal","has","set","get","id","e","exports","store","createStore","combineReducers","applyMiddleware","multi","dispatch","next","action","Array","isArray","filter","Boolean","map","saveState","process","env","DANGEROUSLY_DISABLE_OOM","Promise","resolve","getState","pickedState","pick","subscribe","lastAction","emit"],"mappings":";;AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAE,OAAF,CAArB;;AACA,MAAMC,CAAC,GAAGD,OAAO,CAAE,QAAF,CAAjB;;AAEA,MAAME,IAAI,GAAGF,OAAO,CAAE,MAAF,CAApB,C,CAEA;;;AACA,MAAMG,OAAO,GAAGD,IAAI,EAApB,C,CAEA;;AACA,MAAME,QAAQ,GAAGJ,OAAO,CAAE,YAAF,CAAxB;;iBACwCA,OAAO,CAAE,WAAF,C;MAAvCK,Y,YAAAA,Y;MAAcC,a,YAAAA,a,EAEtB;;;AACA,MAAMC,SAAS,GAAG,MAAM;AACtB,MAAI;AACF,UAAMC,KAAK,GAAGF,aAAa,EAA3B;;AACA,QAAIE,KAAK,CAACC,KAAV,EAAiB;AACf;AACAD,MAAAA,KAAK,CAACE,WAAN,GAAoB,IAAIC,GAAJ,EAApB;AACAH,MAAAA,KAAK,CAACC,KAAN,CAAYG,OAAZ,CAAoBC,IAAI,IAAI;AAAA,cAClBC,IADkB,GACTD,IAAI,CAACE,QADI,CAClBD,IADkB;;AAE1B,YAAI,CAACN,KAAK,CAACE,WAAN,CAAkBM,GAAlB,CAAsBF,IAAtB,CAAL,EAAkC;AAChCN,UAAAA,KAAK,CAACE,WAAN,CAAkBO,GAAlB,CAAsBH,IAAtB,EAA4B,IAAIH,GAAJ,EAA5B;AACD;;AACDH,QAAAA,KAAK,CAACE,WAAN,CAAkBQ,GAAlB,CAAsBJ,IAAtB,EAA4BG,GAA5B,CAAgCJ,IAAI,CAACM,EAArC,EAAyCN,IAAzC;AACD,OAND;AAOD;;AACD,WAAOL,KAAP;AACD,GAdD,CAcE,OAAOY,CAAP,EAAU,CACV;AACD;;AACD,SAAO,EAAP;AACD,CAnBD;;AAqBAC,OAAO,CAACd,SAAR,GAAoBA,SAApB;AAEA,MAAMe,KAAK,GAAGvB,KAAK,CAACwB,WAAN,CACZxB,KAAK,CAACyB,eAAN,mBAA2BpB,QAA3B,EADY,EAEZG,SAAS,EAFG,EAGZR,KAAK,CAAC0B,eAAN,CAAsB,SAASC,KAAT,CAAe;AAAEC,EAAAA;AAAF,CAAf,EAA6B;AACjD,SAAOC,IAAI,IAAIC,MAAM,IACnBC,KAAK,CAACC,OAAN,CAAcF,MAAd,IACIA,MAAM,CAACG,MAAP,CAAcC,OAAd,EAAuBC,GAAvB,CAA2BP,QAA3B,CADJ,GAEIC,IAAI,CAACC,MAAD,CAHV;AAID,CALD,CAHY,CAAd,C,CAWA;;AACA,SAASM,SAAT,GAAqB;AACnB,MAAIC,OAAO,CAACC,GAAR,CAAYC,uBAAhB,EAAyC;AACvC,WAAOC,OAAO,CAACC,OAAR,EAAP;AACD;;AAED,QAAMhC,KAAK,GAAGc,KAAK,CAACmB,QAAN,EAAd;;AACA,QAAMC,WAAW,GAAGzC,CAAC,CAAC0C,IAAF,CAAOnC,KAAP,EAAc,CAC/B,OAD+B,EAE/B,QAF+B,EAG/B,2BAH+B,EAI/B,eAJ+B,EAK/B,YAL+B,EAM/B,uBAN+B,CAAd,CAApB;;AASA,SAAOH,YAAY,CAACqC,WAAD,CAAnB;AACD;;AAEDrB,OAAO,CAACc,SAAR,GAAoBA,SAApB;AAEAb,KAAK,CAACsB,SAAN,CAAgB,MAAM;AACpB,QAAMC,UAAU,GAAGvB,KAAK,CAACmB,QAAN,GAAiBI,UAApC;AACA1C,EAAAA,OAAO,CAAC2C,IAAR,CAAaD,UAAU,CAAC/B,IAAxB,EAA8B+B,UAA9B;AACD,CAHD;AAKA;;AACAxB,OAAO,CAAClB,OAAR,GAAkBA,OAAlB;AAEA;;AACAkB,OAAO,CAACC,KAAR,GAAgBA,KAAhB","sourcesContent":["const Redux = require(`redux`)\nconst _ = require(`lodash`)\n\nconst mitt = require(`mitt`)\n\n// Create event emitter for actions\nconst emitter = mitt()\n\n// Reducers\nconst reducers = require(`./reducers`)\nconst { writeToCache, readFromCache } = require(`./persist`)\n\n// Read old node data from cache.\nconst readState = () => {\n  try {\n    const state = readFromCache()\n    if (state.nodes) {\n      // re-create nodesByType\n      state.nodesByType = new Map()\n      state.nodes.forEach(node => {\n        const { type } = node.internal\n        if (!state.nodesByType.has(type)) {\n          state.nodesByType.set(type, new Map())\n        }\n        state.nodesByType.get(type).set(node.id, node)\n      })\n    }\n    return state\n  } catch (e) {\n    // ignore errors.\n  }\n  return {}\n}\n\nexports.readState = readState\n\nconst store = Redux.createStore(\n  Redux.combineReducers({ ...reducers }),\n  readState(),\n  Redux.applyMiddleware(function multi({ dispatch }) {\n    return next => action =>\n      Array.isArray(action)\n        ? action.filter(Boolean).map(dispatch)\n        : next(action)\n  })\n)\n\n// Persist state.\nfunction saveState() {\n  if (process.env.DANGEROUSLY_DISABLE_OOM) {\n    return Promise.resolve()\n  }\n\n  const state = store.getState()\n  const pickedState = _.pick(state, [\n    `nodes`,\n    `status`,\n    `componentDataDependencies`,\n    `jsonDataPaths`,\n    `components`,\n    `staticQueryComponents`,\n  ])\n\n  return writeToCache(pickedState)\n}\n\nexports.saveState = saveState\n\nstore.subscribe(() => {\n  const lastAction = store.getState().lastAction\n  emitter.emit(lastAction.type, lastAction)\n})\n\n/** Event emitter */\nexports.emitter = emitter\n\n/** Redux store */\nexports.store = store\n"],"file":"index.js"}
\ No newline at end of file
+{"version":3,"sources":["../../src/redux/index.js"],"names":["Redux","require","_","fs","mitt","stringify","emitter","reducers","objectToMap","obj","map","Map","Object","keys","forEach","key","set","mapToObject","value","initialState","file","readFileSync","process","cwd","Buffer","isBuffer","JSON","parse","staticQueryComponents","components","nodes","nodesByType","node","type","internal","has","get","id","e","store","createStore","combineReducers","applyMiddleware","multi","dispatch","next","action","Array","isArray","filter","Boolean","saveState","state","getState","pickedState","pick","stringified","writeFile","exports","subscribe","lastAction","emit"],"mappings":"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","sourcesContent":["const Redux = require(`redux`)\nconst _ = require(`lodash`)\nconst fs = require(`fs-extra`)\nconst mitt = require(`mitt`)\nconst stringify = require(`json-stringify-safe`)\n\n// Create event emitter for actions\nconst emitter = mitt()\n\n// Reducers\nconst reducers = require(`./reducers`)\n\nconst objectToMap = obj => {\n  let map = new Map()\n  Object.keys(obj).forEach(key => {\n    map.set(key, obj[key])\n  })\n  return map\n}\n\nconst mapToObject = map => {\n  const obj = {}\n  for (let [key, value] of map) {\n    obj[key] = value\n  }\n  return obj\n}\n\n// Read from cache the old node data.\nlet initialState = {}\ntry {\n  const file = fs.readFileSync(`${process.cwd()}/.cache/redux-state.json`)\n  // Apparently the file mocking in node-tracking-test.js\n  // can override the file reading replacing the mocked string with\n  // an already parsed object.\n  if (Buffer.isBuffer(file) || typeof file === `string`) {\n    initialState = JSON.parse(file)\n  }\n  if (initialState.staticQueryComponents) {\n    initialState.staticQueryComponents = objectToMap(\n      initialState.staticQueryComponents\n    )\n  }\n  if (initialState.components) {\n    initialState.components = objectToMap(initialState.components)\n  }\n  if (initialState.nodes) {\n    initialState.nodes = objectToMap(initialState.nodes)\n\n    initialState.nodesByType = new Map()\n    initialState.nodes.forEach(node => {\n      const { type } = node.internal\n      if (!initialState.nodesByType.has(type)) {\n        initialState.nodesByType.set(type, new Map())\n      }\n      initialState.nodesByType.get(type).set(node.id, node)\n    })\n  }\n} catch (e) {\n  // ignore errors.\n}\n\nconst store = Redux.createStore(\n  Redux.combineReducers({ ...reducers }),\n  initialState,\n  Redux.applyMiddleware(function multi({ dispatch }) {\n    return next => action =>\n      Array.isArray(action)\n        ? action.filter(Boolean).map(dispatch)\n        : next(action)\n  })\n)\n\n// Persist state.\nfunction saveState() {\n  const state = store.getState()\n  const pickedState = _.pick(state, [\n    `nodes`,\n    `status`,\n    `componentDataDependencies`,\n    `components`,\n    `staticQueryComponents`,\n    `webpackCompilationHash`,\n  ])\n\n  pickedState.staticQueryComponents = mapToObject(\n    pickedState.staticQueryComponents\n  )\n  pickedState.components = mapToObject(pickedState.components)\n  pickedState.nodes = pickedState.nodes ? mapToObject(pickedState.nodes) : []\n  const stringified = stringify(pickedState, null, 2)\n  return fs.writeFile(`${process.cwd()}/.cache/redux-state.json`, stringified)\n}\n\nexports.saveState = saveState\n\nstore.subscribe(() => {\n  const lastAction = store.getState().lastAction\n  emitter.emit(lastAction.type, lastAction)\n})\n\n/** Event emitter */\nexports.emitter = emitter\n\n/** Redux store */\nexports.store = store\n"],"file":"index.js"}
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/redux/machines/page-component.js b/node_modules/gatsby/dist/redux/machines/page-component.js
index 0920fee..fa63772 100644
--- a/node_modules/gatsby/dist/redux/machines/page-component.js
+++ b/node_modules/gatsby/dist/redux/machines/page-component.js
@@ -79,12 +79,13 @@ module.exports = Machine({
   },
   actions: {
     runPageComponentQueries: (context, event) => {
-      const queryUtil = require(`../../query`); // Wait a bit as calling this function immediately triggers
+      const _require2 = require(`../../query/query-watcher`),
+            queueQueriesForPageComponent = _require2.queueQueriesForPageComponent; // Wait a bit as calling this function immediately triggers
       // an Action call which Redux squawks about.
 
 
       setTimeout(() => {
-        queryUtil.enqueueExtractedPageComponent(context.componentPath);
+        queueQueriesForPageComponent(context.componentPath);
       }, 0);
     },
     setQuery: assign({
@@ -99,14 +100,14 @@ module.exports = Machine({
     setPage: assign({
       pages: (ctx, event) => {
         if (event.path) {
-          const queryUtil = require(`../../query`); // Wait a bit as calling this function immediately triggers
+          const _require3 = require(`../../query/query-watcher`),
+                runQueryForPage = _require3.runQueryForPage; // Wait a bit as calling this function immediately triggers
           // an Action call which Redux squawks about.
 
 
           setTimeout(() => {
             if (!ctx.isInBootstrap) {
-              queryUtil.enqueueExtractedQueryId(event.path);
-              queryUtil.runQueuedQueries(event.path);
+              runQueryForPage(event.path);
             }
           }, 0);
           return ctx.pages.concat(event.path);
diff --git a/node_modules/gatsby/dist/redux/machines/page-component.js.map b/node_modules/gatsby/dist/redux/machines/page-component.js.map
index 54c2351..1d1fe63 100644
--- a/node_modules/gatsby/dist/redux/machines/page-component.js.map
+++ b/node_modules/gatsby/dist/redux/machines/page-component.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../../src/redux/machines/page-component.js"],"names":["require","Machine","assign","actions","module","exports","id","initial","context","isInBootstrap","componentPath","query","on","BOOTSTRAP_FINISHED","DELETE_PAGE","NEW_PAGE_CREATED","QUERY_EXTRACTION_GRAPHQL_ERROR","QUERY_EXTRACTION_BABEL_ERROR","states","inactive","target","cond","inactiveWhileBootstrapping","QUERY_CHANGED","queryExtractionGraphQLError","QUERY_DID_NOT_CHANGE","queryExtractionBabelError","QUERY_EXTRACTION_BABEL_SUCCESS","runningPageQueries","onEntry","QUERIES_COMPLETE","idle","guards","isBootstrapping","isNotBootstrapping","runPageComponentQueries","event","queryUtil","setTimeout","enqueueExtractedPageComponent","setQuery","ctx","setPage","pages","path","enqueueExtractedQueryId","runQueuedQueries","concat","deletePage","filter","p","page","setBootstrapFinished"],"mappings":"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","sourcesContent":["const {\n  Machine,\n  actions: { assign },\n} = require(`xstate`)\n\nmodule.exports = Machine(\n  {\n    id: `pageComponents`,\n    initial: `inactive`,\n    context: {\n      isInBootstrap: true,\n      componentPath: ``,\n      query: ``,\n    },\n    on: {\n      BOOTSTRAP_FINISHED: {\n        actions: `setBootstrapFinished`,\n      },\n      DELETE_PAGE: {\n        actions: `deletePage`,\n      },\n      NEW_PAGE_CREATED: {\n        actions: `setPage`,\n      },\n      QUERY_EXTRACTION_GRAPHQL_ERROR: `queryExtractionGraphQLError`,\n      QUERY_EXTRACTION_BABEL_ERROR: `queryExtractionBabelError`,\n    },\n    states: {\n      inactive: {\n        on: {\n          // Transient transition\n          // Will transition to either 'inactiveWhileBootstrapping' or idle\n          // immediately upon entering 'inactive' state if the condition is met.\n          \"\": [\n            { target: `inactiveWhileBootstrapping`, cond: `isBootstrapping` },\n            { target: `idle`, cond: `isNotBootstrapping` },\n          ],\n        },\n      },\n      inactiveWhileBootstrapping: {\n        on: {\n          BOOTSTRAP_FINISHED: {\n            target: `idle`,\n            actions: `setBootstrapFinished`,\n          },\n          QUERY_CHANGED: `runningPageQueries`,\n        },\n      },\n      queryExtractionGraphQLError: {\n        on: {\n          QUERY_DID_NOT_CHANGE: `idle`,\n          QUERY_CHANGED: `runningPageQueries`,\n        },\n      },\n      queryExtractionBabelError: {\n        on: {\n          QUERY_EXTRACTION_BABEL_SUCCESS: `idle`,\n        },\n      },\n      runningPageQueries: {\n        onEntry: [`setQuery`, `runPageComponentQueries`],\n        on: {\n          QUERIES_COMPLETE: `idle`,\n        },\n      },\n      idle: {\n        on: {\n          QUERY_CHANGED: `runningPageQueries`,\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      isBootstrapping: context => context.isInBootstrap,\n      isNotBootstrapping: context => !context.isInBootstrap,\n    },\n    actions: {\n      runPageComponentQueries: (context, event) => {\n        const queryUtil = require(`../../query`)\n        // Wait a bit as calling this function immediately triggers\n        // an Action call which Redux squawks about.\n        setTimeout(() => {\n          queryUtil.enqueueExtractedPageComponent(context.componentPath)\n        }, 0)\n      },\n      setQuery: assign({\n        query: (ctx, event) => {\n          if (typeof event.query !== `undefined` || event.query !== null) {\n            return event.query\n          } else {\n            return ctx.query\n          }\n        },\n      }),\n      setPage: assign({\n        pages: (ctx, event) => {\n          if (event.path) {\n            const queryUtil = require(`../../query`)\n            // Wait a bit as calling this function immediately triggers\n            // an Action call which Redux squawks about.\n            setTimeout(() => {\n              if (!ctx.isInBootstrap) {\n                queryUtil.enqueueExtractedQueryId(event.path)\n                queryUtil.runQueuedQueries(event.path)\n              }\n            }, 0)\n\n            return ctx.pages.concat(event.path)\n          } else {\n            return ctx.pages\n          }\n        },\n      }),\n      deletePage: assign({\n        pages: (ctx, event) => ctx.pages.filter(p => p !== event.page.path),\n      }),\n      setBootstrapFinished: assign({\n        isInBootstrap: false,\n      }),\n    },\n  }\n)\n"],"file":"page-component.js"}
\ No newline at end of file
+{"version":3,"sources":["../../../src/redux/machines/page-component.js"],"names":["require","Machine","assign","actions","module","exports","id","initial","context","isInBootstrap","componentPath","query","on","BOOTSTRAP_FINISHED","DELETE_PAGE","NEW_PAGE_CREATED","QUERY_EXTRACTION_GRAPHQL_ERROR","QUERY_EXTRACTION_BABEL_ERROR","states","inactive","target","cond","inactiveWhileBootstrapping","QUERY_CHANGED","queryExtractionGraphQLError","QUERY_DID_NOT_CHANGE","queryExtractionBabelError","QUERY_EXTRACTION_BABEL_SUCCESS","runningPageQueries","onEntry","QUERIES_COMPLETE","idle","guards","isBootstrapping","isNotBootstrapping","runPageComponentQueries","event","queueQueriesForPageComponent","setTimeout","setQuery","ctx","setPage","pages","path","runQueryForPage","concat","deletePage","filter","p","page","setBootstrapFinished"],"mappings":"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","sourcesContent":["const {\n  Machine,\n  actions: { assign },\n} = require(`xstate`)\n\nmodule.exports = Machine(\n  {\n    id: `pageComponents`,\n    initial: `inactive`,\n    context: {\n      isInBootstrap: true,\n      componentPath: ``,\n      query: ``,\n    },\n    on: {\n      BOOTSTRAP_FINISHED: {\n        actions: `setBootstrapFinished`,\n      },\n      DELETE_PAGE: {\n        actions: `deletePage`,\n      },\n      NEW_PAGE_CREATED: {\n        actions: `setPage`,\n      },\n      QUERY_EXTRACTION_GRAPHQL_ERROR: `queryExtractionGraphQLError`,\n      QUERY_EXTRACTION_BABEL_ERROR: `queryExtractionBabelError`,\n    },\n    states: {\n      inactive: {\n        on: {\n          // Transient transition\n          // Will transition to either 'inactiveWhileBootstrapping' or idle\n          // immediately upon entering 'inactive' state if the condition is met.\n          \"\": [\n            { target: `inactiveWhileBootstrapping`, cond: `isBootstrapping` },\n            { target: `idle`, cond: `isNotBootstrapping` },\n          ],\n        },\n      },\n      inactiveWhileBootstrapping: {\n        on: {\n          BOOTSTRAP_FINISHED: {\n            target: `idle`,\n            actions: `setBootstrapFinished`,\n          },\n          QUERY_CHANGED: `runningPageQueries`,\n        },\n      },\n      queryExtractionGraphQLError: {\n        on: {\n          QUERY_DID_NOT_CHANGE: `idle`,\n          QUERY_CHANGED: `runningPageQueries`,\n        },\n      },\n      queryExtractionBabelError: {\n        on: {\n          QUERY_EXTRACTION_BABEL_SUCCESS: `idle`,\n        },\n      },\n      runningPageQueries: {\n        onEntry: [`setQuery`, `runPageComponentQueries`],\n        on: {\n          QUERIES_COMPLETE: `idle`,\n        },\n      },\n      idle: {\n        on: {\n          QUERY_CHANGED: `runningPageQueries`,\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      isBootstrapping: context => context.isInBootstrap,\n      isNotBootstrapping: context => !context.isInBootstrap,\n    },\n    actions: {\n      runPageComponentQueries: (context, event) => {\n        const {\n          queueQueriesForPageComponent,\n        } = require(`../../query/query-watcher`)\n        // Wait a bit as calling this function immediately triggers\n        // an Action call which Redux squawks about.\n        setTimeout(() => {\n          queueQueriesForPageComponent(context.componentPath)\n        }, 0)\n      },\n      setQuery: assign({\n        query: (ctx, event) => {\n          if (typeof event.query !== `undefined` || event.query !== null) {\n            return event.query\n          } else {\n            return ctx.query\n          }\n        },\n      }),\n      setPage: assign({\n        pages: (ctx, event) => {\n          if (event.path) {\n            const { runQueryForPage } = require(`../../query/query-watcher`)\n            // Wait a bit as calling this function immediately triggers\n            // an Action call which Redux squawks about.\n            setTimeout(() => {\n              if (!ctx.isInBootstrap) {\n                runQueryForPage(event.path)\n              }\n            }, 0)\n\n            return ctx.pages.concat(event.path)\n          } else {\n            return ctx.pages\n          }\n        },\n      }),\n      deletePage: assign({\n        pages: (ctx, event) => ctx.pages.filter(p => p !== event.page.path),\n      }),\n      setBootstrapFinished: assign({\n        isInBootstrap: false,\n      }),\n    },\n  }\n)\n"],"file":"page-component.js"}
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/redux/persist.js b/node_modules/gatsby/dist/redux/persist.js
deleted file mode 100644
index b07c2cc..0000000
--- a/node_modules/gatsby/dist/redux/persist.js
+++ /dev/null
@@ -1,73 +0,0 @@
-"use strict";
-
-const v8 = require(`v8`);
-
-const fs = require(`fs-extra`);
-
-const stringify = require(`json-stringify-safe`);
-
-const objectToMap = obj => {
-  const map = new Map();
-  Object.keys(obj).forEach(key => {
-    map.set(key, obj[key]);
-  });
-  return map;
-};
-
-const mapToObject = map => {
-  const obj = {};
-
-  for (var _iterator = map, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
-    var _ref;
-
-    if (_isArray) {
-      if (_i >= _iterator.length) break;
-      _ref = _iterator[_i++];
-    } else {
-      _i = _iterator.next();
-      if (_i.done) break;
-      _ref = _i.value;
-    }
-
-    let _ref2 = _ref,
-        key = _ref2[0],
-        value = _ref2[1];
-    obj[key] = value;
-  }
-
-  return obj;
-};
-
-const jsonStringify = contents => {
-  contents.staticQueryComponents = mapToObject(contents.staticQueryComponents);
-  contents.components = mapToObject(contents.components);
-  contents.nodes = contents.nodes ? mapToObject(contents.nodes) : {};
-  return stringify(contents, null, 2);
-};
-
-const jsonParse = buffer => {
-  const parsed = JSON.parse(buffer.toString(`utf8`));
-  parsed.staticQueryComponents = objectToMap(parsed.staticQueryComponents);
-  parsed.components = objectToMap(parsed.components);
-  parsed.nodes = objectToMap(parsed.nodes || {});
-  return parsed;
-};
-
-const useV8 = Boolean(v8.serialize);
-
-const _ref3 = useV8 ? [v8.serialize, v8.deserialize, `${process.cwd()}/.cache/redux.state`] : [jsonStringify, jsonParse, `${process.cwd()}/.cache/redux-state.json`],
-      serialize = _ref3[0],
-      deserialize = _ref3[1],
-      file = _ref3[2];
-
-const readFromCache = () => deserialize(fs.readFileSync(file));
-
-const writeToCache = contents => {
-  fs.writeFileSync(file, serialize(contents));
-};
-
-module.exports = {
-  readFromCache,
-  writeToCache
-};
-//# sourceMappingURL=persist.js.map
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/redux/persist.js.map b/node_modules/gatsby/dist/redux/persist.js.map
deleted file mode 100644
index f3f64e8..0000000
--- a/node_modules/gatsby/dist/redux/persist.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"sources":["../../src/redux/persist.js"],"names":["v8","require","fs","stringify","objectToMap","obj","map","Map","Object","keys","forEach","key","set","mapToObject","value","jsonStringify","contents","staticQueryComponents","components","nodes","jsonParse","buffer","parsed","JSON","parse","toString","useV8","Boolean","serialize","deserialize","process","cwd","file","readFromCache","readFileSync","writeToCache","writeFileSync","module","exports"],"mappings":";;AAAA,MAAMA,EAAE,GAAGC,OAAO,CAAE,IAAF,CAAlB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAE,UAAF,CAAlB;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAE,qBAAF,CAAzB;;AAEA,MAAMG,WAAW,GAAGC,GAAG,IAAI;AACzB,QAAMC,GAAG,GAAG,IAAIC,GAAJ,EAAZ;AACAC,EAAAA,MAAM,CAACC,IAAP,CAAYJ,GAAZ,EAAiBK,OAAjB,CAAyBC,GAAG,IAAI;AAC9BL,IAAAA,GAAG,CAACM,GAAJ,CAAQD,GAAR,EAAaN,GAAG,CAACM,GAAD,CAAhB;AACD,GAFD;AAGA,SAAOL,GAAP;AACD,CAND;;AAQA,MAAMO,WAAW,GAAGP,GAAG,IAAI;AACzB,QAAMD,GAAG,GAAG,EAAZ;;AACA,uBAAyBC,GAAzB,kHAA8B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,QAApBK,GAAoB;AAAA,QAAfG,KAAe;AAC5BT,IAAAA,GAAG,CAACM,GAAD,CAAH,GAAWG,KAAX;AACD;;AACD,SAAOT,GAAP;AACD,CAND;;AAQA,MAAMU,aAAa,GAAGC,QAAQ,IAAI;AAChCA,EAAAA,QAAQ,CAACC,qBAAT,GAAiCJ,WAAW,CAACG,QAAQ,CAACC,qBAAV,CAA5C;AACAD,EAAAA,QAAQ,CAACE,UAAT,GAAsBL,WAAW,CAACG,QAAQ,CAACE,UAAV,CAAjC;AACAF,EAAAA,QAAQ,CAACG,KAAT,GAAiBH,QAAQ,CAACG,KAAT,GAAiBN,WAAW,CAACG,QAAQ,CAACG,KAAV,CAA5B,GAA+C,EAAhE;AACA,SAAOhB,SAAS,CAACa,QAAD,EAAW,IAAX,EAAiB,CAAjB,CAAhB;AACD,CALD;;AAOA,MAAMI,SAAS,GAAGC,MAAM,IAAI;AAC1B,QAAMC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWH,MAAM,CAACI,QAAP,CAAiB,MAAjB,CAAX,CAAf;AACAH,EAAAA,MAAM,CAACL,qBAAP,GAA+Bb,WAAW,CAACkB,MAAM,CAACL,qBAAR,CAA1C;AACAK,EAAAA,MAAM,CAACJ,UAAP,GAAoBd,WAAW,CAACkB,MAAM,CAACJ,UAAR,CAA/B;AACAI,EAAAA,MAAM,CAACH,KAAP,GAAef,WAAW,CAACkB,MAAM,CAACH,KAAP,IAAgB,EAAjB,CAA1B;AACA,SAAOG,MAAP;AACD,CAND;;AAQA,MAAMI,KAAK,GAAGC,OAAO,CAAC3B,EAAE,CAAC4B,SAAJ,CAArB;;cACuCF,KAAK,GACxC,CAAC1B,EAAE,CAAC4B,SAAJ,EAAe5B,EAAE,CAAC6B,WAAlB,EAAgC,GAAEC,OAAO,CAACC,GAAR,EAAc,qBAAhD,CADwC,GAExC,CAAChB,aAAD,EAAgBK,SAAhB,EAA4B,GAAEU,OAAO,CAACC,GAAR,EAAc,0BAA5C,C;MAFGH,S;MAAWC,W;MAAaG,I;;AAI/B,MAAMC,aAAa,GAAG,MAAMJ,WAAW,CAAC3B,EAAE,CAACgC,YAAH,CAAgBF,IAAhB,CAAD,CAAvC;;AAEA,MAAMG,YAAY,GAAGnB,QAAQ,IAAI;AAC/Bd,EAAAA,EAAE,CAACkC,aAAH,CAAiBJ,IAAjB,EAAuBJ,SAAS,CAACZ,QAAD,CAAhC;AACD,CAFD;;AAIAqB,MAAM,CAACC,OAAP,GAAiB;AAAEL,EAAAA,aAAF;AAAiBE,EAAAA;AAAjB,CAAjB","sourcesContent":["const v8 = require(`v8`)\nconst fs = require(`fs-extra`)\nconst stringify = require(`json-stringify-safe`)\n\nconst objectToMap = obj => {\n  const map = new Map()\n  Object.keys(obj).forEach(key => {\n    map.set(key, obj[key])\n  })\n  return map\n}\n\nconst mapToObject = map => {\n  const obj = {}\n  for (let [key, value] of map) {\n    obj[key] = value\n  }\n  return obj\n}\n\nconst jsonStringify = contents => {\n  contents.staticQueryComponents = mapToObject(contents.staticQueryComponents)\n  contents.components = mapToObject(contents.components)\n  contents.nodes = contents.nodes ? mapToObject(contents.nodes) : {}\n  return stringify(contents, null, 2)\n}\n\nconst jsonParse = buffer => {\n  const parsed = JSON.parse(buffer.toString(`utf8`))\n  parsed.staticQueryComponents = objectToMap(parsed.staticQueryComponents)\n  parsed.components = objectToMap(parsed.components)\n  parsed.nodes = objectToMap(parsed.nodes || {})\n  return parsed\n}\n\nconst useV8 = Boolean(v8.serialize)\nconst [serialize, deserialize, file] = useV8\n  ? [v8.serialize, v8.deserialize, `${process.cwd()}/.cache/redux.state`]\n  : [jsonStringify, jsonParse, `${process.cwd()}/.cache/redux-state.json`]\n\nconst readFromCache = () => deserialize(fs.readFileSync(file))\n\nconst writeToCache = contents => {\n  fs.writeFileSync(file, serialize(contents))\n}\n\nmodule.exports = { readFromCache, writeToCache }\n"],"file":"persist.js"}
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/redux/reducers/components.js b/node_modules/gatsby/dist/redux/reducers/components.js
index e946de9..9b22d26 100644
--- a/node_modules/gatsby/dist/redux/reducers/components.js
+++ b/node_modules/gatsby/dist/redux/reducers/components.js
@@ -93,19 +93,15 @@ module.exports = (state = new Map(), action) => {
     case `QUERY_EXTRACTION_BABEL_ERROR`:
     case `QUERY_EXTRACTION_GRAPHQL_ERROR`:
       {
-        let servicesToSendEventTo;
+        action.payload.componentPath = normalize(action.payload.componentPath);
+        const service = services.get(action.payload.componentPath);
 
-        if (typeof action.payload.componentPath !== `string` && action.type === `QUERY_EXTRACTION_GRAPHQL_ERROR`) {
-          // if this is globabl query extraction error, send it to all page component services
-          servicesToSendEventTo = services;
-        } else {
-          action.payload.componentPath = normalize(action.payload.componentPath);
-          servicesToSendEventTo = [services.get(action.payload.componentPath)].filter(Boolean);
+        if (service) {
+          service.send(Object.assign({
+            type: action.type
+          }, action.payload));
         }
 
-        servicesToSendEventTo.forEach(service => service.send(Object.assign({
-          type: action.type
-        }, action.payload)));
         return state;
       }
 
diff --git a/node_modules/gatsby/dist/redux/reducers/components.js.map b/node_modules/gatsby/dist/redux/reducers/components.js.map
index c3767ac..23b6508 100644
--- a/node_modules/gatsby/dist/redux/reducers/components.js.map
+++ b/node_modules/gatsby/dist/redux/reducers/components.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../../src/redux/reducers/components.js"],"names":["normalize","require","interpret","componentMachine","services","Map","programStatus","module","exports","state","action","type","payload","forEach","s","send","componentPath","component","service","has","machine","withContext","query","get","pages","path","isInBootstrap","start","set","context","includes","Object","assign","value","servicesToSendEventTo","filter","Boolean","isPage","delete","page"],"mappings":"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","sourcesContent":["const normalize = require(`normalize-path`)\nconst { interpret } = require(`xstate`)\n\nconst componentMachine = require(`../machines/page-component`)\n\nconst services = new Map()\nlet programStatus = `BOOTSTRAPPING`\n\nmodule.exports = (state = new Map(), action) => {\n  switch (action.type) {\n    case `DELETE_CACHE`:\n      return new Map()\n    case `SET_PROGRAM_STATUS`:\n      programStatus = action.payload\n      if (programStatus === `BOOTSTRAP_QUERY_RUNNING_FINISHED`) {\n        services.forEach(s => s.send(`BOOTSTRAP_FINISHED`))\n      }\n      return state\n    case `CREATE_PAGE`: {\n      action.payload.componentPath = normalize(action.payload.component)\n      // Create XState service.\n      let service\n      if (!services.has(action.payload.componentPath)) {\n        const machine = componentMachine.withContext({\n          componentPath: action.payload.componentPath,\n          query: state.get(action.payload.componentPath)?.query || ``,\n          pages: [action.payload.path],\n          isInBootstrap: programStatus === `BOOTSTRAPPING`,\n        })\n        service = interpret(machine).start()\n        // .onTransition(nextState => {\n        // console.log(\n        // `component machine value`,\n        // _.pick(nextState, [`value`, `context`, `event`])\n        // )\n        // })\n        // .start()\n        services.set(action.payload.componentPath, service)\n      } else {\n        service = services.get(action.payload.componentPath)\n        if (!service.state.context.pages.includes(action.payload.path)) {\n          service.send({ type: `NEW_PAGE_CREATED`, path: action.payload.path })\n        }\n      }\n\n      state.set(\n        action.payload.componentPath,\n        Object.assign(\n          {\n            query: ``,\n          },\n          service.state.context\n        )\n      )\n      return state\n    }\n    case `QUERY_EXTRACTED`: {\n      action.payload.componentPath = normalize(action.payload.componentPath)\n      const service = services.get(action.payload.componentPath)\n\n      if (service.state.value === `queryExtractionBabelError`) {\n        // Do nothing until the babel error is fixed.\n        return state\n      }\n\n      // Check if the query has changed or not.\n      if (service.state.context.query === action.payload.query) {\n        service.send(`QUERY_DID_NOT_CHANGE`)\n      } else {\n        service.send({\n          type: `QUERY_CHANGED`,\n          query: action.payload.query,\n        })\n      }\n\n      state.set(action.payload.componentPath, {\n        ...service.state.context,\n      })\n      return state\n    }\n    case `QUERY_EXTRACTION_BABEL_SUCCESS`:\n    case `QUERY_EXTRACTION_BABEL_ERROR`:\n    case `QUERY_EXTRACTION_GRAPHQL_ERROR`: {\n      let servicesToSendEventTo\n      if (\n        typeof action.payload.componentPath !== `string` &&\n        action.type === `QUERY_EXTRACTION_GRAPHQL_ERROR`\n      ) {\n        // if this is globabl query extraction error, send it to all page component services\n        servicesToSendEventTo = services\n      } else {\n        action.payload.componentPath = normalize(action.payload.componentPath)\n        servicesToSendEventTo = [\n          services.get(action.payload.componentPath),\n        ].filter(Boolean)\n      }\n\n      servicesToSendEventTo.forEach(service =>\n        service.send({\n          type: action.type,\n          ...action.payload,\n        })\n      )\n\n      return state\n    }\n    case `PAGE_QUERY_RUN`: {\n      if (action.payload.isPage) {\n        action.payload.componentPath = normalize(action.payload.componentPath)\n        const service = services.get(action.payload.componentPath)\n        // TODO we want to keep track of whether there's any outstanding queries still\n        // running as this will mark queries as complete immediately even though\n        // a page component could have thousands of pages will processing.\n        // This can be done once we start modeling Pages as well.\n        service.send({\n          type: `QUERIES_COMPLETE`,\n        })\n      }\n      return state\n    }\n    case `REMOVE_TEMPLATE_COMPONENT`: {\n      action.payload.componentPath = normalize(action.payload.componentPath)\n      state.delete(action.payload.componentPath)\n      return state\n    }\n    case `DELETE_PAGE`: {\n      const service = services.get(normalize(action.payload.component))\n      service.send({\n        type: `DELETE_PAGE`,\n        page: action.payload,\n      })\n      return state\n    }\n  }\n\n  return state\n}\n"],"file":"components.js"}
\ No newline at end of file
+{"version":3,"sources":["../../../src/redux/reducers/components.js"],"names":["normalize","require","interpret","componentMachine","services","Map","programStatus","module","exports","state","action","type","payload","forEach","s","send","componentPath","component","service","has","machine","withContext","query","get","pages","path","isInBootstrap","start","set","context","includes","Object","assign","value","isPage","delete","page"],"mappings":"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","sourcesContent":["const normalize = require(`normalize-path`)\nconst { interpret } = require(`xstate`)\n\nconst componentMachine = require(`../machines/page-component`)\n\nconst services = new Map()\nlet programStatus = `BOOTSTRAPPING`\n\nmodule.exports = (state = new Map(), action) => {\n  switch (action.type) {\n    case `DELETE_CACHE`:\n      return new Map()\n    case `SET_PROGRAM_STATUS`:\n      programStatus = action.payload\n      if (programStatus === `BOOTSTRAP_QUERY_RUNNING_FINISHED`) {\n        services.forEach(s => s.send(`BOOTSTRAP_FINISHED`))\n      }\n      return state\n    case `CREATE_PAGE`: {\n      action.payload.componentPath = normalize(action.payload.component)\n      // Create XState service.\n      let service\n      if (!services.has(action.payload.componentPath)) {\n        const machine = componentMachine.withContext({\n          componentPath: action.payload.componentPath,\n          query: state.get(action.payload.componentPath)?.query || ``,\n          pages: [action.payload.path],\n          isInBootstrap: programStatus === `BOOTSTRAPPING`,\n        })\n        service = interpret(machine).start()\n        // .onTransition(nextState => {\n        // console.log(\n        // `component machine value`,\n        // _.pick(nextState, [`value`, `context`, `event`])\n        // )\n        // })\n        // .start()\n        services.set(action.payload.componentPath, service)\n      } else {\n        service = services.get(action.payload.componentPath)\n        if (!service.state.context.pages.includes(action.payload.path)) {\n          service.send({ type: `NEW_PAGE_CREATED`, path: action.payload.path })\n        }\n      }\n\n      state.set(\n        action.payload.componentPath,\n        Object.assign(\n          {\n            query: ``,\n          },\n          service.state.context\n        )\n      )\n      return state\n    }\n    case `QUERY_EXTRACTED`: {\n      action.payload.componentPath = normalize(action.payload.componentPath)\n      const service = services.get(action.payload.componentPath)\n\n      if (service.state.value === `queryExtractionBabelError`) {\n        // Do nothing until the babel error is fixed.\n        return state\n      }\n\n      // Check if the query has changed or not.\n      if (service.state.context.query === action.payload.query) {\n        service.send(`QUERY_DID_NOT_CHANGE`)\n      } else {\n        service.send({\n          type: `QUERY_CHANGED`,\n          query: action.payload.query,\n        })\n      }\n\n      state.set(action.payload.componentPath, {\n        ...service.state.context,\n      })\n      return state\n    }\n    case `QUERY_EXTRACTION_BABEL_SUCCESS`:\n    case `QUERY_EXTRACTION_BABEL_ERROR`:\n    case `QUERY_EXTRACTION_GRAPHQL_ERROR`: {\n      action.payload.componentPath = normalize(action.payload.componentPath)\n      const service = services.get(action.payload.componentPath)\n      if (service) {\n        service.send({\n          type: action.type,\n          ...action.payload,\n        })\n      }\n      return state\n    }\n    case `PAGE_QUERY_RUN`: {\n      if (action.payload.isPage) {\n        action.payload.componentPath = normalize(action.payload.componentPath)\n        const service = services.get(action.payload.componentPath)\n        // TODO we want to keep track of whether there's any outstanding queries still\n        // running as this will mark queries as complete immediately even though\n        // a page component could have thousands of pages will processing.\n        // This can be done once we start modeling Pages as well.\n        service.send({\n          type: `QUERIES_COMPLETE`,\n        })\n      }\n      return state\n    }\n    case `REMOVE_TEMPLATE_COMPONENT`: {\n      action.payload.componentPath = normalize(action.payload.componentPath)\n      state.delete(action.payload.componentPath)\n      return state\n    }\n    case `DELETE_PAGE`: {\n      const service = services.get(normalize(action.payload.component))\n      service.send({\n        type: `DELETE_PAGE`,\n        page: action.payload,\n      })\n      return state\n    }\n  }\n\n  return state\n}\n"],"file":"components.js"}
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/redux/reducers/index.js b/node_modules/gatsby/dist/redux/reducers/index.js
index 4ba6812..44d2ec2 100644
--- a/node_modules/gatsby/dist/redux/reducers/index.js
+++ b/node_modules/gatsby/dist/redux/reducers/index.js
@@ -35,6 +35,7 @@ module.exports = {
   flattenedPlugins: require(`./flattened-plugins`),
   config: require(`./config`),
   pages: require(`./pages`),
+  matchPaths: require(`./match-paths`),
   schema: require(`./schema`),
   status: require(`./status`),
   componentDataDependencies: require(`./component-data-dependencies`),
@@ -42,9 +43,9 @@ module.exports = {
   staticQueryComponents: require(`./static-query-components`),
   jobs: require(`./jobs`),
   webpack: require(`./webpack`),
+  webpackCompilationHash: require(`./webpack-compilation-hash`),
   redirects: require(`./redirects`),
   babelrc: require(`./babelrc`),
-  jsonDataPaths: require(`./json-data-paths`),
   schemaCustomization: require(`./schema-customization`),
   themes: require(`./themes`)
 };
diff --git a/node_modules/gatsby/dist/redux/reducers/index.js.map b/node_modules/gatsby/dist/redux/reducers/index.js.map
index 24e63ef..5afac34 100644
--- a/node_modules/gatsby/dist/redux/reducers/index.js.map
+++ b/node_modules/gatsby/dist/redux/reducers/index.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../../src/redux/reducers/index.js"],"names":["reduxNodes","require","lokiNodes","reducer","backend","process","env","GATSBY_DB_NODES","getNodesReducer","nodesReducer","Error","module","exports","program","nodes","nodesByType","resolvedNodesCache","nodesTouched","lastAction","flattenedPlugins","config","pages","schema","status","componentDataDependencies","components","staticQueryComponents","jobs","webpack","redirects","babelrc","jsonDataPaths","schemaCustomization","themes"],"mappings":";;AAAA,MAAMA,UAAU,GAAGC,OAAO,CAAE,SAAF,CAA1B;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAE,qBAAF,CAAP,CAA+BE,OAAjD;;AAEA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,eAAZ,IAAgC,OAAhD;;AAEA,SAASC,eAAT,GAA2B;AACzB,MAAIC,YAAJ;;AACA,UAAQL,OAAR;AACE,SAAM,OAAN;AACEK,MAAAA,YAAY,GAAGT,UAAf;AACA;;AACF,SAAM,MAAN;AACES,MAAAA,YAAY,GAAGP,SAAf;AACA;;AACF;AACE,YAAM,IAAIQ,KAAJ,CACH,iEADG,CAAN;AARJ;;AAYA,SAAOD,YAAP;AACD;;AAEDE,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,OAAO,EAAEZ,OAAO,CAAE,WAAF,CADD;AAEfa,EAAAA,KAAK,EAAEN,eAAe,EAFP;AAGfO,EAAAA,WAAW,EAAEd,OAAO,CAAE,iBAAF,CAHL;AAIfe,EAAAA,kBAAkB,EAAEf,OAAO,CAAE,kBAAF,CAJZ;AAKfgB,EAAAA,YAAY,EAAEhB,OAAO,CAAE,iBAAF,CALN;AAMfiB,EAAAA,UAAU,EAAEjB,OAAO,CAAE,eAAF,CANJ;AAOfkB,EAAAA,gBAAgB,EAAElB,OAAO,CAAE,qBAAF,CAPV;AAQfmB,EAAAA,MAAM,EAAEnB,OAAO,CAAE,UAAF,CARA;AASfoB,EAAAA,KAAK,EAAEpB,OAAO,CAAE,SAAF,CATC;AAUfqB,EAAAA,MAAM,EAAErB,OAAO,CAAE,UAAF,CAVA;AAWfsB,EAAAA,MAAM,EAAEtB,OAAO,CAAE,UAAF,CAXA;AAYfuB,EAAAA,yBAAyB,EAAEvB,OAAO,CAAE,+BAAF,CAZnB;AAafwB,EAAAA,UAAU,EAAExB,OAAO,CAAE,cAAF,CAbJ;AAcfyB,EAAAA,qBAAqB,EAAEzB,OAAO,CAAE,2BAAF,CAdf;AAef0B,EAAAA,IAAI,EAAE1B,OAAO,CAAE,QAAF,CAfE;AAgBf2B,EAAAA,OAAO,EAAE3B,OAAO,CAAE,WAAF,CAhBD;AAiBf4B,EAAAA,SAAS,EAAE5B,OAAO,CAAE,aAAF,CAjBH;AAkBf6B,EAAAA,OAAO,EAAE7B,OAAO,CAAE,WAAF,CAlBD;AAmBf8B,EAAAA,aAAa,EAAE9B,OAAO,CAAE,mBAAF,CAnBP;AAoBf+B,EAAAA,mBAAmB,EAAE/B,OAAO,CAAE,wBAAF,CApBb;AAqBfgC,EAAAA,MAAM,EAAEhC,OAAO,CAAE,UAAF;AArBA,CAAjB","sourcesContent":["const reduxNodes = require(`./nodes`)\nconst lokiNodes = require(`../../db/loki/nodes`).reducer\n\nconst backend = process.env.GATSBY_DB_NODES || `redux`\n\nfunction getNodesReducer() {\n  let nodesReducer\n  switch (backend) {\n    case `redux`:\n      nodesReducer = reduxNodes\n      break\n    case `loki`:\n      nodesReducer = lokiNodes\n      break\n    default:\n      throw new Error(\n        `Unsupported DB nodes backend (value of env var GATSBY_DB_NODES)`\n      )\n  }\n  return nodesReducer\n}\n\nmodule.exports = {\n  program: require(`./program`),\n  nodes: getNodesReducer(),\n  nodesByType: require(`./nodes-by-type`),\n  resolvedNodesCache: require(`./resolved-nodes`),\n  nodesTouched: require(`./nodes-touched`),\n  lastAction: require(`./last-action`),\n  flattenedPlugins: require(`./flattened-plugins`),\n  config: require(`./config`),\n  pages: require(`./pages`),\n  schema: require(`./schema`),\n  status: require(`./status`),\n  componentDataDependencies: require(`./component-data-dependencies`),\n  components: require(`./components`),\n  staticQueryComponents: require(`./static-query-components`),\n  jobs: require(`./jobs`),\n  webpack: require(`./webpack`),\n  redirects: require(`./redirects`),\n  babelrc: require(`./babelrc`),\n  jsonDataPaths: require(`./json-data-paths`),\n  schemaCustomization: require(`./schema-customization`),\n  themes: require(`./themes`),\n}\n"],"file":"index.js"}
\ No newline at end of file
+{"version":3,"sources":["../../../src/redux/reducers/index.js"],"names":["reduxNodes","require","lokiNodes","reducer","backend","process","env","GATSBY_DB_NODES","getNodesReducer","nodesReducer","Error","module","exports","program","nodes","nodesByType","resolvedNodesCache","nodesTouched","lastAction","flattenedPlugins","config","pages","matchPaths","schema","status","componentDataDependencies","components","staticQueryComponents","jobs","webpack","webpackCompilationHash","redirects","babelrc","schemaCustomization","themes"],"mappings":";;AAAA,MAAMA,UAAU,GAAGC,OAAO,CAAE,SAAF,CAA1B;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAE,qBAAF,CAAP,CAA+BE,OAAjD;;AAEA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,eAAZ,IAAgC,OAAhD;;AAEA,SAASC,eAAT,GAA2B;AACzB,MAAIC,YAAJ;;AACA,UAAQL,OAAR;AACE,SAAM,OAAN;AACEK,MAAAA,YAAY,GAAGT,UAAf;AACA;;AACF,SAAM,MAAN;AACES,MAAAA,YAAY,GAAGP,SAAf;AACA;;AACF;AACE,YAAM,IAAIQ,KAAJ,CACH,iEADG,CAAN;AARJ;;AAYA,SAAOD,YAAP;AACD;;AAEDE,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,OAAO,EAAEZ,OAAO,CAAE,WAAF,CADD;AAEfa,EAAAA,KAAK,EAAEN,eAAe,EAFP;AAGfO,EAAAA,WAAW,EAAEd,OAAO,CAAE,iBAAF,CAHL;AAIfe,EAAAA,kBAAkB,EAAEf,OAAO,CAAE,kBAAF,CAJZ;AAKfgB,EAAAA,YAAY,EAAEhB,OAAO,CAAE,iBAAF,CALN;AAMfiB,EAAAA,UAAU,EAAEjB,OAAO,CAAE,eAAF,CANJ;AAOfkB,EAAAA,gBAAgB,EAAElB,OAAO,CAAE,qBAAF,CAPV;AAQfmB,EAAAA,MAAM,EAAEnB,OAAO,CAAE,UAAF,CARA;AASfoB,EAAAA,KAAK,EAAEpB,OAAO,CAAE,SAAF,CATC;AAUfqB,EAAAA,UAAU,EAAErB,OAAO,CAAE,eAAF,CAVJ;AAWfsB,EAAAA,MAAM,EAAEtB,OAAO,CAAE,UAAF,CAXA;AAYfuB,EAAAA,MAAM,EAAEvB,OAAO,CAAE,UAAF,CAZA;AAafwB,EAAAA,yBAAyB,EAAExB,OAAO,CAAE,+BAAF,CAbnB;AAcfyB,EAAAA,UAAU,EAAEzB,OAAO,CAAE,cAAF,CAdJ;AAef0B,EAAAA,qBAAqB,EAAE1B,OAAO,CAAE,2BAAF,CAff;AAgBf2B,EAAAA,IAAI,EAAE3B,OAAO,CAAE,QAAF,CAhBE;AAiBf4B,EAAAA,OAAO,EAAE5B,OAAO,CAAE,WAAF,CAjBD;AAkBf6B,EAAAA,sBAAsB,EAAE7B,OAAO,CAAE,4BAAF,CAlBhB;AAmBf8B,EAAAA,SAAS,EAAE9B,OAAO,CAAE,aAAF,CAnBH;AAoBf+B,EAAAA,OAAO,EAAE/B,OAAO,CAAE,WAAF,CApBD;AAqBfgC,EAAAA,mBAAmB,EAAEhC,OAAO,CAAE,wBAAF,CArBb;AAsBfiC,EAAAA,MAAM,EAAEjC,OAAO,CAAE,UAAF;AAtBA,CAAjB","sourcesContent":["const reduxNodes = require(`./nodes`)\nconst lokiNodes = require(`../../db/loki/nodes`).reducer\n\nconst backend = process.env.GATSBY_DB_NODES || `redux`\n\nfunction getNodesReducer() {\n  let nodesReducer\n  switch (backend) {\n    case `redux`:\n      nodesReducer = reduxNodes\n      break\n    case `loki`:\n      nodesReducer = lokiNodes\n      break\n    default:\n      throw new Error(\n        `Unsupported DB nodes backend (value of env var GATSBY_DB_NODES)`\n      )\n  }\n  return nodesReducer\n}\n\nmodule.exports = {\n  program: require(`./program`),\n  nodes: getNodesReducer(),\n  nodesByType: require(`./nodes-by-type`),\n  resolvedNodesCache: require(`./resolved-nodes`),\n  nodesTouched: require(`./nodes-touched`),\n  lastAction: require(`./last-action`),\n  flattenedPlugins: require(`./flattened-plugins`),\n  config: require(`./config`),\n  pages: require(`./pages`),\n  matchPaths: require(`./match-paths`),\n  schema: require(`./schema`),\n  status: require(`./status`),\n  componentDataDependencies: require(`./component-data-dependencies`),\n  components: require(`./components`),\n  staticQueryComponents: require(`./static-query-components`),\n  jobs: require(`./jobs`),\n  webpack: require(`./webpack`),\n  webpackCompilationHash: require(`./webpack-compilation-hash`),\n  redirects: require(`./redirects`),\n  babelrc: require(`./babelrc`),\n  schemaCustomization: require(`./schema-customization`),\n  themes: require(`./themes`),\n}\n"],"file":"index.js"}
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/redux/reducers/json-data-paths.js b/node_modules/gatsby/dist/redux/reducers/json-data-paths.js
deleted file mode 100644
index 9f8893b..0000000
--- a/node_modules/gatsby/dist/redux/reducers/json-data-paths.js
+++ /dev/null
@@ -1,18 +0,0 @@
-"use strict";
-
-// const omit = require(`lodash/omit`)
-module.exports = (state = {}, action) => {
-  switch (action.type) {
-    // case `DELETE_ALL_JSON_DATA_PATHS`:
-    //   return {}
-    case `SET_JSON_DATA_PATH`:
-      state[action.payload.key] = action.payload.value;
-      return state;
-    // case `DELETE_JSON_DATA_PATH`:
-    //   return omit(state, action.payload)
-
-    default:
-      return state;
-  }
-};
-//# sourceMappingURL=json-data-paths.js.map
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/redux/reducers/json-data-paths.js.map b/node_modules/gatsby/dist/redux/reducers/json-data-paths.js.map
deleted file mode 100644
index 7f29738..0000000
--- a/node_modules/gatsby/dist/redux/reducers/json-data-paths.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"sources":["../../../src/redux/reducers/json-data-paths.js"],"names":["module","exports","state","action","type","payload","key","value"],"mappings":";;AAAA;AAEAA,MAAM,CAACC,OAAP,GAAiB,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AACvC,UAAQA,MAAM,CAACC,IAAf;AACE;AACA;AACA,SAAM,oBAAN;AACEF,MAAAA,KAAK,CAACC,MAAM,CAACE,OAAP,CAAeC,GAAhB,CAAL,GAA4BH,MAAM,CAACE,OAAP,CAAeE,KAA3C;AACA,aAAOL,KAAP;AACF;AACA;;AACA;AACE,aAAOA,KAAP;AATJ;AAWD,CAZD","sourcesContent":["// const omit = require(`lodash/omit`)\n\nmodule.exports = (state = {}, action) => {\n  switch (action.type) {\n    // case `DELETE_ALL_JSON_DATA_PATHS`:\n    //   return {}\n    case `SET_JSON_DATA_PATH`:\n      state[action.payload.key] = action.payload.value\n      return state\n    // case `DELETE_JSON_DATA_PATH`:\n    //   return omit(state, action.payload)\n    default:\n      return state\n  }\n}\n"],"file":"json-data-paths.js"}
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/redux/reducers/match-paths.js b/node_modules/gatsby/dist/redux/reducers/match-paths.js
new file mode 100644
index 0000000..b23994b
--- /dev/null
+++ b/node_modules/gatsby/dist/redux/reducers/match-paths.js
@@ -0,0 +1,44 @@
+"use strict";
+
+const _ = require(`lodash`);
+
+module.exports = (state = {}, action) => {
+  switch (action.type) {
+    case `DELETE_CACHE`:
+      return {};
+
+    case `CREATE_PAGE`:
+      {
+        const page = action.payload;
+
+        if (page.matchPath) {
+          const oldPage = action.oldPage;
+          const newState = Object.assign({}, state);
+
+          if (oldPage && oldPage.matchPath !== page.matchPath) {
+            delete newState.matchMaths[oldPage.matchPath];
+          }
+
+          newState[page.matchPath] = page.path;
+          return newState;
+        } else {
+          return state;
+        }
+      }
+
+    case `DELETE_PAGE`:
+      {
+        const page = action.payload;
+
+        if (page.matchPath) {
+          return _.omit(state, [page.matchPath]);
+        } else {
+          return state;
+        }
+      }
+
+    default:
+      return state;
+  }
+};
+//# sourceMappingURL=match-paths.js.map
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/redux/reducers/match-paths.js.map b/node_modules/gatsby/dist/redux/reducers/match-paths.js.map
new file mode 100644
index 0000000..319ea7e
--- /dev/null
+++ b/node_modules/gatsby/dist/redux/reducers/match-paths.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":["../../../src/redux/reducers/match-paths.js"],"names":["_","require","module","exports","state","action","type","page","payload","matchPath","oldPage","newState","matchMaths","path","omit"],"mappings":";;AAAA,MAAMA,CAAC,GAAGC,OAAO,CAAE,QAAF,CAAjB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AACvC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAM,cAAN;AACE,aAAO,EAAP;;AACF,SAAM,aAAN;AAAoB;AAClB,cAAMC,IAAI,GAAGF,MAAM,CAACG,OAApB;;AACA,YAAID,IAAI,CAACE,SAAT,EAAoB;AAAA,gBACVC,OADU,GACEL,MADF,CACVK,OADU;AAElB,gBAAMC,QAAQ,qBAAQP,KAAR,CAAd;;AACA,cAAIM,OAAO,IAAIA,OAAO,CAACD,SAAR,KAAsBF,IAAI,CAACE,SAA1C,EAAqD;AACnD,mBAAOE,QAAQ,CAACC,UAAT,CAAoBF,OAAO,CAACD,SAA5B,CAAP;AACD;;AACDE,UAAAA,QAAQ,CAACJ,IAAI,CAACE,SAAN,CAAR,GAA2BF,IAAI,CAACM,IAAhC;AACA,iBAAOF,QAAP;AACD,SARD,MAQO;AACL,iBAAOP,KAAP;AACD;AACF;;AACD,SAAM,aAAN;AAAoB;AAClB,cAAMG,IAAI,GAAGF,MAAM,CAACG,OAApB;;AACA,YAAID,IAAI,CAACE,SAAT,EAAoB;AAClB,iBAAOT,CAAC,CAACc,IAAF,CAAOV,KAAP,EAAc,CAACG,IAAI,CAACE,SAAN,CAAd,CAAP;AACD,SAFD,MAEO;AACL,iBAAOL,KAAP;AACD;AACF;;AACD;AACE,aAAOA,KAAP;AA1BJ;AA4BD,CA7BD","sourcesContent":["const _ = require(`lodash`)\n\nmodule.exports = (state = {}, action) => {\n  switch (action.type) {\n    case `DELETE_CACHE`:\n      return {}\n    case `CREATE_PAGE`: {\n      const page = action.payload\n      if (page.matchPath) {\n        const { oldPage } = action\n        const newState = { ...state }\n        if (oldPage && oldPage.matchPath !== page.matchPath) {\n          delete newState.matchMaths[oldPage.matchPath]\n        }\n        newState[page.matchPath] = page.path\n        return newState\n      } else {\n        return state\n      }\n    }\n    case `DELETE_PAGE`: {\n      const page = action.payload\n      if (page.matchPath) {\n        return _.omit(state, [page.matchPath])\n      } else {\n        return state\n      }\n    }\n    default:\n      return state\n  }\n}\n"],"file":"match-paths.js"}
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/redux/reducers/webpack-compilation-hash.js b/node_modules/gatsby/dist/redux/reducers/webpack-compilation-hash.js
new file mode 100644
index 0000000..2b6eeb9
--- /dev/null
+++ b/node_modules/gatsby/dist/redux/reducers/webpack-compilation-hash.js
@@ -0,0 +1,12 @@
+"use strict";
+
+module.exports = (state = ``, action) => {
+  switch (action.type) {
+    case `SET_WEBPACK_COMPILATION_HASH`:
+      return action.payload;
+
+    default:
+      return state;
+  }
+};
+//# sourceMappingURL=webpack-compilation-hash.js.map
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/redux/reducers/webpack-compilation-hash.js.map b/node_modules/gatsby/dist/redux/reducers/webpack-compilation-hash.js.map
new file mode 100644
index 0000000..86f68ad
--- /dev/null
+++ b/node_modules/gatsby/dist/redux/reducers/webpack-compilation-hash.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":["../../../src/redux/reducers/webpack-compilation-hash.js"],"names":["module","exports","state","action","type","payload"],"mappings":";;AAAAA,MAAM,CAACC,OAAP,GAAiB,CAACC,KAAK,GAAI,EAAV,EAAaC,MAAb,KAAwB;AACvC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAM,8BAAN;AACE,aAAOD,MAAM,CAACE,OAAd;;AACF;AACE,aAAOH,KAAP;AAJJ;AAMD,CAPD","sourcesContent":["module.exports = (state = ``, action) => {\n  switch (action.type) {\n    case `SET_WEBPACK_COMPILATION_HASH`:\n      return action.payload\n    default:\n      return state\n  }\n}\n"],"file":"webpack-compilation-hash.js"}
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/schema/resolvers.js b/node_modules/gatsby/dist/schema/resolvers.js
index 9484c43..74ae510 100644
--- a/node_modules/gatsby/dist/schema/resolvers.js
+++ b/node_modules/gatsby/dist/schema/resolvers.js
@@ -106,12 +106,9 @@ const paginate = (results = [], {
 
   const count = results.length;
   const items = results.slice(skip, limit && skip + limit);
-  const pageCount = limit ? Math.ceil(skip / limit) + Math.ceil((count - skip) / limit) : skip ? 2 : 1;
-  const currentPage = limit ? Math.ceil(skip / limit) + 1 : skip ? 2 : 1;
-  const hasPreviousPage = currentPage > 1;
   const hasNextPage = skip + limit < count;
   return {
-    totalCount: count,
+    totalCount: items.length,
     edges: items.map((item, i, arr) => {
       return {
         node: item,
@@ -121,12 +118,7 @@ const paginate = (results = [], {
     }),
     nodes: items,
     pageInfo: {
-      currentPage,
-      hasPreviousPage,
-      hasNextPage,
-      itemCount: items.length,
-      pageCount,
-      perPage: limit
+      hasNextPage
     }
   };
 };
@@ -208,25 +200,38 @@ const fileByPath = (source, args, context, info) => {
     return fieldValue;
   }
 
-  const findLinkedFileNode = relativePath => {
-    // Use the parent File node to create the absolute path to
-    // the linked file.
-    const fileLinkPath = normalize(systemPath.resolve(parentFileNode.dir, relativePath)); // Use that path to find the linked File node.
+  const isArray = getNullableType(info.returnType) instanceof GraphQLList;
 
-    const linkedFileNode = _.find(context.nodeModel.getAllNodes({
-      type: `File`
-    }), n => n.absolutePath === fileLinkPath);
+  const findLinkedFileNode =
+  /*#__PURE__*/
+  function () {
+    var _ref3 = (0, _asyncToGenerator2.default)(function* (relativePath) {
+      // Use the parent File node to create the absolute path to
+      // the linked file.
+      const fileLinkPath = normalize(systemPath.resolve(parentFileNode.dir, relativePath)); // Use that path to find the linked File node.
 
-    return linkedFileNode;
-  }; // Find the File node for this node (we assume the node is something
+      const linkedFileNode = _.find((yield context.nodeModel.getAllNodes({
+        type: `File`
+      })), n => n.absolutePath === fileLinkPath);
+
+      return linkedFileNode;
+    });
+
+    return function findLinkedFileNode(_x6) {
+      return _ref3.apply(this, arguments);
+    };
+  }(); // Find the File node for this node (we assume the node is something
   // like markdown which would be a child node of a File node).
 
 
-  const parentFileNode = context.nodeModel.findRootNodeAncestor(source, node => node.internal && node.internal.type === `File`);
-  return resolveValue(findLinkedFileNode, fieldValue);
-};
+  const parentFileNode = context.nodeModel.findRootNodeAncestor(source); // Find the linked File node(s)
 
-const resolveValue = (resolve, value) => Array.isArray(value) ? value.map(v => resolveValue(resolve, v)) : resolve(value);
+  if (isArray) {
+    return Promise.all(fieldValue.map(findLinkedFileNode));
+  } else {
+    return findLinkedFileNode(fieldValue);
+  }
+};
 
 module.exports = {
   findManyPaginated,
@@ -234,7 +239,6 @@ module.exports = {
   fileByPath,
   link,
   distinct,
-  group,
-  paginate
+  group
 };
 //# sourceMappingURL=resolvers.js.map
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/schema/resolvers.js.map b/node_modules/gatsby/dist/schema/resolvers.js.map
index d18d71b..c5dc9ea 100644
--- a/node_modules/gatsby/dist/schema/resolvers.js.map
+++ b/node_modules/gatsby/dist/schema/resolvers.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/schema/resolvers.js"],"names":["systemPath","require","normalize","_","GraphQLList","getNullableType","getNamedType","getValueAt","findMany","typeName","args","context","info","nodeModel","runQuery","query","firstOnly","type","schema","getType","path","connectionType","findOne","filter","findManyPaginated","rp","result","paginate","skip","limit","distinct","source","field","edges","values","reduce","acc","node","value","concat","Date","toISOString","Array","from","Set","sort","group","groupedResults","isArray","forEach","key","Object","keys","fieldValue","push","results","count","length","items","slice","pageCount","Math","ceil","currentPage","hasPreviousPage","hasNextPage","totalCount","map","item","i","arr","next","previous","nodes","pageInfo","itemCount","perPage","link","by","fieldName","isPlainObject","returnType","getNodesByIds","ids","getNodeById","id","equals","eq","oneOf","in","operator","split","reduceRight","fileByPath","findLinkedFileNode","relativePath","fileLinkPath","resolve","parentFileNode","dir","linkedFileNode","find","getAllNodes","n","absolutePath","findRootNodeAncestor","internal","resolveValue","v","module","exports"],"mappings":"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","sourcesContent":["const systemPath = require(`path`)\nconst normalize = require(`normalize-path`)\nconst _ = require(`lodash`)\nconst { GraphQLList, getNullableType, getNamedType } = require(`graphql`)\nconst { getValueAt } = require(`./utils/get-value-at`)\n\nconst findMany = typeName => ({ args, context, info }) =>\n  context.nodeModel.runQuery(\n    {\n      query: args,\n      firstOnly: false,\n      type: info.schema.getType(typeName),\n    },\n    { path: context.path, connectionType: typeName }\n  )\n\nconst findOne = typeName => ({ args, context, info }) =>\n  context.nodeModel.runQuery(\n    {\n      query: { filter: args },\n      firstOnly: true,\n      type: info.schema.getType(typeName),\n    },\n    { path: context.path }\n  )\n\nconst findManyPaginated = typeName => async rp => {\n  const result = await findMany(typeName)(rp)\n  return paginate(result, { skip: rp.args.skip, limit: rp.args.limit })\n}\n\nconst distinct = (source, args, context, info) => {\n  const { field } = args\n  const { edges } = source\n  const values = edges.reduce((acc, { node }) => {\n    const value = getValueAt(node, field)\n    return value != null\n      ? acc.concat(value instanceof Date ? value.toISOString() : value)\n      : acc\n  }, [])\n  return Array.from(new Set(values)).sort()\n}\n\nconst group = (source, args, context, info) => {\n  const { field } = args\n  const { edges } = source\n  const groupedResults = edges.reduce((acc, { node }) => {\n    const value = getValueAt(node, field)\n    const values = Array.isArray(value) ? value : [value]\n    values\n      .filter(value => value != null)\n      .forEach(value => {\n        const key = value instanceof Date ? value.toISOString() : value\n        acc[key] = (acc[key] || []).concat(node)\n      })\n    return acc\n  }, {})\n  return Object.keys(groupedResults)\n    .sort()\n    .reduce((acc, fieldValue) => {\n      acc.push({\n        ...paginate(groupedResults[fieldValue], args),\n        field,\n        fieldValue,\n      })\n      return acc\n    }, [])\n}\n\nconst paginate = (results = [], { skip = 0, limit }) => {\n  if (results === null) {\n    results = []\n  }\n\n  const count = results.length\n  const items = results.slice(skip, limit && skip + limit)\n\n  const pageCount = limit\n    ? Math.ceil(skip / limit) + Math.ceil((count - skip) / limit)\n    : skip\n    ? 2\n    : 1\n  const currentPage = limit ? Math.ceil(skip / limit) + 1 : skip ? 2 : 1\n  const hasPreviousPage = currentPage > 1\n  const hasNextPage = skip + limit < count\n\n  return {\n    totalCount: count,\n    edges: items.map((item, i, arr) => {\n      return {\n        node: item,\n        next: arr[i + 1],\n        previous: arr[i - 1],\n      }\n    }),\n    nodes: items,\n    pageInfo: {\n      currentPage,\n      hasPreviousPage,\n      hasNextPage,\n      itemCount: items.length,\n      pageCount,\n      perPage: limit,\n    },\n  }\n}\n\nconst link = ({ by, from }) => async (source, args, context, info) => {\n  const fieldValue = source && source[from || info.fieldName]\n\n  if (fieldValue == null || _.isPlainObject(fieldValue)) return fieldValue\n  if (\n    Array.isArray(fieldValue) &&\n    (fieldValue[0] == null || _.isPlainObject(fieldValue[0]))\n  ) {\n    return fieldValue\n  }\n\n  const returnType = getNullableType(info.returnType)\n  const type = getNamedType(returnType)\n\n  if (by === `id`) {\n    if (Array.isArray(fieldValue)) {\n      return context.nodeModel.getNodesByIds(\n        { ids: fieldValue, type: type },\n        { path: context.path }\n      )\n    } else {\n      return context.nodeModel.getNodeById(\n        { id: fieldValue, type: type },\n        { path: context.path }\n      )\n    }\n  }\n\n  const equals = value => {\n    return { eq: value }\n  }\n  const oneOf = value => {\n    return { in: value }\n  }\n  const operator = Array.isArray(fieldValue) ? oneOf : equals\n  args.filter = by.split(`.`).reduceRight((acc, key, i, { length }) => {\n    return {\n      [key]: i === length - 1 ? operator(acc) : acc,\n    }\n  }, fieldValue)\n\n  return context.nodeModel.runQuery(\n    { query: args, firstOnly: !(returnType instanceof GraphQLList), type },\n    { path: context.path }\n  )\n}\n\nconst fileByPath = (source, args, context, info) => {\n  const fieldValue = source && source[info.fieldName]\n\n  if (fieldValue == null || _.isPlainObject(fieldValue)) return fieldValue\n  if (\n    Array.isArray(fieldValue) &&\n    (fieldValue[0] == null || _.isPlainObject(fieldValue[0]))\n  ) {\n    return fieldValue\n  }\n\n  const findLinkedFileNode = relativePath => {\n    // Use the parent File node to create the absolute path to\n    // the linked file.\n    const fileLinkPath = normalize(\n      systemPath.resolve(parentFileNode.dir, relativePath)\n    )\n\n    // Use that path to find the linked File node.\n    const linkedFileNode = _.find(\n      context.nodeModel.getAllNodes({ type: `File` }),\n      n => n.absolutePath === fileLinkPath\n    )\n    return linkedFileNode\n  }\n\n  // Find the File node for this node (we assume the node is something\n  // like markdown which would be a child node of a File node).\n  const parentFileNode = context.nodeModel.findRootNodeAncestor(\n    source,\n    node => node.internal && node.internal.type === `File`\n  )\n\n  return resolveValue(findLinkedFileNode, fieldValue)\n}\n\nconst resolveValue = (resolve, value) =>\n  Array.isArray(value)\n    ? value.map(v => resolveValue(resolve, v))\n    : resolve(value)\n\nmodule.exports = {\n  findManyPaginated,\n  findOne,\n  fileByPath,\n  link,\n  distinct,\n  group,\n  paginate,\n}\n"],"file":"resolvers.js"}
\ No newline at end of file
+{"version":3,"sources":["../../src/schema/resolvers.js"],"names":["systemPath","require","normalize","_","GraphQLList","getNullableType","getNamedType","getValueAt","findMany","typeName","args","context","info","nodeModel","runQuery","query","firstOnly","type","schema","getType","path","connectionType","findOne","filter","findManyPaginated","rp","result","paginate","skip","limit","distinct","source","field","edges","values","reduce","acc","node","value","concat","Date","toISOString","Array","from","Set","sort","group","groupedResults","isArray","forEach","key","Object","keys","fieldValue","push","results","count","length","items","slice","hasNextPage","totalCount","map","item","i","arr","next","previous","nodes","pageInfo","link","by","fieldName","isPlainObject","returnType","getNodesByIds","ids","getNodeById","id","equals","eq","oneOf","in","operator","split","reduceRight","fileByPath","findLinkedFileNode","relativePath","fileLinkPath","resolve","parentFileNode","dir","linkedFileNode","find","getAllNodes","n","absolutePath","findRootNodeAncestor","Promise","all","module","exports"],"mappings":"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","sourcesContent":["const systemPath = require(`path`)\nconst normalize = require(`normalize-path`)\nconst _ = require(`lodash`)\nconst { GraphQLList, getNullableType, getNamedType } = require(`graphql`)\nconst { getValueAt } = require(`./utils/get-value-at`)\n\nconst findMany = typeName => ({ args, context, info }) =>\n  context.nodeModel.runQuery(\n    {\n      query: args,\n      firstOnly: false,\n      type: info.schema.getType(typeName),\n    },\n    { path: context.path, connectionType: typeName }\n  )\n\nconst findOne = typeName => ({ args, context, info }) =>\n  context.nodeModel.runQuery(\n    {\n      query: { filter: args },\n      firstOnly: true,\n      type: info.schema.getType(typeName),\n    },\n    { path: context.path }\n  )\n\nconst findManyPaginated = typeName => async rp => {\n  const result = await findMany(typeName)(rp)\n  return paginate(result, { skip: rp.args.skip, limit: rp.args.limit })\n}\n\nconst distinct = (source, args, context, info) => {\n  const { field } = args\n  const { edges } = source\n  const values = edges.reduce((acc, { node }) => {\n    const value = getValueAt(node, field)\n    return value != null\n      ? acc.concat(value instanceof Date ? value.toISOString() : value)\n      : acc\n  }, [])\n  return Array.from(new Set(values)).sort()\n}\n\nconst group = (source, args, context, info) => {\n  const { field } = args\n  const { edges } = source\n  const groupedResults = edges.reduce((acc, { node }) => {\n    const value = getValueAt(node, field)\n    const values = Array.isArray(value) ? value : [value]\n    values\n      .filter(value => value != null)\n      .forEach(value => {\n        const key = value instanceof Date ? value.toISOString() : value\n        acc[key] = (acc[key] || []).concat(node)\n      })\n    return acc\n  }, {})\n  return Object.keys(groupedResults)\n    .sort()\n    .reduce((acc, fieldValue) => {\n      acc.push({\n        ...paginate(groupedResults[fieldValue], args),\n        field,\n        fieldValue,\n      })\n      return acc\n    }, [])\n}\n\nconst paginate = (results = [], { skip = 0, limit }) => {\n  if (results === null) {\n    results = []\n  }\n\n  const count = results.length\n  const items = results.slice(skip, limit && skip + limit)\n\n  const hasNextPage = skip + limit < count\n\n  return {\n    totalCount: items.length,\n    edges: items.map((item, i, arr) => {\n      return {\n        node: item,\n        next: arr[i + 1],\n        previous: arr[i - 1],\n      }\n    }),\n    nodes: items,\n    pageInfo: {\n      hasNextPage,\n    },\n  }\n}\n\nconst link = ({ by, from }) => async (source, args, context, info) => {\n  const fieldValue = source && source[from || info.fieldName]\n\n  if (fieldValue == null || _.isPlainObject(fieldValue)) return fieldValue\n  if (\n    Array.isArray(fieldValue) &&\n    (fieldValue[0] == null || _.isPlainObject(fieldValue[0]))\n  ) {\n    return fieldValue\n  }\n\n  const returnType = getNullableType(info.returnType)\n  const type = getNamedType(returnType)\n\n  if (by === `id`) {\n    if (Array.isArray(fieldValue)) {\n      return context.nodeModel.getNodesByIds(\n        { ids: fieldValue, type: type },\n        { path: context.path }\n      )\n    } else {\n      return context.nodeModel.getNodeById(\n        { id: fieldValue, type: type },\n        { path: context.path }\n      )\n    }\n  }\n\n  const equals = value => {\n    return { eq: value }\n  }\n  const oneOf = value => {\n    return { in: value }\n  }\n  const operator = Array.isArray(fieldValue) ? oneOf : equals\n  args.filter = by.split(`.`).reduceRight((acc, key, i, { length }) => {\n    return {\n      [key]: i === length - 1 ? operator(acc) : acc,\n    }\n  }, fieldValue)\n\n  return context.nodeModel.runQuery(\n    { query: args, firstOnly: !(returnType instanceof GraphQLList), type },\n    { path: context.path }\n  )\n}\n\nconst fileByPath = (source, args, context, info) => {\n  const fieldValue = source && source[info.fieldName]\n\n  if (fieldValue == null || _.isPlainObject(fieldValue)) return fieldValue\n  if (\n    Array.isArray(fieldValue) &&\n    (fieldValue[0] == null || _.isPlainObject(fieldValue[0]))\n  ) {\n    return fieldValue\n  }\n\n  const isArray = getNullableType(info.returnType) instanceof GraphQLList\n\n  const findLinkedFileNode = async relativePath => {\n    // Use the parent File node to create the absolute path to\n    // the linked file.\n    const fileLinkPath = normalize(\n      systemPath.resolve(parentFileNode.dir, relativePath)\n    )\n\n    // Use that path to find the linked File node.\n    const linkedFileNode = _.find(\n      await context.nodeModel.getAllNodes({ type: `File` }),\n      n => n.absolutePath === fileLinkPath\n    )\n    return linkedFileNode\n  }\n\n  // Find the File node for this node (we assume the node is something\n  // like markdown which would be a child node of a File node).\n  const parentFileNode = context.nodeModel.findRootNodeAncestor(source)\n\n  // Find the linked File node(s)\n  if (isArray) {\n    return Promise.all(fieldValue.map(findLinkedFileNode))\n  } else {\n    return findLinkedFileNode(fieldValue)\n  }\n}\n\nmodule.exports = {\n  findManyPaginated,\n  findOne,\n  fileByPath,\n  link,\n  distinct,\n  group,\n}\n"],"file":"resolvers.js"}
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/schema/types/pagination.js b/node_modules/gatsby/dist/schema/types/pagination.js
index af78453..9350740 100644
--- a/node_modules/gatsby/dist/schema/types/pagination.js
+++ b/node_modules/gatsby/dist/schema/types/pagination.js
@@ -11,12 +11,12 @@ const getPageInfo = ({
   schemaComposer
 }) => schemaComposer.getOrCreateOTC(`PageInfo`, tc => {
   tc.addFields({
-    currentPage: `Int!`,
-    hasPreviousPage: `Boolean!`,
-    hasNextPage: `Boolean!`,
-    itemCount: `Int!`,
-    pageCount: `Int!`,
-    perPage: `Int`
+    hasNextPage: `Boolean!` // currentPage: `Int!`,
+    // hasPreviousPage: `Boolean!`,
+    // itemCount: `Int!`,
+    // pageCount: `Int!`,
+    // perPage: `Int`,
+
   });
 });
 
diff --git a/node_modules/gatsby/dist/schema/types/pagination.js.map b/node_modules/gatsby/dist/schema/types/pagination.js.map
index 3dc2347..81ef2e5 100644
--- a/node_modules/gatsby/dist/schema/types/pagination.js.map
+++ b/node_modules/gatsby/dist/schema/types/pagination.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../../src/schema/types/pagination.js"],"names":["require","getFieldsEnum","distinct","group","getPageInfo","schemaComposer","getOrCreateOTC","tc","addFields","currentPage","hasPreviousPage","hasNextPage","itemCount","pageCount","perPage","getEdge","typeComposer","typeName","getTypeName","next","node","getTypeNonNull","previous","createPagination","fields","paginationTypeComposer","totalCount","edges","nodes","pageInfo","makeFieldNonNull","getGroup","field","fieldValue","getPagination","inputTypeComposer","getInputTypeComposer","fieldsEnumTC","type","args","resolve","skip","limit","module","exports"],"mappings":"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","sourcesContent":["const { getFieldsEnum } = require(`./sort`)\nconst { distinct, group } = require(`../resolvers`)\n\nconst getPageInfo = ({ schemaComposer }) =>\n  schemaComposer.getOrCreateOTC(`PageInfo`, tc => {\n    tc.addFields({\n      currentPage: `Int!`,\n      hasPreviousPage: `Boolean!`,\n      hasNextPage: `Boolean!`,\n      itemCount: `Int!`,\n      pageCount: `Int!`,\n      perPage: `Int`,\n    })\n  })\n\nconst getEdge = ({ schemaComposer, typeComposer }) => {\n  const typeName = typeComposer.getTypeName() + `Edge`\n  return schemaComposer.getOrCreateOTC(typeName, tc => {\n    tc.addFields({\n      next: typeComposer,\n      node: typeComposer.getTypeNonNull(),\n      previous: typeComposer,\n    })\n  })\n}\n\nconst createPagination = ({\n  schemaComposer,\n  typeComposer,\n  fields,\n  typeName,\n}) => {\n  const paginationTypeComposer = schemaComposer.getOrCreateOTC(typeName, tc => {\n    tc.addFields({\n      totalCount: `Int!`,\n      edges: [getEdge({ schemaComposer, typeComposer }).getTypeNonNull()],\n      nodes: [typeComposer.getTypeNonNull()],\n      pageInfo: getPageInfo({ schemaComposer }).getTypeNonNull(),\n      ...fields,\n    })\n  })\n  paginationTypeComposer.makeFieldNonNull(`edges`)\n  paginationTypeComposer.makeFieldNonNull(`nodes`)\n  return paginationTypeComposer\n}\n\nconst getGroup = ({ schemaComposer, typeComposer }) => {\n  const typeName = typeComposer.getTypeName() + `GroupConnection`\n  const fields = {\n    field: `String!`,\n    fieldValue: `String`,\n  }\n  return createPagination({ schemaComposer, typeComposer, fields, typeName })\n}\n\nconst getPagination = ({ schemaComposer, typeComposer }) => {\n  const inputTypeComposer = typeComposer.getInputTypeComposer()\n  const typeName = typeComposer.getTypeName() + `Connection`\n  const fieldsEnumTC = getFieldsEnum({\n    schemaComposer,\n    typeComposer,\n    inputTypeComposer,\n  })\n  const fields = {\n    distinct: {\n      type: [`String!`],\n      args: {\n        field: fieldsEnumTC.getTypeNonNull(),\n      },\n      resolve: distinct,\n    },\n    group: {\n      type: [getGroup({ schemaComposer, typeComposer }).getTypeNonNull()],\n      args: {\n        skip: `Int`,\n        limit: `Int`,\n        field: fieldsEnumTC.getTypeNonNull(),\n      },\n      resolve: group,\n    },\n  }\n  const paginationTypeComposer = createPagination({\n    schemaComposer,\n    typeComposer,\n    fields,\n    typeName,\n  })\n  paginationTypeComposer.makeFieldNonNull(`distinct`)\n  paginationTypeComposer.makeFieldNonNull(`group`)\n  return paginationTypeComposer\n}\n\nmodule.exports = {\n  getPageInfo,\n  getEdge,\n  getGroup,\n  getPagination,\n}\n"],"file":"pagination.js"}
\ No newline at end of file
+{"version":3,"sources":["../../../src/schema/types/pagination.js"],"names":["require","getFieldsEnum","distinct","group","getPageInfo","schemaComposer","getOrCreateOTC","tc","addFields","hasNextPage","getEdge","typeComposer","typeName","getTypeName","next","node","getTypeNonNull","previous","createPagination","fields","paginationTypeComposer","totalCount","edges","nodes","pageInfo","makeFieldNonNull","getGroup","field","fieldValue","getPagination","inputTypeComposer","getInputTypeComposer","fieldsEnumTC","type","args","resolve","skip","limit","module","exports"],"mappings":"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","sourcesContent":["const { getFieldsEnum } = require(`./sort`)\nconst { distinct, group } = require(`../resolvers`)\n\nconst getPageInfo = ({ schemaComposer }) =>\n  schemaComposer.getOrCreateOTC(`PageInfo`, tc => {\n    tc.addFields({\n      hasNextPage: `Boolean!`,\n      // currentPage: `Int!`,\n      // hasPreviousPage: `Boolean!`,\n      // itemCount: `Int!`,\n      // pageCount: `Int!`,\n      // perPage: `Int`,\n    })\n  })\n\nconst getEdge = ({ schemaComposer, typeComposer }) => {\n  const typeName = typeComposer.getTypeName() + `Edge`\n  return schemaComposer.getOrCreateOTC(typeName, tc => {\n    tc.addFields({\n      next: typeComposer,\n      node: typeComposer.getTypeNonNull(),\n      previous: typeComposer,\n    })\n  })\n}\n\nconst createPagination = ({\n  schemaComposer,\n  typeComposer,\n  fields,\n  typeName,\n}) => {\n  const paginationTypeComposer = schemaComposer.getOrCreateOTC(typeName, tc => {\n    tc.addFields({\n      totalCount: `Int!`,\n      edges: [getEdge({ schemaComposer, typeComposer }).getTypeNonNull()],\n      nodes: [typeComposer.getTypeNonNull()],\n      pageInfo: getPageInfo({ schemaComposer }).getTypeNonNull(),\n      ...fields,\n    })\n  })\n  paginationTypeComposer.makeFieldNonNull(`edges`)\n  paginationTypeComposer.makeFieldNonNull(`nodes`)\n  return paginationTypeComposer\n}\n\nconst getGroup = ({ schemaComposer, typeComposer }) => {\n  const typeName = typeComposer.getTypeName() + `GroupConnection`\n  const fields = {\n    field: `String!`,\n    fieldValue: `String`,\n  }\n  return createPagination({ schemaComposer, typeComposer, fields, typeName })\n}\n\nconst getPagination = ({ schemaComposer, typeComposer }) => {\n  const inputTypeComposer = typeComposer.getInputTypeComposer()\n  const typeName = typeComposer.getTypeName() + `Connection`\n  const fieldsEnumTC = getFieldsEnum({\n    schemaComposer,\n    typeComposer,\n    inputTypeComposer,\n  })\n  const fields = {\n    distinct: {\n      type: [`String!`],\n      args: {\n        field: fieldsEnumTC.getTypeNonNull(),\n      },\n      resolve: distinct,\n    },\n    group: {\n      type: [getGroup({ schemaComposer, typeComposer }).getTypeNonNull()],\n      args: {\n        skip: `Int`,\n        limit: `Int`,\n        field: fieldsEnumTC.getTypeNonNull(),\n      },\n      resolve: group,\n    },\n  }\n  const paginationTypeComposer = createPagination({\n    schemaComposer,\n    typeComposer,\n    fields,\n    typeName,\n  })\n  paginationTypeComposer.makeFieldNonNull(`distinct`)\n  paginationTypeComposer.makeFieldNonNull(`group`)\n  return paginationTypeComposer\n}\n\nmodule.exports = {\n  getPageInfo,\n  getEdge,\n  getGroup,\n  getPagination,\n}\n"],"file":"pagination.js"}
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/schema/utils/get-value-at.js b/node_modules/gatsby/dist/schema/utils/get-value-at.js
index 975b7c4..7094fbc 100644
--- a/node_modules/gatsby/dist/schema/utils/get-value-at.js
+++ b/node_modules/gatsby/dist/schema/utils/get-value-at.js
@@ -1,21 +1,19 @@
 "use strict";
 
 const getValueAt = (obj, selector) => {
-  const selectors = typeof selector === `string` ? selector.split(`.`) : selector;
-  return get(obj, selectors);
-};
+  const selectors = Array.isArray(selector) ? selector : selector.split(`.`);
+  return selectors.reduce((acc, key) => {
+    if (acc && typeof acc === `object`) {
+      if (Array.isArray(acc)) {
+        return acc.map(a => a && typeof a === `object` ? a[key] : undefined).filter(a => a !== undefined);
+      }
 
-const get = (obj, selectors) => {
-  const key = selectors[0],
-        rest = selectors.slice(1);
-  const value = obj[key];
-  if (!rest.length) return value;
-  if (Array.isArray(value)) return getArray(value, rest);
-  if (value && typeof value === `object`) return get(value, rest);
-  return undefined;
-};
+      return acc[key];
+    }
 
-const getArray = (arr, selectors) => arr.map(value => Array.isArray(value) ? getArray(value, selectors) : get(value, selectors)).filter(v => v !== undefined);
+    return undefined;
+  }, obj);
+};
 
 module.exports = {
   getValueAt
diff --git a/node_modules/gatsby/dist/schema/utils/get-value-at.js.map b/node_modules/gatsby/dist/schema/utils/get-value-at.js.map
index 9f34cbc..3eeeab0 100644
--- a/node_modules/gatsby/dist/schema/utils/get-value-at.js.map
+++ b/node_modules/gatsby/dist/schema/utils/get-value-at.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../../src/schema/utils/get-value-at.js"],"names":["getValueAt","obj","selector","selectors","split","get","key","rest","value","length","Array","isArray","getArray","undefined","arr","map","filter","v","module","exports"],"mappings":";;AAAA,MAAMA,UAAU,GAAG,CAACC,GAAD,EAAMC,QAAN,KAAmB;AACpC,QAAMC,SAAS,GACb,OAAOD,QAAP,KAAqB,QAArB,GAA+BA,QAAQ,CAACE,KAAT,CAAgB,GAAhB,CAA/B,GAAqDF,QADvD;AAEA,SAAOG,GAAG,CAACJ,GAAD,EAAME,SAAN,CAAV;AACD,CAJD;;AAMA,MAAME,GAAG,GAAG,CAACJ,GAAD,EAAME,SAAN,KAAoB;AAAA,QACvBG,GADuB,GACPH,SADO;AAAA,QACfI,IADe,GACPJ,SADO;AAE9B,QAAMK,KAAK,GAAGP,GAAG,CAACK,GAAD,CAAjB;AACA,MAAI,CAACC,IAAI,CAACE,MAAV,EAAkB,OAAOD,KAAP;AAClB,MAAIE,KAAK,CAACC,OAAN,CAAcH,KAAd,CAAJ,EAA0B,OAAOI,QAAQ,CAACJ,KAAD,EAAQD,IAAR,CAAf;AAC1B,MAAIC,KAAK,IAAI,OAAOA,KAAP,KAAkB,QAA/B,EAAwC,OAAOH,GAAG,CAACG,KAAD,EAAQD,IAAR,CAAV;AACxC,SAAOM,SAAP;AACD,CAPD;;AASA,MAAMD,QAAQ,GAAG,CAACE,GAAD,EAAMX,SAAN,KACfW,GAAG,CACAC,GADH,CACOP,KAAK,IACRE,KAAK,CAACC,OAAN,CAAcH,KAAd,IAAuBI,QAAQ,CAACJ,KAAD,EAAQL,SAAR,CAA/B,GAAoDE,GAAG,CAACG,KAAD,EAAQL,SAAR,CAF3D,EAIGa,MAJH,CAIUC,CAAC,IAAIA,CAAC,KAAKJ,SAJrB,CADF;;AAOAK,MAAM,CAACC,OAAP,GAAiB;AAAEnB,EAAAA;AAAF,CAAjB","sourcesContent":["const getValueAt = (obj, selector) => {\n  const selectors =\n    typeof selector === `string` ? selector.split(`.`) : selector\n  return get(obj, selectors)\n}\n\nconst get = (obj, selectors) => {\n  const [key, ...rest] = selectors\n  const value = obj[key]\n  if (!rest.length) return value\n  if (Array.isArray(value)) return getArray(value, rest)\n  if (value && typeof value === `object`) return get(value, rest)\n  return undefined\n}\n\nconst getArray = (arr, selectors) =>\n  arr\n    .map(value =>\n      Array.isArray(value) ? getArray(value, selectors) : get(value, selectors)\n    )\n    .filter(v => v !== undefined)\n\nmodule.exports = { getValueAt }\n"],"file":"get-value-at.js"}
\ No newline at end of file
+{"version":3,"sources":["../../../src/schema/utils/get-value-at.js"],"names":["getValueAt","obj","selector","selectors","Array","isArray","split","reduce","acc","key","map","a","undefined","filter","module","exports"],"mappings":";;AAAA,MAAMA,UAAU,GAAG,CAACC,GAAD,EAAMC,QAAN,KAAmB;AACpC,QAAMC,SAAS,GAAGC,KAAK,CAACC,OAAN,CAAcH,QAAd,IAA0BA,QAA1B,GAAqCA,QAAQ,CAACI,KAAT,CAAgB,GAAhB,CAAvD;AACA,SAAOH,SAAS,CAACI,MAAV,CAAiB,CAACC,GAAD,EAAMC,GAAN,KAAc;AACpC,QAAID,GAAG,IAAI,OAAOA,GAAP,KAAgB,QAA3B,EAAoC;AAClC,UAAIJ,KAAK,CAACC,OAAN,CAAcG,GAAd,CAAJ,EAAwB;AACtB,eAAOA,GAAG,CACPE,GADI,CACAC,CAAC,IAAKA,CAAC,IAAI,OAAOA,CAAP,KAAc,QAAnB,GAA6BA,CAAC,CAACF,GAAD,CAA9B,GAAsCG,SAD5C,EAEJC,MAFI,CAEGF,CAAC,IAAIA,CAAC,KAAKC,SAFd,CAAP;AAGD;;AACD,aAAOJ,GAAG,CAACC,GAAD,CAAV;AACD;;AACD,WAAOG,SAAP;AACD,GAVM,EAUJX,GAVI,CAAP;AAWD,CAbD;;AAeAa,MAAM,CAACC,OAAP,GAAiB;AAAEf,EAAAA;AAAF,CAAjB","sourcesContent":["const getValueAt = (obj, selector) => {\n  const selectors = Array.isArray(selector) ? selector : selector.split(`.`)\n  return selectors.reduce((acc, key) => {\n    if (acc && typeof acc === `object`) {\n      if (Array.isArray(acc)) {\n        return acc\n          .map(a => (a && typeof a === `object` ? a[key] : undefined))\n          .filter(a => a !== undefined)\n      }\n      return acc[key]\n    }\n    return undefined\n  }, obj)\n}\n\nmodule.exports = { getValueAt }\n"],"file":"get-value-at.js"}
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/utils/api-browser-docs.js b/node_modules/gatsby/dist/utils/api-browser-docs.js
index bfb1ea0..0c25616 100644
--- a/node_modules/gatsby/dist/utils/api-browser-docs.js
+++ b/node_modules/gatsby/dist/utils/api-browser-docs.js
@@ -1,19 +1,7 @@
 "use strict";
 
-/**
- * This argument is empty. This is for consistency so `pluginOptions` is always second argument.
- * @typedef {undefined} emptyArg
- */
-
-/**
- * Object containing options defined in `gatsby-config.js`
- * @typedef {object} pluginOptions
- */
-
 /**
  * Called when the Gatsby browser runtime first starts.
- * @param {emptyArg} _
- * @param {pluginOptions} pluginOptions
  * @example
  * exports.onClientEntry = () => {
  *   console.log("We've started!")
@@ -23,8 +11,6 @@
 exports.onClientEntry = true;
 /**
  * Called when the initial (but not subsequent) render of Gatsby App is done on the client.
- * @param {emptyArg} _
- * @param {pluginOptions} pluginOptions
  * @example
  * exports.onInitialClientRender = () => {
  *   console.log("ReactDOM.render has executed")
@@ -37,7 +23,6 @@ exports.onInitialClientRender = true;
  * @param {object} $0
  * @param {object} $0.location A location object
  * @param {object|null} $0.prevLocation The previous location object
- * @param {pluginOptions} pluginOptions
  * @example
  * exports.onPreRouteUpdate = ({ location, prevLocation }) => {
  *   console.log("Gatsby started to change location to", location.pathname)
@@ -51,7 +36,6 @@ exports.onPreRouteUpdate = true;
  * @param {object} $0
  * @param {object} $0.location A location object
  * @param {object} $0.action The "action" that caused the route change
- * @param {pluginOptions} pluginOptions
  * @example
  * exports.onRouteUpdateDelayed = () => {
  *   console.log("We can show loading indicator now")
@@ -64,7 +48,6 @@ exports.onRouteUpdateDelayed = true;
  * @param {object} $0
  * @param {object} $0.location A location object
  * @param {object|null} $0.prevLocation The previous location object
- * @param {pluginOptions} pluginOptions
  * @example
  * exports.onRouteUpdate = ({ location, prevLocation }) => {
  *   console.log('new pathname', location.pathname)
@@ -96,7 +79,6 @@ exports.onRouteUpdate = true;
  * coordinates to scroll to, a string of the `id` or `name` of an element to
  * scroll to, `false` to not update the scroll position, or `true` for the
  * default behavior.
- * @param {pluginOptions} pluginOptions
  * @example
  * exports.shouldUpdateScroll = ({
  *   routerProps: { location },
@@ -114,22 +96,17 @@ exports.onRouteUpdate = true;
 exports.shouldUpdateScroll = true;
 /**
  * Allow a plugin to register a Service Worker. Should be a function that returns true.
- * @param {emptyArg} _
- * @param {pluginOptions} pluginOptions
- * @returns {boolean} Should Gatsby register `/sw.js` service worker
  * @example
  * exports.registerServiceWorker = () => true
  */
 
 exports.registerServiceWorker = true;
 /**
- * Allow a plugin to replace the page component renderer.
- * @deprecated Use [wrapPageElement](#wrapPageElement) to decorate page element.
+ * Allow a plugin to replace the page component renderer. This api runner can be used to
+ * implement page transitions. See https://github.com/gatsbyjs/gatsby/tree/master/examples/using-page-transitions for an example of this.
  * @param {object} $0
  * @param {object} $0.props The props of the page.
  * @param {object} $0.loader The gatsby loader.
- * @param {pluginOptions} pluginOptions
- * @returns {ReactNode} Replaced default page renderer
  */
 
 exports.replaceComponentRenderer = true;
@@ -143,13 +120,11 @@ exports.replaceComponentRenderer = true;
  * @param {object} $0
  * @param {ReactNode} $0.element The "Page" React Element built by Gatsby.
  * @param {object} $0.props Props object used by page.
- * @param {pluginOptions} pluginOptions
- * @returns {ReactNode} Wrapped element
  * @example
- * const React = require("react")
- * const Layout = require("./src/components/layout")
+ * import React from "react"
+ * import Layout from "./src/components/layout"
  *
- * exports.wrapPageElement = ({ element, props }) => {
+ * export const wrapPageElement = ({ element, props }) => {
  *   // props provide same data to Layout as Page element will get
  *   // including location, data, etc - you don't need to pass it
  *   return <Layout {...props}>{element}</Layout>
@@ -166,16 +141,14 @@ exports.wrapPageElement = true;
  * _Note:_ [There is equivalent hook in SSR API](/docs/ssr-apis/#wrapRootElement)
  * @param {object} $0
  * @param {ReactNode} $0.element The "Root" React Element built by Gatsby.
- * @param {pluginOptions} pluginOptions
- * @returns {ReactNode} Wrapped element
  * @example
- * const React = require("react")
- * const { Provider } = require("react-redux")
+ * import React from "react"
+ * import { Provider } from "react-redux"
  *
- * const createStore = require("./src/state/createStore")
+ * import createStore from "./src/state/createStore"
  * const store = createStore()
  *
- * exports.wrapRootElement = ({ element }) => {
+ * export const wrapRootElement = ({ element }) => {
  *   return (
  *     <Provider store={store}>
  *       {element}
@@ -191,7 +164,6 @@ exports.wrapRootElement = true;
  * @param {object} $0
  * @param {string} $0.pathname The pathname whose resources should now be prefetched
  * @param {function} $0.getResourcesForPathname Function for fetching resources related to pathname
- * @param {pluginOptions} pluginOptions
  */
 
 exports.onPrefetchPathname = true;
@@ -199,30 +171,24 @@ exports.onPrefetchPathname = true;
  * Called when prefetching for a pathname is successful. Allows
  * for plugins with custom prefetching logic.
  * @param {object} $0
- * @param {string} $0.pathname The pathname whose resources have now been prefetched
+ * @param {string} $0.path The pathname whose resources have now been prefetched
+ * @param {resourceUrls} $0.resourceUrls An array of resource URLs that have been prefetched for this path
  * @param {function} $0.getResourceURLsForPathname Function for fetching URLs for resources related to the pathname
- * @param {pluginOptions} pluginOptions
  */
 
-exports.onPostPrefetchPathname = true;
+exports.onPostPrefetch = true;
 /**
  * Plugins can take over prefetching logic. If they do, they should call this
  * to disable the now duplicate core prefetching logic.
- * @param {emptyArg} _
- * @param {pluginOptions} pluginOptions
- * @returns {boolean} Should disable core prefetching
  * @example
  * exports.disableCorePrefetching = () => true
  */
 
 exports.disableCorePrefetching = true;
 /**
- * Allow a plugin to replace the `ReactDOM.render`/`ReactDOM.hydrate` function call by a custom renderer.
- * @param {emptyArg} _
- * @param {pluginOptions} pluginOptions
- * @returns {Function} This method should return a function with same signature as `ReactDOM.render()`
- *
- * _Note:_ it's very important to call the `callback` after rendering, otherwise Gatsby will not be able to call `onInitialClientRender`
+ * Allow a plugin to replace the ReactDOM.render function call by a custom renderer.
+ * This method takes no param and should return a function with same signature as ReactDOM.render()
+ * Note it's very important to call the callback after rendering, otherwise Gatsby will not be able to call `onInitialClientRender`
  * @example
  * exports.replaceHydrateFunction = () => {
  *   return (element, container, callback) => {
@@ -237,7 +203,6 @@ exports.replaceHydrateFunction = true;
  * Inform plugins when a service worker has been installed.
  * @param {object} $0
  * @param {object} $0.serviceWorker The service worker instance.
- * @param {pluginOptions} pluginOptions
  */
 
 exports.onServiceWorkerInstalled = true;
@@ -245,7 +210,6 @@ exports.onServiceWorkerInstalled = true;
  * Inform plugins of when a service worker has an update available.
  * @param {object} $0
  * @param {object} $0.serviceWorker The service worker instance.
- * @param {pluginOptions} pluginOptions
  */
 
 exports.onServiceWorkerUpdateFound = true;
@@ -254,7 +218,6 @@ exports.onServiceWorkerUpdateFound = true;
  * and the page is ready to reload to apply changes.
  * @param {object} $0
  * @param {object} $0.serviceWorker The service worker instance.
- * @param {pluginOptions} pluginOptions
  */
 
 exports.onServiceWorkerUpdateReady = true;
@@ -262,7 +225,6 @@ exports.onServiceWorkerUpdateReady = true;
  * Inform plugins when a service worker has become active.
  * @param {object} $0
  * @param {object} $0.serviceWorker The service worker instance.
- * @param {pluginOptions} pluginOptions
  */
 
 exports.onServiceWorkerActive = true;
@@ -270,7 +232,6 @@ exports.onServiceWorkerActive = true;
  * Inform plugins when a service worker is redundant.
  * @param {object} $0
  * @param {object} $0.serviceWorker The service worker instance.
- * @param {pluginOptions} pluginOptions
  */
 
 exports.onServiceWorkerRedundant = true;
diff --git a/node_modules/gatsby/dist/utils/api-browser-docs.js.map b/node_modules/gatsby/dist/utils/api-browser-docs.js.map
index 05c6505..06e7120 100644
--- a/node_modules/gatsby/dist/utils/api-browser-docs.js.map
+++ b/node_modules/gatsby/dist/utils/api-browser-docs.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/utils/api-browser-docs.js"],"names":["exports","onClientEntry","onInitialClientRender","onPreRouteUpdate","onRouteUpdateDelayed","onRouteUpdate","shouldUpdateScroll","registerServiceWorker","replaceComponentRenderer","wrapPageElement","wrapRootElement","onPrefetchPathname","onPostPrefetchPathname","disableCorePrefetching","replaceHydrateFunction","onServiceWorkerInstalled","onServiceWorkerUpdateFound","onServiceWorkerUpdateReady","onServiceWorkerActive","onServiceWorkerRedundant"],"mappings":";;AAAA;;;;;AAKA;;;;;AAKA;;;;;;;;;;AAUAA,OAAO,CAACC,aAAR,GAAwB,IAAxB;AAEA;;;;;;;;;;AASAD,OAAO,CAACE,qBAAR,GAAgC,IAAhC;AAEA;;;;;;;;;;;;;AAYAF,OAAO,CAACG,gBAAR,GAA2B,IAA3B;AAEA;;;;;;;;;;;;AAWAH,OAAO,CAACI,oBAAR,GAA+B,IAA/B;AAEA;;;;;;;;;;;;;;;;;;;;;AAoBAJ,OAAO,CAACK,aAAR,GAAwB,IAAxB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BAL,OAAO,CAACM,kBAAR,GAA6B,IAA7B;AAEA;;;;;;;;;AAQAN,OAAO,CAACO,qBAAR,GAAgC,IAAhC;AAEA;;;;;;;;;;AASAP,OAAO,CAACQ,wBAAR,GAAmC,IAAnC;AAEA;;;;;;;;;;;;;;;;;;;;;;;AAsBAR,OAAO,CAACS,eAAR,GAA0B,IAA1B;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BAT,OAAO,CAACU,eAAR,GAA0B,IAA1B;AAEA;;;;;;;;;AAQAV,OAAO,CAACW,kBAAR,GAA6B,IAA7B;AAEA;;;;;;;;;AAQAX,OAAO,CAACY,sBAAR,GAAiC,IAAjC;AAEA;;;;;;;;;;AASAZ,OAAO,CAACa,sBAAR,GAAiC,IAAjC;AAEA;;;;;;;;;;;;;;;;AAeAb,OAAO,CAACc,sBAAR,GAAiC,IAAjC;AAEA;;;;;;;AAMAd,OAAO,CAACe,wBAAR,GAAmC,IAAnC;AAEA;;;;;;;AAMAf,OAAO,CAACgB,0BAAR,GAAqC,IAArC;AAEA;;;;;;;;AAOAhB,OAAO,CAACiB,0BAAR,GAAqC,IAArC;AAEA;;;;;;;AAMAjB,OAAO,CAACkB,qBAAR,GAAgC,IAAhC;AAEA;;;;;;;AAMAlB,OAAO,CAACmB,wBAAR,GAAmC,IAAnC","sourcesContent":["/**\n * This argument is empty. This is for consistency so `pluginOptions` is always second argument.\n * @typedef {undefined} emptyArg\n */\n\n/**\n * Object containing options defined in `gatsby-config.js`\n * @typedef {object} pluginOptions\n */\n\n/**\n * Called when the Gatsby browser runtime first starts.\n * @param {emptyArg} _\n * @param {pluginOptions} pluginOptions\n * @example\n * exports.onClientEntry = () => {\n *   console.log(\"We've started!\")\n *   callAnalyticsAPI()\n * }\n */\nexports.onClientEntry = true\n\n/**\n * Called when the initial (but not subsequent) render of Gatsby App is done on the client.\n * @param {emptyArg} _\n * @param {pluginOptions} pluginOptions\n * @example\n * exports.onInitialClientRender = () => {\n *   console.log(\"ReactDOM.render has executed\")\n * }\n */\nexports.onInitialClientRender = true\n\n/**\n * Called when changing location is started.\n * @param {object} $0\n * @param {object} $0.location A location object\n * @param {object|null} $0.prevLocation The previous location object\n * @param {pluginOptions} pluginOptions\n * @example\n * exports.onPreRouteUpdate = ({ location, prevLocation }) => {\n *   console.log(\"Gatsby started to change location to\", location.pathname)\n *   console.log(\"Gatsby started to change location from\", prevLocation ? prevLocation.pathname : null)\n * }\n */\nexports.onPreRouteUpdate = true\n\n/**\n * Called when changing location is longer than 1 second.\n * @param {object} $0\n * @param {object} $0.location A location object\n * @param {object} $0.action The \"action\" that caused the route change\n * @param {pluginOptions} pluginOptions\n * @example\n * exports.onRouteUpdateDelayed = () => {\n *   console.log(\"We can show loading indicator now\")\n * }\n */\nexports.onRouteUpdateDelayed = true\n\n/**\n * Called when the user changes routes\n * @param {object} $0\n * @param {object} $0.location A location object\n * @param {object|null} $0.prevLocation The previous location object\n * @param {pluginOptions} pluginOptions\n * @example\n * exports.onRouteUpdate = ({ location, prevLocation }) => {\n *   console.log('new pathname', location.pathname)\n *   console.log('old pathname', prevLocation ? prevLocation.pathname : null)\n *\n *   // Track pageview with google analytics\n *   window.ga(\n *     `set`,\n *     `page`,\n *     location.pathname + location.search + location.hash,\n *   )\n *   window.ga(`send`, `pageview`)\n * }\n */\nexports.onRouteUpdate = true\n\n/**\n * Allow a plugin to decide if the scroll position should update or\n * not on a route change.\n * @param {object} $0\n * @param {object} $0.prevRouterProps The previous state of the router before the route change.\n * @param {object} $0.routerProps The current state of the router.\n * @param {string} $0.pathname The new pathname (for backwards compatibility with v1).\n * @param {function} $0.getSavedScrollPosition Takes a location and returns the\n * coordinates of the last scroll position for that location, or `null`. Gatsby\n * saves scroll positions for each route in `SessionStorage`, so they are\n * available after page reload.\n * @returns {(boolean|string|Array)} Should return either an [x, y] Array of\n * coordinates to scroll to, a string of the `id` or `name` of an element to\n * scroll to, `false` to not update the scroll position, or `true` for the\n * default behavior.\n * @param {pluginOptions} pluginOptions\n * @example\n * exports.shouldUpdateScroll = ({\n *   routerProps: { location },\n *   getSavedScrollPosition\n * }) => {\n *   const currentPosition = getSavedScrollPosition(location)\n *   const queriedPosition = getSavedScrollPosition({ pathname: `/random` })\n *\n *   window.scrollTo(...(currentPosition || [0, 0]))\n *\n *   return false\n * }\n */\nexports.shouldUpdateScroll = true\n\n/**\n * Allow a plugin to register a Service Worker. Should be a function that returns true.\n * @param {emptyArg} _\n * @param {pluginOptions} pluginOptions\n * @returns {boolean} Should Gatsby register `/sw.js` service worker\n * @example\n * exports.registerServiceWorker = () => true\n */\nexports.registerServiceWorker = true\n\n/**\n * Allow a plugin to replace the page component renderer.\n * @deprecated Use [wrapPageElement](#wrapPageElement) to decorate page element.\n * @param {object} $0\n * @param {object} $0.props The props of the page.\n * @param {object} $0.loader The gatsby loader.\n * @param {pluginOptions} pluginOptions\n * @returns {ReactNode} Replaced default page renderer\n */\nexports.replaceComponentRenderer = true\n\n/**\n * Allow a plugin to wrap the page element.\n *\n * This is useful for setting wrapper component around pages that won't get\n * unmounted on page change. For setting Provider components use [wrapRootElement](#wrapRootElement).\n *\n * _Note:_ [There is equivalent hook in SSR API](/docs/ssr-apis/#wrapPageElement)\n * @param {object} $0\n * @param {ReactNode} $0.element The \"Page\" React Element built by Gatsby.\n * @param {object} $0.props Props object used by page.\n * @param {pluginOptions} pluginOptions\n * @returns {ReactNode} Wrapped element\n * @example\n * const React = require(\"react\")\n * const Layout = require(\"./src/components/layout\")\n *\n * exports.wrapPageElement = ({ element, props }) => {\n *   // props provide same data to Layout as Page element will get\n *   // including location, data, etc - you don't need to pass it\n *   return <Layout {...props}>{element}</Layout>\n * }\n */\nexports.wrapPageElement = true\n\n/**\n * Allow a plugin to wrap the root element.\n *\n * This is useful to setup any Providers component that will wrap your application.\n * For setting persistent UI elements around pages use [wrapPageElement](#wrapPageElement).\n *\n * _Note:_ [There is equivalent hook in SSR API](/docs/ssr-apis/#wrapRootElement)\n * @param {object} $0\n * @param {ReactNode} $0.element The \"Root\" React Element built by Gatsby.\n * @param {pluginOptions} pluginOptions\n * @returns {ReactNode} Wrapped element\n * @example\n * const React = require(\"react\")\n * const { Provider } = require(\"react-redux\")\n *\n * const createStore = require(\"./src/state/createStore\")\n * const store = createStore()\n *\n * exports.wrapRootElement = ({ element }) => {\n *   return (\n *     <Provider store={store}>\n *       {element}\n *     </Provider>\n *   )\n * }\n */\nexports.wrapRootElement = true\n\n/**\n * Called when prefetching for a pathname is triggered. Allows\n * for plugins with custom prefetching logic.\n * @param {object} $0\n * @param {string} $0.pathname The pathname whose resources should now be prefetched\n * @param {function} $0.getResourcesForPathname Function for fetching resources related to pathname\n * @param {pluginOptions} pluginOptions\n */\nexports.onPrefetchPathname = true\n\n/**\n * Called when prefetching for a pathname is successful. Allows\n * for plugins with custom prefetching logic.\n * @param {object} $0\n * @param {string} $0.pathname The pathname whose resources have now been prefetched\n * @param {function} $0.getResourceURLsForPathname Function for fetching URLs for resources related to the pathname\n * @param {pluginOptions} pluginOptions\n */\nexports.onPostPrefetchPathname = true\n\n/**\n * Plugins can take over prefetching logic. If they do, they should call this\n * to disable the now duplicate core prefetching logic.\n * @param {emptyArg} _\n * @param {pluginOptions} pluginOptions\n * @returns {boolean} Should disable core prefetching\n * @example\n * exports.disableCorePrefetching = () => true\n */\nexports.disableCorePrefetching = true\n\n/**\n * Allow a plugin to replace the `ReactDOM.render`/`ReactDOM.hydrate` function call by a custom renderer.\n * @param {emptyArg} _\n * @param {pluginOptions} pluginOptions\n * @returns {Function} This method should return a function with same signature as `ReactDOM.render()`\n *\n * _Note:_ it's very important to call the `callback` after rendering, otherwise Gatsby will not be able to call `onInitialClientRender`\n * @example\n * exports.replaceHydrateFunction = () => {\n *   return (element, container, callback) => {\n *     console.log(\"rendering!\");\n *     ReactDOM.render(element, container, callback);\n *   };\n * };\n */\nexports.replaceHydrateFunction = true\n\n/**\n * Inform plugins when a service worker has been installed.\n * @param {object} $0\n * @param {object} $0.serviceWorker The service worker instance.\n * @param {pluginOptions} pluginOptions\n */\nexports.onServiceWorkerInstalled = true\n\n/**\n * Inform plugins of when a service worker has an update available.\n * @param {object} $0\n * @param {object} $0.serviceWorker The service worker instance.\n * @param {pluginOptions} pluginOptions\n */\nexports.onServiceWorkerUpdateFound = true\n\n/**\n * Inform plugins when a service worker has been updated in the background\n * and the page is ready to reload to apply changes.\n * @param {object} $0\n * @param {object} $0.serviceWorker The service worker instance.\n * @param {pluginOptions} pluginOptions\n */\nexports.onServiceWorkerUpdateReady = true\n\n/**\n * Inform plugins when a service worker has become active.\n * @param {object} $0\n * @param {object} $0.serviceWorker The service worker instance.\n * @param {pluginOptions} pluginOptions\n */\nexports.onServiceWorkerActive = true\n\n/**\n * Inform plugins when a service worker is redundant.\n * @param {object} $0\n * @param {object} $0.serviceWorker The service worker instance.\n * @param {pluginOptions} pluginOptions\n */\nexports.onServiceWorkerRedundant = true\n"],"file":"api-browser-docs.js"}
\ No newline at end of file
+{"version":3,"sources":["../../src/utils/api-browser-docs.js"],"names":["exports","onClientEntry","onInitialClientRender","onPreRouteUpdate","onRouteUpdateDelayed","onRouteUpdate","shouldUpdateScroll","registerServiceWorker","replaceComponentRenderer","wrapPageElement","wrapRootElement","onPrefetchPathname","onPostPrefetch","disableCorePrefetching","replaceHydrateFunction","onServiceWorkerInstalled","onServiceWorkerUpdateFound","onServiceWorkerUpdateReady","onServiceWorkerActive","onServiceWorkerRedundant"],"mappings":";;AAAA;;;;;;;;AAQAA,OAAO,CAACC,aAAR,GAAwB,IAAxB;AAEA;;;;;;;;AAOAD,OAAO,CAACE,qBAAR,GAAgC,IAAhC;AAEA;;;;;;;;;;;;AAWAF,OAAO,CAACG,gBAAR,GAA2B,IAA3B;AAEA;;;;;;;;;;;AAUAH,OAAO,CAACI,oBAAR,GAA+B,IAA/B;AAEA;;;;;;;;;;;;;;;;;;;;AAmBAJ,OAAO,CAACK,aAAR,GAAwB,IAAxB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BAL,OAAO,CAACM,kBAAR,GAA6B,IAA7B;AAEA;;;;;;AAKAN,OAAO,CAACO,qBAAR,GAAgC,IAAhC;AAEA;;;;;;;;AAOAP,OAAO,CAACQ,wBAAR,GAAmC,IAAnC;AAEA;;;;;;;;;;;;;;;;;;;;;AAoBAR,OAAO,CAACS,eAAR,GAA0B,IAA1B;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AAwBAT,OAAO,CAACU,eAAR,GAA0B,IAA1B;AAEA;;;;;;;;AAOAV,OAAO,CAACW,kBAAR,GAA6B,IAA7B;AAEA;;;;;;;;;AAQAX,OAAO,CAACY,cAAR,GAAyB,IAAzB;AAEA;;;;;;;AAMAZ,OAAO,CAACa,sBAAR,GAAiC,IAAjC;AAEA;;;;;;;;;;;;;AAYAb,OAAO,CAACc,sBAAR,GAAiC,IAAjC;AAEA;;;;;;AAKAd,OAAO,CAACe,wBAAR,GAAmC,IAAnC;AAEA;;;;;;AAKAf,OAAO,CAACgB,0BAAR,GAAqC,IAArC;AAEA;;;;;;;AAMAhB,OAAO,CAACiB,0BAAR,GAAqC,IAArC;AAEA;;;;;;AAKAjB,OAAO,CAACkB,qBAAR,GAAgC,IAAhC;AAEA;;;;;;AAKAlB,OAAO,CAACmB,wBAAR,GAAmC,IAAnC","sourcesContent":["/**\n * Called when the Gatsby browser runtime first starts.\n * @example\n * exports.onClientEntry = () => {\n *   console.log(\"We've started!\")\n *   callAnalyticsAPI()\n * }\n */\nexports.onClientEntry = true\n\n/**\n * Called when the initial (but not subsequent) render of Gatsby App is done on the client.\n * @example\n * exports.onInitialClientRender = () => {\n *   console.log(\"ReactDOM.render has executed\")\n * }\n */\nexports.onInitialClientRender = true\n\n/**\n * Called when changing location is started.\n * @param {object} $0\n * @param {object} $0.location A location object\n * @param {object|null} $0.prevLocation The previous location object\n * @example\n * exports.onPreRouteUpdate = ({ location, prevLocation }) => {\n *   console.log(\"Gatsby started to change location to\", location.pathname)\n *   console.log(\"Gatsby started to change location from\", prevLocation ? prevLocation.pathname : null)\n * }\n */\nexports.onPreRouteUpdate = true\n\n/**\n * Called when changing location is longer than 1 second.\n * @param {object} $0\n * @param {object} $0.location A location object\n * @param {object} $0.action The \"action\" that caused the route change\n * @example\n * exports.onRouteUpdateDelayed = () => {\n *   console.log(\"We can show loading indicator now\")\n * }\n */\nexports.onRouteUpdateDelayed = true\n\n/**\n * Called when the user changes routes\n * @param {object} $0\n * @param {object} $0.location A location object\n * @param {object|null} $0.prevLocation The previous location object\n * @example\n * exports.onRouteUpdate = ({ location, prevLocation }) => {\n *   console.log('new pathname', location.pathname)\n *   console.log('old pathname', prevLocation ? prevLocation.pathname : null)\n *\n *   // Track pageview with google analytics\n *   window.ga(\n *     `set`,\n *     `page`,\n *     location.pathname + location.search + location.hash,\n *   )\n *   window.ga(`send`, `pageview`)\n * }\n */\nexports.onRouteUpdate = true\n\n/**\n * Allow a plugin to decide if the scroll position should update or\n * not on a route change.\n * @param {object} $0\n * @param {object} $0.prevRouterProps The previous state of the router before the route change.\n * @param {object} $0.routerProps The current state of the router.\n * @param {string} $0.pathname The new pathname (for backwards compatibility with v1).\n * @param {function} $0.getSavedScrollPosition Takes a location and returns the\n * coordinates of the last scroll position for that location, or `null`. Gatsby\n * saves scroll positions for each route in `SessionStorage`, so they are\n * available after page reload.\n * @returns {(boolean|string|Array)} Should return either an [x, y] Array of\n * coordinates to scroll to, a string of the `id` or `name` of an element to\n * scroll to, `false` to not update the scroll position, or `true` for the\n * default behavior.\n * @example\n * exports.shouldUpdateScroll = ({\n *   routerProps: { location },\n *   getSavedScrollPosition\n * }) => {\n *   const currentPosition = getSavedScrollPosition(location)\n *   const queriedPosition = getSavedScrollPosition({ pathname: `/random` })\n *\n *   window.scrollTo(...(currentPosition || [0, 0]))\n *\n *   return false\n * }\n */\nexports.shouldUpdateScroll = true\n\n/**\n * Allow a plugin to register a Service Worker. Should be a function that returns true.\n * @example\n * exports.registerServiceWorker = () => true\n */\nexports.registerServiceWorker = true\n\n/**\n * Allow a plugin to replace the page component renderer. This api runner can be used to\n * implement page transitions. See https://github.com/gatsbyjs/gatsby/tree/master/examples/using-page-transitions for an example of this.\n * @param {object} $0\n * @param {object} $0.props The props of the page.\n * @param {object} $0.loader The gatsby loader.\n */\nexports.replaceComponentRenderer = true\n\n/**\n * Allow a plugin to wrap the page element.\n *\n * This is useful for setting wrapper component around pages that won't get\n * unmounted on page change. For setting Provider components use [wrapRootElement](#wrapRootElement).\n *\n * _Note:_ [There is equivalent hook in SSR API](/docs/ssr-apis/#wrapPageElement)\n * @param {object} $0\n * @param {ReactNode} $0.element The \"Page\" React Element built by Gatsby.\n * @param {object} $0.props Props object used by page.\n * @example\n * import React from \"react\"\n * import Layout from \"./src/components/layout\"\n *\n * export const wrapPageElement = ({ element, props }) => {\n *   // props provide same data to Layout as Page element will get\n *   // including location, data, etc - you don't need to pass it\n *   return <Layout {...props}>{element}</Layout>\n * }\n */\nexports.wrapPageElement = true\n\n/**\n * Allow a plugin to wrap the root element.\n *\n * This is useful to setup any Providers component that will wrap your application.\n * For setting persistent UI elements around pages use [wrapPageElement](#wrapPageElement).\n *\n * _Note:_ [There is equivalent hook in SSR API](/docs/ssr-apis/#wrapRootElement)\n * @param {object} $0\n * @param {ReactNode} $0.element The \"Root\" React Element built by Gatsby.\n * @example\n * import React from \"react\"\n * import { Provider } from \"react-redux\"\n *\n * import createStore from \"./src/state/createStore\"\n * const store = createStore()\n *\n * export const wrapRootElement = ({ element }) => {\n *   return (\n *     <Provider store={store}>\n *       {element}\n *     </Provider>\n *   )\n * }\n */\nexports.wrapRootElement = true\n\n/**\n * Called when prefetching for a pathname is triggered. Allows\n * for plugins with custom prefetching logic.\n * @param {object} $0\n * @param {string} $0.pathname The pathname whose resources should now be prefetched\n * @param {function} $0.getResourcesForPathname Function for fetching resources related to pathname\n */\nexports.onPrefetchPathname = true\n\n/**\n * Called when prefetching for a pathname is successful. Allows\n * for plugins with custom prefetching logic.\n * @param {object} $0\n * @param {string} $0.path The pathname whose resources have now been prefetched\n * @param {resourceUrls} $0.resourceUrls An array of resource URLs that have been prefetched for this path\n * @param {function} $0.getResourceURLsForPathname Function for fetching URLs for resources related to the pathname\n */\nexports.onPostPrefetch = true\n\n/**\n * Plugins can take over prefetching logic. If they do, they should call this\n * to disable the now duplicate core prefetching logic.\n * @example\n * exports.disableCorePrefetching = () => true\n */\nexports.disableCorePrefetching = true\n\n/**\n * Allow a plugin to replace the ReactDOM.render function call by a custom renderer.\n * This method takes no param and should return a function with same signature as ReactDOM.render()\n * Note it's very important to call the callback after rendering, otherwise Gatsby will not be able to call `onInitialClientRender`\n * @example\n * exports.replaceHydrateFunction = () => {\n *   return (element, container, callback) => {\n *     console.log(\"rendering!\");\n *     ReactDOM.render(element, container, callback);\n *   };\n * };\n */\nexports.replaceHydrateFunction = true\n\n/**\n * Inform plugins when a service worker has been installed.\n * @param {object} $0\n * @param {object} $0.serviceWorker The service worker instance.\n */\nexports.onServiceWorkerInstalled = true\n\n/**\n * Inform plugins of when a service worker has an update available.\n * @param {object} $0\n * @param {object} $0.serviceWorker The service worker instance.\n */\nexports.onServiceWorkerUpdateFound = true\n\n/**\n * Inform plugins when a service worker has been updated in the background\n * and the page is ready to reload to apply changes.\n * @param {object} $0\n * @param {object} $0.serviceWorker The service worker instance.\n */\nexports.onServiceWorkerUpdateReady = true\n\n/**\n * Inform plugins when a service worker has become active.\n * @param {object} $0\n * @param {object} $0.serviceWorker The service worker instance.\n */\nexports.onServiceWorkerActive = true\n\n/**\n * Inform plugins when a service worker is redundant.\n * @param {object} $0\n * @param {object} $0.serviceWorker The service worker instance.\n */\nexports.onServiceWorkerRedundant = true\n"],"file":"api-browser-docs.js"}
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/utils/api-node-docs.js b/node_modules/gatsby/dist/utils/api-node-docs.js
index f6222bd..d6b47c4 100644
--- a/node_modules/gatsby/dist/utils/api-node-docs.js
+++ b/node_modules/gatsby/dist/utils/api-node-docs.js
@@ -21,20 +21,19 @@ exports.resolvableExtensions = true;
  *   // Query for markdown nodes to use in creating pages.
  *   // You can query for whatever data you want to create pages for e.g.
  *   // products, portfolio items, landing pages, etc.
- *   // Variables can be added as the second function parameter
  *   return graphql(`
- *     query loadPagesQuery ($limit: Int!) {
- *       allMarkdownRemark(limit: $limit) {
+ *     {
+ *       allMarkdownRemark(limit: 1000) {
  *         edges {
  *           node {
- *             frontmatter {
+ *             fields {
  *               slug
  *             }
  *           }
  *         }
  *       }
  *     }
- *   `, { limit: 1000 }).then(result => {
+ *   `).then(result => {
  *     if (result.errors) {
  *       throw result.errors
  *     }
@@ -43,7 +42,7 @@ exports.resolvableExtensions = true;
  *     result.data.allMarkdownRemark.edges.forEach(edge => {
  *       createPage({
  *         // Path for this page — required
- *         path: `${edge.node.frontmatter.slug}`,
+ *         path: `${edge.node.fields.slug}`,
  *         component: blogPostTemplate,
  *         context: {
  *           // Add optional context data to be inserted
@@ -247,7 +246,7 @@ exports.setFieldsOnGraphQLNodeType = true;
  *     },
  *     Query: {
  *       allRecentPosts: {
- *         type: [`BlogPost`],
+ *         type: [`BlogPost`]
  *         resolve: (source, args, context, info) => {
  *           const posts = context.nodeModel.getAllNodes({ type: `BlogPost` })
  *           const recentPosts = posts.filter(
diff --git a/node_modules/gatsby/dist/utils/api-node-docs.js.map b/node_modules/gatsby/dist/utils/api-node-docs.js.map
index 870308a..c4eda8e 100644
--- a/node_modules/gatsby/dist/utils/api-node-docs.js.map
+++ b/node_modules/gatsby/dist/utils/api-node-docs.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/utils/api-node-docs.js"],"names":["exports","resolvableExtensions","createPages","createPagesStatefully","sourceNodes","onCreateNode","onCreatePage","setFieldsOnGraphQLNodeType","createResolvers","preprocessSource","generateSideEffects","onCreateBabelConfig","onCreateWebpackConfig","onPreInit","onPreBootstrap","onPostBootstrap","onPreBuild","onPostBuild","onPreExtractQueries","onCreateDevServer"],"mappings":";;AAAA;;;;;AAKAA,OAAO,CAACC,oBAAR,GAA+B,IAA/B;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuDAD,OAAO,CAACE,WAAR,GAAsB,IAAtB;AAEA;;;;;;;;;;;;;;;AAcAF,OAAO,CAACG,qBAAR,GAAgC,IAAhC;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCAH,OAAO,CAACI,WAAR,GAAsB,IAAtB;AAEA;;;;;;;;;;;;;;AAaAJ,OAAO,CAACK,YAAR,GAAuB,IAAvB;AAEA;;;;;;;;;AAQAL,OAAO,CAACM,YAAR,GAAuB,IAAvB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDAN,OAAO,CAACO,0BAAR,GAAqC,IAArC;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkEAP,OAAO,CAACQ,eAAR,GAA0B,IAA1B;AAEA;;;;;AAIAR,OAAO,CAACS,gBAAR,GAA2B,IAA3B;AAEA;;;;;;AAKAT,OAAO,CAACU,mBAAR,GAA8B,IAA9B;AAEA;;;;;;AAKAV,OAAO,CAACW,mBAAR,GAA8B,IAA9B;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BAX,OAAO,CAACY,qBAAR,GAAgC,IAAhC;AAEA;;;;AAGAZ,OAAO,CAACa,SAAR,GAAoB,IAApB;AAEA;;;;AAGAb,OAAO,CAACc,cAAR,GAAyB,IAAzB;AAEA;;;;AAGAd,OAAO,CAACe,eAAR,GAA0B,IAA1B;AAEA;;;;AAGAf,OAAO,CAACgB,UAAR,GAAqB,IAArB;AAEA;;;;;AAIAhB,OAAO,CAACiB,WAAR,GAAsB,IAAtB;AAEA;;;;;;;AAMAjB,OAAO,CAACkB,mBAAR,GAA8B,IAA9B;AAEA;;;;;;;;;;;;;AAYAlB,OAAO,CAACmB,iBAAR,GAA4B,IAA5B","sourcesContent":["/**\n * Lets plugins implementing support for other compile-to-js add to the list\n * of \"resolvable\" file extensions. Gatsby supports `.js` and `.jsx` by default.\n * @returns {Array<string>} array of extensions\n */\nexports.resolvableExtensions = true\n\n/**\n * Tell plugins to add pages. This extension point is called only after the initial\n * sourcing and transformation of nodes plus creation of the GraphQL schema are\n * complete so you can query your data in order to create pages.\n *\n * See also [the documentation for the action `createPage`](/docs/actions/#createPage).\n * @example\n * const path = require(`path`)\n *\n * exports.createPages = ({ graphql, actions }) => {\n *   const { createPage } = actions\n *   const blogPostTemplate = path.resolve(`src/templates/blog-post.js`)\n *   // Query for markdown nodes to use in creating pages.\n *   // You can query for whatever data you want to create pages for e.g.\n *   // products, portfolio items, landing pages, etc.\n *   // Variables can be added as the second function parameter\n *   return graphql(`\n *     query loadPagesQuery ($limit: Int!) {\n *       allMarkdownRemark(limit: $limit) {\n *         edges {\n *           node {\n *             frontmatter {\n *               slug\n *             }\n *           }\n *         }\n *       }\n *     }\n *   `, { limit: 1000 }).then(result => {\n *     if (result.errors) {\n *       throw result.errors\n *     }\n *\n *     // Create blog post pages.\n *     result.data.allMarkdownRemark.edges.forEach(edge => {\n *       createPage({\n *         // Path for this page — required\n *         path: `${edge.node.frontmatter.slug}`,\n *         component: blogPostTemplate,\n *         context: {\n *           // Add optional context data to be inserted\n *           // as props into the page component..\n *           //\n *           // The context data can also be used as\n *           // arguments to the page GraphQL query.\n *           //\n *           // The page \"path\" is always available as a GraphQL\n *           // argument.\n *         },\n *       })\n *     })\n *   })\n * }\n */\n\nexports.createPages = true\n\n/**\n * Like `createPages` but for plugins who want to manage creating and removing\n * pages themselves in response to changes in data *not* managed by Gatsby.\n * Plugins implementing `createPages` will get called regularly to recompute\n * page information as Gatsby's data changes but those implementing\n * `createPagesStatefully` will not.\n *\n * An example of a plugin that uses this extension point is the plugin\n * [gatsby-plugin-page-creator](https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-page-creator)\n * which monitors the `src/pages` directory for the adding and removal of JS\n * pages. As its source of truth, files in the pages directory, is not known by\n * Gatsby, it needs to keep its own state about its world to know when to\n * add and remove pages.\n */\nexports.createPagesStatefully = true\n\n/**\n * Extension point to tell plugins to source nodes. This API is called during\n * the Gatsby bootstrap sequence. Source plugins use this hook to create nodes.\n * This API is called exactly once per plugin (and once for your site's\n * `gatsby-config.js` file). If you define this hook in `gatsby-node.js` it\n * will be called exactly once after all of your source plugins have finished\n * creating nodes.\n *\n * See also the documentation for [`createNode`](/docs/actions/#createNode).\n * @example\n * exports.sourceNodes = ({ actions, createNodeId, createContentDigest }) => {\n *   const { createNode } = actions\n *\n *   // Data can come from anywhere, but for now create it manually\n *   const myData = {\n *     key: 123,\n *     foo: `The foo field of my node`,\n *     bar: `Baz`\n *   }\n *\n *   const nodeContent = JSON.stringify(myData)\n *\n *   const nodeMeta = {\n *     id: createNodeId(`my-data-${myData.key}`),\n *     parent: null,\n *     children: [],\n *     internal: {\n *       type: `MyNodeType`,\n *       mediaType: `text/html`,\n *       content: nodeContent,\n *       contentDigest: createContentDigest(myData)\n *     }\n *   }\n *\n *   const node = Object.assign({}, myData, nodeMeta)\n *   createNode(node)\n * }\n */\nexports.sourceNodes = true\n\n/**\n * Called when a new node is created. Plugins wishing to extend or\n * transform nodes created by other plugins should implement this API.\n *\n * See also the documentation for [`createNode`](/docs/actions/#createNode)\n * and [`createNodeField`](/docs/actions/#createNodeField)\n * @example\n * exports.onCreateNode = ({ node, actions }) => {\n *   const { createNode, createNodeField } = actions\n *   // Transform the new node here and create a new node or\n *   // create a new node field.\n * }\n */\nexports.onCreateNode = true\n\n/**\n * Called when a new page is created. This extension API is useful\n * for programmatically manipulating pages created by other plugins e.g.\n * if you want paths without trailing slashes.\n *\n * See the guide [Creating and Modifying Pages](/docs/creating-and-modifying-pages/)\n * for more on this API.\n */\nexports.onCreatePage = true\n\n/**\n * Called during the creation of the GraphQL schema. Allows plugins\n * to add new fields to the types created from data nodes. It will be called\n * separately for each type.\n *\n * This function should return an object in the shape of\n * [GraphQLFieldConfigMap](https://graphql.org/graphql-js/type/#graphqlobjecttype)\n * which will be appended to fields inferred by Gatsby from data nodes.\n *\n * *Note:* Import GraphQL types from `gatsby/graphql` and don't add the `graphql`\n * package to your project/plugin dependencies to avoid `Schema must\n * contain unique named types but contains multiple types named` errors.\n * `gatsby/graphql` exports all builtin GraphQL types as well as the `graphQLJSON`\n * type.\n *\n * Many transformer plugins use this to add fields that take arguments.\n *\n * * [`gatsby-transformer-remark`](/packages/gatsby-transformer-remark/)\n * adds an \"excerpt\" field where the user when writing their query can specify\n * how many characters to prune the markdown source to.\n * * [`gatsby-transformer-sharp`](/packages/gatsby-transformer-sharp/) exposes\n * many image transformation options as GraphQL fields.\n *\n * @param {object} $0\n * @param {object} $0.type Object containing `name` and `nodes`\n * @example\n * import { GraphQLString } from \"gatsby/graphql\"\n *\n * exports.setFieldsOnGraphQLNodeType = ({ type }) => {\n *   if (type.name === `File`) {\n *     return {\n *       newField: {\n *         type: GraphQLString,\n *         args: {\n *           myArgument: {\n *             type: GraphQLString,\n *           }\n *         },\n *         resolve: (source, fieldArgs) => {\n *           return `Id of this node is ${source.id}.\n *                   Field was called with argument: ${fieldArgs.myArgument}`\n *         }\n *       }\n *     }\n *   }\n *\n *   // by default return empty object\n *   return {}\n * }\n */\nexports.setFieldsOnGraphQLNodeType = true\n\n/**\n * Add custom field resolvers to the GraphQL schema.\n *\n * Allows adding new fields to types by providing field configs, or adding resolver\n * functions to existing fields.\n *\n * Things to note:\n * * Overriding field types is disallowed, instead use the `createTypes`\n *   action. In case of types added from third-party schemas, where this is not\n *   possible, overriding field types is allowed.\n * * New fields will not be available on `filter` and `sort` input types. Extend\n *   types defined with `createTypes` if you need this.\n * * In field configs, types can be referenced as strings.\n * * When extending a field with an existing field resolver, the original\n *   resolver function is available from `info.originalResolver`.\n * * The `createResolvers` API is called as the last step in schema generation.\n *   Thus, an intermediate schema is made available on the `schema` property.\n *   In resolver functions themselves, it is recommended to access the final\n *   built schema from `info.schema`.\n * * Gatsby's data layer, including all internal query capabilities, is\n *   exposed on [`context.nodeModel`](/docs/node-model/). The node store can be\n *   queried directly with `getAllNodes`, `getNodeById` and `getNodesByIds`,\n *   while more advanced queries can be composed with `runQuery`. Note that\n *   `runQuery` will call field resolvers before querying, so e.g. foreign-key\n *   fields will be expanded to full nodes. The other methods on `nodeModel`\n *   don't do this.\n * * It is possible to add fields to the root `Query` type.\n * * When using the first resolver argument (`source` in the example below,\n *   often also called `parent` or `root`), take care of the fact that field\n *   resolvers can be called more than once in a query, e.g. when the field is\n *   present both in the input filter and in the selection set. This means that\n *   foreign-key fields on `source` can be either resolved or not-resolved.\n *\n * For fuller examples, see [`using-type-definitions`](https://github.com/gatsbyjs/gatsby/tree/master/examples/using-type-definitions).\n *\n * @param {object} $0\n * @param {GraphQLSchema} $0.schema Current GraphQL schema\n * @param {function} $0.createResolvers Add custom resolvers to GraphQL field configs\n * @param {object} $1\n * @param {object} $1.resolvers Resolvers from plugin options in `gatsby-config.js`.\n * @example\n * exports.createResolvers = ({ createResolvers }) => {\n *   const resolvers = {\n *     Author: {\n *       fullName: {\n *         resolve: (source, args, context, info) => {\n *           return source.firstName + source.lastName\n *         }\n *       },\n *     },\n *     Query: {\n *       allRecentPosts: {\n *         type: [`BlogPost`],\n *         resolve: (source, args, context, info) => {\n *           const posts = context.nodeModel.getAllNodes({ type: `BlogPost` })\n *           const recentPosts = posts.filter(\n *             post => post.publishedAt > Date.UTC(2018, 0, 1)\n *           )\n *           return recentPosts\n *         }\n *       }\n *     }\n *   }\n *   createResolvers(resolvers)\n * }\n */\nexports.createResolvers = true\n\n/**\n * Ask compile-to-js plugins to process source to JavaScript so the query\n * runner can extract out GraphQL queries for running.\n */\nexports.preprocessSource = true\n\n/**\n * Tell plugins with expensive \"side effects\" from queries to start running\n * those now. This is a soon-to-be-replaced API only currently in use by\n * `gatsby-plugin-sharp`.\n */\nexports.generateSideEffects = true\n\n/**\n * Let plugins extend/mutate the site's Babel configuration.\n * This API will change before 2.0 as it needs still to be converted to use\n * Redux actions.\n */\nexports.onCreateBabelConfig = true\n\n/**\n * Let plugins extend/mutate the site's webpack configuration.\n *\n * See also the documentation for [`setWebpackConfig`](/docs/actions/#setWebpackConfig).\n *\n * @param {object} $0\n * @param {string} $0.stage The current build stage. One of 'develop', 'develop-html',\n * 'build-javascript', or 'build-html'\n * @param {function} $0.getConfig Returns the current webpack config\n * @param {object} $0.rules A set of preconfigured webpack config rules\n * @param {object} $0.loaders A set of preconfigured webpack config loaders\n * @param {object} $0.plugins A set of preconfigured webpack config plugins\n * @param {object} $0.actions\n * @example\n * exports.onCreateWebpackConfig = ({\n *  stage, getConfig, rules, loaders, actions\n * }) => {\n *   actions.setWebpackConfig({\n *     module: {\n *       rules: [\n *         {\n *           test: 'my-css',\n *           use: [loaders.style(), loaders.css()]\n *         },\n *       ],\n *     },\n *   });\n * }\n */\nexports.onCreateWebpackConfig = true\n\n/**\n * The first API called during Gatsby execution, runs as soon as plugins are loaded, before cache initialization and bootstrap preparation.\n */\nexports.onPreInit = true\n\n/**\n * Called once Gatsby has initialized itself and is ready to bootstrap your site.\n */\nexports.onPreBootstrap = true\n\n/**\n * Called at the end of the bootstrap process after all other extension APIs have been called.\n */\nexports.onPostBootstrap = true\n\n/**\n * The first extension point called during the build process. Called after the bootstrap has completed but before the build steps start.\n */\nexports.onPreBuild = true\n\n/**\n * The last extension point called after all other parts of the build process\n * are complete.\n */\nexports.onPostBuild = true\n\n/**\n * Run before GraphQL queries/fragments are extracted from JavaScript files. Useful for plugins\n * to add more JavaScript files with queries/fragments e.g. from node_modules.\n *\n * See gatsby-transformer-sharp and gatsby-source-contentful for examples.\n */\nexports.onPreExtractQueries = true\n\n/**\n * Run when gatsby develop server is started, its useful to add proxy and middleware\n * to the dev server app\n * @param {object} $0\n * @param {Express} $0.app The [Express app](https://expressjs.com/en/4x/api.html#app) used to run the dev server\n * @example\n * exports.onCreateDevServer = ({ app }) => {\n *   app.get('/hello', function (req, res) {\n *     res.send('hello world')\n *   })\n * }\n */\nexports.onCreateDevServer = true\n"],"file":"api-node-docs.js"}
\ No newline at end of file
+{"version":3,"sources":["../../src/utils/api-node-docs.js"],"names":["exports","resolvableExtensions","createPages","createPagesStatefully","sourceNodes","onCreateNode","onCreatePage","setFieldsOnGraphQLNodeType","createResolvers","preprocessSource","generateSideEffects","onCreateBabelConfig","onCreateWebpackConfig","onPreInit","onPreBootstrap","onPostBootstrap","onPreBuild","onPostBuild","onPreExtractQueries","onCreateDevServer"],"mappings":";;AAAA;;;;;AAKAA,OAAO,CAACC,oBAAR,GAA+B,IAA/B;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDAD,OAAO,CAACE,WAAR,GAAsB,IAAtB;AAEA;;;;;;;;;;;;;;;AAcAF,OAAO,CAACG,qBAAR,GAAgC,IAAhC;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCAH,OAAO,CAACI,WAAR,GAAsB,IAAtB;AAEA;;;;;;;;;;;;;;AAaAJ,OAAO,CAACK,YAAR,GAAuB,IAAvB;AAEA;;;;;;;;;AAQAL,OAAO,CAACM,YAAR,GAAuB,IAAvB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDAN,OAAO,CAACO,0BAAR,GAAqC,IAArC;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkEAP,OAAO,CAACQ,eAAR,GAA0B,IAA1B;AAEA;;;;;AAIAR,OAAO,CAACS,gBAAR,GAA2B,IAA3B;AAEA;;;;;;AAKAT,OAAO,CAACU,mBAAR,GAA8B,IAA9B;AAEA;;;;;;AAKAV,OAAO,CAACW,mBAAR,GAA8B,IAA9B;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BAX,OAAO,CAACY,qBAAR,GAAgC,IAAhC;AAEA;;;;AAGAZ,OAAO,CAACa,SAAR,GAAoB,IAApB;AAEA;;;;AAGAb,OAAO,CAACc,cAAR,GAAyB,IAAzB;AAEA;;;;AAGAd,OAAO,CAACe,eAAR,GAA0B,IAA1B;AAEA;;;;AAGAf,OAAO,CAACgB,UAAR,GAAqB,IAArB;AAEA;;;;;AAIAhB,OAAO,CAACiB,WAAR,GAAsB,IAAtB;AAEA;;;;;;;AAMAjB,OAAO,CAACkB,mBAAR,GAA8B,IAA9B;AAEA;;;;;;;;;;;;;AAYAlB,OAAO,CAACmB,iBAAR,GAA4B,IAA5B","sourcesContent":["/**\n * Lets plugins implementing support for other compile-to-js add to the list\n * of \"resolvable\" file extensions. Gatsby supports `.js` and `.jsx` by default.\n * @returns {Array<string>} array of extensions\n */\nexports.resolvableExtensions = true\n\n/**\n * Tell plugins to add pages. This extension point is called only after the initial\n * sourcing and transformation of nodes plus creation of the GraphQL schema are\n * complete so you can query your data in order to create pages.\n *\n * See also [the documentation for the action `createPage`](/docs/actions/#createPage).\n * @example\n * const path = require(`path`)\n *\n * exports.createPages = ({ graphql, actions }) => {\n *   const { createPage } = actions\n *   const blogPostTemplate = path.resolve(`src/templates/blog-post.js`)\n *   // Query for markdown nodes to use in creating pages.\n *   // You can query for whatever data you want to create pages for e.g.\n *   // products, portfolio items, landing pages, etc.\n *   return graphql(`\n *     {\n *       allMarkdownRemark(limit: 1000) {\n *         edges {\n *           node {\n *             fields {\n *               slug\n *             }\n *           }\n *         }\n *       }\n *     }\n *   `).then(result => {\n *     if (result.errors) {\n *       throw result.errors\n *     }\n *\n *     // Create blog post pages.\n *     result.data.allMarkdownRemark.edges.forEach(edge => {\n *       createPage({\n *         // Path for this page — required\n *         path: `${edge.node.fields.slug}`,\n *         component: blogPostTemplate,\n *         context: {\n *           // Add optional context data to be inserted\n *           // as props into the page component..\n *           //\n *           // The context data can also be used as\n *           // arguments to the page GraphQL query.\n *           //\n *           // The page \"path\" is always available as a GraphQL\n *           // argument.\n *         },\n *       })\n *     })\n *   })\n * }\n */\n\nexports.createPages = true\n\n/**\n * Like `createPages` but for plugins who want to manage creating and removing\n * pages themselves in response to changes in data *not* managed by Gatsby.\n * Plugins implementing `createPages` will get called regularly to recompute\n * page information as Gatsby's data changes but those implementing\n * `createPagesStatefully` will not.\n *\n * An example of a plugin that uses this extension point is the plugin\n * [gatsby-plugin-page-creator](https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-page-creator)\n * which monitors the `src/pages` directory for the adding and removal of JS\n * pages. As its source of truth, files in the pages directory, is not known by\n * Gatsby, it needs to keep its own state about its world to know when to\n * add and remove pages.\n */\nexports.createPagesStatefully = true\n\n/**\n * Extension point to tell plugins to source nodes. This API is called during\n * the Gatsby bootstrap sequence. Source plugins use this hook to create nodes.\n * This API is called exactly once per plugin (and once for your site's\n * `gatsby-config.js` file). If you define this hook in `gatsby-node.js` it\n * will be called exactly once after all of your source plugins have finished\n * creating nodes.\n *\n * See also the documentation for [`createNode`](/docs/actions/#createNode).\n * @example\n * exports.sourceNodes = ({ actions, createNodeId, createContentDigest }) => {\n *   const { createNode } = actions\n *\n *   // Data can come from anywhere, but for now create it manually\n *   const myData = {\n *     key: 123,\n *     foo: `The foo field of my node`,\n *     bar: `Baz`\n *   }\n *\n *   const nodeContent = JSON.stringify(myData)\n *\n *   const nodeMeta = {\n *     id: createNodeId(`my-data-${myData.key}`),\n *     parent: null,\n *     children: [],\n *     internal: {\n *       type: `MyNodeType`,\n *       mediaType: `text/html`,\n *       content: nodeContent,\n *       contentDigest: createContentDigest(myData)\n *     }\n *   }\n *\n *   const node = Object.assign({}, myData, nodeMeta)\n *   createNode(node)\n * }\n */\nexports.sourceNodes = true\n\n/**\n * Called when a new node is created. Plugins wishing to extend or\n * transform nodes created by other plugins should implement this API.\n *\n * See also the documentation for [`createNode`](/docs/actions/#createNode)\n * and [`createNodeField`](/docs/actions/#createNodeField)\n * @example\n * exports.onCreateNode = ({ node, actions }) => {\n *   const { createNode, createNodeField } = actions\n *   // Transform the new node here and create a new node or\n *   // create a new node field.\n * }\n */\nexports.onCreateNode = true\n\n/**\n * Called when a new page is created. This extension API is useful\n * for programmatically manipulating pages created by other plugins e.g.\n * if you want paths without trailing slashes.\n *\n * See the guide [Creating and Modifying Pages](/docs/creating-and-modifying-pages/)\n * for more on this API.\n */\nexports.onCreatePage = true\n\n/**\n * Called during the creation of the GraphQL schema. Allows plugins\n * to add new fields to the types created from data nodes. It will be called\n * separately for each type.\n *\n * This function should return an object in the shape of\n * [GraphQLFieldConfigMap](https://graphql.org/graphql-js/type/#graphqlobjecttype)\n * which will be appended to fields inferred by Gatsby from data nodes.\n *\n * *Note:* Import GraphQL types from `gatsby/graphql` and don't add the `graphql`\n * package to your project/plugin dependencies to avoid `Schema must\n * contain unique named types but contains multiple types named` errors.\n * `gatsby/graphql` exports all builtin GraphQL types as well as the `graphQLJSON`\n * type.\n *\n * Many transformer plugins use this to add fields that take arguments.\n *\n * * [`gatsby-transformer-remark`](/packages/gatsby-transformer-remark/)\n * adds an \"excerpt\" field where the user when writing their query can specify\n * how many characters to prune the markdown source to.\n * * [`gatsby-transformer-sharp`](/packages/gatsby-transformer-sharp/) exposes\n * many image transformation options as GraphQL fields.\n *\n * @param {object} $0\n * @param {object} $0.type Object containing `name` and `nodes`\n * @example\n * import { GraphQLString } from \"gatsby/graphql\"\n *\n * exports.setFieldsOnGraphQLNodeType = ({ type }) => {\n *   if (type.name === `File`) {\n *     return {\n *       newField: {\n *         type: GraphQLString,\n *         args: {\n *           myArgument: {\n *             type: GraphQLString,\n *           }\n *         },\n *         resolve: (source, fieldArgs) => {\n *           return `Id of this node is ${source.id}.\n *                   Field was called with argument: ${fieldArgs.myArgument}`\n *         }\n *       }\n *     }\n *   }\n *\n *   // by default return empty object\n *   return {}\n * }\n */\nexports.setFieldsOnGraphQLNodeType = true\n\n/**\n * Add custom field resolvers to the GraphQL schema.\n *\n * Allows adding new fields to types by providing field configs, or adding resolver\n * functions to existing fields.\n *\n * Things to note:\n * * Overriding field types is disallowed, instead use the `createTypes`\n *   action. In case of types added from third-party schemas, where this is not\n *   possible, overriding field types is allowed.\n * * New fields will not be available on `filter` and `sort` input types. Extend\n *   types defined with `createTypes` if you need this.\n * * In field configs, types can be referenced as strings.\n * * When extending a field with an existing field resolver, the original\n *   resolver function is available from `info.originalResolver`.\n * * The `createResolvers` API is called as the last step in schema generation.\n *   Thus, an intermediate schema is made available on the `schema` property.\n *   In resolver functions themselves, it is recommended to access the final\n *   built schema from `info.schema`.\n * * Gatsby's data layer, including all internal query capabilities, is\n *   exposed on [`context.nodeModel`](/docs/node-model/). The node store can be\n *   queried directly with `getAllNodes`, `getNodeById` and `getNodesByIds`,\n *   while more advanced queries can be composed with `runQuery`. Note that\n *   `runQuery` will call field resolvers before querying, so e.g. foreign-key\n *   fields will be expanded to full nodes. The other methods on `nodeModel`\n *   don't do this.\n * * It is possible to add fields to the root `Query` type.\n * * When using the first resolver argument (`source` in the example below,\n *   often also called `parent` or `root`), take care of the fact that field\n *   resolvers can be called more than once in a query, e.g. when the field is\n *   present both in the input filter and in the selection set. This means that\n *   foreign-key fields on `source` can be either resolved or not-resolved.\n *\n * For fuller examples, see [`using-type-definitions`](https://github.com/gatsbyjs/gatsby/tree/master/examples/using-type-definitions).\n *\n * @param {object} $0\n * @param {GraphQLSchema} $0.schema Current GraphQL schema\n * @param {function} $0.createResolvers Add custom resolvers to GraphQL field configs\n * @param {object} $1\n * @param {object} $1.resolvers Resolvers from plugin options in `gatsby-config.js`.\n * @example\n * exports.createResolvers = ({ createResolvers }) => {\n *   const resolvers = {\n *     Author: {\n *       fullName: {\n *         resolve: (source, args, context, info) => {\n *           return source.firstName + source.lastName\n *         }\n *       },\n *     },\n *     Query: {\n *       allRecentPosts: {\n *         type: [`BlogPost`]\n *         resolve: (source, args, context, info) => {\n *           const posts = context.nodeModel.getAllNodes({ type: `BlogPost` })\n *           const recentPosts = posts.filter(\n *             post => post.publishedAt > Date.UTC(2018, 0, 1)\n *           )\n *           return recentPosts\n *         }\n *       }\n *     }\n *   }\n *   createResolvers(resolvers)\n * }\n */\nexports.createResolvers = true\n\n/**\n * Ask compile-to-js plugins to process source to JavaScript so the query\n * runner can extract out GraphQL queries for running.\n */\nexports.preprocessSource = true\n\n/**\n * Tell plugins with expensive \"side effects\" from queries to start running\n * those now. This is a soon-to-be-replaced API only currently in use by\n * `gatsby-plugin-sharp`.\n */\nexports.generateSideEffects = true\n\n/**\n * Let plugins extend/mutate the site's Babel configuration.\n * This API will change before 2.0 as it needs still to be converted to use\n * Redux actions.\n */\nexports.onCreateBabelConfig = true\n\n/**\n * Let plugins extend/mutate the site's webpack configuration.\n *\n * See also the documentation for [`setWebpackConfig`](/docs/actions/#setWebpackConfig).\n *\n * @param {object} $0\n * @param {string} $0.stage The current build stage. One of 'develop', 'develop-html',\n * 'build-javascript', or 'build-html'\n * @param {function} $0.getConfig Returns the current webpack config\n * @param {object} $0.rules A set of preconfigured webpack config rules\n * @param {object} $0.loaders A set of preconfigured webpack config loaders\n * @param {object} $0.plugins A set of preconfigured webpack config plugins\n * @param {object} $0.actions\n * @example\n * exports.onCreateWebpackConfig = ({\n *  stage, getConfig, rules, loaders, actions\n * }) => {\n *   actions.setWebpackConfig({\n *     module: {\n *       rules: [\n *         {\n *           test: 'my-css',\n *           use: [loaders.style(), loaders.css()]\n *         },\n *       ],\n *     },\n *   });\n * }\n */\nexports.onCreateWebpackConfig = true\n\n/**\n * The first API called during Gatsby execution, runs as soon as plugins are loaded, before cache initialization and bootstrap preparation.\n */\nexports.onPreInit = true\n\n/**\n * Called once Gatsby has initialized itself and is ready to bootstrap your site.\n */\nexports.onPreBootstrap = true\n\n/**\n * Called at the end of the bootstrap process after all other extension APIs have been called.\n */\nexports.onPostBootstrap = true\n\n/**\n * The first extension point called during the build process. Called after the bootstrap has completed but before the build steps start.\n */\nexports.onPreBuild = true\n\n/**\n * The last extension point called after all other parts of the build process\n * are complete.\n */\nexports.onPostBuild = true\n\n/**\n * Run before GraphQL queries/fragments are extracted from JavaScript files. Useful for plugins\n * to add more JavaScript files with queries/fragments e.g. from node_modules.\n *\n * See gatsby-transformer-sharp and gatsby-source-contentful for examples.\n */\nexports.onPreExtractQueries = true\n\n/**\n * Run when gatsby develop server is started, its useful to add proxy and middleware\n * to the dev server app\n * @param {object} $0\n * @param {Express} $0.app The [Express app](https://expressjs.com/en/4x/api.html#app) used to run the dev server\n * @example\n * exports.onCreateDevServer = ({ app }) => {\n *   app.get('/hello', function (req, res) {\n *     res.send('hello world')\n *   })\n * }\n */\nexports.onCreateDevServer = true\n"],"file":"api-node-docs.js"}
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/utils/api-runner-node.js b/node_modules/gatsby/dist/utils/api-runner-node.js
index e1c1a70..cf745e4 100644
--- a/node_modules/gatsby/dist/utils/api-runner-node.js
+++ b/node_modules/gatsby/dist/utils/api-runner-node.js
@@ -31,8 +31,6 @@ const _require = require(`../schema/types/type-builders`),
 const _require2 = require(`../redux`),
       emitter = _require2.emitter;
 
-const getPublicPath = require(`./get-public-path`);
-
 const _require3 = require(`./stack-trace-utils`),
       getNonGatsbyCodeFrame = _require3.getNonGatsbyCodeFrame;
 
@@ -101,6 +99,7 @@ const runAPI = (plugin, api, args) => {
     const pluginSpan = tracer.startSpan(`run-plugin`, spanOptions);
     pluginSpan.setTag(`api`, api);
     pluginSpan.setTag(`plugin`, plugin.name);
+    let pathPrefix = ``;
 
     const _require5 = require(`../redux`),
           store = _require5.store,
@@ -121,12 +120,9 @@ const runAPI = (plugin, api, args) => {
       parentSpan: pluginSpan
     }));
 
-    const _store$getState = store.getState(),
-          config = _store$getState.config,
-          program = _store$getState.program;
-
-    const pathPrefix = program.prefixPaths && config.pathPrefix || ``;
-    const publicPath = getPublicPath(Object.assign({}, config, program), ``);
+    if (store.getState().program.prefixPaths) {
+      pathPrefix = store.getState().config.pathPrefix;
+    }
 
     const namespacedCreateNodeId = id => createNodeId(id, plugin.name);
 
@@ -168,8 +164,7 @@ const runAPI = (plugin, api, args) => {
     }
 
     const apiCallArgs = [Object.assign({}, args, {
-      basePath: pathPrefix,
-      pathPrefix: publicPath,
+      pathPrefix,
       boundActionCreators: actions,
       actions,
       loadNodeContent,
diff --git a/node_modules/gatsby/dist/utils/api-runner-node.js.map b/node_modules/gatsby/dist/utils/api-runner-node.js.map
index 5c78021..a6996af 100644
--- a/node_modules/gatsby/dist/utils/api-runner-node.js.map
+++ b/node_modules/gatsby/dist/utils/api-runner-node.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/utils/api-runner-node.js"],"names":["Promise","require","_","chalk","tracer","globalTracer","reporter","getCache","apiList","createNodeId","createContentDigest","buildObjectType","buildUnionType","buildInterfaceType","buildInputObjectType","emitter","getPublicPath","getNonGatsbyCodeFrame","trackBuildError","decorateEvent","boundPluginActionCreators","doubleBind","boundActionCreators","api","plugin","actionOptions","traceId","name","keys","Object","doubleBoundActionCreators","i","length","key","boundActionCreator","args","initAPICallTracing","parentSpan","startSpan","spanName","spanArgs","defaultSpanArgs","childOf","merge","runAPI","gatsbyNode","resolve","spanOptions","pluginSpan","setTag","store","loadNodeContent","getNodes","getNode","getNodesByType","hasNodeChanged","getNodeAndSavePathDependency","getState","config","program","pathPrefix","prefixPaths","publicPath","namespacedCreateNodeId","id","tracing","cache","actions","apiFinished","alreadyDisplayed","createPageAction","createPage","warning","stripIndent","bold","possiblyCodeFrame","push","warn","join","apiCallArgs","basePath","schema","pluginOptions","fromCallback","callback","cb","err","val","finish","e","error","pluginName","version","result","then","res","apisRunningById","Map","apisRunningByTraceId","waitingForCasacadeToFinish","module","exports","pluginSource","apiSpanArgs","apiSpan","forEach","traceTags","value","panic","plugins","flattenedPlugins","implementingPlugins","filter","nodeAPIs","includes","apiRunInstance","span","startTime","Date","toJSON","type","node","internal","contentDigest","filename","page","path","argsJson","JSON","stringify","omit","waitForCascadingActions","set","has","currentCount","get","stopQueuedApiRuns","onAPIRunComplete","actionHandler","action","payload","on","off","mapSeries","catch","panicOnBuild","results","delete","size","emit","isEmpty","instance","apisByTraceIdCount"],"mappings":"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","sourcesContent":["const Promise = require(`bluebird`)\nconst _ = require(`lodash`)\nconst chalk = require(`chalk`)\n\nconst tracer = require(`opentracing`).globalTracer()\nconst reporter = require(`gatsby-cli/lib/reporter`)\nconst getCache = require(`./get-cache`)\nconst apiList = require(`./api-node-docs`)\nconst createNodeId = require(`./create-node-id`)\nconst createContentDigest = require(`./create-content-digest`)\nconst {\n  buildObjectType,\n  buildUnionType,\n  buildInterfaceType,\n  buildInputObjectType,\n} = require(`../schema/types/type-builders`)\nconst { emitter } = require(`../redux`)\nconst getPublicPath = require(`./get-public-path`)\nconst { getNonGatsbyCodeFrame } = require(`./stack-trace-utils`)\nconst { trackBuildError, decorateEvent } = require(`gatsby-telemetry`)\n\n// Bind action creators per plugin so we can auto-add\n// metadata to actions they create.\nconst boundPluginActionCreators = {}\nconst doubleBind = (boundActionCreators, api, plugin, actionOptions) => {\n  const { traceId } = actionOptions\n  if (boundPluginActionCreators[plugin.name + api + traceId]) {\n    return boundPluginActionCreators[plugin.name + api + traceId]\n  } else {\n    const keys = Object.keys(boundActionCreators)\n    const doubleBoundActionCreators = {}\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i]\n      const boundActionCreator = boundActionCreators[key]\n      if (typeof boundActionCreator === `function`) {\n        doubleBoundActionCreators[key] = (...args) => {\n          // Let action callers override who the plugin is. Shouldn't be\n          // used that often.\n          if (args.length === 1) {\n            boundActionCreator(args[0], plugin, actionOptions)\n          } else if (args.length === 2) {\n            boundActionCreator(args[0], args[1], actionOptions)\n          }\n        }\n      }\n    }\n    boundPluginActionCreators[\n      plugin.name + api + traceId\n    ] = doubleBoundActionCreators\n    return doubleBoundActionCreators\n  }\n}\n\nconst initAPICallTracing = parentSpan => {\n  const startSpan = (spanName, spanArgs = {}) => {\n    const defaultSpanArgs = { childOf: parentSpan }\n\n    return tracer.startSpan(spanName, _.merge(defaultSpanArgs, spanArgs))\n  }\n\n  return {\n    tracer,\n    parentSpan,\n    startSpan,\n  }\n}\n\nconst runAPI = (plugin, api, args) => {\n  const gatsbyNode = require(`${plugin.resolve}/gatsby-node`)\n  if (gatsbyNode[api]) {\n    const parentSpan = args && args.parentSpan\n    const spanOptions = parentSpan ? { childOf: parentSpan } : {}\n    const pluginSpan = tracer.startSpan(`run-plugin`, spanOptions)\n\n    pluginSpan.setTag(`api`, api)\n    pluginSpan.setTag(`plugin`, plugin.name)\n\n    const { store, emitter } = require(`../redux`)\n    const {\n      loadNodeContent,\n      getNodes,\n      getNode,\n      getNodesByType,\n      hasNodeChanged,\n      getNodeAndSavePathDependency,\n    } = require(`../db/nodes`)\n    const { boundActionCreators } = require(`../redux/actions`)\n\n    const doubleBoundActionCreators = doubleBind(\n      boundActionCreators,\n      api,\n      plugin,\n      { ...args, parentSpan: pluginSpan }\n    )\n\n    const { config, program } = store.getState()\n\n    const pathPrefix = (program.prefixPaths && config.pathPrefix) || ``\n    const publicPath = getPublicPath({ ...config, ...program }, ``)\n\n    const namespacedCreateNodeId = id => createNodeId(id, plugin.name)\n\n    const tracing = initAPICallTracing(pluginSpan)\n\n    const cache = getCache(plugin.name)\n\n    // Ideally this would be more abstracted and applied to more situations, but right now\n    // this can be potentially breaking so targeting `createPages` API and `createPage` action\n    let actions = doubleBoundActionCreators\n    let apiFinished = false\n    if (api === `createPages`) {\n      let alreadyDisplayed = false\n      const createPageAction = actions.createPage\n      // create new actions object with wrapped createPage action\n      // doubleBoundActionCreators is memoized, so we can't just\n      // reassign createPage field as this would cause this extra logic\n      // to be used in subsequent APIs and we only want to target this `createPages` call.\n      actions = {\n        ...actions,\n        createPage: (...args) => {\n          createPageAction(...args)\n          if (apiFinished && !alreadyDisplayed) {\n            const warning = [\n              reporter.stripIndent(`\n              Action ${chalk.bold(\n                `createPage`\n              )} was called outside of its expected asynchronous lifecycle ${chalk.bold(\n                `createPages`\n              )} in ${chalk.bold(plugin.name)}.\n              Ensure that you return a Promise from ${chalk.bold(\n                `createPages`\n              )} and are awaiting any asynchronous method invocations (like ${chalk.bold(\n                `graphql`\n              )} or http requests).\n              For more info and debugging tips: see ${chalk.bold(\n                `https://gatsby.dev/sync-actions`\n              )}\n            `),\n            ]\n\n            const possiblyCodeFrame = getNonGatsbyCodeFrame()\n            if (possiblyCodeFrame) {\n              warning.push(possiblyCodeFrame)\n            }\n\n            reporter.warn(warning.join(`\\n\\n`))\n            alreadyDisplayed = true\n          }\n        },\n      }\n    }\n\n    const apiCallArgs = [\n      {\n        ...args,\n        basePath: pathPrefix,\n        pathPrefix: publicPath,\n        boundActionCreators: actions,\n        actions,\n        loadNodeContent,\n        store,\n        emitter,\n        getCache,\n        getNodes,\n        getNode,\n        getNodesByType,\n        hasNodeChanged,\n        reporter,\n        getNodeAndSavePathDependency,\n        cache,\n        createNodeId: namespacedCreateNodeId,\n        createContentDigest,\n        tracing,\n        schema: {\n          buildObjectType,\n          buildUnionType,\n          buildInterfaceType,\n          buildInputObjectType,\n        },\n      },\n      plugin.pluginOptions,\n    ]\n\n    // If the plugin is using a callback use that otherwise\n    // expect a Promise to be returned.\n    if (gatsbyNode[api].length === 3) {\n      return Promise.fromCallback(callback => {\n        const cb = (err, val) => {\n          pluginSpan.finish()\n          callback(err, val)\n          apiFinished = true\n        }\n\n        try {\n          gatsbyNode[api](...apiCallArgs, cb)\n        } catch (e) {\n          trackBuildError(api, {\n            error: e,\n            pluginName: `${plugin.name}@${plugin.version}`,\n          })\n          throw e\n        }\n      })\n    } else {\n      const result = gatsbyNode[api](...apiCallArgs)\n      pluginSpan.finish()\n      return Promise.resolve(result).then(res => {\n        apiFinished = true\n        return res\n      })\n    }\n  }\n\n  return null\n}\n\nlet apisRunningById = new Map()\nlet apisRunningByTraceId = new Map()\nlet waitingForCasacadeToFinish = []\n\nmodule.exports = async (api, args = {}, pluginSource) =>\n  new Promise(resolve => {\n    const { parentSpan } = args\n    const apiSpanArgs = parentSpan ? { childOf: parentSpan } : {}\n    const apiSpan = tracer.startSpan(`run-api`, apiSpanArgs)\n\n    apiSpan.setTag(`api`, api)\n    _.forEach(args.traceTags, (value, key) => {\n      apiSpan.setTag(key, value)\n    })\n\n    // Check that the API is documented.\n    // \"FAKE_API_CALL\" is used when code needs to trigger something\n    // to happen once the the API queue is empty. Ideally of course\n    // we'd have an API (returning a promise) for that. But this\n    // works nicely in the meantime.\n    if (!apiList[api] && api !== `FAKE_API_CALL`) {\n      reporter.panic(`api: \"${api}\" is not a valid Gatsby api`)\n    }\n\n    const { store } = require(`../redux`)\n    const plugins = store.getState().flattenedPlugins\n\n    // Get the list of plugins that implement this API.\n    // Also: Break infinite loops. Sometimes a plugin will implement an API and\n    // call an action which will trigger the same API being called.\n    // `onCreatePage` is the only example right now. In these cases, we should\n    // avoid calling the originating plugin again.\n    const implementingPlugins = plugins.filter(\n      plugin => plugin.nodeAPIs.includes(api) && plugin.name !== pluginSource\n    )\n\n    const apiRunInstance = {\n      api,\n      args,\n      pluginSource,\n      resolve,\n      span: apiSpan,\n      startTime: new Date().toJSON(),\n      traceId: args.traceId,\n    }\n\n    // Generate IDs for api runs. Most IDs we generate from the args\n    // but some API calls can have very large argument objects so we\n    // have special ways of generating IDs for those to avoid stringifying\n    // large objects.\n    let id\n    if (api === `setFieldsOnGraphQLNodeType`) {\n      id = `${api}${apiRunInstance.startTime}${args.type.name}${args.traceId}`\n    } else if (api === `onCreateNode`) {\n      id = `${api}${apiRunInstance.startTime}${\n        args.node.internal.contentDigest\n      }${args.traceId}`\n    } else if (api === `preprocessSource`) {\n      id = `${api}${apiRunInstance.startTime}${args.filename}${args.traceId}`\n    } else if (api === `onCreatePage`) {\n      id = `${api}${apiRunInstance.startTime}${args.page.path}${args.traceId}`\n    } else {\n      // When tracing is turned on, the `args` object will have a\n      // `parentSpan` field that can be quite large. So we omit it\n      // before calling stringify\n      const argsJson = JSON.stringify(_.omit(args, `parentSpan`))\n      id = `${api}|${apiRunInstance.startTime}|${\n        apiRunInstance.traceId\n      }|${argsJson}`\n    }\n    apiRunInstance.id = id\n\n    if (args.waitForCascadingActions) {\n      waitingForCasacadeToFinish.push(apiRunInstance)\n    }\n\n    apisRunningById.set(apiRunInstance.id, apiRunInstance)\n    if (apisRunningByTraceId.has(apiRunInstance.traceId)) {\n      const currentCount = apisRunningByTraceId.get(apiRunInstance.traceId)\n      apisRunningByTraceId.set(apiRunInstance.traceId, currentCount + 1)\n    } else {\n      apisRunningByTraceId.set(apiRunInstance.traceId, 1)\n    }\n\n    let stopQueuedApiRuns = false\n    let onAPIRunComplete = null\n    if (api === `onCreatePage`) {\n      const path = args.page.path\n      const actionHandler = action => {\n        if (action.payload.path === path) {\n          stopQueuedApiRuns = true\n        }\n      }\n      emitter.on(`DELETE_PAGE`, actionHandler)\n      onAPIRunComplete = () => {\n        emitter.off(`DELETE_PAGE`, actionHandler)\n      }\n    }\n\n    Promise.mapSeries(implementingPlugins, plugin => {\n      if (stopQueuedApiRuns) {\n        return null\n      }\n\n      let pluginName =\n        plugin.name === `default-site-plugin`\n          ? `gatsby-node.js`\n          : `Plugin ${plugin.name}`\n\n      return new Promise(resolve => {\n        resolve(runAPI(plugin, api, { ...args, parentSpan: apiSpan }))\n      }).catch(err => {\n        decorateEvent(`BUILD_PANIC`, {\n          pluginName: `${plugin.name}@${plugin.version}`,\n        })\n        reporter.panicOnBuild(`${pluginName} returned an error`, err)\n        return null\n      })\n    }).then(results => {\n      if (onAPIRunComplete) {\n        onAPIRunComplete()\n      }\n      // Remove runner instance\n      apisRunningById.delete(apiRunInstance.id)\n      const currentCount = apisRunningByTraceId.get(apiRunInstance.traceId)\n      apisRunningByTraceId.set(apiRunInstance.traceId, currentCount - 1)\n\n      if (apisRunningById.size === 0) {\n        const { emitter } = require(`../redux`)\n        emitter.emit(`API_RUNNING_QUEUE_EMPTY`)\n      }\n\n      // Filter empty results\n      apiRunInstance.results = results.filter(result => !_.isEmpty(result))\n\n      // Filter out empty responses and return if the\n      // api caller isn't waiting for cascading actions to finish.\n      if (!args.waitForCascadingActions) {\n        apiSpan.finish()\n        resolve(apiRunInstance.results)\n      }\n\n      // Check if any of our waiters are done.\n      waitingForCasacadeToFinish = waitingForCasacadeToFinish.filter(\n        instance => {\n          // If none of its trace IDs are running, it's done.\n          const apisByTraceIdCount = apisRunningByTraceId.get(instance.traceId)\n          if (apisByTraceIdCount === 0) {\n            instance.span.finish()\n            instance.resolve(instance.results)\n            return false\n          } else {\n            return true\n          }\n        }\n      )\n      return\n    })\n  })\n"],"file":"api-runner-node.js"}
\ No newline at end of file
+{"version":3,"sources":["../../src/utils/api-runner-node.js"],"names":["Promise","require","_","chalk","tracer","globalTracer","reporter","getCache","apiList","createNodeId","createContentDigest","buildObjectType","buildUnionType","buildInterfaceType","buildInputObjectType","emitter","getNonGatsbyCodeFrame","trackBuildError","decorateEvent","boundPluginActionCreators","doubleBind","boundActionCreators","api","plugin","actionOptions","traceId","name","keys","Object","doubleBoundActionCreators","i","length","key","boundActionCreator","args","initAPICallTracing","parentSpan","startSpan","spanName","spanArgs","defaultSpanArgs","childOf","merge","runAPI","gatsbyNode","resolve","spanOptions","pluginSpan","setTag","pathPrefix","store","loadNodeContent","getNodes","getNode","getNodesByType","hasNodeChanged","getNodeAndSavePathDependency","getState","program","prefixPaths","config","namespacedCreateNodeId","id","tracing","cache","actions","apiFinished","alreadyDisplayed","createPageAction","createPage","warning","stripIndent","bold","possiblyCodeFrame","push","warn","join","apiCallArgs","schema","pluginOptions","fromCallback","callback","cb","err","val","finish","e","error","pluginName","version","result","then","res","apisRunningById","Map","apisRunningByTraceId","waitingForCasacadeToFinish","module","exports","pluginSource","apiSpanArgs","apiSpan","forEach","traceTags","value","panic","plugins","flattenedPlugins","implementingPlugins","filter","nodeAPIs","includes","apiRunInstance","span","startTime","Date","toJSON","type","node","internal","contentDigest","filename","page","path","argsJson","JSON","stringify","omit","waitForCascadingActions","set","has","currentCount","get","stopQueuedApiRuns","onAPIRunComplete","actionHandler","action","payload","on","off","mapSeries","catch","panicOnBuild","results","delete","size","emit","isEmpty","instance","apisByTraceIdCount"],"mappings":"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","sourcesContent":["const Promise = require(`bluebird`)\nconst _ = require(`lodash`)\nconst chalk = require(`chalk`)\n\nconst tracer = require(`opentracing`).globalTracer()\nconst reporter = require(`gatsby-cli/lib/reporter`)\nconst getCache = require(`./get-cache`)\nconst apiList = require(`./api-node-docs`)\nconst createNodeId = require(`./create-node-id`)\nconst createContentDigest = require(`./create-content-digest`)\nconst {\n  buildObjectType,\n  buildUnionType,\n  buildInterfaceType,\n  buildInputObjectType,\n} = require(`../schema/types/type-builders`)\nconst { emitter } = require(`../redux`)\nconst { getNonGatsbyCodeFrame } = require(`./stack-trace-utils`)\nconst { trackBuildError, decorateEvent } = require(`gatsby-telemetry`)\n\n// Bind action creators per plugin so we can auto-add\n// metadata to actions they create.\nconst boundPluginActionCreators = {}\nconst doubleBind = (boundActionCreators, api, plugin, actionOptions) => {\n  const { traceId } = actionOptions\n  if (boundPluginActionCreators[plugin.name + api + traceId]) {\n    return boundPluginActionCreators[plugin.name + api + traceId]\n  } else {\n    const keys = Object.keys(boundActionCreators)\n    const doubleBoundActionCreators = {}\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i]\n      const boundActionCreator = boundActionCreators[key]\n      if (typeof boundActionCreator === `function`) {\n        doubleBoundActionCreators[key] = (...args) => {\n          // Let action callers override who the plugin is. Shouldn't be\n          // used that often.\n          if (args.length === 1) {\n            boundActionCreator(args[0], plugin, actionOptions)\n          } else if (args.length === 2) {\n            boundActionCreator(args[0], args[1], actionOptions)\n          }\n        }\n      }\n    }\n    boundPluginActionCreators[\n      plugin.name + api + traceId\n    ] = doubleBoundActionCreators\n    return doubleBoundActionCreators\n  }\n}\n\nconst initAPICallTracing = parentSpan => {\n  const startSpan = (spanName, spanArgs = {}) => {\n    const defaultSpanArgs = { childOf: parentSpan }\n\n    return tracer.startSpan(spanName, _.merge(defaultSpanArgs, spanArgs))\n  }\n\n  return {\n    tracer,\n    parentSpan,\n    startSpan,\n  }\n}\n\nconst runAPI = (plugin, api, args) => {\n  const gatsbyNode = require(`${plugin.resolve}/gatsby-node`)\n  if (gatsbyNode[api]) {\n    const parentSpan = args && args.parentSpan\n    const spanOptions = parentSpan ? { childOf: parentSpan } : {}\n    const pluginSpan = tracer.startSpan(`run-plugin`, spanOptions)\n\n    pluginSpan.setTag(`api`, api)\n    pluginSpan.setTag(`plugin`, plugin.name)\n\n    let pathPrefix = ``\n    const { store, emitter } = require(`../redux`)\n    const {\n      loadNodeContent,\n      getNodes,\n      getNode,\n      getNodesByType,\n      hasNodeChanged,\n      getNodeAndSavePathDependency,\n    } = require(`../db/nodes`)\n    const { boundActionCreators } = require(`../redux/actions`)\n\n    const doubleBoundActionCreators = doubleBind(\n      boundActionCreators,\n      api,\n      plugin,\n      { ...args, parentSpan: pluginSpan }\n    )\n\n    if (store.getState().program.prefixPaths) {\n      pathPrefix = store.getState().config.pathPrefix\n    }\n\n    const namespacedCreateNodeId = id => createNodeId(id, plugin.name)\n\n    const tracing = initAPICallTracing(pluginSpan)\n\n    const cache = getCache(plugin.name)\n\n    // Ideally this would be more abstracted and applied to more situations, but right now\n    // this can be potentially breaking so targeting `createPages` API and `createPage` action\n    let actions = doubleBoundActionCreators\n    let apiFinished = false\n    if (api === `createPages`) {\n      let alreadyDisplayed = false\n      const createPageAction = actions.createPage\n      // create new actions object with wrapped createPage action\n      // doubleBoundActionCreators is memoized, so we can't just\n      // reassign createPage field as this would cause this extra logic\n      // to be used in subsequent APIs and we only want to target this `createPages` call.\n      actions = {\n        ...actions,\n        createPage: (...args) => {\n          createPageAction(...args)\n          if (apiFinished && !alreadyDisplayed) {\n            const warning = [\n              reporter.stripIndent(`\n              Action ${chalk.bold(\n                `createPage`\n              )} was called outside of its expected asynchronous lifecycle ${chalk.bold(\n                `createPages`\n              )} in ${chalk.bold(plugin.name)}.\n              Ensure that you return a Promise from ${chalk.bold(\n                `createPages`\n              )} and are awaiting any asynchronous method invocations (like ${chalk.bold(\n                `graphql`\n              )} or http requests).\n              For more info and debugging tips: see ${chalk.bold(\n                `https://gatsby.dev/sync-actions`\n              )}\n            `),\n            ]\n\n            const possiblyCodeFrame = getNonGatsbyCodeFrame()\n            if (possiblyCodeFrame) {\n              warning.push(possiblyCodeFrame)\n            }\n\n            reporter.warn(warning.join(`\\n\\n`))\n            alreadyDisplayed = true\n          }\n        },\n      }\n    }\n\n    const apiCallArgs = [\n      {\n        ...args,\n        pathPrefix,\n        boundActionCreators: actions,\n        actions,\n        loadNodeContent,\n        store,\n        emitter,\n        getCache,\n        getNodes,\n        getNode,\n        getNodesByType,\n        hasNodeChanged,\n        reporter,\n        getNodeAndSavePathDependency,\n        cache,\n        createNodeId: namespacedCreateNodeId,\n        createContentDigest,\n        tracing,\n        schema: {\n          buildObjectType,\n          buildUnionType,\n          buildInterfaceType,\n          buildInputObjectType,\n        },\n      },\n      plugin.pluginOptions,\n    ]\n\n    // If the plugin is using a callback use that otherwise\n    // expect a Promise to be returned.\n    if (gatsbyNode[api].length === 3) {\n      return Promise.fromCallback(callback => {\n        const cb = (err, val) => {\n          pluginSpan.finish()\n          callback(err, val)\n          apiFinished = true\n        }\n\n        try {\n          gatsbyNode[api](...apiCallArgs, cb)\n        } catch (e) {\n          trackBuildError(api, {\n            error: e,\n            pluginName: `${plugin.name}@${plugin.version}`,\n          })\n          throw e\n        }\n      })\n    } else {\n      const result = gatsbyNode[api](...apiCallArgs)\n      pluginSpan.finish()\n      return Promise.resolve(result).then(res => {\n        apiFinished = true\n        return res\n      })\n    }\n  }\n\n  return null\n}\n\nlet apisRunningById = new Map()\nlet apisRunningByTraceId = new Map()\nlet waitingForCasacadeToFinish = []\n\nmodule.exports = async (api, args = {}, pluginSource) =>\n  new Promise(resolve => {\n    const { parentSpan } = args\n    const apiSpanArgs = parentSpan ? { childOf: parentSpan } : {}\n    const apiSpan = tracer.startSpan(`run-api`, apiSpanArgs)\n\n    apiSpan.setTag(`api`, api)\n    _.forEach(args.traceTags, (value, key) => {\n      apiSpan.setTag(key, value)\n    })\n\n    // Check that the API is documented.\n    // \"FAKE_API_CALL\" is used when code needs to trigger something\n    // to happen once the the API queue is empty. Ideally of course\n    // we'd have an API (returning a promise) for that. But this\n    // works nicely in the meantime.\n    if (!apiList[api] && api !== `FAKE_API_CALL`) {\n      reporter.panic(`api: \"${api}\" is not a valid Gatsby api`)\n    }\n\n    const { store } = require(`../redux`)\n    const plugins = store.getState().flattenedPlugins\n\n    // Get the list of plugins that implement this API.\n    // Also: Break infinite loops. Sometimes a plugin will implement an API and\n    // call an action which will trigger the same API being called.\n    // `onCreatePage` is the only example right now. In these cases, we should\n    // avoid calling the originating plugin again.\n    const implementingPlugins = plugins.filter(\n      plugin => plugin.nodeAPIs.includes(api) && plugin.name !== pluginSource\n    )\n\n    const apiRunInstance = {\n      api,\n      args,\n      pluginSource,\n      resolve,\n      span: apiSpan,\n      startTime: new Date().toJSON(),\n      traceId: args.traceId,\n    }\n\n    // Generate IDs for api runs. Most IDs we generate from the args\n    // but some API calls can have very large argument objects so we\n    // have special ways of generating IDs for those to avoid stringifying\n    // large objects.\n    let id\n    if (api === `setFieldsOnGraphQLNodeType`) {\n      id = `${api}${apiRunInstance.startTime}${args.type.name}${args.traceId}`\n    } else if (api === `onCreateNode`) {\n      id = `${api}${apiRunInstance.startTime}${\n        args.node.internal.contentDigest\n      }${args.traceId}`\n    } else if (api === `preprocessSource`) {\n      id = `${api}${apiRunInstance.startTime}${args.filename}${args.traceId}`\n    } else if (api === `onCreatePage`) {\n      id = `${api}${apiRunInstance.startTime}${args.page.path}${args.traceId}`\n    } else {\n      // When tracing is turned on, the `args` object will have a\n      // `parentSpan` field that can be quite large. So we omit it\n      // before calling stringify\n      const argsJson = JSON.stringify(_.omit(args, `parentSpan`))\n      id = `${api}|${apiRunInstance.startTime}|${\n        apiRunInstance.traceId\n      }|${argsJson}`\n    }\n    apiRunInstance.id = id\n\n    if (args.waitForCascadingActions) {\n      waitingForCasacadeToFinish.push(apiRunInstance)\n    }\n\n    apisRunningById.set(apiRunInstance.id, apiRunInstance)\n    if (apisRunningByTraceId.has(apiRunInstance.traceId)) {\n      const currentCount = apisRunningByTraceId.get(apiRunInstance.traceId)\n      apisRunningByTraceId.set(apiRunInstance.traceId, currentCount + 1)\n    } else {\n      apisRunningByTraceId.set(apiRunInstance.traceId, 1)\n    }\n\n    let stopQueuedApiRuns = false\n    let onAPIRunComplete = null\n    if (api === `onCreatePage`) {\n      const path = args.page.path\n      const actionHandler = action => {\n        if (action.payload.path === path) {\n          stopQueuedApiRuns = true\n        }\n      }\n      emitter.on(`DELETE_PAGE`, actionHandler)\n      onAPIRunComplete = () => {\n        emitter.off(`DELETE_PAGE`, actionHandler)\n      }\n    }\n\n    Promise.mapSeries(implementingPlugins, plugin => {\n      if (stopQueuedApiRuns) {\n        return null\n      }\n\n      let pluginName =\n        plugin.name === `default-site-plugin`\n          ? `gatsby-node.js`\n          : `Plugin ${plugin.name}`\n\n      return new Promise(resolve => {\n        resolve(runAPI(plugin, api, { ...args, parentSpan: apiSpan }))\n      }).catch(err => {\n        decorateEvent(`BUILD_PANIC`, {\n          pluginName: `${plugin.name}@${plugin.version}`,\n        })\n        reporter.panicOnBuild(`${pluginName} returned an error`, err)\n        return null\n      })\n    }).then(results => {\n      if (onAPIRunComplete) {\n        onAPIRunComplete()\n      }\n      // Remove runner instance\n      apisRunningById.delete(apiRunInstance.id)\n      const currentCount = apisRunningByTraceId.get(apiRunInstance.traceId)\n      apisRunningByTraceId.set(apiRunInstance.traceId, currentCount - 1)\n\n      if (apisRunningById.size === 0) {\n        const { emitter } = require(`../redux`)\n        emitter.emit(`API_RUNNING_QUEUE_EMPTY`)\n      }\n\n      // Filter empty results\n      apiRunInstance.results = results.filter(result => !_.isEmpty(result))\n\n      // Filter out empty responses and return if the\n      // api caller isn't waiting for cascading actions to finish.\n      if (!args.waitForCascadingActions) {\n        apiSpan.finish()\n        resolve(apiRunInstance.results)\n      }\n\n      // Check if any of our waiters are done.\n      waitingForCasacadeToFinish = waitingForCasacadeToFinish.filter(\n        instance => {\n          // If none of its trace IDs are running, it's done.\n          const apisByTraceIdCount = apisRunningByTraceId.get(instance.traceId)\n          if (apisByTraceIdCount === 0) {\n            instance.span.finish()\n            instance.resolve(instance.results)\n            return false\n          } else {\n            return true\n          }\n        }\n      )\n      return\n    })\n  })\n"],"file":"api-runner-node.js"}
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/utils/babel-parse-to-ast.js b/node_modules/gatsby/dist/utils/babel-parse-to-ast.js
index 41093c9..f4c4101 100644
--- a/node_modules/gatsby/dist/utils/babel-parse-to-ast.js
+++ b/node_modules/gatsby/dist/utils/babel-parse-to-ast.js
@@ -20,7 +20,7 @@ const PARSER_OPTIONS = {
 };
 
 function getBabelParserOptions(filePath) {
-  // Flow and TypeScript plugins can't be enabled simultaneously
+  // Flow and typescript plugins can't be enabled simultaneously
   if (/\.tsx?/.test(filePath)) {
     const plugins = PARSER_OPTIONS.plugins;
     return Object.assign({}, PARSER_OPTIONS, {
diff --git a/node_modules/gatsby/dist/utils/babel-parse-to-ast.js.map b/node_modules/gatsby/dist/utils/babel-parse-to-ast.js.map
index a0bb6b7..2dc8e3d 100644
--- a/node_modules/gatsby/dist/utils/babel-parse-to-ast.js.map
+++ b/node_modules/gatsby/dist/utils/babel-parse-to-ast.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/utils/babel-parse-to-ast.js"],"names":["parser","require","PARSER_OPTIONS","allowImportExportEverywhere","allowReturnOutsideFunction","allowSuperOutsideMethod","sourceType","sourceFilename","plugins","decoratorsBeforeExport","proposal","getBabelParserOptions","filePath","test","map","plugin","babelParseToAst","contents","parse"],"mappings":";;;;;;AACA,MAAMA,MAAM,GAAGC,OAAO,CAAE,eAAF,CAAtB;;AAEA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,2BAA2B,EAAE,IADR;AAErBC,EAAAA,0BAA0B,EAAE,IAFP;AAGrBC,EAAAA,uBAAuB,EAAE,IAHJ;AAIrBC,EAAAA,UAAU,EAAG,aAJQ;AAKrBC,EAAAA,cAAc,EAAE,IALK;AAMrBC,EAAAA,OAAO,EAAE,CACN,KADM,EAEN,MAFM,EAGN,eAHM,EAIN,kBAJM,EAKP,CACG,YADH,EAEE;AACEC,IAAAA,sBAAsB,EAAE;AAD1B,GAFF,CALO,EAWN,iBAXM,EAYN,wBAZM,EAaN,qBAbM,EAcN,mBAdM,EAeN,qBAfM,EAgBN,iBAhBM,EAiBN,cAjBM,EAkBN,cAlBM,EAmBN,eAnBM,EAoBN,kBApBM,EAqBN,kBArBM,EAsBN,YAtBM,EAuBN,QAvBM,EAwBN,sBAxBM,EAyBN,kBAzBM,EA0BP,CACG,kBADH,EAEE;AACEC,IAAAA,QAAQ,EAAG;AADb,GAFF,CA1BO,EAgCN,2BAhCM;AANY,CAAvB;;AA0CO,SAASC,qBAAT,CAA+BC,QAA/B,EAAiD;AACtD;AACA,MAAI,SAASC,IAAT,CAAcD,QAAd,CAAJ,EAA6B;AAAA,UACnBJ,OADmB,GACPN,cADO,CACnBM,OADmB;AAE3B,6BACKN,cADL;AAEEM,MAAAA,OAAO,EAAEA,OAAO,CAACM,GAAR,CAAYC,MAAM,IACzBA,MAAM,KAAM,MAAZ,GAAqB,YAArB,GAAmCA,MAD5B;AAFX;AAMD;;AACD,SAAOb,cAAP;AACD;;AAEM,SAASc,eAAT,CAAyBC,QAAzB,EAA2CL,QAA3C,EAA6D;AAClE,SAAOZ,MAAM,CAACkB,KAAP,CAAaD,QAAb,EAAuBN,qBAAqB,CAACC,QAAD,CAA5C,CAAP;AACD","sourcesContent":["/* @flow */\nconst parser = require(`@babel/parser`)\n\nconst PARSER_OPTIONS = {\n  allowImportExportEverywhere: true,\n  allowReturnOutsideFunction: true,\n  allowSuperOutsideMethod: true,\n  sourceType: `unambigious`,\n  sourceFilename: true,\n  plugins: [\n    `jsx`,\n    `flow`,\n    `doExpressions`,\n    `objectRestSpread`,\n    [\n      `decorators`,\n      {\n        decoratorsBeforeExport: true,\n      },\n    ],\n    `classProperties`,\n    `classPrivateProperties`,\n    `classPrivateMethods`,\n    `exportDefaultFrom`,\n    `exportNamespaceFrom`,\n    `asyncGenerators`,\n    `functionBind`,\n    `functionSent`,\n    `dynamicImport`,\n    `numericSeparator`,\n    `optionalChaining`,\n    `importMeta`,\n    `bigInt`,\n    `optionalCatchBinding`,\n    `throwExpressions`,\n    [\n      `pipelineOperator`,\n      {\n        proposal: `minimal`,\n      },\n    ],\n    `nullishCoalescingOperator`,\n  ],\n}\n\nexport function getBabelParserOptions(filePath: string) {\n  // Flow and TypeScript plugins can't be enabled simultaneously\n  if (/\\.tsx?/.test(filePath)) {\n    const { plugins } = PARSER_OPTIONS\n    return {\n      ...PARSER_OPTIONS,\n      plugins: plugins.map(plugin =>\n        plugin === `flow` ? `typescript` : plugin\n      ),\n    }\n  }\n  return PARSER_OPTIONS\n}\n\nexport function babelParseToAst(contents: string, filePath: string) {\n  return parser.parse(contents, getBabelParserOptions(filePath))\n}\n"],"file":"babel-parse-to-ast.js"}
\ No newline at end of file
+{"version":3,"sources":["../../src/utils/babel-parse-to-ast.js"],"names":["parser","require","PARSER_OPTIONS","allowImportExportEverywhere","allowReturnOutsideFunction","allowSuperOutsideMethod","sourceType","sourceFilename","plugins","decoratorsBeforeExport","proposal","getBabelParserOptions","filePath","test","map","plugin","babelParseToAst","contents","parse"],"mappings":";;;;;;AACA,MAAMA,MAAM,GAAGC,OAAO,CAAE,eAAF,CAAtB;;AAEA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,2BAA2B,EAAE,IADR;AAErBC,EAAAA,0BAA0B,EAAE,IAFP;AAGrBC,EAAAA,uBAAuB,EAAE,IAHJ;AAIrBC,EAAAA,UAAU,EAAG,aAJQ;AAKrBC,EAAAA,cAAc,EAAE,IALK;AAMrBC,EAAAA,OAAO,EAAE,CACN,KADM,EAEN,MAFM,EAGN,eAHM,EAIN,kBAJM,EAKP,CACG,YADH,EAEE;AACEC,IAAAA,sBAAsB,EAAE;AAD1B,GAFF,CALO,EAWN,iBAXM,EAYN,wBAZM,EAaN,qBAbM,EAcN,mBAdM,EAeN,qBAfM,EAgBN,iBAhBM,EAiBN,cAjBM,EAkBN,cAlBM,EAmBN,eAnBM,EAoBN,kBApBM,EAqBN,kBArBM,EAsBN,YAtBM,EAuBN,QAvBM,EAwBN,sBAxBM,EAyBN,kBAzBM,EA0BP,CACG,kBADH,EAEE;AACEC,IAAAA,QAAQ,EAAG;AADb,GAFF,CA1BO,EAgCN,2BAhCM;AANY,CAAvB;;AA0CO,SAASC,qBAAT,CAA+BC,QAA/B,EAAiD;AACtD;AACA,MAAI,SAASC,IAAT,CAAcD,QAAd,CAAJ,EAA6B;AAAA,UACnBJ,OADmB,GACPN,cADO,CACnBM,OADmB;AAE3B,6BACKN,cADL;AAEEM,MAAAA,OAAO,EAAEA,OAAO,CAACM,GAAR,CAAYC,MAAM,IACzBA,MAAM,KAAM,MAAZ,GAAqB,YAArB,GAAmCA,MAD5B;AAFX;AAMD;;AACD,SAAOb,cAAP;AACD;;AAEM,SAASc,eAAT,CAAyBC,QAAzB,EAA2CL,QAA3C,EAA6D;AAClE,SAAOZ,MAAM,CAACkB,KAAP,CAAaD,QAAb,EAAuBN,qBAAqB,CAACC,QAAD,CAA5C,CAAP;AACD","sourcesContent":["/* @flow */\nconst parser = require(`@babel/parser`)\n\nconst PARSER_OPTIONS = {\n  allowImportExportEverywhere: true,\n  allowReturnOutsideFunction: true,\n  allowSuperOutsideMethod: true,\n  sourceType: `unambigious`,\n  sourceFilename: true,\n  plugins: [\n    `jsx`,\n    `flow`,\n    `doExpressions`,\n    `objectRestSpread`,\n    [\n      `decorators`,\n      {\n        decoratorsBeforeExport: true,\n      },\n    ],\n    `classProperties`,\n    `classPrivateProperties`,\n    `classPrivateMethods`,\n    `exportDefaultFrom`,\n    `exportNamespaceFrom`,\n    `asyncGenerators`,\n    `functionBind`,\n    `functionSent`,\n    `dynamicImport`,\n    `numericSeparator`,\n    `optionalChaining`,\n    `importMeta`,\n    `bigInt`,\n    `optionalCatchBinding`,\n    `throwExpressions`,\n    [\n      `pipelineOperator`,\n      {\n        proposal: `minimal`,\n      },\n    ],\n    `nullishCoalescingOperator`,\n  ],\n}\n\nexport function getBabelParserOptions(filePath: string) {\n  // Flow and typescript plugins can't be enabled simultaneously\n  if (/\\.tsx?/.test(filePath)) {\n    const { plugins } = PARSER_OPTIONS\n    return {\n      ...PARSER_OPTIONS,\n      plugins: plugins.map(plugin =>\n        plugin === `flow` ? `typescript` : plugin\n      ),\n    }\n  }\n  return PARSER_OPTIONS\n}\n\nexport function babelParseToAst(contents: string, filePath: string) {\n  return parser.parse(contents, getBabelParserOptions(filePath))\n}\n"],"file":"babel-parse-to-ast.js"}
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/utils/cpu-core-count.js b/node_modules/gatsby/dist/utils/cpu-core-count.js
index 2539b98..b7ec225 100644
--- a/node_modules/gatsby/dist/utils/cpu-core-count.js
+++ b/node_modules/gatsby/dist/utils/cpu-core-count.js
@@ -7,7 +7,7 @@
  */
 const cpuCoreCount = (useEnvVar = false) => {
   try {
-    let coreCount = require(`./physical-cpu-count`) || 1;
+    let coreCount = require(`physical-cpu-count`) || 1;
 
     if (!useEnvVar) {
       // Return the physical CPU count,
diff --git a/node_modules/gatsby/dist/utils/cpu-core-count.js.map b/node_modules/gatsby/dist/utils/cpu-core-count.js.map
index 34de10a..bf162d8 100644
--- a/node_modules/gatsby/dist/utils/cpu-core-count.js.map
+++ b/node_modules/gatsby/dist/utils/cpu-core-count.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/utils/cpu-core-count.js"],"names":["cpuCoreCount","useEnvVar","coreCount","require","process","env","GATSBY_CPU_COUNT","coreCountArg","Number","cpus","length","Error","err","console","error","module","exports"],"mappings":";;AAAA;;;;;AAMA,MAAMA,YAAY,GAAG,CAACC,SAAS,GAAG,KAAb,KAAuB;AAC1C,MAAI;AACF,QAAIC,SAAS,GAAGC,OAAO,CAAE,sBAAF,CAAP,IAAmC,CAAnD;;AAEA,QAAI,CAACF,SAAL,EAAgB;AACd;AACA;AACA,aAAOC,SAAP;AACD;;AAED,QAAI,OAAOE,OAAO,CAACC,GAAR,CAAYC,gBAAnB,KAAyC,WAA7C,EAAyD;AACvD,YAAMC,YAAY,GAChBC,MAAM,CAACJ,OAAO,CAACC,GAAR,CAAYC,gBAAb,CAAN,IAAwCF,OAAO,CAACC,GAAR,CAAYC,gBADtD;;AAGA,cAAQ,OAAOC,YAAf;AACE,aAAM,QAAN;AACE;AAEA;AACA;AACA,cAAIA,YAAY,KAAM,eAAtB,EAAsC;AACpCL,YAAAA,SAAS,GAAGC,OAAO,CAAE,IAAF,CAAP,CAAcM,IAAd,GAAqBC,MAAjC;;AAEA,gBAAI,OAAOR,SAAP,KAAsB,QAA1B,EAAmC;AACjC,oBAAM,IAAIS,KAAJ,CACH,oHADG,CAAN;AAGD;AACF;;AACD;;AAEF,aAAM,QAAN;AACE;AACAT,UAAAA,SAAS,GAAGK,YAAZ;AACA;;AAEF;AACE;AAvBJ;AAyBD;;AAED,WAAOL,SAAP;AACD,GAzCD,CAyCE,OAAOU,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACA,UAAM,IAAID,KAAJ,CAAW,2DAAX,CAAN;AACD;AACF,CA9CD;;AAgDAI,MAAM,CAACC,OAAP,GAAiBhB,YAAjB","sourcesContent":["/**\n * Calculate CPU core count\n * @param {boolean} [useEnvVar=false] Use the 'GATSBY_CPU_COUNT' env var to calculate the requested type of CPU cores\n * @returns {number} Count of the requested type of CPU cores. Defaults to number of physical cores or 1\n */\n\nconst cpuCoreCount = (useEnvVar = false) => {\n  try {\n    let coreCount = require(`./physical-cpu-count`) || 1\n\n    if (!useEnvVar) {\n      // Return the physical CPU count,\n      // or default to 1 if we can't detect\n      return coreCount\n    }\n\n    if (typeof process.env.GATSBY_CPU_COUNT !== `undefined`) {\n      const coreCountArg =\n        Number(process.env.GATSBY_CPU_COUNT) || process.env.GATSBY_CPU_COUNT\n\n      switch (typeof coreCountArg) {\n        case `string`:\n          // Leave at Default CPU count if coreCountArg === `physical_cores`\n\n          // CPU count === logical CPU count\n          // throw error if we have a problem counting logical cores\n          if (coreCountArg === `logical_cores`) {\n            coreCount = require(`os`).cpus().length\n\n            if (typeof coreCount !== `number`) {\n              throw new Error(\n                `process.env.GATSBY_CPU_COUNT is set to 'logical_cores' but there was a problem finding the number of logical cores`\n              )\n            }\n          }\n          break\n\n        case `number`:\n          // CPU count === passed in count\n          coreCount = coreCountArg\n          break\n\n        default:\n          break\n      }\n    }\n\n    return coreCount\n  } catch (err) {\n    console.error(err)\n    throw new Error(`There has been a problem counting the number of CPU cores`)\n  }\n}\n\nmodule.exports = cpuCoreCount\n"],"file":"cpu-core-count.js"}
\ No newline at end of file
+{"version":3,"sources":["../../src/utils/cpu-core-count.js"],"names":["cpuCoreCount","useEnvVar","coreCount","require","process","env","GATSBY_CPU_COUNT","coreCountArg","Number","cpus","length","Error","err","console","error","module","exports"],"mappings":";;AAAA;;;;;AAMA,MAAMA,YAAY,GAAG,CAACC,SAAS,GAAG,KAAb,KAAuB;AAC1C,MAAI;AACF,QAAIC,SAAS,GAAGC,OAAO,CAAE,oBAAF,CAAP,IAAiC,CAAjD;;AAEA,QAAI,CAACF,SAAL,EAAgB;AACd;AACA;AACA,aAAOC,SAAP;AACD;;AAED,QAAI,OAAOE,OAAO,CAACC,GAAR,CAAYC,gBAAnB,KAAyC,WAA7C,EAAyD;AACvD,YAAMC,YAAY,GAChBC,MAAM,CAACJ,OAAO,CAACC,GAAR,CAAYC,gBAAb,CAAN,IAAwCF,OAAO,CAACC,GAAR,CAAYC,gBADtD;;AAGA,cAAQ,OAAOC,YAAf;AACE,aAAM,QAAN;AACE;AAEA;AACA;AACA,cAAIA,YAAY,KAAM,eAAtB,EAAsC;AACpCL,YAAAA,SAAS,GAAGC,OAAO,CAAE,IAAF,CAAP,CAAcM,IAAd,GAAqBC,MAAjC;;AAEA,gBAAI,OAAOR,SAAP,KAAsB,QAA1B,EAAmC;AACjC,oBAAM,IAAIS,KAAJ,CACH,oHADG,CAAN;AAGD;AACF;;AACD;;AAEF,aAAM,QAAN;AACE;AACAT,UAAAA,SAAS,GAAGK,YAAZ;AACA;;AAEF;AACE;AAvBJ;AAyBD;;AAED,WAAOL,SAAP;AACD,GAzCD,CAyCE,OAAOU,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACA,UAAM,IAAID,KAAJ,CAAW,2DAAX,CAAN;AACD;AACF,CA9CD;;AAgDAI,MAAM,CAACC,OAAP,GAAiBhB,YAAjB","sourcesContent":["/**\n * Calculate CPU core count\n * @param {boolean} [useEnvVar=false] Use the 'GATSBY_CPU_COUNT' env var to calculate the requested type of CPU cores\n * @returns {number} Count of the requested type of CPU cores. Defaults to number of physical cores or 1\n */\n\nconst cpuCoreCount = (useEnvVar = false) => {\n  try {\n    let coreCount = require(`physical-cpu-count`) || 1\n\n    if (!useEnvVar) {\n      // Return the physical CPU count,\n      // or default to 1 if we can't detect\n      return coreCount\n    }\n\n    if (typeof process.env.GATSBY_CPU_COUNT !== `undefined`) {\n      const coreCountArg =\n        Number(process.env.GATSBY_CPU_COUNT) || process.env.GATSBY_CPU_COUNT\n\n      switch (typeof coreCountArg) {\n        case `string`:\n          // Leave at Default CPU count if coreCountArg === `physical_cores`\n\n          // CPU count === logical CPU count\n          // throw error if we have a problem counting logical cores\n          if (coreCountArg === `logical_cores`) {\n            coreCount = require(`os`).cpus().length\n\n            if (typeof coreCount !== `number`) {\n              throw new Error(\n                `process.env.GATSBY_CPU_COUNT is set to 'logical_cores' but there was a problem finding the number of logical cores`\n              )\n            }\n          }\n          break\n\n        case `number`:\n          // CPU count === passed in count\n          coreCount = coreCountArg\n          break\n\n        default:\n          break\n      }\n    }\n\n    return coreCount\n  } catch (err) {\n    console.error(err)\n    throw new Error(`There has been a problem counting the number of CPU cores`)\n  }\n}\n\nmodule.exports = cpuCoreCount\n"],"file":"cpu-core-count.js"}
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/utils/detect-port-in-use-and-prompt.js b/node_modules/gatsby/dist/utils/detect-port-in-use-and-prompt.js
index 114c328..0ac1747 100644
--- a/node_modules/gatsby/dist/utils/detect-port-in-use-and-prompt.js
+++ b/node_modules/gatsby/dist/utils/detect-port-in-use-and-prompt.js
@@ -1,45 +1,33 @@
 "use strict";
 
-var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
+const detect = require(`detect-port`);
 
-var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
+const report = require(`gatsby-cli/lib/reporter`); // Checks if a port is in use and prompts the user to enter another one
+// Then calls callback with new port
 
-const _require = require(`util`),
-      promisify = _require.promisify;
 
-const detectPort = promisify(require(`detect-port`));
-
-const report = require(`gatsby-cli/lib/reporter`);
-
-const readlinePort = (port, rlInterface) => {
-  const question = `Something is already running at port ${port} \nWould you like to run the app at another port instead? [Y/n] `;
-  return new Promise(resolve => {
-    rlInterface.question(question, answer => {
-      resolve(answer.length === 0 || answer.match(/^yes|y$/i));
-    });
-  });
-};
-
-const detectPortInUseAndPrompt =
-/*#__PURE__*/
-function () {
-  var _ref = (0, _asyncToGenerator2.default)(function* (port, rlInterface) {
-    let foundPort = port;
-    const detectedPort = yield detectPort(port).catch(err => report.panic(err));
-
-    if (port !== detectedPort) {
-      if (yield readlinePort(port, rlInterface)) {
-        foundPort = detectedPort;
-      }
+const detectPortInUseAndPrompt = (port, rlInterface, callback) => {
+  let newPort = port;
+  detect(port, (err, _port) => {
+    if (err) {
+      report.panic(err);
     }
 
-    return foundPort;
+    if (port !== _port) {
+      // eslint-disable-next-line max-len
+      const question = `Something is already running at port ${port} \nWould you like to run the app at another port instead? [Y/n] `;
+      rlInterface.question(question, answer => {
+        if (answer.length === 0 || answer.match(/^yes|y$/i)) {
+          newPort = _port;
+        }
+
+        callback(newPort);
+      });
+    } else {
+      callback(newPort);
+    }
   });
-
-  return function detectPortInUseAndPrompt(_x, _x2) {
-    return _ref.apply(this, arguments);
-  };
-}();
+};
 
 module.exports = detectPortInUseAndPrompt;
 //# sourceMappingURL=detect-port-in-use-and-prompt.js.map
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/utils/detect-port-in-use-and-prompt.js.map b/node_modules/gatsby/dist/utils/detect-port-in-use-and-prompt.js.map
index 1f5633c..fb138ed 100644
--- a/node_modules/gatsby/dist/utils/detect-port-in-use-and-prompt.js.map
+++ b/node_modules/gatsby/dist/utils/detect-port-in-use-and-prompt.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/utils/detect-port-in-use-and-prompt.js"],"names":["require","promisify","detectPort","report","readlinePort","port","rlInterface","question","Promise","resolve","answer","length","match","detectPortInUseAndPrompt","foundPort","detectedPort","catch","err","panic","module","exports"],"mappings":";;;;;;iBAAsBA,OAAO,CAAE,MAAF,C;MAArBC,S,YAAAA,S;;AACR,MAAMC,UAAU,GAAGD,SAAS,CAACD,OAAO,CAAE,aAAF,CAAR,CAA5B;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAE,yBAAF,CAAtB;;AAEA,MAAMI,YAAY,GAAG,CAACC,IAAD,EAAOC,WAAP,KAAuB;AAC1C,QAAMC,QAAQ,GAAI,wCAAuCF,IAAK,kEAA9D;AACA,SAAO,IAAIG,OAAJ,CAAYC,OAAO,IAAI;AAC5BH,IAAAA,WAAW,CAACC,QAAZ,CAAqBA,QAArB,EAA+BG,MAAM,IAAI;AACvCD,MAAAA,OAAO,CAACC,MAAM,CAACC,MAAP,KAAkB,CAAlB,IAAuBD,MAAM,CAACE,KAAP,CAAa,UAAb,CAAxB,CAAP;AACD,KAFD;AAGD,GAJM,CAAP;AAKD,CAPD;;AASA,MAAMC,wBAAwB;AAAA;AAAA;AAAA,6CAAG,WAAOR,IAAP,EAAaC,WAAb,EAA6B;AAC5D,QAAIQ,SAAS,GAAGT,IAAhB;AACA,UAAMU,YAAY,SAASb,UAAU,CAACG,IAAD,CAAV,CAAiBW,KAAjB,CAAuBC,GAAG,IAAId,MAAM,CAACe,KAAP,CAAaD,GAAb,CAA9B,CAA3B;;AACA,QAAIZ,IAAI,KAAKU,YAAb,EAA2B;AACzB,gBAAUX,YAAY,CAACC,IAAD,EAAOC,WAAP,CAAtB,EAA2C;AACzCQ,QAAAA,SAAS,GAAGC,YAAZ;AACD;AACF;;AACD,WAAOD,SAAP;AACD,GAT6B;;AAAA,kBAAxBD,wBAAwB;AAAA;AAAA;AAAA,GAA9B;;AAWAM,MAAM,CAACC,OAAP,GAAiBP,wBAAjB","sourcesContent":["const { promisify } = require(`util`)\nconst detectPort = promisify(require(`detect-port`))\nconst report = require(`gatsby-cli/lib/reporter`)\n\nconst readlinePort = (port, rlInterface) => {\n  const question = `Something is already running at port ${port} \\nWould you like to run the app at another port instead? [Y/n] `\n  return new Promise(resolve => {\n    rlInterface.question(question, answer => {\n      resolve(answer.length === 0 || answer.match(/^yes|y$/i))\n    })\n  })\n}\n\nconst detectPortInUseAndPrompt = async (port, rlInterface) => {\n  let foundPort = port\n  const detectedPort = await detectPort(port).catch(err => report.panic(err))\n  if (port !== detectedPort) {\n    if (await readlinePort(port, rlInterface)) {\n      foundPort = detectedPort\n    }\n  }\n  return foundPort\n}\n\nmodule.exports = detectPortInUseAndPrompt\n"],"file":"detect-port-in-use-and-prompt.js"}
\ No newline at end of file
+{"version":3,"sources":["../../src/utils/detect-port-in-use-and-prompt.js"],"names":["detect","require","report","detectPortInUseAndPrompt","port","rlInterface","callback","newPort","err","_port","panic","question","answer","length","match","module","exports"],"mappings":";;AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAE,aAAF,CAAtB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAE,yBAAF,CAAtB,C,CAEA;AACA;;;AACA,MAAME,wBAAwB,GAAG,CAACC,IAAD,EAAOC,WAAP,EAAoBC,QAApB,KAAiC;AAChE,MAAIC,OAAO,GAAGH,IAAd;AAEAJ,EAAAA,MAAM,CAACI,IAAD,EAAO,CAACI,GAAD,EAAMC,KAAN,KAAgB;AAC3B,QAAID,GAAJ,EAAS;AACPN,MAAAA,MAAM,CAACQ,KAAP,CAAaF,GAAb;AACD;;AAED,QAAIJ,IAAI,KAAKK,KAAb,EAAoB;AAClB;AACA,YAAME,QAAQ,GAAI,wCAAuCP,IAAK,kEAA9D;AAEAC,MAAAA,WAAW,CAACM,QAAZ,CAAqBA,QAArB,EAA+BC,MAAM,IAAI;AACvC,YAAIA,MAAM,CAACC,MAAP,KAAkB,CAAlB,IAAuBD,MAAM,CAACE,KAAP,CAAa,UAAb,CAA3B,EAAqD;AACnDP,UAAAA,OAAO,GAAGE,KAAV;AACD;;AACDH,QAAAA,QAAQ,CAACC,OAAD,CAAR;AACD,OALD;AAMD,KAVD,MAUO;AACLD,MAAAA,QAAQ,CAACC,OAAD,CAAR;AACD;AACF,GAlBK,CAAN;AAmBD,CAtBD;;AAwBAQ,MAAM,CAACC,OAAP,GAAiBb,wBAAjB","sourcesContent":["const detect = require(`detect-port`)\nconst report = require(`gatsby-cli/lib/reporter`)\n\n// Checks if a port is in use and prompts the user to enter another one\n// Then calls callback with new port\nconst detectPortInUseAndPrompt = (port, rlInterface, callback) => {\n  let newPort = port\n\n  detect(port, (err, _port) => {\n    if (err) {\n      report.panic(err)\n    }\n\n    if (port !== _port) {\n      // eslint-disable-next-line max-len\n      const question = `Something is already running at port ${port} \\nWould you like to run the app at another port instead? [Y/n] `\n\n      rlInterface.question(question, answer => {\n        if (answer.length === 0 || answer.match(/^yes|y$/i)) {\n          newPort = _port\n        }\n        callback(newPort)\n      })\n    } else {\n      callback(newPort)\n    }\n  })\n}\n\nmodule.exports = detectPortInUseAndPrompt\n"],"file":"detect-port-in-use-and-prompt.js"}
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/utils/eslint-config.js b/node_modules/gatsby/dist/utils/eslint-config.js
index cd5b044..4ab2efb 100644
--- a/node_modules/gatsby/dist/utils/eslint-config.js
+++ b/node_modules/gatsby/dist/utils/eslint-config.js
@@ -8,9 +8,7 @@ module.exports = schema => {
     baseConfig: {
       globals: {
         graphql: true,
-        __PATH_PREFIX__: true,
-        __BASE_PATH__: true // this will rarely, if ever, be used by consumers
-
+        __PATH_PREFIX__: true
       },
       extends: `react-app`,
       plugins: [`graphql`],
diff --git a/node_modules/gatsby/dist/utils/eslint-config.js.map b/node_modules/gatsby/dist/utils/eslint-config.js.map
index 98d32ad..89da10f 100644
--- a/node_modules/gatsby/dist/utils/eslint-config.js.map
+++ b/node_modules/gatsby/dist/utils/eslint-config.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/utils/eslint-config.js"],"names":["module","exports","schema","useEslintrc","baseConfig","globals","graphql","__PATH_PREFIX__","__BASE_PATH__","extends","plugins","rules","env","schemaString","commentDescriptions","tagName"],"mappings":";;AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,MAAM,IAAI;AACzB,SAAO;AACLC,IAAAA,WAAW,EAAE,KADR;AAELC,IAAAA,UAAU,EAAE;AACVC,MAAAA,OAAO,EAAE;AACPC,QAAAA,OAAO,EAAE,IADF;AAEPC,QAAAA,eAAe,EAAE,IAFV;AAGPC,QAAAA,aAAa,EAAE,IAHR,CAGc;;AAHd,OADC;AAMVC,MAAAA,OAAO,EAAG,WANA;AAOVC,MAAAA,OAAO,EAAE,CAAE,SAAF,CAPC;AAQVC,MAAAA,KAAK,EAAE;AACL,2CAAmC,CAAC,CAAD,CAD9B;AAEL,oCAA4B,CACzB,OADyB,EAE1B;AACEC,UAAAA,GAAG,EAAG,OADR;AAEEC,UAAAA,YAAY,EAAE,0BAAYX,MAAZ,EAAoB;AAAEY,YAAAA,mBAAmB,EAAE;AAAvB,WAApB,CAFhB;AAGEC,UAAAA,OAAO,EAAG;AAHZ,SAF0B;AAFvB;AARG;AAFP,GAAP;AAuBD,CAxBD","sourcesContent":["import { printSchema } from \"graphql\"\n\nmodule.exports = schema => {\n  return {\n    useEslintrc: false,\n    baseConfig: {\n      globals: {\n        graphql: true,\n        __PATH_PREFIX__: true,\n        __BASE_PATH__: true, // this will rarely, if ever, be used by consumers\n      },\n      extends: `react-app`,\n      plugins: [`graphql`],\n      rules: {\n        \"import/no-webpack-loader-syntax\": [0],\n        \"graphql/template-strings\": [\n          `error`,\n          {\n            env: `relay`,\n            schemaString: printSchema(schema, { commentDescriptions: true }),\n            tagName: `graphql`,\n          },\n        ],\n      },\n    },\n  }\n}\n"],"file":"eslint-config.js"}
\ No newline at end of file
+{"version":3,"sources":["../../src/utils/eslint-config.js"],"names":["module","exports","schema","useEslintrc","baseConfig","globals","graphql","__PATH_PREFIX__","extends","plugins","rules","env","schemaString","commentDescriptions","tagName"],"mappings":";;AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,MAAM,IAAI;AACzB,SAAO;AACLC,IAAAA,WAAW,EAAE,KADR;AAELC,IAAAA,UAAU,EAAE;AACVC,MAAAA,OAAO,EAAE;AACPC,QAAAA,OAAO,EAAE,IADF;AAEPC,QAAAA,eAAe,EAAE;AAFV,OADC;AAKVC,MAAAA,OAAO,EAAG,WALA;AAMVC,MAAAA,OAAO,EAAE,CAAE,SAAF,CANC;AAOVC,MAAAA,KAAK,EAAE;AACL,2CAAmC,CAAC,CAAD,CAD9B;AAEL,oCAA4B,CACzB,OADyB,EAE1B;AACEC,UAAAA,GAAG,EAAG,OADR;AAEEC,UAAAA,YAAY,EAAE,0BAAYV,MAAZ,EAAoB;AAAEW,YAAAA,mBAAmB,EAAE;AAAvB,WAApB,CAFhB;AAGEC,UAAAA,OAAO,EAAG;AAHZ,SAF0B;AAFvB;AAPG;AAFP,GAAP;AAsBD,CAvBD","sourcesContent":["import { printSchema } from \"graphql\"\n\nmodule.exports = schema => {\n  return {\n    useEslintrc: false,\n    baseConfig: {\n      globals: {\n        graphql: true,\n        __PATH_PREFIX__: true,\n      },\n      extends: `react-app`,\n      plugins: [`graphql`],\n      rules: {\n        \"import/no-webpack-loader-syntax\": [0],\n        \"graphql/template-strings\": [\n          `error`,\n          {\n            env: `relay`,\n            schemaString: printSchema(schema, { commentDescriptions: true }),\n            tagName: `graphql`,\n          },\n        ],\n      },\n    },\n  }\n}\n"],"file":"eslint-config.js"}
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/utils/get-public-path.js b/node_modules/gatsby/dist/utils/get-public-path.js
deleted file mode 100644
index 68eec46..0000000
--- a/node_modules/gatsby/dist/utils/get-public-path.js
+++ /dev/null
@@ -1,19 +0,0 @@
-"use strict";
-
-const trimSlashes = part => part.replace(/(^\/)|(\/$)/g, ``);
-
-const isURL = possibleUrl => [`http://`, `https://`, `//`].some(expr => possibleUrl.startsWith(expr));
-
-module.exports = function getPublicPath({
-  assetPrefix,
-  pathPrefix,
-  prefixPaths
-}) {
-  if (prefixPaths && (assetPrefix || pathPrefix)) {
-    const normalized = [assetPrefix, pathPrefix].filter(part => part && part.length > 0).map(part => trimSlashes(part)).join(`/`);
-    return isURL(normalized) ? normalized : `/${normalized}`;
-  }
-
-  return ``;
-};
-//# sourceMappingURL=get-public-path.js.map
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/utils/get-public-path.js.map b/node_modules/gatsby/dist/utils/get-public-path.js.map
deleted file mode 100644
index ffee4d4..0000000
--- a/node_modules/gatsby/dist/utils/get-public-path.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"sources":["../../src/utils/get-public-path.js"],"names":["trimSlashes","part","replace","isURL","possibleUrl","some","expr","startsWith","module","exports","getPublicPath","assetPrefix","pathPrefix","prefixPaths","normalized","filter","length","map","join"],"mappings":";;AAAA,MAAMA,WAAW,GAAGC,IAAI,IAAIA,IAAI,CAACC,OAAL,CAAa,cAAb,EAA8B,EAA9B,CAA5B;;AAEA,MAAMC,KAAK,GAAGC,WAAW,IACvB,CAAE,SAAF,EAAa,UAAb,EAAyB,IAAzB,EAA8BC,IAA9B,CAAmCC,IAAI,IAAIF,WAAW,CAACG,UAAZ,CAAuBD,IAAvB,CAA3C,CADF;;AAGAE,MAAM,CAACC,OAAP,GAAiB,SAASC,aAAT,CAAuB;AACtCC,EAAAA,WADsC;AAEtCC,EAAAA,UAFsC;AAGtCC,EAAAA;AAHsC,CAAvB,EAId;AACD,MAAIA,WAAW,KAAKF,WAAW,IAAIC,UAApB,CAAf,EAAgD;AAC9C,UAAME,UAAU,GAAG,CAACH,WAAD,EAAcC,UAAd,EAChBG,MADgB,CACTd,IAAI,IAAIA,IAAI,IAAIA,IAAI,CAACe,MAAL,GAAc,CADrB,EAEhBC,GAFgB,CAEZhB,IAAI,IAAID,WAAW,CAACC,IAAD,CAFP,EAGhBiB,IAHgB,CAGV,GAHU,CAAnB;AAKA,WAAOf,KAAK,CAACW,UAAD,CAAL,GAAoBA,UAApB,GAAkC,IAAGA,UAAW,EAAvD;AACD;;AAED,SAAQ,EAAR;AACD,CAfD","sourcesContent":["const trimSlashes = part => part.replace(/(^\\/)|(\\/$)/g, ``)\n\nconst isURL = possibleUrl =>\n  [`http://`, `https://`, `//`].some(expr => possibleUrl.startsWith(expr))\n\nmodule.exports = function getPublicPath({\n  assetPrefix,\n  pathPrefix,\n  prefixPaths,\n}) {\n  if (prefixPaths && (assetPrefix || pathPrefix)) {\n    const normalized = [assetPrefix, pathPrefix]\n      .filter(part => part && part.length > 0)\n      .map(part => trimSlashes(part))\n      .join(`/`)\n\n    return isURL(normalized) ? normalized : `/${normalized}`\n  }\n\n  return ``\n}\n"],"file":"get-public-path.js"}
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/utils/page-data.js b/node_modules/gatsby/dist/utils/page-data.js
new file mode 100644
index 0000000..3caa684
--- /dev/null
+++ b/node_modules/gatsby/dist/utils/page-data.js
@@ -0,0 +1,123 @@
+"use strict";
+
+var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
+
+var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
+
+const fs = require(`fs-extra`);
+
+const path = require(`path`);
+
+const Queue = require(`better-queue`);
+
+const getFilePath = ({
+  publicDir
+}, pagePath) => {
+  const fixedPagePath = pagePath === `/` ? `index` : pagePath;
+  return path.join(publicDir, `page-data`, fixedPagePath, `page-data.json`);
+};
+
+const write =
+/*#__PURE__*/
+function () {
+  var _ref = (0, _asyncToGenerator2.default)(function* ({
+    publicDir
+  }, page, result, webpackCompilationHash) {
+    const filePath = getFilePath({
+      publicDir
+    }, page.path);
+    const body = Object.assign({
+      componentChunkName: page.componentChunkName,
+      path: page.path,
+      compilationHash: webpackCompilationHash
+    }, result);
+    yield fs.outputFile(filePath, JSON.stringify(body));
+  });
+
+  return function write(_x, _x2, _x3, _x4) {
+    return _ref.apply(this, arguments);
+  };
+}();
+
+const read =
+/*#__PURE__*/
+function () {
+  var _ref2 = (0, _asyncToGenerator2.default)(function* ({
+    publicDir
+  }, pagePath) {
+    const filePath = getFilePath({
+      publicDir
+    }, pagePath);
+    const rawPageData = yield fs.readFile(filePath);
+    return JSON.parse(rawPageData);
+  });
+
+  return function read(_x5, _x6) {
+    return _ref2.apply(this, arguments);
+  };
+}();
+
+const updateCompilationHash =
+/*#__PURE__*/
+function () {
+  var _ref3 = (0, _asyncToGenerator2.default)(function* ({
+    publicDir
+  }, pagePath, webpackCompilationHash) {
+    const filePath = getFilePath({
+      publicDir
+    }, pagePath);
+    const pageData = yield read({
+      publicDir
+    }, pagePath);
+    pageData.compilationHash = webpackCompilationHash;
+    yield fs.outputFile(filePath, JSON.stringify(pageData));
+  });
+
+  return function updateCompilationHash(_x7, _x8, _x9) {
+    return _ref3.apply(this, arguments);
+  };
+}(); // TODO We should move this to a worker model (like html page
+// rendering) for performance
+
+
+const rewriteCompilationHashes = ({
+  publicDir
+}, pagePaths, compilationHash) => {
+  if (pagePaths.length === 0) {
+    return Promise.resolve();
+  }
+
+  const queueOptions = {
+    concurrent: 4
+  };
+
+  const handler =
+  /*#__PURE__*/
+  function () {
+    var _ref4 = (0, _asyncToGenerator2.default)(function* (pagePath, callback) {
+      yield updateCompilationHash({
+        publicDir
+      }, pagePath, compilationHash);
+      callback(null);
+    });
+
+    return function handler(_x10, _x11) {
+      return _ref4.apply(this, arguments);
+    };
+  }();
+
+  const q = new Queue(handler, queueOptions);
+  const drainPromise = new Promise(resolve => {
+    q.once(`drain`, () => resolve());
+  });
+  pagePaths.forEach(pagePath => q.push(pagePath));
+  return drainPromise;
+};
+
+module.exports = {
+  write,
+  read,
+  updateCompilationHash,
+  rewriteCompilationHashes
+};
+//# sourceMappingURL=page-data.js.map
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/utils/page-data.js.map b/node_modules/gatsby/dist/utils/page-data.js.map
new file mode 100644
index 0000000..f652dfd
--- /dev/null
+++ b/node_modules/gatsby/dist/utils/page-data.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":["../../src/utils/page-data.js"],"names":["fs","require","path","Queue","getFilePath","publicDir","pagePath","fixedPagePath","join","write","page","result","webpackCompilationHash","filePath","body","componentChunkName","compilationHash","outputFile","JSON","stringify","read","rawPageData","readFile","parse","updateCompilationHash","pageData","rewriteCompilationHashes","pagePaths","length","Promise","resolve","queueOptions","concurrent","handler","callback","q","drainPromise","once","forEach","push","module","exports"],"mappings":"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","sourcesContent":["const fs = require(`fs-extra`)\nconst path = require(`path`)\nconst Queue = require(`better-queue`)\n\nconst getFilePath = ({ publicDir }, pagePath) => {\n  const fixedPagePath = pagePath === `/` ? `index` : pagePath\n  return path.join(publicDir, `page-data`, fixedPagePath, `page-data.json`)\n}\n\nconst write = async ({ publicDir }, page, result, webpackCompilationHash) => {\n  const filePath = getFilePath({ publicDir }, page.path)\n  const body = {\n    componentChunkName: page.componentChunkName,\n    path: page.path,\n    compilationHash: webpackCompilationHash,\n    ...result,\n  }\n  await fs.outputFile(filePath, JSON.stringify(body))\n}\n\nconst read = async ({ publicDir }, pagePath) => {\n  const filePath = getFilePath({ publicDir }, pagePath)\n  const rawPageData = await fs.readFile(filePath)\n  return JSON.parse(rawPageData)\n}\n\nconst updateCompilationHash = async (\n  { publicDir },\n  pagePath,\n  webpackCompilationHash\n) => {\n  const filePath = getFilePath({ publicDir }, pagePath)\n  const pageData = await read({ publicDir }, pagePath)\n  pageData.compilationHash = webpackCompilationHash\n  await fs.outputFile(filePath, JSON.stringify(pageData))\n}\n\n// TODO We should move this to a worker model (like html page\n// rendering) for performance\nconst rewriteCompilationHashes = (\n  { publicDir },\n  pagePaths,\n  compilationHash\n) => {\n  if (pagePaths.length === 0) {\n    return Promise.resolve()\n  }\n  const queueOptions = {\n    concurrent: 4,\n  }\n  const handler = async (pagePath, callback) => {\n    await updateCompilationHash({ publicDir }, pagePath, compilationHash)\n    callback(null)\n  }\n  const q = new Queue(handler, queueOptions)\n  const drainPromise = new Promise(resolve => {\n    q.once(`drain`, () => resolve())\n  })\n  pagePaths.forEach(pagePath => q.push(pagePath))\n  return drainPromise\n}\n\nmodule.exports = {\n  write,\n  read,\n  updateCompilationHash,\n  rewriteCompilationHashes,\n}\n"],"file":"page-data.js"}
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/utils/path.js b/node_modules/gatsby/dist/utils/path.js
index e8ae163..59304cd 100644
--- a/node_modules/gatsby/dist/utils/path.js
+++ b/node_modules/gatsby/dist/utils/path.js
@@ -3,7 +3,6 @@
 exports.__esModule = true;
 exports.joinPath = joinPath;
 exports.withBasePath = withBasePath;
-exports.withTrailingSlash = withTrailingSlash;
 
 const path = require(`path`);
 
@@ -22,8 +21,4 @@ function joinPath(...paths) {
 function withBasePath(basePath) {
   return (...paths) => joinPath(basePath, ...paths);
 }
-
-function withTrailingSlash(basePath) {
-  return `${basePath}/`;
-}
 //# sourceMappingURL=path.js.map
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/utils/path.js.map b/node_modules/gatsby/dist/utils/path.js.map
index 6f4acf8..578aeb4 100644
--- a/node_modules/gatsby/dist/utils/path.js.map
+++ b/node_modules/gatsby/dist/utils/path.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/utils/path.js"],"names":["path","require","os","joinPath","paths","joinedPath","join","platform","replace","withBasePath","basePath","withTrailingSlash"],"mappings":";;;;;;;AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAE,MAAF,CAApB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAE,IAAF,CAAlB;;AAEO,SAASE,QAAT,CAAkB,GAAGC,KAArB,EAA4B;AACjC,QAAMC,UAAU,GAAGL,IAAI,CAACM,IAAL,CAAU,GAAGF,KAAb,CAAnB;;AACA,MAAIF,EAAE,CAACK,QAAH,OAAmB,OAAvB,EAA+B;AAC7B,WAAOF,UAAU,CAACG,OAAX,CAAmB,KAAnB,EAA2B,MAA3B,CAAP;AACD,GAFD,MAEO;AACL,WAAOH,UAAP;AACD;AACF;;AAEM,SAASI,YAAT,CAAsBC,QAAtB,EAAgC;AACrC,SAAO,CAAC,GAAGN,KAAJ,KAAcD,QAAQ,CAACO,QAAD,EAAW,GAAGN,KAAd,CAA7B;AACD;;AAEM,SAASO,iBAAT,CAA2BD,QAA3B,EAAqC;AAC1C,SAAQ,GAAEA,QAAS,GAAnB;AACD","sourcesContent":["const path = require(`path`)\nconst os = require(`os`)\n\nexport function joinPath(...paths) {\n  const joinedPath = path.join(...paths)\n  if (os.platform() === `win32`) {\n    return joinedPath.replace(/\\\\/g, `\\\\\\\\`)\n  } else {\n    return joinedPath\n  }\n}\n\nexport function withBasePath(basePath) {\n  return (...paths) => joinPath(basePath, ...paths)\n}\n\nexport function withTrailingSlash(basePath) {\n  return `${basePath}/`\n}\n"],"file":"path.js"}
\ No newline at end of file
+{"version":3,"sources":["../../src/utils/path.js"],"names":["path","require","os","joinPath","paths","joinedPath","join","platform","replace","withBasePath","basePath"],"mappings":";;;;;;AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAE,MAAF,CAApB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAE,IAAF,CAAlB;;AAEO,SAASE,QAAT,CAAkB,GAAGC,KAArB,EAA4B;AACjC,QAAMC,UAAU,GAAGL,IAAI,CAACM,IAAL,CAAU,GAAGF,KAAb,CAAnB;;AACA,MAAIF,EAAE,CAACK,QAAH,OAAmB,OAAvB,EAA+B;AAC7B,WAAOF,UAAU,CAACG,OAAX,CAAmB,KAAnB,EAA2B,MAA3B,CAAP;AACD,GAFD,MAEO;AACL,WAAOH,UAAP;AACD;AACF;;AAEM,SAASI,YAAT,CAAsBC,QAAtB,EAAgC;AACrC,SAAO,CAAC,GAAGN,KAAJ,KAAcD,QAAQ,CAACO,QAAD,EAAW,GAAGN,KAAd,CAA7B;AACD","sourcesContent":["const path = require(`path`)\nconst os = require(`os`)\n\nexport function joinPath(...paths) {\n  const joinedPath = path.join(...paths)\n  if (os.platform() === `win32`) {\n    return joinedPath.replace(/\\\\/g, `\\\\\\\\`)\n  } else {\n    return joinedPath\n  }\n}\n\nexport function withBasePath(basePath) {\n  return (...paths) => joinPath(basePath, ...paths)\n}\n"],"file":"path.js"}
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/utils/physical-cpu-count.js b/node_modules/gatsby/dist/utils/physical-cpu-count.js
deleted file mode 100644
index 468e93e..0000000
--- a/node_modules/gatsby/dist/utils/physical-cpu-count.js
+++ /dev/null
@@ -1,53 +0,0 @@
-"use strict";
-
-// Forked from physical-cpu-count package from npm
-const os = require(`os`);
-
-const childProcess = require(`child_process`);
-
-function exec(command) {
-  const output = childProcess.execSync(command, {
-    encoding: `utf8`
-  });
-  return output;
-}
-/*
- * Fallback if child process fails to receive CPU count
- */
-
-
-function fallbackToNodeJSCheck() {
-  const cores = os.cpus().filter(function (cpu, index) {
-    const hasHyperthreading = cpu.model.includes(`Intel`);
-    const isOdd = index % 2 === 1;
-    return !hasHyperthreading || isOdd;
-  });
-  return cores.length;
-}
-
-const platform = os.platform();
-
-function getPhysicalCpuCount() {
-  try {
-    if (platform === `linux`) {
-      const output = exec(`lscpu -p | egrep -v "^#" | sort -u -t, -k 2,4 | wc -l`);
-      return Number(output.trim());
-    }
-
-    if (platform === `darwin`) {
-      const output = exec(`sysctl -n hw.physicalcpu_max`);
-      return Number(output.trim());
-    }
-
-    if (platform === `win32`) {
-      const output = exec(`WMIC CPU Get NumberOfCores`);
-      return output.replace(/\r/g, ``).split(`\n`).map(line => Number(line)).filter(value => !isNaN(value)).reduce((sum, number) => sum + number, 0);
-    }
-  } catch (err) {// carry on
-  }
-
-  return fallbackToNodeJSCheck();
-}
-
-module.exports = getPhysicalCpuCount();
-//# sourceMappingURL=physical-cpu-count.js.map
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/utils/physical-cpu-count.js.map b/node_modules/gatsby/dist/utils/physical-cpu-count.js.map
deleted file mode 100644
index 0f5f396..0000000
--- a/node_modules/gatsby/dist/utils/physical-cpu-count.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"sources":["../../src/utils/physical-cpu-count.js"],"names":["os","require","childProcess","exec","command","output","execSync","encoding","fallbackToNodeJSCheck","cores","cpus","filter","cpu","index","hasHyperthreading","model","includes","isOdd","length","platform","getPhysicalCpuCount","Number","trim","replace","split","map","line","value","isNaN","reduce","sum","number","err","module","exports"],"mappings":";;AAAA;AACA,MAAMA,EAAE,GAAGC,OAAO,CAAE,IAAF,CAAlB;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAE,eAAF,CAA5B;;AAEA,SAASE,IAAT,CAAcC,OAAd,EAAuB;AACrB,QAAMC,MAAM,GAAGH,YAAY,CAACI,QAAb,CAAsBF,OAAtB,EAA+B;AAAEG,IAAAA,QAAQ,EAAG;AAAb,GAA/B,CAAf;AACA,SAAOF,MAAP;AACD;AAED;;;;;AAGA,SAASG,qBAAT,GAAiC;AAC/B,QAAMC,KAAK,GAAGT,EAAE,CAACU,IAAH,GAAUC,MAAV,CAAiB,UAASC,GAAT,EAAcC,KAAd,EAAqB;AAClD,UAAMC,iBAAiB,GAAGF,GAAG,CAACG,KAAJ,CAAUC,QAAV,CAAoB,OAApB,CAA1B;AACA,UAAMC,KAAK,GAAGJ,KAAK,GAAG,CAAR,KAAc,CAA5B;AACA,WAAO,CAACC,iBAAD,IAAsBG,KAA7B;AACD,GAJa,CAAd;AAMA,SAAOR,KAAK,CAACS,MAAb;AACD;;AAED,MAAMC,QAAQ,GAAGnB,EAAE,CAACmB,QAAH,EAAjB;;AAEA,SAASC,mBAAT,GAA+B;AAC7B,MAAI;AACF,QAAID,QAAQ,KAAM,OAAlB,EAA0B;AACxB,YAAMd,MAAM,GAAGF,IAAI,CAChB,uDADgB,CAAnB;AAGA,aAAOkB,MAAM,CAAChB,MAAM,CAACiB,IAAP,EAAD,CAAb;AACD;;AAED,QAAIH,QAAQ,KAAM,QAAlB,EAA2B;AACzB,YAAMd,MAAM,GAAGF,IAAI,CAAE,8BAAF,CAAnB;AACA,aAAOkB,MAAM,CAAChB,MAAM,CAACiB,IAAP,EAAD,CAAb;AACD;;AAED,QAAIH,QAAQ,KAAM,OAAlB,EAA0B;AACxB,YAAMd,MAAM,GAAGF,IAAI,CAAE,4BAAF,CAAnB;AACA,aAAOE,MAAM,CACVkB,OADI,CACI,KADJ,EACY,EADZ,EAEJC,KAFI,CAEG,IAFH,EAGJC,GAHI,CAGAC,IAAI,IAAIL,MAAM,CAACK,IAAD,CAHd,EAIJf,MAJI,CAIGgB,KAAK,IAAI,CAACC,KAAK,CAACD,KAAD,CAJlB,EAKJE,MALI,CAKG,CAACC,GAAD,EAAMC,MAAN,KAAiBD,GAAG,GAAGC,MAL1B,EAKkC,CALlC,CAAP;AAMD;AACF,GAtBD,CAsBE,OAAOC,GAAP,EAAY,CACZ;AACD;;AAED,SAAOxB,qBAAqB,EAA5B;AACD;;AAEDyB,MAAM,CAACC,OAAP,GAAiBd,mBAAmB,EAApC","sourcesContent":["// Forked from physical-cpu-count package from npm\nconst os = require(`os`)\nconst childProcess = require(`child_process`)\n\nfunction exec(command) {\n  const output = childProcess.execSync(command, { encoding: `utf8` })\n  return output\n}\n\n/*\n * Fallback if child process fails to receive CPU count\n */\nfunction fallbackToNodeJSCheck() {\n  const cores = os.cpus().filter(function(cpu, index) {\n    const hasHyperthreading = cpu.model.includes(`Intel`)\n    const isOdd = index % 2 === 1\n    return !hasHyperthreading || isOdd\n  })\n\n  return cores.length\n}\n\nconst platform = os.platform()\n\nfunction getPhysicalCpuCount() {\n  try {\n    if (platform === `linux`) {\n      const output = exec(\n        `lscpu -p | egrep -v \"^#\" | sort -u -t, -k 2,4 | wc -l`\n      )\n      return Number(output.trim())\n    }\n\n    if (platform === `darwin`) {\n      const output = exec(`sysctl -n hw.physicalcpu_max`)\n      return Number(output.trim())\n    }\n\n    if (platform === `win32`) {\n      const output = exec(`WMIC CPU Get NumberOfCores`)\n      return output\n        .replace(/\\r/g, ``)\n        .split(`\\n`)\n        .map(line => Number(line))\n        .filter(value => !isNaN(value))\n        .reduce((sum, number) => sum + number, 0)\n    }\n  } catch (err) {\n    // carry on\n  }\n\n  return fallbackToNodeJSCheck()\n}\n\nmodule.exports = getPhysicalCpuCount()\n"],"file":"physical-cpu-count.js"}
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/utils/webpack.config.js b/node_modules/gatsby/dist/utils/webpack.config.js
index 52752bb..d94fbe1 100644
--- a/node_modules/gatsby/dist/utils/webpack.config.js
+++ b/node_modules/gatsby/dist/utils/webpack.config.js
@@ -22,15 +22,12 @@ const _require = require(`../redux`),
 const _require2 = require(`../redux/actions`),
       actions = _require2.actions;
 
-const getPublicPath = require(`./get-public-path`);
-
 const debug = require(`debug`)(`gatsby:webpack-config`);
 
 const report = require(`gatsby-cli/lib/reporter`);
 
 const _require3 = require(`./path`),
-      withBasePath = _require3.withBasePath,
-      withTrailingSlash = _require3.withTrailingSlash;
+      withBasePath = _require3.withBasePath;
 
 const apiRunnerNode = require(`./api-runner-node`);
 
@@ -46,7 +43,7 @@ const hasLocalEslint = require(`./local-eslint-config-finder`); // Four stages o
 module.exports =
 /*#__PURE__*/
 function () {
-  var _ref = (0, _asyncToGenerator2.default)(function* (program, directory, suppliedStage) {
+  var _ref = (0, _asyncToGenerator2.default)(function* (program, directory, suppliedStage, webpackPort = 1500) {
     const directoryPath = withBasePath(directory);
     process.env.GATSBY_BUILD_STAGE = suppliedStage; // We combine develop & develop-html stages for purposes of generating the
     // webpack config.
@@ -61,23 +58,10 @@ function () {
           loaders = _ref2.loaders,
           plugins = _ref2.plugins;
 
-    const _store$getState$confi = store.getState().config,
-          assetPrefix = _store$getState$confi.assetPrefix,
-          pathPrefix = _store$getState$confi.pathPrefix;
-    const publicPath = getPublicPath(Object.assign({
-      assetPrefix,
-      pathPrefix
-    }, program));
-
     function processEnv(stage, defaultNodeEnv) {
-      debug(`Building env for "${stage}"`); // node env should be DEVELOPMENT | PRODUCTION as these are commonly used in node land
-      // this variable is used inside webpack
-
-      const nodeEnv = process.env.NODE_ENV || `${defaultNodeEnv}`; // config env is depednant on the env that it's run, this can be anything from staging-production
-      // this allows you to set use different .env environments or conditions in gatsby files
-
-      const configEnv = process.env.GATSBY_ACTIVE_ENV || nodeEnv;
-      const envFile = path.join(process.cwd(), `./.env.${configEnv}`);
+      debug(`Building env for "${stage}"`);
+      const env = process.env.GATSBY_ACTIVE_ENV || process.env.NODE_ENV || `${defaultNodeEnv}`;
+      const envFile = path.join(process.cwd(), `./.env.${env}`);
       let parsed = {};
 
       try {
@@ -86,7 +70,7 @@ function () {
         }));
       } catch (err) {
         if (err.code !== `ENOENT`) {
-          report.error(`There was a problem processing the .env file (${envFile})`, err);
+          report.error(`There was a problem processing the .env file`, err);
         }
       }
 
@@ -102,7 +86,7 @@ function () {
         return acc;
       }, {}); // Don't allow overwriting of NODE_ENV, PUBLIC_DIR as to not break gatsby things
 
-      envObject.NODE_ENV = JSON.stringify(nodeEnv);
+      envObject.NODE_ENV = JSON.stringify(env);
       envObject.PUBLIC_DIR = JSON.stringify(`${process.cwd()}/public`);
       envObject.BUILD_STAGE = JSON.stringify(stage);
       envObject.CYPRESS_SUPPORT = JSON.stringify(process.env.CYPRESS_SUPPORT);
@@ -126,7 +110,7 @@ function () {
         if (pubPath.substr(-1) === `/`) {
           hmrBasePath = pubPath;
         } else {
-          hmrBasePath = withTrailingSlash(pubPath);
+          hmrBasePath = `${pubPath}/`;
         }
       }
 
@@ -162,7 +146,7 @@ function () {
             library: `lib`,
             umdNamedDefine: true,
             globalObject: `this`,
-            publicPath: withTrailingSlash(publicPath)
+            publicPath: program.prefixPaths ? `${store.getState().config.pathPrefix}/` : `/`
           };
 
         case `build-javascript`:
@@ -170,7 +154,7 @@ function () {
             filename: `[name]-[contenthash].js`,
             chunkFilename: `[name]-[contenthash].js`,
             path: directoryPath(`public`),
-            publicPath: withTrailingSlash(publicPath)
+            publicPath: program.prefixPaths ? `${store.getState().config.pathPrefix}/` : `/`
           };
 
         default:
@@ -209,9 +193,7 @@ function () {
       let configPlugins = [plugins.moment(), // Add a few global variables. Set NODE_ENV to production (enables
       // optimizations for React) and what the link prefix is (__PATH_PREFIX__).
       plugins.define(Object.assign({}, processEnv(stage, `development`), {
-        __BASE_PATH__: JSON.stringify(program.prefixPaths ? pathPrefix : ``),
-        __PATH_PREFIX__: JSON.stringify(program.prefixPaths ? publicPath : ``),
-        __ASSET_PREFIX__: JSON.stringify(program.prefixPaths ? assetPrefix : ``)
+        __PATH_PREFIX__: JSON.stringify(program.prefixPaths ? store.getState().config.pathPrefix : ``)
       }))];
 
       switch (stage) {
diff --git a/node_modules/gatsby/dist/utils/webpack.config.js.map b/node_modules/gatsby/dist/utils/webpack.config.js.map
index a89216c..5b4b015 100644
--- a/node_modules/gatsby/dist/utils/webpack.config.js.map
+++ b/node_modules/gatsby/dist/utils/webpack.config.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/utils/webpack.config.js"],"names":["require","fs","path","dotenv","FriendlyErrorsWebpackPlugin","PnpWebpackPlugin","store","actions","getPublicPath","debug","report","withBasePath","withTrailingSlash","apiRunnerNode","createUtils","hasLocalEslint","module","exports","program","directory","suppliedStage","directoryPath","process","env","GATSBY_BUILD_STAGE","stage","rules","loaders","plugins","getState","config","assetPrefix","pathPrefix","publicPath","processEnv","defaultNodeEnv","nodeEnv","NODE_ENV","configEnv","GATSBY_ACTIVE_ENV","envFile","join","cwd","parsed","parse","readFileSync","encoding","err","code","error","envObject","Object","keys","reduce","acc","key","JSON","stringify","gatsbyVarObject","match","PUBLIC_DIR","BUILD_STAGE","CYPRESS_SUPPORT","mergedEnvVars","assign","getHmrPath","hmrBasePath","hmrSuffix","GATSBY_WEBPACK_PUBLICPATH","pubPath","substr","getOutput","filename","pathinfo","devtoolModuleFilenameTemplate","info","resolve","absoluteResourcePath","replace","crossOriginLoading","libraryTarget","library","umdNamedDefine","globalObject","chunkFilename","Error","getEntry","commons","main","app","getPlugins","configPlugins","moment","define","__BASE_PATH__","prefixPaths","__PATH_PREFIX__","__ASSET_PREFIX__","concat","hotModuleReplacement","noEmitOnErrors","clearConsole","extractText","extractStats","getDevtool","getMode","getModule","configRules","mjs","js","yaml","fonts","images","media","miscAssets","schema","eslint","oneOf","cssModules","css","use","null","getResolve","extensions","alias","gatsby$","dirname","bind","getResolveLoader","root","userLoaderDirectoryPath","statSync","isDirectory","push","modules","__dirname","moduleLoader","context","entry","output","target","devtool","performance","hints","mode","resolveLoader","node","__filename","optimization","runtimeChunk","name","splitChunks","cacheGroups","styles","test","chunks","enforce","minimizer","noUglify","minifyJs","minifyCss","filter","Boolean","externalList","externals","request","callback","some","item","RegExp","dispatch","replaceWebpackConfig","getConfig","webpack"],"mappings":"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","sourcesContent":["require(`v8-compile-cache`)\n\nconst fs = require(`fs-extra`)\nconst path = require(`path`)\nconst dotenv = require(`dotenv`)\nconst FriendlyErrorsWebpackPlugin = require(`@pieh/friendly-errors-webpack-plugin`)\nconst PnpWebpackPlugin = require(`pnp-webpack-plugin`)\nconst { store } = require(`../redux`)\nconst { actions } = require(`../redux/actions`)\nconst getPublicPath = require(`./get-public-path`)\nconst debug = require(`debug`)(`gatsby:webpack-config`)\nconst report = require(`gatsby-cli/lib/reporter`)\nconst { withBasePath, withTrailingSlash } = require(`./path`)\n\nconst apiRunnerNode = require(`./api-runner-node`)\nconst createUtils = require(`./webpack-utils`)\nconst hasLocalEslint = require(`./local-eslint-config-finder`)\n\n// Four stages or modes:\n//   1) develop: for `gatsby develop` command, hot reload and CSS injection into page\n//   2) develop-html: same as develop without react-hmre in the babel config for html renderer\n//   3) build-javascript: Build JS and CSS chunks for production\n//   4) build-html: build all HTML files\n\nmodule.exports = async (program, directory, suppliedStage) => {\n  const directoryPath = withBasePath(directory)\n\n  process.env.GATSBY_BUILD_STAGE = suppliedStage\n\n  // We combine develop & develop-html stages for purposes of generating the\n  // webpack config.\n  const stage = suppliedStage\n  const { rules, loaders, plugins } = await createUtils({ stage, program })\n\n  const { assetPrefix, pathPrefix } = store.getState().config\n\n  const publicPath = getPublicPath({ assetPrefix, pathPrefix, ...program })\n\n  function processEnv(stage, defaultNodeEnv) {\n    debug(`Building env for \"${stage}\"`)\n    // node env should be DEVELOPMENT | PRODUCTION as these are commonly used in node land\n    // this variable is used inside webpack\n    const nodeEnv = process.env.NODE_ENV || `${defaultNodeEnv}`\n    // config env is depednant on the env that it's run, this can be anything from staging-production\n    // this allows you to set use different .env environments or conditions in gatsby files\n    const configEnv = process.env.GATSBY_ACTIVE_ENV || nodeEnv\n    const envFile = path.join(process.cwd(), `./.env.${configEnv}`)\n    let parsed = {}\n    try {\n      parsed = dotenv.parse(fs.readFileSync(envFile, { encoding: `utf8` }))\n    } catch (err) {\n      if (err.code !== `ENOENT`) {\n        report.error(\n          `There was a problem processing the .env file (${envFile})`,\n          err\n        )\n      }\n    }\n\n    const envObject = Object.keys(parsed).reduce((acc, key) => {\n      acc[key] = JSON.stringify(parsed[key])\n      return acc\n    }, {})\n\n    const gatsbyVarObject = Object.keys(process.env).reduce((acc, key) => {\n      if (key.match(/^GATSBY_/)) {\n        acc[key] = JSON.stringify(process.env[key])\n      }\n      return acc\n    }, {})\n\n    // Don't allow overwriting of NODE_ENV, PUBLIC_DIR as to not break gatsby things\n    envObject.NODE_ENV = JSON.stringify(nodeEnv)\n    envObject.PUBLIC_DIR = JSON.stringify(`${process.cwd()}/public`)\n    envObject.BUILD_STAGE = JSON.stringify(stage)\n    envObject.CYPRESS_SUPPORT = JSON.stringify(process.env.CYPRESS_SUPPORT)\n\n    const mergedEnvVars = Object.assign(envObject, gatsbyVarObject)\n\n    return Object.keys(mergedEnvVars).reduce(\n      (acc, key) => {\n        acc[`process.env.${key}`] = mergedEnvVars[key]\n        return acc\n      },\n      {\n        \"process.env\": JSON.stringify({}),\n      }\n    )\n  }\n\n  function getHmrPath() {\n    // ref: https://github.com/gatsbyjs/gatsby/issues/8348\n    let hmrBasePath = `/`\n    const hmrSuffix = `__webpack_hmr&reload=true&overlay=false`\n\n    if (process.env.GATSBY_WEBPACK_PUBLICPATH) {\n      const pubPath = process.env.GATSBY_WEBPACK_PUBLICPATH\n      if (pubPath.substr(-1) === `/`) {\n        hmrBasePath = pubPath\n      } else {\n        hmrBasePath = withTrailingSlash(pubPath)\n      }\n    }\n\n    return hmrBasePath + hmrSuffix\n  }\n\n  debug(`Loading webpack config for stage \"${stage}\"`)\n  function getOutput() {\n    switch (stage) {\n      case `develop`:\n        return {\n          path: directory,\n          filename: `[name].js`,\n          // Add /* filename */ comments to generated require()s in the output.\n          pathinfo: true,\n          // Point sourcemap entries to original disk location (format as URL on Windows)\n          publicPath: process.env.GATSBY_WEBPACK_PUBLICPATH || `/`,\n          devtoolModuleFilenameTemplate: info =>\n            path.resolve(info.absoluteResourcePath).replace(/\\\\/g, `/`),\n          // Avoid React cross-origin errors\n          // See https://reactjs.org/docs/cross-origin-errors.html\n          crossOriginLoading: `anonymous`,\n        }\n      case `build-html`:\n      case `develop-html`:\n        // A temp file required by static-site-generator-plugin. See plugins() below.\n        // Deleted by build-html.js, since it's not needed for production.\n        return {\n          path: directoryPath(`public`),\n          filename: `render-page.js`,\n          libraryTarget: `umd`,\n          library: `lib`,\n          umdNamedDefine: true,\n          globalObject: `this`,\n          publicPath: withTrailingSlash(publicPath),\n        }\n      case `build-javascript`:\n        return {\n          filename: `[name]-[contenthash].js`,\n          chunkFilename: `[name]-[contenthash].js`,\n          path: directoryPath(`public`),\n          publicPath: withTrailingSlash(publicPath),\n        }\n      default:\n        throw new Error(`The state requested ${stage} doesn't exist.`)\n    }\n  }\n\n  function getEntry() {\n    switch (stage) {\n      case `develop`:\n        return {\n          commons: [\n            `event-source-polyfill`,\n            `${require.resolve(\n              `webpack-hot-middleware/client`\n            )}?path=${getHmrPath()}`,\n            directoryPath(`.cache/app`),\n          ],\n        }\n      case `develop-html`:\n        return {\n          main: directoryPath(`.cache/develop-static-entry`),\n        }\n      case `build-html`:\n        return {\n          main: directoryPath(`.cache/static-entry`),\n        }\n      case `build-javascript`:\n        return {\n          app: directoryPath(`.cache/production-app`),\n        }\n      default:\n        throw new Error(`The state requested ${stage} doesn't exist.`)\n    }\n  }\n\n  function getPlugins() {\n    let configPlugins = [\n      plugins.moment(),\n\n      // Add a few global variables. Set NODE_ENV to production (enables\n      // optimizations for React) and what the link prefix is (__PATH_PREFIX__).\n      plugins.define({\n        ...processEnv(stage, `development`),\n        __BASE_PATH__: JSON.stringify(program.prefixPaths ? pathPrefix : ``),\n        __PATH_PREFIX__: JSON.stringify(program.prefixPaths ? publicPath : ``),\n        __ASSET_PREFIX__: JSON.stringify(\n          program.prefixPaths ? assetPrefix : ``\n        ),\n      }),\n    ]\n\n    switch (stage) {\n      case `develop`:\n        configPlugins = configPlugins.concat([\n          plugins.hotModuleReplacement(),\n          plugins.noEmitOnErrors(),\n\n          new FriendlyErrorsWebpackPlugin({\n            clearConsole: false,\n          }),\n        ])\n        break\n      case `build-javascript`: {\n        configPlugins = configPlugins.concat([\n          plugins.extractText(),\n          // Write out stats object mapping named dynamic imports (aka page\n          // components) to all their async chunks.\n          plugins.extractStats(),\n        ])\n        break\n      }\n    }\n\n    return configPlugins\n  }\n\n  function getDevtool() {\n    switch (stage) {\n      case `develop`:\n        return `cheap-module-source-map`\n      // use a normal `source-map` for the html phases since\n      // it gives better line and column numbers\n      case `develop-html`:\n      case `build-html`:\n      case `build-javascript`:\n        return `source-map`\n      default:\n        return false\n    }\n  }\n\n  function getMode() {\n    switch (stage) {\n      case `build-javascript`:\n        return `production`\n      case `develop`:\n      case `develop-html`:\n      case `build-html`:\n        return `development` // So we don't uglify the html bundle\n      default:\n        return `production`\n    }\n  }\n\n  function getModule(config) {\n    // Common config for every env.\n    // prettier-ignore\n    let configRules = [\n      rules.mjs(),\n      rules.js(),\n      rules.yaml(),\n      rules.fonts(),\n      rules.images(),\n      rules.media(),\n      rules.miscAssets(),\n    ]\n    switch (stage) {\n      case `develop`: {\n        // get schema to pass to eslint config and program for directory\n        const { schema, program } = store.getState()\n\n        // if no local eslint config, then add gatsby config\n        if (!hasLocalEslint(program.directory)) {\n          configRules = configRules.concat([rules.eslint(schema)])\n        }\n\n        configRules = configRules.concat([\n          {\n            oneOf: [rules.cssModules(), rules.css()],\n          },\n        ])\n\n        break\n      }\n      case `build-html`:\n      case `develop-html`:\n        // We don't deal with CSS at all when building the HTML.\n        // The 'null' loader is used to prevent 'module not found' errors.\n        // On the other hand CSS modules loaders are necessary.\n\n        // prettier-ignore\n        configRules = configRules.concat([\n          {\n            oneOf: [\n              rules.cssModules(),\n              {\n                ...rules.css(),\n                use: [loaders.null()],\n              },\n            ],\n          },\n        ])\n        break\n\n      case `build-javascript`:\n        // We don't deal with CSS at all when building JavaScript but we still\n        // need to process the CSS so offline-plugin knows about the various\n        // assets referenced in your CSS.\n        //\n        // It's also necessary to process CSS Modules so your JS knows the\n        // classNames to use.\n        configRules = configRules.concat([\n          {\n            oneOf: [rules.cssModules(), rules.css()],\n          },\n        ])\n\n        break\n    }\n\n    return { rules: configRules }\n  }\n\n  function getResolve() {\n    const { program } = store.getState()\n    return {\n      // Use the program's extension list (generated via the\n      // 'resolvableExtensions' API hook).\n      extensions: [...program.extensions],\n      alias: {\n        gatsby$: directoryPath(path.join(`.cache`, `gatsby-browser-entry.js`)),\n        // Using directories for module resolution is mandatory because\n        // relative path imports are used sometimes\n        // See https://stackoverflow.com/a/49455609/6420957 for more details\n        \"@babel/runtime\": path.dirname(\n          require.resolve(`@babel/runtime/package.json`)\n        ),\n        \"core-js\": path.dirname(require.resolve(`core-js/package.json`)),\n        \"react-hot-loader\": path.dirname(\n          require.resolve(`react-hot-loader/package.json`)\n        ),\n        \"react-lifecycles-compat\": directoryPath(\n          `.cache/react-lifecycles-compat.js`\n        ),\n        \"create-react-context\": directoryPath(`.cache/create-react-context.js`),\n      },\n      plugins: [\n        // Those two folders are special and contain gatsby-generated files\n        // whose dependencies should be resolved through the `gatsby` package\n        PnpWebpackPlugin.bind(directoryPath(`.cache`), module),\n        PnpWebpackPlugin.bind(directoryPath(`public`), module),\n        // Transparently resolve packages via PnP when needed; noop otherwise\n        PnpWebpackPlugin,\n      ],\n    }\n  }\n\n  function getResolveLoader() {\n    const root = [path.resolve(directory, `node_modules`)]\n\n    const userLoaderDirectoryPath = path.resolve(directory, `loaders`)\n\n    try {\n      if (fs.statSync(userLoaderDirectoryPath).isDirectory()) {\n        root.push(userLoaderDirectoryPath)\n      }\n    } catch (err) {\n      debug(`Error resolving user loaders directory`, err)\n    }\n\n    return {\n      modules: [...root, path.join(__dirname, `../loaders`), `node_modules`],\n      // Bare loaders should always be loaded via the user dependencies (loaders\n      // configured via third-party like gatsby use require.resolve)\n      plugins: [PnpWebpackPlugin.moduleLoader(`${directory}/`)],\n    }\n  }\n\n  const config = {\n    // Context is the base directory for resolving the entry option.\n    context: directory,\n    entry: getEntry(),\n    output: getOutput(),\n\n    module: getModule(),\n    plugins: getPlugins(),\n\n    // Certain \"isomorphic\" packages have different entry points for browser\n    // and server (see\n    // https://github.com/defunctzombie/package-browser-field-spec); setting\n    // the target tells webpack which file to include, ie. browser vs main.\n    target: stage === `build-html` || stage === `develop-html` ? `node` : `web`,\n\n    devtool: getDevtool(),\n    // Turn off performance hints as we (for now) don't want to show the normal\n    // webpack output anywhere.\n    performance: {\n      hints: false,\n    },\n    mode: getMode(),\n\n    resolveLoader: getResolveLoader(),\n    resolve: getResolve(),\n\n    node: {\n      __filename: true,\n    },\n  }\n\n  if (stage === `build-javascript`) {\n    config.optimization = {\n      runtimeChunk: {\n        name: `webpack-runtime`,\n      },\n      splitChunks: {\n        name: false,\n        cacheGroups: {\n          // Only create one CSS file to avoid\n          // problems with code-split CSS loading in different orders\n          // causing inconsistent/non-determanistic styling\n          // See https://github.com/gatsbyjs/gatsby/issues/11072\n          styles: {\n            name: `styles`,\n            // This should cover all our types of CSS.\n            test: /\\.(css|scss|sass|less|styl)$/,\n            chunks: `all`,\n            enforce: true,\n          },\n        },\n      },\n      minimizer: [\n        // TODO: maybe this option should be noMinimize?\n        !program.noUglify && plugins.minifyJs(),\n        plugins.minifyCss(),\n      ].filter(Boolean),\n    }\n  }\n\n  if (stage === `build-html` || stage === `develop-html`) {\n    const externalList = [\n      // match `lodash` and `lodash/foo`\n      // but not things like `lodash-es`\n      `lodash`,\n      /^lodash\\//,\n      `react`,\n      /^react-dom\\//,\n      `pify`,\n      `@reach/router`,\n      `@reach/router/lib/history`,\n      `common-tags`,\n      `path`,\n      `semver`,\n      `react-helmet`,\n      `minimatch`,\n      `fs`,\n      /^core-js\\//,\n      `es6-promise`,\n      `crypto`,\n      `zlib`,\n      `http`,\n      `https`,\n      `debug`,\n    ]\n\n    config.externals = [\n      function(context, request, callback) {\n        if (\n          externalList.some(item => {\n            if (typeof item === `string` && item === request) {\n              return true\n            } else if (item instanceof RegExp && item.test(request)) {\n              return true\n            }\n\n            return false\n          })\n        ) {\n          return callback(null, `umd ${request}`)\n        }\n        return callback()\n      },\n    ]\n  }\n\n  store.dispatch(actions.replaceWebpackConfig(config))\n  const getConfig = () => store.getState().webpack\n\n  await apiRunnerNode(`onCreateWebpackConfig`, {\n    getConfig,\n    stage,\n    rules,\n    loaders,\n    plugins,\n  })\n\n  return getConfig()\n}\n"],"file":"webpack.config.js"}
\ No newline at end of file
+{"version":3,"sources":["../../src/utils/webpack.config.js"],"names":["require","fs","path","dotenv","FriendlyErrorsWebpackPlugin","PnpWebpackPlugin","store","actions","debug","report","withBasePath","apiRunnerNode","createUtils","hasLocalEslint","module","exports","program","directory","suppliedStage","webpackPort","directoryPath","process","env","GATSBY_BUILD_STAGE","stage","rules","loaders","plugins","processEnv","defaultNodeEnv","GATSBY_ACTIVE_ENV","NODE_ENV","envFile","join","cwd","parsed","parse","readFileSync","encoding","err","code","error","envObject","Object","keys","reduce","acc","key","JSON","stringify","gatsbyVarObject","match","PUBLIC_DIR","BUILD_STAGE","CYPRESS_SUPPORT","mergedEnvVars","assign","getHmrPath","hmrBasePath","hmrSuffix","GATSBY_WEBPACK_PUBLICPATH","pubPath","substr","getOutput","filename","pathinfo","publicPath","devtoolModuleFilenameTemplate","info","resolve","absoluteResourcePath","replace","crossOriginLoading","libraryTarget","library","umdNamedDefine","globalObject","prefixPaths","getState","config","pathPrefix","chunkFilename","Error","getEntry","commons","main","app","getPlugins","configPlugins","moment","define","__PATH_PREFIX__","concat","hotModuleReplacement","noEmitOnErrors","clearConsole","extractText","extractStats","getDevtool","getMode","getModule","configRules","mjs","js","yaml","fonts","images","media","miscAssets","schema","eslint","oneOf","cssModules","css","use","null","getResolve","extensions","alias","gatsby$","dirname","bind","getResolveLoader","root","userLoaderDirectoryPath","statSync","isDirectory","push","modules","__dirname","moduleLoader","context","entry","output","target","devtool","performance","hints","mode","resolveLoader","node","__filename","optimization","runtimeChunk","name","splitChunks","cacheGroups","styles","test","chunks","enforce","minimizer","noUglify","minifyJs","minifyCss","filter","Boolean","externalList","externals","request","callback","some","item","RegExp","dispatch","replaceWebpackConfig","getConfig","webpack"],"mappings":"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","sourcesContent":["require(`v8-compile-cache`)\n\nconst fs = require(`fs-extra`)\nconst path = require(`path`)\nconst dotenv = require(`dotenv`)\nconst FriendlyErrorsWebpackPlugin = require(`@pieh/friendly-errors-webpack-plugin`)\nconst PnpWebpackPlugin = require(`pnp-webpack-plugin`)\nconst { store } = require(`../redux`)\nconst { actions } = require(`../redux/actions`)\nconst debug = require(`debug`)(`gatsby:webpack-config`)\nconst report = require(`gatsby-cli/lib/reporter`)\nconst { withBasePath } = require(`./path`)\n\nconst apiRunnerNode = require(`./api-runner-node`)\nconst createUtils = require(`./webpack-utils`)\nconst hasLocalEslint = require(`./local-eslint-config-finder`)\n\n// Four stages or modes:\n//   1) develop: for `gatsby develop` command, hot reload and CSS injection into page\n//   2) develop-html: same as develop without react-hmre in the babel config for html renderer\n//   3) build-javascript: Build JS and CSS chunks for production\n//   4) build-html: build all HTML files\n\nmodule.exports = async (\n  program,\n  directory,\n  suppliedStage,\n  webpackPort = 1500\n) => {\n  const directoryPath = withBasePath(directory)\n\n  process.env.GATSBY_BUILD_STAGE = suppliedStage\n\n  // We combine develop & develop-html stages for purposes of generating the\n  // webpack config.\n  const stage = suppliedStage\n  const { rules, loaders, plugins } = await createUtils({ stage, program })\n\n  function processEnv(stage, defaultNodeEnv) {\n    debug(`Building env for \"${stage}\"`)\n    const env =\n      process.env.GATSBY_ACTIVE_ENV ||\n      process.env.NODE_ENV ||\n      `${defaultNodeEnv}`\n    const envFile = path.join(process.cwd(), `./.env.${env}`)\n    let parsed = {}\n    try {\n      parsed = dotenv.parse(fs.readFileSync(envFile, { encoding: `utf8` }))\n    } catch (err) {\n      if (err.code !== `ENOENT`) {\n        report.error(`There was a problem processing the .env file`, err)\n      }\n    }\n\n    const envObject = Object.keys(parsed).reduce((acc, key) => {\n      acc[key] = JSON.stringify(parsed[key])\n      return acc\n    }, {})\n\n    const gatsbyVarObject = Object.keys(process.env).reduce((acc, key) => {\n      if (key.match(/^GATSBY_/)) {\n        acc[key] = JSON.stringify(process.env[key])\n      }\n      return acc\n    }, {})\n\n    // Don't allow overwriting of NODE_ENV, PUBLIC_DIR as to not break gatsby things\n    envObject.NODE_ENV = JSON.stringify(env)\n    envObject.PUBLIC_DIR = JSON.stringify(`${process.cwd()}/public`)\n    envObject.BUILD_STAGE = JSON.stringify(stage)\n    envObject.CYPRESS_SUPPORT = JSON.stringify(process.env.CYPRESS_SUPPORT)\n\n    const mergedEnvVars = Object.assign(envObject, gatsbyVarObject)\n\n    return Object.keys(mergedEnvVars).reduce(\n      (acc, key) => {\n        acc[`process.env.${key}`] = mergedEnvVars[key]\n        return acc\n      },\n      {\n        \"process.env\": JSON.stringify({}),\n      }\n    )\n  }\n\n  function getHmrPath() {\n    // ref: https://github.com/gatsbyjs/gatsby/issues/8348\n    let hmrBasePath = `/`\n    const hmrSuffix = `__webpack_hmr&reload=true&overlay=false`\n\n    if (process.env.GATSBY_WEBPACK_PUBLICPATH) {\n      const pubPath = process.env.GATSBY_WEBPACK_PUBLICPATH\n      if (pubPath.substr(-1) === `/`) {\n        hmrBasePath = pubPath\n      } else {\n        hmrBasePath = `${pubPath}/`\n      }\n    }\n\n    return hmrBasePath + hmrSuffix\n  }\n\n  debug(`Loading webpack config for stage \"${stage}\"`)\n  function getOutput() {\n    switch (stage) {\n      case `develop`:\n        return {\n          path: directory,\n          filename: `[name].js`,\n          // Add /* filename */ comments to generated require()s in the output.\n          pathinfo: true,\n          // Point sourcemap entries to original disk location (format as URL on Windows)\n          publicPath: process.env.GATSBY_WEBPACK_PUBLICPATH || `/`,\n          devtoolModuleFilenameTemplate: info =>\n            path.resolve(info.absoluteResourcePath).replace(/\\\\/g, `/`),\n          // Avoid React cross-origin errors\n          // See https://reactjs.org/docs/cross-origin-errors.html\n          crossOriginLoading: `anonymous`,\n        }\n      case `build-html`:\n      case `develop-html`:\n        // A temp file required by static-site-generator-plugin. See plugins() below.\n        // Deleted by build-html.js, since it's not needed for production.\n        return {\n          path: directoryPath(`public`),\n          filename: `render-page.js`,\n          libraryTarget: `umd`,\n          library: `lib`,\n          umdNamedDefine: true,\n          globalObject: `this`,\n          publicPath: program.prefixPaths\n            ? `${store.getState().config.pathPrefix}/`\n            : `/`,\n        }\n      case `build-javascript`:\n        return {\n          filename: `[name]-[contenthash].js`,\n          chunkFilename: `[name]-[contenthash].js`,\n          path: directoryPath(`public`),\n          publicPath: program.prefixPaths\n            ? `${store.getState().config.pathPrefix}/`\n            : `/`,\n        }\n      default:\n        throw new Error(`The state requested ${stage} doesn't exist.`)\n    }\n  }\n\n  function getEntry() {\n    switch (stage) {\n      case `develop`:\n        return {\n          commons: [\n            `event-source-polyfill`,\n            `${require.resolve(\n              `webpack-hot-middleware/client`\n            )}?path=${getHmrPath()}`,\n            directoryPath(`.cache/app`),\n          ],\n        }\n      case `develop-html`:\n        return {\n          main: directoryPath(`.cache/develop-static-entry`),\n        }\n      case `build-html`:\n        return {\n          main: directoryPath(`.cache/static-entry`),\n        }\n      case `build-javascript`:\n        return {\n          app: directoryPath(`.cache/production-app`),\n        }\n      default:\n        throw new Error(`The state requested ${stage} doesn't exist.`)\n    }\n  }\n\n  function getPlugins() {\n    let configPlugins = [\n      plugins.moment(),\n\n      // Add a few global variables. Set NODE_ENV to production (enables\n      // optimizations for React) and what the link prefix is (__PATH_PREFIX__).\n      plugins.define({\n        ...processEnv(stage, `development`),\n        __PATH_PREFIX__: JSON.stringify(\n          program.prefixPaths ? store.getState().config.pathPrefix : ``\n        ),\n      }),\n    ]\n\n    switch (stage) {\n      case `develop`:\n        configPlugins = configPlugins.concat([\n          plugins.hotModuleReplacement(),\n          plugins.noEmitOnErrors(),\n\n          new FriendlyErrorsWebpackPlugin({\n            clearConsole: false,\n          }),\n        ])\n        break\n      case `build-javascript`: {\n        configPlugins = configPlugins.concat([\n          plugins.extractText(),\n          // Write out stats object mapping named dynamic imports (aka page\n          // components) to all their async chunks.\n          plugins.extractStats(),\n        ])\n        break\n      }\n    }\n\n    return configPlugins\n  }\n\n  function getDevtool() {\n    switch (stage) {\n      case `develop`:\n        return `cheap-module-source-map`\n      // use a normal `source-map` for the html phases since\n      // it gives better line and column numbers\n      case `develop-html`:\n      case `build-html`:\n      case `build-javascript`:\n        return `source-map`\n      default:\n        return false\n    }\n  }\n\n  function getMode() {\n    switch (stage) {\n      case `build-javascript`:\n        return `production`\n      case `develop`:\n      case `develop-html`:\n      case `build-html`:\n        return `development` // So we don't uglify the html bundle\n      default:\n        return `production`\n    }\n  }\n\n  function getModule(config) {\n    // Common config for every env.\n    // prettier-ignore\n    let configRules = [\n      rules.mjs(),\n      rules.js(),\n      rules.yaml(),\n      rules.fonts(),\n      rules.images(),\n      rules.media(),\n      rules.miscAssets(),\n    ]\n    switch (stage) {\n      case `develop`: {\n        // get schema to pass to eslint config and program for directory\n        const { schema, program } = store.getState()\n\n        // if no local eslint config, then add gatsby config\n        if (!hasLocalEslint(program.directory)) {\n          configRules = configRules.concat([rules.eslint(schema)])\n        }\n\n        configRules = configRules.concat([\n          {\n            oneOf: [rules.cssModules(), rules.css()],\n          },\n        ])\n\n        break\n      }\n      case `build-html`:\n      case `develop-html`:\n        // We don't deal with CSS at all when building the HTML.\n        // The 'null' loader is used to prevent 'module not found' errors.\n        // On the other hand CSS modules loaders are necessary.\n\n        // prettier-ignore\n        configRules = configRules.concat([\n          {\n            oneOf: [\n              rules.cssModules(),\n              {\n                ...rules.css(),\n                use: [loaders.null()],\n              },\n            ],\n          },\n        ])\n        break\n\n      case `build-javascript`:\n        // We don't deal with CSS at all when building JavaScript but we still\n        // need to process the CSS so offline-plugin knows about the various\n        // assets referenced in your CSS.\n        //\n        // It's also necessary to process CSS Modules so your JS knows the\n        // classNames to use.\n        configRules = configRules.concat([\n          {\n            oneOf: [rules.cssModules(), rules.css()],\n          },\n        ])\n\n        break\n    }\n\n    return { rules: configRules }\n  }\n\n  function getResolve() {\n    const { program } = store.getState()\n    return {\n      // Use the program's extension list (generated via the\n      // 'resolvableExtensions' API hook).\n      extensions: [...program.extensions],\n      alias: {\n        gatsby$: directoryPath(path.join(`.cache`, `gatsby-browser-entry.js`)),\n        // Using directories for module resolution is mandatory because\n        // relative path imports are used sometimes\n        // See https://stackoverflow.com/a/49455609/6420957 for more details\n        \"@babel/runtime\": path.dirname(\n          require.resolve(`@babel/runtime/package.json`)\n        ),\n        \"core-js\": path.dirname(require.resolve(`core-js/package.json`)),\n        \"react-hot-loader\": path.dirname(\n          require.resolve(`react-hot-loader/package.json`)\n        ),\n        \"react-lifecycles-compat\": directoryPath(\n          `.cache/react-lifecycles-compat.js`\n        ),\n        \"create-react-context\": directoryPath(`.cache/create-react-context.js`),\n      },\n      plugins: [\n        // Those two folders are special and contain gatsby-generated files\n        // whose dependencies should be resolved through the `gatsby` package\n        PnpWebpackPlugin.bind(directoryPath(`.cache`), module),\n        PnpWebpackPlugin.bind(directoryPath(`public`), module),\n        // Transparently resolve packages via PnP when needed; noop otherwise\n        PnpWebpackPlugin,\n      ],\n    }\n  }\n\n  function getResolveLoader() {\n    const root = [path.resolve(directory, `node_modules`)]\n\n    const userLoaderDirectoryPath = path.resolve(directory, `loaders`)\n\n    try {\n      if (fs.statSync(userLoaderDirectoryPath).isDirectory()) {\n        root.push(userLoaderDirectoryPath)\n      }\n    } catch (err) {\n      debug(`Error resolving user loaders directory`, err)\n    }\n\n    return {\n      modules: [...root, path.join(__dirname, `../loaders`), `node_modules`],\n      // Bare loaders should always be loaded via the user dependencies (loaders\n      // configured via third-party like gatsby use require.resolve)\n      plugins: [PnpWebpackPlugin.moduleLoader(`${directory}/`)],\n    }\n  }\n\n  const config = {\n    // Context is the base directory for resolving the entry option.\n    context: directory,\n    entry: getEntry(),\n    output: getOutput(),\n\n    module: getModule(),\n    plugins: getPlugins(),\n\n    // Certain \"isomorphic\" packages have different entry points for browser\n    // and server (see\n    // https://github.com/defunctzombie/package-browser-field-spec); setting\n    // the target tells webpack which file to include, ie. browser vs main.\n    target: stage === `build-html` || stage === `develop-html` ? `node` : `web`,\n\n    devtool: getDevtool(),\n    // Turn off performance hints as we (for now) don't want to show the normal\n    // webpack output anywhere.\n    performance: {\n      hints: false,\n    },\n    mode: getMode(),\n\n    resolveLoader: getResolveLoader(),\n    resolve: getResolve(),\n\n    node: {\n      __filename: true,\n    },\n  }\n\n  if (stage === `build-javascript`) {\n    config.optimization = {\n      runtimeChunk: {\n        name: `webpack-runtime`,\n      },\n      splitChunks: {\n        name: false,\n        cacheGroups: {\n          // Only create one CSS file to avoid\n          // problems with code-split CSS loading in different orders\n          // causing inconsistent/non-determanistic styling\n          // See https://github.com/gatsbyjs/gatsby/issues/11072\n          styles: {\n            name: `styles`,\n            // This should cover all our types of CSS.\n            test: /\\.(css|scss|sass|less|styl)$/,\n            chunks: `all`,\n            enforce: true,\n          },\n        },\n      },\n      minimizer: [\n        // TODO: maybe this option should be noMinimize?\n        !program.noUglify && plugins.minifyJs(),\n        plugins.minifyCss(),\n      ].filter(Boolean),\n    }\n  }\n\n  if (stage === `build-html` || stage === `develop-html`) {\n    const externalList = [\n      // match `lodash` and `lodash/foo`\n      // but not things like `lodash-es`\n      `lodash`,\n      /^lodash\\//,\n      `react`,\n      /^react-dom\\//,\n      `pify`,\n      `@reach/router`,\n      `@reach/router/lib/history`,\n      `common-tags`,\n      `path`,\n      `semver`,\n      `react-helmet`,\n      `minimatch`,\n      `fs`,\n      /^core-js\\//,\n      `es6-promise`,\n      `crypto`,\n      `zlib`,\n      `http`,\n      `https`,\n      `debug`,\n    ]\n\n    config.externals = [\n      function(context, request, callback) {\n        if (\n          externalList.some(item => {\n            if (typeof item === `string` && item === request) {\n              return true\n            } else if (item instanceof RegExp && item.test(request)) {\n              return true\n            }\n\n            return false\n          })\n        ) {\n          return callback(null, `umd ${request}`)\n        }\n        return callback()\n      },\n    ]\n  }\n\n  store.dispatch(actions.replaceWebpackConfig(config))\n  const getConfig = () => store.getState().webpack\n\n  await apiRunnerNode(`onCreateWebpackConfig`, {\n    getConfig,\n    stage,\n    rules,\n    loaders,\n    plugins,\n  })\n\n  return getConfig()\n}\n"],"file":"webpack.config.js"}
\ No newline at end of file
diff --git a/node_modules/gatsby/dist/utils/websocket-manager.js b/node_modules/gatsby/dist/utils/websocket-manager.js
index 2371f8a..863c7db 100644
--- a/node_modules/gatsby/dist/utils/websocket-manager.js
+++ b/node_modules/gatsby/dist/utils/websocket-manager.js
@@ -11,44 +11,23 @@ const _require = require(`../redux`),
 
 const fs = require(`fs`);
 
-/**
- * Get cached query result for given data path.
- * @param {string} dataFileName Cached query result filename.
- * @param {string} directory Root directory of current project.
- */
-const readCachedResults = (dataFileName, directory) => {
-  const filePath = path.join(directory, `public`, `static`, `d`, `${dataFileName}.json`);
-  return JSON.parse(fs.readFileSync(filePath, `utf-8`));
-};
 /**
  * Get cached page query result for given page path.
  * @param {string} pagePath Path to a page.
  * @param {string} directory Root directory of current project.
  */
-
-
 const getCachedPageData = (pagePath, directory) => {
-  const _store$getState = store.getState(),
-        jsonDataPaths = _store$getState.jsonDataPaths,
-        pages = _store$getState.pages;
-
-  const page = pages.get(pagePath);
+  const fixedPagePath = pagePath === `/` ? `index` : pagePath;
+  const filePath = path.join(directory, `public`, `page-data`, fixedPagePath, `page-data.json`);
 
-  if (!page) {
+  try {
+    const fileResult = fs.readFileSync(filePath, `utf-8`);
+    return Object.assign({}, JSON.parse(fileResult), {
+      id: pagePath
+    });
+  } catch (err) {
     return null;
   }
-
-  const dataPath = jsonDataPaths[page.jsonName];
-
-  if (typeof dataPath === `undefined`) {
-    console.log(`Error loading a result for the page query in "${pagePath}". Query was not run and no cached result was found.`);
-    return undefined;
-  }
-
-  return {
-    result: readCachedResults(dataPath, directory),
-    id: pagePath
-  };
 };
 /**
  * Get cached StaticQuery results for components that Gatsby didn't run query yet.
@@ -60,24 +39,24 @@ const getCachedPageData = (pagePath, directory) => {
 const getCachedStaticQueryResults = (resultsMap, directory) => {
   const cachedStaticQueryResults = new Map();
 
-  const _store$getState2 = store.getState(),
-        staticQueryComponents = _store$getState2.staticQueryComponents,
-        jsonDataPaths = _store$getState2.jsonDataPaths;
+  const _store$getState = store.getState(),
+        staticQueryComponents = _store$getState.staticQueryComponents;
 
   staticQueryComponents.forEach(staticQueryComponent => {
     // Don't read from file if results were already passed from query runner
     if (resultsMap.has(staticQueryComponent.hash)) return;
-    const dataPath = jsonDataPaths[staticQueryComponent.jsonName];
+    const filePath = path.join(directory, `public`, `static`, `d`, `${staticQueryComponent.hash}.json`);
+    const fileResult = fs.readFileSync(filePath, `utf-8`);
 
-    if (typeof dataPath === `undefined`) {
+    if (fileResult === `undefined`) {
       console.log(`Error loading a result for the StaticQuery in "${staticQueryComponent.componentPath}". Query was not run and no cached result was found.`);
       return;
     }
 
-    cachedStaticQueryResults.set(staticQueryComponent.hash, {
-      result: readCachedResults(dataPath, directory),
+    const jsonResult = JSON.parse(fileResult);
+    cachedStaticQueryResults.set(staticQueryComponent.hash, Object.assign({}, jsonResult, {
       id: staticQueryComponent.hash
-    });
+    }));
   });
   return cachedStaticQueryResults;
 };
diff --git a/node_modules/gatsby/dist/utils/websocket-manager.js.map b/node_modules/gatsby/dist/utils/websocket-manager.js.map
index 8f86eb2..88e19f4 100644
--- a/node_modules/gatsby/dist/utils/websocket-manager.js.map
+++ b/node_modules/gatsby/dist/utils/websocket-manager.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/utils/websocket-manager.js"],"names":["path","require","store","fs","readCachedResults","dataFileName","directory","filePath","join","JSON","parse","readFileSync","getCachedPageData","pagePath","getState","jsonDataPaths","pages","page","get","dataPath","jsonName","console","log","undefined","result","id","getCachedStaticQueryResults","resultsMap","cachedStaticQueryResults","Map","staticQueryComponents","forEach","staticQueryComponent","has","hash","componentPath","set","getRoomNameFromPath","WebsocketManager","constructor","isInitialised","activePaths","Set","pageResults","staticQueryResults","errors","init","bind","getSocket","emitPageData","emitStaticQueryData","emitError","server","programDir","websocket","on","s","activePath","send","type","payload","message","errorID","leaveRoom","leave","leftRoom","sockets","adapter","rooms","length","delete","getDataForPath","why","add","data","manager","module","exports"],"mappings":"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","sourcesContent":["// @flow\n\nconst path = require(`path`)\nconst { store } = require(`../redux`)\nconst fs = require(`fs`)\n\ntype QueryResult = {\n  id: string,\n  result: object,\n}\n\ntype QueryResultsMap = Map<string, QueryResult>\n\n/**\n * Get cached query result for given data path.\n * @param {string} dataFileName Cached query result filename.\n * @param {string} directory Root directory of current project.\n */\nconst readCachedResults = (dataFileName: string, directory: string): object => {\n  const filePath = path.join(\n    directory,\n    `public`,\n    `static`,\n    `d`,\n    `${dataFileName}.json`\n  )\n  return JSON.parse(fs.readFileSync(filePath, `utf-8`))\n}\n\n/**\n * Get cached page query result for given page path.\n * @param {string} pagePath Path to a page.\n * @param {string} directory Root directory of current project.\n */\nconst getCachedPageData = (\n  pagePath: string,\n  directory: string\n): QueryResult => {\n  const { jsonDataPaths, pages } = store.getState()\n  const page = pages.get(pagePath)\n  if (!page) {\n    return null\n  }\n  const dataPath = jsonDataPaths[page.jsonName]\n  if (typeof dataPath === `undefined`) {\n    console.log(\n      `Error loading a result for the page query in \"${pagePath}\". Query was not run and no cached result was found.`\n    )\n    return undefined\n  }\n\n  return {\n    result: readCachedResults(dataPath, directory),\n    id: pagePath,\n  }\n}\n\n/**\n * Get cached StaticQuery results for components that Gatsby didn't run query yet.\n * @param {QueryResultsMap} resultsMap Already stored results for queries that don't need to be read from files.\n * @param {string} directory Root directory of current project.\n */\nconst getCachedStaticQueryResults = (\n  resultsMap: QueryResultsMap,\n  directory: string\n): QueryResultsMap => {\n  const cachedStaticQueryResults = new Map()\n  const { staticQueryComponents, jsonDataPaths } = store.getState()\n  staticQueryComponents.forEach(staticQueryComponent => {\n    // Don't read from file if results were already passed from query runner\n    if (resultsMap.has(staticQueryComponent.hash)) return\n\n    const dataPath = jsonDataPaths[staticQueryComponent.jsonName]\n    if (typeof dataPath === `undefined`) {\n      console.log(\n        `Error loading a result for the StaticQuery in \"${\n          staticQueryComponent.componentPath\n        }\". Query was not run and no cached result was found.`\n      )\n      return\n    }\n    cachedStaticQueryResults.set(staticQueryComponent.hash, {\n      result: readCachedResults(dataPath, directory),\n      id: staticQueryComponent.hash,\n    })\n  })\n  return cachedStaticQueryResults\n}\n\nconst getRoomNameFromPath = (path: string): string => `path-${path}`\n\nclass WebsocketManager {\n  pageResults: QueryResultsMap\n  staticQueryResults: QueryResultsMap\n  errors: Map<string, QueryResult>\n  isInitialised: boolean\n  activePaths: Set<string>\n  programDir: string\n\n  constructor() {\n    this.isInitialised = false\n    this.activePaths = new Set()\n    this.pageResults = new Map()\n    this.staticQueryResults = new Map()\n    this.errors = new Map()\n    // this.websocket\n    // this.programDir\n\n    this.init = this.init.bind(this)\n    this.getSocket = this.getSocket.bind(this)\n    this.emitPageData = this.emitPageData.bind(this)\n    this.emitStaticQueryData = this.emitStaticQueryData.bind(this)\n    this.emitError = this.emitError.bind(this)\n  }\n\n  init({ server, directory }) {\n    this.programDir = directory\n\n    const cachedStaticQueryResults = getCachedStaticQueryResults(\n      this.staticQueryResults,\n      this.programDir\n    )\n    this.staticQueryResults = new Map([\n      ...this.staticQueryResults,\n      ...cachedStaticQueryResults,\n    ])\n\n    this.websocket = require(`socket.io`)(server)\n\n    this.websocket.on(`connection`, s => {\n      let activePath = null\n      // Send already existing static query results\n      this.staticQueryResults.forEach(result => {\n        this.websocket.send({\n          type: `staticQueryResult`,\n          payload: result,\n        })\n      })\n      this.errors.forEach((message, errorID) => {\n        this.websocket.send({\n          type: `overlayError`,\n          payload: {\n            id: errorID,\n            message,\n          },\n        })\n      })\n\n      const leaveRoom = path => {\n        s.leave(getRoomNameFromPath(path))\n        const leftRoom = this.websocket.sockets.adapter.rooms[\n          getRoomNameFromPath(path)\n        ]\n        if (!leftRoom || leftRoom.length === 0) {\n          this.activePaths.delete(path)\n        }\n      }\n\n      const getDataForPath = path => {\n        if (!this.pageResults.has(path)) {\n          const result = getCachedPageData(path, this.programDir)\n          if (result) {\n            this.pageResults.set(path, result)\n          } else {\n            console.log(`Page not found`, path)\n            return\n          }\n        }\n\n        this.websocket.send({\n          type: `pageQueryResult`,\n          why: `getDataForPath`,\n          payload: this.pageResults.get(path),\n        })\n      }\n\n      s.on(`getDataForPath`, getDataForPath)\n\n      s.on(`registerPath`, path => {\n        s.join(getRoomNameFromPath(path))\n        activePath = path\n        this.activePaths.add(path)\n      })\n\n      s.on(`disconnect`, s => {\n        leaveRoom(activePath)\n      })\n\n      s.on(`unregisterPath`, path => {\n        leaveRoom(path)\n      })\n    })\n\n    this.isInitialised = true\n  }\n\n  getSocket() {\n    return this.isInitialised && this.websocket\n  }\n\n  emitStaticQueryData(data: QueryResult) {\n    this.staticQueryResults.set(data.id, data)\n    if (this.isInitialised) {\n      this.websocket.send({ type: `staticQueryResult`, payload: data })\n    }\n  }\n\n  emitPageData(data: QueryResult) {\n    this.pageResults.set(data.id, data)\n    if (this.isInitialised) {\n      this.websocket.send({ type: `pageQueryResult`, payload: data })\n    }\n  }\n  emitError(id: string, message?: string) {\n    if (message) {\n      this.errors.set(id, message)\n    } else {\n      this.errors.delete(id)\n    }\n\n    if (this.isInitialised) {\n      this.websocket.send({ type: `overlayError`, payload: { id, message } })\n    }\n  }\n}\n\nconst manager = new WebsocketManager()\n\nmodule.exports = manager\n"],"file":"websocket-manager.js"}
\ No newline at end of file
+{"version":3,"sources":["../../src/utils/websocket-manager.js"],"names":["path","require","store","fs","getCachedPageData","pagePath","directory","fixedPagePath","filePath","join","fileResult","readFileSync","JSON","parse","id","err","getCachedStaticQueryResults","resultsMap","cachedStaticQueryResults","Map","getState","staticQueryComponents","forEach","staticQueryComponent","has","hash","console","log","componentPath","jsonResult","set","getRoomNameFromPath","WebsocketManager","constructor","isInitialised","activePaths","Set","pageResults","staticQueryResults","errors","init","bind","getSocket","emitPageData","emitStaticQueryData","emitError","server","programDir","websocket","on","s","activePath","result","send","type","payload","message","errorID","leaveRoom","leave","leftRoom","sockets","adapter","rooms","length","delete","getDataForPath","why","get","add","data","manager","module","exports"],"mappings":"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","sourcesContent":["// @flow\n\nconst path = require(`path`)\nconst { store } = require(`../redux`)\nconst fs = require(`fs`)\n\ntype QueryResult = {\n  id: string,\n  result: object,\n}\n\ntype QueryResultsMap = Map<string, QueryResult>\n\n/**\n * Get cached page query result for given page path.\n * @param {string} pagePath Path to a page.\n * @param {string} directory Root directory of current project.\n */\nconst getCachedPageData = (\n  pagePath: string,\n  directory: string\n): QueryResult => {\n  const fixedPagePath = pagePath === `/` ? `index` : pagePath\n  const filePath = path.join(\n    directory,\n    `public`,\n    `page-data`,\n    fixedPagePath,\n    `page-data.json`\n  )\n  try {\n    const fileResult = fs.readFileSync(filePath, `utf-8`)\n    return {\n      ...JSON.parse(fileResult),\n      id: pagePath,\n    }\n  } catch (err) {\n    return null\n  }\n}\n\n/**\n * Get cached StaticQuery results for components that Gatsby didn't run query yet.\n * @param {QueryResultsMap} resultsMap Already stored results for queries that don't need to be read from files.\n * @param {string} directory Root directory of current project.\n */\nconst getCachedStaticQueryResults = (\n  resultsMap: QueryResultsMap,\n  directory: string\n): QueryResultsMap => {\n  const cachedStaticQueryResults = new Map()\n  const { staticQueryComponents } = store.getState()\n  staticQueryComponents.forEach(staticQueryComponent => {\n    // Don't read from file if results were already passed from query runner\n    if (resultsMap.has(staticQueryComponent.hash)) return\n\n    const filePath = path.join(\n      directory,\n      `public`,\n      `static`,\n      `d`,\n      `${staticQueryComponent.hash}.json`\n    )\n    const fileResult = fs.readFileSync(filePath, `utf-8`)\n    if (fileResult === `undefined`) {\n      console.log(\n        `Error loading a result for the StaticQuery in \"${\n          staticQueryComponent.componentPath\n        }\". Query was not run and no cached result was found.`\n      )\n      return\n    }\n    const jsonResult = JSON.parse(fileResult)\n    cachedStaticQueryResults.set(staticQueryComponent.hash, {\n      ...jsonResult,\n      id: staticQueryComponent.hash,\n    })\n  })\n  return cachedStaticQueryResults\n}\n\nconst getRoomNameFromPath = (path: string): string => `path-${path}`\n\nclass WebsocketManager {\n  pageResults: QueryResultsMap\n  staticQueryResults: QueryResultsMap\n  errors: Map<string, QueryResult>\n  isInitialised: boolean\n  activePaths: Set<string>\n  programDir: string\n\n  constructor() {\n    this.isInitialised = false\n    this.activePaths = new Set()\n    this.pageResults = new Map()\n    this.staticQueryResults = new Map()\n    this.errors = new Map()\n    // this.websocket\n    // this.programDir\n\n    this.init = this.init.bind(this)\n    this.getSocket = this.getSocket.bind(this)\n    this.emitPageData = this.emitPageData.bind(this)\n    this.emitStaticQueryData = this.emitStaticQueryData.bind(this)\n    this.emitError = this.emitError.bind(this)\n  }\n\n  init({ server, directory }) {\n    this.programDir = directory\n\n    const cachedStaticQueryResults = getCachedStaticQueryResults(\n      this.staticQueryResults,\n      this.programDir\n    )\n    this.staticQueryResults = new Map([\n      ...this.staticQueryResults,\n      ...cachedStaticQueryResults,\n    ])\n\n    this.websocket = require(`socket.io`)(server)\n\n    this.websocket.on(`connection`, s => {\n      let activePath = null\n      // Send already existing static query results\n      this.staticQueryResults.forEach(result => {\n        this.websocket.send({\n          type: `staticQueryResult`,\n          payload: result,\n        })\n      })\n      this.errors.forEach((message, errorID) => {\n        this.websocket.send({\n          type: `overlayError`,\n          payload: {\n            id: errorID,\n            message,\n          },\n        })\n      })\n\n      const leaveRoom = path => {\n        s.leave(getRoomNameFromPath(path))\n        const leftRoom = this.websocket.sockets.adapter.rooms[\n          getRoomNameFromPath(path)\n        ]\n        if (!leftRoom || leftRoom.length === 0) {\n          this.activePaths.delete(path)\n        }\n      }\n\n      const getDataForPath = path => {\n        if (!this.pageResults.has(path)) {\n          const result = getCachedPageData(path, this.programDir)\n          if (result) {\n            this.pageResults.set(path, result)\n          } else {\n            console.log(`Page not found`, path)\n            return\n          }\n        }\n\n        this.websocket.send({\n          type: `pageQueryResult`,\n          why: `getDataForPath`,\n          payload: this.pageResults.get(path),\n        })\n      }\n\n      s.on(`getDataForPath`, getDataForPath)\n\n      s.on(`registerPath`, path => {\n        s.join(getRoomNameFromPath(path))\n        activePath = path\n        this.activePaths.add(path)\n      })\n\n      s.on(`disconnect`, s => {\n        leaveRoom(activePath)\n      })\n\n      s.on(`unregisterPath`, path => {\n        leaveRoom(path)\n      })\n    })\n\n    this.isInitialised = true\n  }\n\n  getSocket() {\n    return this.isInitialised && this.websocket\n  }\n\n  emitStaticQueryData(data: QueryResult) {\n    this.staticQueryResults.set(data.id, data)\n    if (this.isInitialised) {\n      this.websocket.send({ type: `staticQueryResult`, payload: data })\n    }\n  }\n\n  emitPageData(data: QueryResult) {\n    this.pageResults.set(data.id, data)\n    if (this.isInitialised) {\n      this.websocket.send({ type: `pageQueryResult`, payload: data })\n    }\n  }\n  emitError(id: string, message?: string) {\n    if (message) {\n      this.errors.set(id, message)\n    } else {\n      this.errors.delete(id)\n    }\n\n    if (this.isInitialised) {\n      this.websocket.send({ type: `overlayError`, payload: { id, message } })\n    }\n  }\n}\n\nconst manager = new WebsocketManager()\n\nmodule.exports = manager\n"],"file":"websocket-manager.js"}
\ No newline at end of file
diff --git a/node_modules/gatsby/index.d.ts b/node_modules/gatsby/index.d.ts
index 9d7d8f4..2a94464 100644
--- a/node_modules/gatsby/index.d.ts
+++ b/node_modules/gatsby/index.d.ts
@@ -1,5 +1,4 @@
 import * as React from "react"
-import { EventEmitter } from "events"
 import { WindowLocation } from "@reach/router"
 
 export {
@@ -10,33 +9,8 @@ export {
   push,
   replace,
   withPrefix,
-  withAssetPrefix,
 } from "gatsby-link"
 
-export interface StaticQueryProps {
-  query: any
-  render?: RenderCallback
-  children?: RenderCallback
-}
-
-export const useStaticQuery: <TData = any>(query: any) => TData
-
-export const parsePath: (path: string) => WindowLocation
-
-export interface PageRendererProps {
-  location: WindowLocation
-}
-
-/**
- * PageRenderer's constructor [loads the page resources](https://www.gatsbyjs.org/docs/production-app/#load-page-resources) for the path.
- *
- * On first load though, these will have already been requested from the server by `<link rel="preload" ... />` in the page's original HTML (see [Link Preloads](https://www.gatsbyjs.org/docs/how-code-splitting-works/#construct-link-and-script-tags-for-current-page) in HTML Generation Docs).
- * The loaded page resources includes the imported component, with which we create the actual page component using [React.createElement()](https://reactjs.org/docs/react-api.html). This element is returned to our RouteHandler which hands it off to Reach Router for rendering.
- *
- * @see https://www.gatsbyjs.org/docs/production-app/#page-rendering
- */
-export class PageRenderer extends React.Component<PageRendererProps> {}
-
 type RenderCallback = (data: any) => React.ReactNode
 
 export interface StaticQueryProps {
@@ -45,1097 +19,16 @@ export interface StaticQueryProps {
   children?: RenderCallback
 }
 
-/**
- * StaticQuery can do most of the things that page query can, including fragments. The main differences are:
- *
- * - page queries can accept variables (via `pageContext`) but can only be added to _page_ components
- * - StaticQuery does not accept variables (hence the name "static"), but can be used in _any_ component, including pages
- * - StaticQuery does not work with raw React.createElement calls; please use JSX, e.g. `<StaticQuery />`
- *
- * @see https://www.gatsbyjs.org/docs/static-query/
- */
-
 export class StaticQuery extends React.Component<StaticQueryProps> {}
 
-/**
- * graphql is a tag function. Behind the scenes Gatsby handles these tags in a particular way
- *
- * During the Gatsby build process, GraphQL queries are pulled out of the original source for parsing.
- *
- * @see https://www.gatsbyjs.org/docs/page-query#how-does-the-graphql-tag-work
- */
-export const graphql: (query: TemplateStringsArray) => void
-
-/**
- * Gatsby configuration API.
- *
- * @see https://www.gatsbyjs.org/docs/gatsby-config/
- */
-export interface GatsbyConfig {
-  /** When you want to reuse common pieces of data across the site (for example, your site title), you can store that here. */
-  siteMetadata?: Record<string, unknown>
-  /** Plugins are Node.js packages that implement Gatsby APIs. The config file accepts an array of plugins. Some plugins may need only to be listed by name, while others may take options. */
-  plugins?: Array<
-    | string
-    | {
-        resolve: string
-        options: Record<string, unknown>
-      }
-  >
-  /** It’s common for sites to be hosted somewhere other than the root of their domain. Say we have a Gatsby site at `example.com/blog/`. In this case, we would need a prefix (`/blog`) added to all paths on the site. */
-  pathPrefix?: string
-  /** Gatsby uses the ES6 Promise API. Because some browsers don't support this, Gatsby includes a Promise polyfill by default. If you'd like to provide your own Promise polyfill, you can set `polyfill` to false.*/
-  polyfill?: boolean
-  mapping?: Record<string, string>
-  /**
-   * Setting the proxy config option will tell the develop server to proxy any unknown requests to your specified server.
-   * @see https://www.gatsbyjs.org/docs/api-proxy/
-   * */
-  proxy?: {
-    prefix: string
-    url: string
-  }
-  /** Sometimes you need more granular/flexible access to the development server. Gatsby exposes the Express.js development server to your site’s gatsby-config.js where you can add Express middleware as needed. */
-  developMiddleware?(app: any): void
-}
-
-/**
- * Gatsby API for Node.js.
- *
- * @see https://www.gatsbyjs.org/docs/node-apis/
- */
-export interface GatsbyNode {
-  /**
-   * Tell plugins to add pages. This extension point is called only after the initial
-   * sourcing and transformation of nodes plus creation of the GraphQL schema are
-   * complete so you can query your data in order to create pages.
-   *
-   * @see https://www.gatsbyjs.org/docs/node-apis/#createPages
-   */
-  createPages?(
-    args: CreatePagesArgs & { traceId: "initial-createPages" },
-    options?: PluginOptions,
-    callback?: PluginCallback
-  ): void
-
-  /**
-   * Like `createPages` but for plugins who want to manage creating and removing
-   * pages themselves in response to changes in data *not* managed by Gatsby.
-   * Plugins implementing `createPages` will get called regularly to recompute
-   * page information as Gatsby's data changes but those implementing
-   * `createPagesStatefully` will not.
-   *
-   * An example of a plugin that uses this extension point is the plugin
-   * [gatsby-plugin-page-creator](https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-page-creator)
-   * which monitors the `src/pages` directory for the adding and removal of JS
-   * pages. As its source of truth, files in the pages directory, is not known by
-   * Gatsby, it needs to keep its own state about its world to know when to
-   * add and remove pages.
-   */
-  createPagesStatefully?(
-    args: CreatePagesArgs & { traceId: "initial-createPagesStatefully" },
-    options?: PluginOptions,
-    callback?: PluginCallback
-  ): void
-
-  /**
-   * Let plugins extend/mutate the site's Babel configuration.
-   * This API will change before 2.0 as it needs still to be converted to use
-   * Redux actions.
-   */
-  onCreateBabelConfig?(
-    args: CreateBabelConfigArgs,
-    options?: PluginOptions,
-    callback?: PluginCallback
-  ): void
-
-  /**
-   * Run when gatsby develop server is started, its useful to add proxy and middleware
-   * to the dev server app
-   * @param {object} $0
-   * @param {Express} $0.app The [Express app](https://expressjs.com/en/4x/api.html#app) used to run the dev server
-   *
-   * @example
-   *
-   * exports.onCreateDevServer = ({ app }) => {
-   *   app.get('/hello', function (req, res) {
-   *     res.send('hello world')
-   *   })
-   * }
-   */
-  onCreateDevServer?(
-    args: CreateDevServerArgs,
-    options?: PluginOptions,
-    callback?: PluginCallback
-  ): void
-
-  /**
-   * Called when a new node is created. Plugins wishing to extend or
-   * transform nodes created by other plugins should implement this API.
-   *
-   * See also the documentation for `createNode`
-   * and [`createNodeField`](https://www.gatsbyjs.org/docs/actions/#createNodeField)
-   * @example
-   * exports.onCreateNode = ({ node, actions }) => {
-   *   const { createNode, createNodeField } = actions
-   *   // Transform the new node here and create a new node or
-   *   // create a new node field.
-   * }
-   */
-  onCreateNode?(
-    args: CreateNodeArgs,
-    options?: PluginOptions,
-    callback?: PluginCallback
-  ): void
-
-  /**
-   * Called when a new page is created. This extension API is useful
-   * for programmatically manipulating pages created by other plugins e.g.
-   * if you want paths without trailing slashes.
-   *
-   * See the guide [Creating and Modifying Pages](https://www.gatsbyjs.org/docs/creating-and-modifying-pages/)
-   * for more on this API.
-   */
-  onCreatePage?(
-    args: CreatePageArgs,
-    options?: PluginOptions,
-    callback?: PluginCallback
-  ): void
-
-  /**
-   * Let plugins extend/mutate the site's webpack configuration.
-   * @see https://www.gatsbyjs.org/docs/node-apis/#onCreateWebpackConfig
-   */
-  onCreateWebpackConfig?(
-    args: CreateWebpackConfigArgs,
-    options?: PluginOptions,
-    callback?: PluginCallback
-  ): void
-
-  /** Called at the end of the bootstrap process after all other extension APIs have been called. */
-  onPostBootstrap?(
-    args: ParentSpanPluginArgs,
-    options?: PluginOptions,
-    callback?: PluginCallback
-  ): void
-
-  /** The last extension point called after all other parts of the build process are complete. */
-  onPostBuild?(
-    args: BuildArgs,
-    options?: PluginOptions,
-    callback?: PluginCallback
-  ): void
-
-  /** Called at the end of the bootstrap process after all other extension APIs have been called. */
-  onPreBootstrap?(
-    args: ParentSpanPluginArgs,
-    options?: PluginOptions,
-    callback?: PluginCallback
-  ): void
-
-  /** The first extension point called during the build process. Called after the bootstrap has completed but before the build steps start. */
-  onPreBuild?(
-    args: BuildArgs,
-    options?: PluginOptions,
-    callback?: PluginCallback
-  ): void
-
-  /** Called once Gatsby has initialized itself and is ready to bootstrap your site. */
-  onPreExtractQueries?(
-    args: ParentSpanPluginArgs,
-    options?: PluginOptions,
-    callback?: PluginCallback
-  ): void
-
-  /** The first API called during Gatsby execution, runs as soon as plugins are loaded, before cache initialization and bootstrap preparation. */
-  onPreInit?(
-    args: ParentSpanPluginArgs,
-    options?: PluginOptions,
-    callback?: PluginCallback
-  ): void
-
-  /**
-   * Ask compile-to-js plugins to process source to JavaScript so the query
-   * runner can extract out GraphQL queries for running.
-   */
-  preprocessSource?(
-    args: PreprocessSourceArgs,
-    options?: PluginOptions,
-    callback?: PluginCallback
-  ): void
-
-  /**
-   * Lets plugins implementing support for other compile-to-js add to the list of "resolvable" file extensions. Gatsby supports `.js` and `.jsx` by default.
-   */
-  resolvableExtensions?(
-    args: ResolvableExtensionsArgs,
-    options: PluginOptions,
-    callback: PluginCallback
-  ): any[] | Promise<any[]>
-
-  /**
-   * Called during the creation of the GraphQL schema. Allows plugins
-   * to add new fields to the types created from data nodes. It will be called
-   * separately for each type.
-   *
-   * This function should return an object in the shape of
-   * [GraphQLFieldConfigMap](https://graphql.org/graphql-js/type/#graphqlobjecttype)
-   * which will be appended to fields inferred by Gatsby from data nodes.
-   *
-   * *Note:* Import GraphQL types from `gatsby/graphql` and don't add the `graphql`
-   * package to your project/plugin dependencies to avoid Schema must
-   * contain unique named types but contains multiple types named errors.
-   * `gatsby/graphql` exports all builtin GraphQL types as well as the `graphQLJSON`
-   * type.
-   *
-   * Many transformer plugins use this to add fields that take arguments.
-   *
-   * @see https://www.gatsbyjs.org/docs/node-apis/#setFieldsOnGraphQLNodeType
-   */
-  setFieldsOnGraphQLNodeType?(
-    args: SetFieldsOnGraphQLNodeTypeArgs,
-    options: PluginOptions
-  ): any
-  setFieldsOnGraphQLNodeType?(
-    args: SetFieldsOnGraphQLNodeTypeArgs,
-    options: PluginOptions
-  ): Promise<any>
-  setFieldsOnGraphQLNodeType?(
-    args: SetFieldsOnGraphQLNodeTypeArgs,
-    options: PluginOptions,
-    callback: PluginCallback
-  ): void
-
-  /**
-   * Extension point to tell plugins to source nodes. This API is called during
-   * the Gatsby bootstrap sequence. Source plugins use this hook to create nodes.
-   * This API is called exactly once per plugin (and once for your site's
-   * `gatsby-config.js` file). If you define this hook in `gatsby-node.js` it
-   * will be called exactly once after all of your source plugins have finished
-   * creating nodes.
-   *
-   * @see https://www.gatsbyjs.org/docs/node-apis/#sourceNodes
-   */
-  sourceNodes?(args: SourceNodesArgs, options: PluginOptions): any
-  sourceNodes?(args: SourceNodesArgs, options: PluginOptions): Promise<any>
-  sourceNodes?(
-    args: SourceNodesArgs,
-    options: PluginOptions,
-    callback: PluginCallback
-  ): void
-
-  /**
-   * Add custom field resolvers to the GraphQL schema.
-   *
-   * Allows adding new fields to types by providing field configs, or adding resolver
-   * functions to existing fields.
-   *
-   * Things to note:
-   * * Overriding field types is disallowed, instead use the `createTypes`
-   *   action. In case of types added from third-party schemas, where this is not
-   *   possible, overriding field types is allowed.
-   * * New fields will not be available on `filter` and `sort` input types. Extend
-   *   types defined with `createTypes` if you need this.
-   * * In field configs, types can be referenced as strings.
-   * * When extending a field with an existing field resolver, the original
-   *   resolver function is available from `info.originalResolver`.
-   * * The `createResolvers` API is called as the last step in schema generation.
-   *   Thus, an intermediate schema is made available on the `schema` property.
-   *   In resolver functions themselves, it is recommended to access the final
-   *   built schema from `info.schema`.
-   * * Gatsby's data layer, including all internal query capabilities, is
-   *   exposed on [`context.nodeModel`](/docs/node-model/). The node store can be
-   *   queried directly with `getAllNodes`, `getNodeById` and `getNodesByIds`,
-   *   while more advanced queries can be composed with `runQuery`. Note that
-   *   `runQuery` will call field resolvers before querying, so e.g. foreign-key
-   *   fields will be expanded to full nodes. The other methods on `nodeModel`
-   *   don't do this.
-   * * It is possible to add fields to the root `Query` type.
-   * * When using the first resolver argument (`source` in the example below,
-   *   often also called `parent` or `root`), take care of the fact that field
-   *   resolvers can be called more than once in a query, e.g. when the field is
-   *   present both in the input filter and in the selection set. This means that
-   *   foreign-key fields on `source` can be either resolved or not-resolved.
-   *
-   * For fuller examples, see [`using-type-definitions`](https://github.com/gatsbyjs/gatsby/tree/master/examples/using-type-definitions).
-   *
-   * @see https://www.gatsbyjs.org/docs/node-apis/#createResolvers
-   */
-  createResolvers?(args: CreateResolversArgs, options: PluginOptions): any
-  createResolvers?(
-    args: CreateResolversArgs,
-    options: PluginOptions
-  ): Promise<any>
-  createResolvers?(
-    args: CreateResolversArgs,
-    options: PluginOptions,
-    callback: PluginCallback
-  ): void
-}
-
-/**
- * Gatsby browser API.
- *
- * @see https://www.gatsbyjs.org/docs/browser-apis/
- */
-export interface GatsbyBrowser {
-  disableCorePrefetching?(args: BrowserPluginArgs, options: PluginOptions): any
-  onClientEntry?(args: BrowserPluginArgs, options: PluginOptions): any
-  onInitialClientRender?(args: BrowserPluginArgs, options: PluginOptions): any
-  onPostPrefetchPathname?(
-    args: PrefetchPathnameArgs,
-    options: PluginOptions
-  ): any
-  onPreRouteUpdate?(args: RouteUpdateArgs, options: PluginOptions): any
-  onPrefetchPathname?(args: PrefetchPathnameArgs, options: PluginOptions): any
-  onRouteUpdate?(args: RouteUpdateArgs, options: PluginOptions): any
-  onRouteUpdateDelayed?(
-    args: RouteUpdateDelayedArgs,
-    options: PluginOptions
-  ): any
-  onServiceWorkerActive?(args: ServiceWorkerArgs, options: PluginOptions): any
-  onServiceWorkerInstalled?(
-    args: ServiceWorkerArgs,
-    options: PluginOptions
-  ): any
-  onServiceWorkerRedundant?(
-    args: ServiceWorkerArgs,
-    options: PluginOptions
-  ): any
-  onServiceWorkerUpdateFound?(
-    args: ServiceWorkerArgs,
-    options: PluginOptions
-  ): any
-  registerServiceWorker?(args: BrowserPluginArgs, options: PluginOptions): any
-  replaceComponentRenderer?(
-    args: ReplaceComponentRendererArgs,
-    options: PluginOptions
-  ): any
-  replaceHydrateFunction?(args: BrowserPluginArgs, options: PluginOptions): any
-  shouldUpdateScroll?(args: ShouldUpdateScrollArgs, options: PluginOptions): any
-  wrapPageElement?(
-    args: WrapPageElementBrowserArgs,
-    options: PluginOptions
-  ): any
-  wrapRootElement?(
-    args: WrapRootElementBrowserArgs,
-    options: PluginOptions
-  ): any
-}
-
-/**
- * Gatsby server-side rendering API.
- *
- * @see https://www.gatsbyjs.org/docs/ssr-apis/
- */
-export interface GatsbySSR {
-  /**
-   * Called after every page Gatsby server renders while building HTML so you can
-   * replace head components to be rendered in your `html.js`. This is useful if
-   * you need to reorder scripts or styles added by other plugins.
-   * @example
-   * // Move Typography.js styles to the top of the head section so they're loaded first.
-   * exports.onPreRenderHTML = ({ getHeadComponents, replaceHeadComponents }) => {
-   *   const headComponents = getHeadComponents()
-   *   headComponents.sort((x, y) => {
-   *     if (x.key === 'TypographyStyle') {
-   *       return -1
-   *     } else if (y.key === 'TypographyStyle') {
-   *       return 1
-   *     }
-   *     return 0
-   *   })
-   *   replaceHeadComponents(headComponents)
-   * }
-   */
-  onPreRenderHTML?(args: PreRenderHTMLArgs, options: PluginOptions): any
-  onPreRenderHTML?(
-    args: PreRenderHTMLArgs,
-    options: PluginOptions
-  ): Promise<any>
-  onPreRenderHTML?(
-    args: PreRenderHTMLArgs,
-    options: PluginOptions,
-    callback: PluginCallback
-  ): void
-
-  /**
-   * Called after every page Gatsby server renders while building HTML so you can
-   * set head and body components to be rendered in your `html.js`.
-   *
-   * Gatsby does a two-pass render for HTML. It loops through your pages first
-   * rendering only the body and then takes the result body HTML string and
-   * passes it as the `body` prop to your `html.js` to complete the render.
-   *
-   * It's often handy to be able to send custom components to your `html.js`.
-   * For example, it's a very common pattern for React.js libraries that
-   * support server rendering to pull out data generated during the render to
-   * add to your HTML.
-   *
-   * Using this API over `replaceRenderer` is preferable as
-   * multiple plugins can implement this API where only one plugin can take
-   * over server rendering. However, if your plugin requires taking over server
-   * rendering then that's the one to use
-   * @example
-   * const { Helmet } = require("react-helmet")
-   *
-   * exports.onRenderBody = (
-   *   { setHeadComponents, setHtmlAttributes, setBodyAttributes },
-   *   pluginOptions
-   * ) => {
-   *   const helmet = Helmet.renderStatic()
-   *   setHtmlAttributes(helmet.htmlAttributes.toComponent())
-   *   setBodyAttributes(helmet.bodyAttributes.toComponent())
-   *   setHeadComponents([
-   *     helmet.title.toComponent(),
-   *     helmet.link.toComponent(),
-   *     helmet.meta.toComponent(),
-   *     helmet.noscript.toComponent(),
-   *     helmet.script.toComponent(),
-   *     helmet.style.toComponent(),
-   *   ])
-   * }
-   */
-  onRenderBody?(args: RenderBodyArgs, options: PluginOptions): any
-  onRenderBody?(args: RenderBodyArgs, options: PluginOptions): Promise<any>
-  onRenderBody?(
-    args: RenderBodyArgs,
-    options: PluginOptions,
-    callback: PluginCallback
-  ): void
-
-  /**
-   * Replace the default server renderer. This is useful for integration with
-   * Redux, css-in-js libraries, etc. that need custom setups for server
-   * rendering.
-   * @example
-   * // From gatsby-plugin-glamor
-   * const { renderToString } = require("react-dom/server")
-   * const inline = require("glamor-inline")
-   *
-   * exports.replaceRenderer = ({ bodyComponent, replaceBodyHTMLString }) => {
-   *   const bodyHTML = renderToString(bodyComponent)
-   *   const inlinedHTML = inline(bodyHTML)
-   *
-   *   replaceBodyHTMLString(inlinedHTML)
-   * }
-   */
-  replaceRenderer?(args: ReplaceRendererArgs, options: PluginOptions): any
-  replaceRenderer?(
-    args: ReplaceRendererArgs,
-    options: PluginOptions
-  ): Promise<any>
-  replaceRenderer?(
-    args: ReplaceRendererArgs,
-    options: PluginOptions,
-    callback: PluginCallback
-  ): void
-
-  /**
-   * Allow a plugin to wrap the page element.
-   *
-   * This is useful for setting wrapper component around pages that won't get
-   * unmounted on page change. For setting Provider components use `wrapRootElement`.
-   *
-   * _Note:_ [There is equivalent hook in Browser API](https://www.gatsbyjs.org/docs/browser-apis/#wrapPageElement)
-   * @example
-   * const React = require("react")
-   * const Layout = require("./src/components/layout")
-   *
-   * exports.wrapPageElement = ({ element, props }) => {
-   *   // props provide same data to Layout as Page element will get
-   *   // including location, data, etc - you don't need to pass it
-   *   return <Layout {...props}>{element}</Layout>
-   * }
-   */
-  wrapPageElement?(args: WrapPageElementNodeArgs, options: PluginOptions): any
-  wrapPageElement?(
-    args: WrapPageElementNodeArgs,
-    options: PluginOptions
-  ): Promise<any>
-  wrapPageElement?(
-    args: WrapPageElementNodeArgs,
-    options: PluginOptions,
-    callback: PluginCallback
-  ): void
-  /**
-   * Allow a plugin to wrap the root element.
-   *
-   * This is useful to setup any Providers component that will wrap your application.
-   * For setting persistent UI elements around pages use `wrapPageElement`.
-   *
-   * _Note:_ [There is equivalent hook in Browser API](https://www.gatsbyjs.org/docs/browser-apis/#wrapRootElement)
-   * @example
-   * const React = require("react")
-   * const { Provider } = require("react-redux")
-   *
-   * const createStore = require("./src/state/createStore")
-   * const store = createStore()
-   *
-   * exports.wrapRootElement = ({ element }) => {
-   *   return (
-   *     <Provider store={store}>
-   *       {element}
-   *     </Provider>
-   *   )
-   * }
-   */
-  wrapRootElement?(args: WrapRootElementNodeArgs, options: PluginOptions): any
-  wrapRootElement?(
-    args: WrapRootElementNodeArgs,
-    options: PluginOptions
-  ): Promise<any>
-  wrapRootElement?(
-    args: WrapRootElementNodeArgs,
-    options: PluginOptions,
-    callback: PluginCallback
-  ): void
-}
-
-export interface PluginOptions {
-  plugins: unknown[]
-  [key: string]: unknown
-}
-
-export type PluginCallback = (err: Error | null, result?: any) => void
-
-export interface CreatePagesArgs extends ParentSpanPluginArgs {
-  graphql: Function
-  traceId: string
-  waitForCascadingActions: boolean
-}
-
-type GatsbyStages =
-  | "develop"
-  | "develop-html"
-  | "build-javascript"
-  | "build-html"
-
-export interface CreateBabelConfigArgs extends ParentSpanPluginArgs {
-  stage: GatsbyStages
-}
-
-export interface CreateDevServerArgs extends ParentSpanPluginArgs {
-  app: any
-}
-
-export interface CreateNodeArgs extends ParentSpanPluginArgs {
-  node: Node
-  traceId: string
-  traceTags: {
-    nodeId: string
-    nodeType: string
-  }
-}
-
-export interface CreatePageArgs extends ParentSpanPluginArgs {
-  page: Node
-  traceId: string
-}
-
-export interface CreateWebpackConfigArgs extends ParentSpanPluginArgs {
-  getConfig: Function
-  stage: GatsbyStages
-  rules: WebpackRules
-  loaders: WebpackLoaders
-  plugins: WebpackPlugins
-}
-
-export interface PreprocessSourceArgs extends ParentSpanPluginArgs {
-  filename: string
-  contents: string
-}
-
-export interface ResolvableExtensionsArgs extends ParentSpanPluginArgs {
-  traceId: "initial-resolvableExtensions"
-}
-
-export interface SetFieldsOnGraphQLNodeTypeArgs extends ParentSpanPluginArgs {
-  type: {
-    name: string
-    nodes: any[]
-  }
-  traceId: "initial-setFieldsOnGraphQLNodeType"
-}
-
-export interface SourceNodesArgs extends ParentSpanPluginArgs {
-  traceId: "initial-sourceNodes"
-  waitForCascadingActions: boolean
-}
-
-export interface CreateResolversArgs extends ParentSpanPluginArgs {
-  schema: object
-  createResolvers: Function
-  traceId: `initial-createResolvers`
-}
-
-export interface PreRenderHTMLArgs extends NodePluginArgs {
-  getHeadComponents: any[]
-  replaceHeadComponents: Function
-  getPreBodyComponents: any[]
-  replacePreBodyComponents: Function
-  getPostBodyComponents: any[]
-  replacePostBodyComponents: Function
-}
-
-export interface RenderBodyArgs extends NodePluginArgs {
-  pathname: string
-  setHeadComponents: Function
-  setHtmlAttributes: Function
-  setBodyAttributes: Function
-  setPreBodyComponents: Function
-  setPostBodyComponents: Function
-  setBodyProps: Function
-}
-
-export interface ReplaceRendererArgs extends NodePluginArgs {
-  replaceBodyHTMLString: Function
-  setHeadComponents: Function
-  setHtmlAttributes: Function
-  setBodyAttributes: Function
-  setPreBodyComponents: Function
-  setPostBodyComponents: Function
-  setBodyProps: Function
-}
-
-export interface WrapPageElementNodeArgs extends NodePluginArgs {
-  element: object
-  props: object
-  pathname: string
-}
-
-export interface WrapRootElementNodeArgs extends NodePluginArgs {
-  element: object
-}
-
-export interface ParentSpanPluginArgs extends NodePluginArgs {
-  parentSpan: object
-}
-
-export interface NodePluginArgs {
-  pathPrefix: string
-  boundActionCreators: Actions
-  actions: Actions
-  loadNodeContent: Function
-  store: Store
-  emitter: EventEmitter
-  getNodes: Function
-  getNode: Function
-  getNodesByType: Function
-  hasNodeChanged: Function
-  reporter: Reporter
-  getNodeAndSavePathDependency: Function
-  cache: Cache
-  createNodeId: Function
-  createContentDigest: Function
-  tracing: Tracing
-  [key: string]: unknown
-}
-
-interface ActionPlugin {
-  name: string
-}
-
-interface DeleteNodeArgs {
-  node: Node
-}
-
-interface CreateNodeFieldArgs {
-  node: Node
-  name: string
-  value: string
-
-  /**
-   * @deprecated
-   */
-  fieldName?: string
-
-  /**
-   * @deprecated
-   */
-  fieldValue?: string
-}
-
-interface ActionOptions {
-  [key: string]: unknown
-}
-
-export interface BuildArgs extends ParentSpanPluginArgs {
-  graphql: Function
-}
-
-export interface Actions {
-  /** @see https://www.gatsbyjs.org/docs/actions/#deletePage */
-  deletePage(args: { path: string; component: string }): void
-
-  /** @see https://www.gatsbyjs.org/docs/actions/#createPage */
-  createPage(
-    args: { path: string; component: string; context: Record<string, unknown> },
-    plugin?: ActionPlugin,
-    option?: ActionOptions
-  ): void
-
-  /** @see https://www.gatsbyjs.org/docs/actions/#deletePage */
-  deleteNode(
-    options: { node: Node },
-    plugin?: ActionPlugin,
-    option?: ActionOptions
-  ): void
-
-  /**
-   * @deprecated
-   * @see https://www.gatsbyjs.org/docs/actions/#deleteNodes
-   */
-  deleteNodes(nodes: string[], plugin?: ActionPlugin): void
-
-  /** @see https://www.gatsbyjs.org/docs/actions/#createNode */
-  createNode(node: Node, plugin?: ActionPlugin, options?: ActionOptions): void
-
-  /** @see https://www.gatsbyjs.org/docs/actions/#touchNode */
-  touchNode(node: { nodeId: string; plugin?: ActionPlugin }): void
-
-  /** @see https://www.gatsbyjs.org/docs/actions/#createNodeField */
-  createNodeField(
-    args: {
-      node: Node
-      fieldName?: string
-      fieldValue?: string
-      name?: string
-      value: any
-    },
-    plugin?: ActionPlugin,
-    options?: ActionOptions
-  ): void
-
-  /** @see https://www.gatsbyjs.org/docs/actions/#createParentChildLink */
-  createParentChildLink(
-    args: { parent: Node; child: Node },
-    plugin?: ActionPlugin
-  ): void
-
-  /** @see https://www.gatsbyjs.org/docs/actions/#setWebpackConfig */
-  setWebpackConfig(config: object, plugin?: ActionPlugin): void
-
-  /** @see https://www.gatsbyjs.org/docs/actions/#replaceWebpackConfig */
-  replaceWebpackConfig(config: object, plugin?: ActionPlugin): void
-
-  /** @see https://www.gatsbyjs.org/docs/actions/#setBabelOptions */
-  setBabelOptions(options: object, plugin?: ActionPlugin): void
-
-  /** @see https://www.gatsbyjs.org/docs/actions/#setBabelPlugin */
-  setBabelPlugin(
-    config: { name: string; options: object },
-    plugin?: ActionPlugin
-  ): void
-
-  /** @see https://www.gatsbyjs.org/docs/actions/#setBabelPreset */
-  setBabelPreset(
-    config: { name: string; options: object },
-    plugin?: ActionPlugin
-  ): void
-
-  /** @see https://www.gatsbyjs.org/docs/actions/#createJob */
-  createJob(
-    job: Record<string, unknown> & { id: string },
-    plugin?: ActionPlugin
-  ): void
-
-  /** @see https://www.gatsbyjs.org/docs/actions/#setJob */
-  setJob(
-    job: Record<string, unknown> & { id: string },
-    plugin?: ActionPlugin
-  ): void
-
-  /** @see https://www.gatsbyjs.org/docs/actions/#endJob */
-  endJob(job: { id: string }, plugin?: ActionPlugin): void
-
-  /** @see https://www.gatsbyjs.org/docs/actions/#setPluginStatus */
-  setPluginStatus(status: Record<string, unknown>, plugin?: ActionPlugin): void
-
-  /** @see https://www.gatsbyjs.org/docs/actions/#createRedirect */
-  createRedirect(
-    redirect: {
-      fromPath: string
-      isPermanent: boolean
-      toPath: string
-      redirectInBrowser: boolean
-      force: boolean
-      statusCode: number
-    },
-    plugin?: ActionPlugin
-  ): void
-
-  /** @see https://www.gatsbyjs.org/docs/actions/#addThirdPartySchema */
-  addThirdPartySchema(
-    args: { schema: object },
-    plugin: ActionPlugin,
-    traceId?: string
-  ): void
-
-  /** TODO create jsdoc on gatsbyjs.org */
-  createTypes(
-    types: string | object | Array<string | object>,
-    plugin: ActionPlugin,
-    traceId?: string
-  ): void
-}
-
-export interface Store {
-  dispatch: Function
-  subscribe: Function
-  getState: Function
-  replaceReducer: Function
-}
-
-type logMessageType = (format: string, ...args: any[]) => void
-
-export interface Reporter {
-  stripIndent: Function
-  format: object
-  setVerbose(isVerbose: boolean): void
-  setNoColor(isNoColor: boolean): void
-  panic(...args: any[]): void
-  panicOnBuild(...args: any[]): void
-  error(message: string, error: Error): void
-  uptime(prefix: string): void
-  success: logMessageType
-  verbose: logMessageType
-  info: logMessageType
-  warn: logMessageType
-  log: logMessageType
-  activityTimer(
-    name: string,
-    activityArgs: { parentSpan: object }
-  ): {
-    start: () => void
-    status(status: string): void
-    end: () => void
-    span: object
-  }
-}
-
-export interface Cache {
-  name: string
-  store: {
-    create: Function
-  }
-  cache: {
-    getAndPassUp: Function
-    wrap: Function
-    set: Function
-    mset: Function
-    get: Function
-    mget: Function
-    del: Function
-    reset: Function
-  }
-}
-
-export interface Tracing {
-  tracer: object
-  parentSpan: object
-  startSpan: Function
-}
-
-export interface PackageJson {
-  name?: string
-  description?: string
-  version?: string
-  main?: string
-  author?:
-    | string
-    | {
-        name: string
-        email: string
-      }
-  license?: string
-  dependencies?: Array<Record<string, string>>
-  devDependencies?: Array<Record<string, string>>
-  peerDependencies?: Array<Record<string, string>>
-  optionalDependecies?: Array<Record<string, string>>
-  bundledDependecies?: Array<Record<string, string>>
-  keywords?: string[]
-}
-
-export interface WebpackRules {
-  js: Function
-  mjs: Function
-  eslint: Function
-  yaml: Function
-  fonts: Function
-  images: Function
-  media: Function
-  miscAssets: Function
-  css: Function
-  cssModules: Function
-  postcss: Function
-  [key: string]: Function
-}
-
-export interface WebpackLoaders {
-  json: Function
-  yaml: Function
-  null: Function
-  raw: Function
-  style: Function
-  miniCssExtract: Function
-  css: Function
-  postcss: Function
-  file: Function
-  url: Function
-  js: Function
-  eslint: Function
-  imports: Function
-  exports: Function
-  [key: string]: Function
-}
-
-export interface WebpackPlugins {
-  normalModuleReplacement: Function
-  contextReplacement: Function
-  ignore: Function
-  watchIgnore: Function
-  banner: Function
-  prefetch: Function
-  automaticPrefetch: Function
-  define: Function
-  provide: Function
-  hotModuleReplacement: Function
-  sourceMapDevTool: Function
-  evalSourceMapDevTool: Function
-  evalDevToolModule: Function
-  cache: Function
-  extendedAPI: Function
-  externals: Function
-  jsonpTemplate: Function
-  libraryTemplate: Function
-  loaderTarget: Function
-  memoryOutputFile: Function
-  progress: Function
-  setVarMainTemplate: Function
-  umdMainTemplate: Function
-  noErrors: Function
-  noEmitOnErrors: Function
-  newWatching: Function
-  environment: Function
-  dll: Function
-  dllReference: Function
-  loaderOptions: Function
-  namedModules: Function
-  namedChunks: Function
-  hashedModuleIds: Function
-  moduleFilenameH: Function
-  aggressiveMerging: Function
-  aggressiveSplitting: Function
-  splitChunks: Function
-  chunkModuleIdRange: Function
-  dedupe: Function
-  limitChunkCount: Function
-  minChunkSize: Function
-  occurrenceOrder: Function
-  moduleConcatenation: Function
-  minifyJs: Function
-  minifyCss: Function
-  extractText: Function
-  moment: Function
-  [key: string]: Function
-}
-
-export interface PrefetchPathnameArgs extends BrowserPluginArgs {
-  pathname: string
-}
-
-export interface RouteUpdateArgs extends BrowserPluginArgs {
-  location: Location
-}
-
-export interface ReplaceComponentRendererArgs extends BrowserPluginArgs {
-  props: {
-    path: string
-    "*": string
-    uri: string
-    location: object
-    navigate: Function
-    children: undefined
-    pageResources: object
-    data: object
-    pageContext: object
-  }
-  loader: object
-}
-
-export interface ShouldUpdateScrollArgs extends BrowserPluginArgs {
-  prevRouterProps?: {
-    location: Location
-  }
-  pathname: string
-  routerProps: {
-    location: Location
-  }
-  getSavedScrollPosition: Function
-}
-
-export interface WrapPageElementBrowserArgs extends BrowserPluginArgs {
-  element: object
-  props: object
-}
-
-export interface WrapRootElementBrowserArgs extends BrowserPluginArgs {
-  element: object
-  pathname: string
-}
+export const useStaticQuery: <TData = any>(query: any) => TData
 
-export interface BrowserPluginArgs {
-  getResourcesForPathnameSync: Function
-  getResourcesForPathname: Function
-  getResourceURLsForPathname: Function
-  [key: string]: unknown
-}
+export const graphql: (query: TemplateStringsArray) => void
 
-export interface RouteUpdateDelayedArgs extends BrowserPluginArgs {
-  location: Location
-}
+export const parsePath: (path: string) => WindowLocation
 
-export interface ServiceWorkerArgs extends BrowserPluginArgs {
-  serviceWorker: ServiceWorkerRegistration
+export interface PageRendererProps {
+  location: WindowLocation
 }
 
-export interface Node {
-  path?: string
-  id: string
-  parent: string
-  children: Node[]
-  fields?: Record<string, string>
-  internal: {
-    type: string
-    mediaType: string
-    content: string
-    contentDigest: string
-    owner: string
-    description?: string
-  }
-  resolve?: string
-  name?: string
-  version?: string
-  pluginOptions?: PluginOptions
-  nodeAPIs?: any[]
-  browserAPIs?: any[]
-  ssrAPIs?: any[]
-  pluginFilepath?: string
-  packageJson?: PackageJson
-  siteMetadata?: Record<string, any>
-  port?: string
-  host?: string
-  pathPrefix?: string
-  polyfill?: boolean
-  buildTime?: string
-  jsonName?: string
-  internalComponentName?: string
-  matchPath?: unknown
-  component?: string
-  componentChunkName?: string
-  context?: Record<string, any>
-  pluginCreatorId?: string
-  componentPath?: string
-  [key: string]: unknown
-}
+export class PageRenderer extends React.Component<PageRendererProps> {}
diff --git a/node_modules/gatsby/src/bin/gatsby.js b/node_modules/gatsby/src/bin/gatsby.js
new file mode 100644
index 0000000..6c430b0
--- /dev/null
+++ b/node_modules/gatsby/src/bin/gatsby.js
@@ -0,0 +1,3 @@
+#!/usr/bin/env node
+
+require(`gatsby-cli`)
diff --git a/node_modules/gatsby/src/bootstrap/__mocks__/resolve-module-exports.js b/node_modules/gatsby/src/bootstrap/__mocks__/resolve-module-exports.js
new file mode 100644
index 0000000..5c2454d
--- /dev/null
+++ b/node_modules/gatsby/src/bootstrap/__mocks__/resolve-module-exports.js
@@ -0,0 +1,19 @@
+"use strict"
+
+let mockResults = {}
+
+module.exports = input => {
+  // return a mocked result
+  if (typeof input === `string`) {
+    return mockResults[input]
+  }
+
+  // return default result
+  if (typeof input !== `object`) {
+    return []
+  }
+
+  // set mock results
+  mockResults = Object.assign({}, input)
+  return undefined
+}
diff --git a/node_modules/gatsby/src/bootstrap/__tests__/__snapshots__/resolve-module-exports.js.snap b/node_modules/gatsby/src/bootstrap/__tests__/__snapshots__/resolve-module-exports.js.snap
new file mode 100644
index 0000000..323c1aa
--- /dev/null
+++ b/node_modules/gatsby/src/bootstrap/__tests__/__snapshots__/resolve-module-exports.js.snap
@@ -0,0 +1,10 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`Resolve module exports Show meaningful error message for invalid JavaScript 1`] = `
+Array [
+  "Syntax error in \\"/bad/file\\":
+Unexpected token (1:13)
+> 1 | const exports.blah = () = }}}
+    |             ^",
+]
+`;
diff --git a/node_modules/gatsby/src/bootstrap/__tests__/fixtures/jsonDataPaths.json b/node_modules/gatsby/src/bootstrap/__tests__/fixtures/jsonDataPaths.json
new file mode 100644
index 0000000..224b813
--- /dev/null
+++ b/node_modules/gatsby/src/bootstrap/__tests__/fixtures/jsonDataPaths.json
@@ -0,0 +1,5 @@
+{
+  "foo": "f/o/o",
+  "bar": "b/a/r",
+  "baz": "b/a/z"
+}
diff --git a/node_modules/gatsby/src/bootstrap/__tests__/fixtures/pages.json b/node_modules/gatsby/src/bootstrap/__tests__/fixtures/pages.json
new file mode 100644
index 0000000..6d9daa8
--- /dev/null
+++ b/node_modules/gatsby/src/bootstrap/__tests__/fixtures/pages.json
@@ -0,0 +1,27 @@
+[
+  {
+    "path": "/lorem",
+    "matchPath": null,
+    "component": "component.js"
+  },
+  {
+    "path": "/ipsum",
+    "matchPath": null,
+    "component": "component.js"
+  },
+  {
+    "path": "/dolor",
+    "matchPath": "/foo",
+    "component": "component.js"
+  },
+  {
+    "path": "/sit",
+    "matchPath": "/bar",
+    "component": "component.js"
+  },
+  {
+    "path": "/amet",
+    "matchPath": null,
+    "component": "component.js"
+  }
+]
diff --git a/node_modules/gatsby/src/bootstrap/__tests__/pages-writer.js b/node_modules/gatsby/src/bootstrap/__tests__/pages-writer.js
new file mode 100644
index 0000000..80729b2
--- /dev/null
+++ b/node_modules/gatsby/src/bootstrap/__tests__/pages-writer.js
@@ -0,0 +1,104 @@
+const _ = require(`lodash`)
+const { writePages, resetLastHash } = require(`../pages-writer`)
+const { joinPath } = require(`../../utils/path`)
+
+const jsonDataPathsFixture = require(`./fixtures/jsonDataPaths.json`)
+const pagesFixture = require(`./fixtures/pages.json`)
+
+jest.mock(`fs-extra`, () => {
+  return {
+    writeFile: (filePath, data) => Promise.resolve(),
+    move: () => {},
+  }
+})
+const mockFsExtra = require(`fs-extra`)
+
+let mockState = {
+  program: {
+    _: [`build`],
+    directory: `my/gatsby/project`,
+  },
+  jsonDataPaths: jsonDataPathsFixture,
+  pages: {
+    values: () => pagesFixture,
+  },
+}
+
+jest.mock(`../../redux/`, () => {
+  return {
+    store: {
+      getState: () => mockState,
+    },
+    emitter: {
+      on: () => {},
+    },
+  }
+})
+
+const expectedResult = JSON.stringify({
+  pages: [
+    { path: `/amet`, matchPath: null },
+    { path: `/ipsum`, matchPath: null },
+    { path: `/lorem`, matchPath: null },
+    { path: `/dolor`, matchPath: `/foo` },
+    { path: `/sit`, matchPath: `/bar` },
+  ],
+  dataPaths: {
+    bar: `b/a/r`,
+    baz: `b/a/z`,
+    foo: `f/o/o`,
+  },
+})
+
+const now = Date.now()
+
+describe(`Pages writer`, () => {
+  beforeEach(() => {
+    // Mock current date
+    global.Date.now = () => now
+
+    // Ensure testing in the same conditions as if we have
+    // removed the .cache folder
+    resetLastHash()
+  })
+
+  it(`writes pages with the good order #1`, async () => {
+    const spy = jest.spyOn(mockFsExtra, `writeFile`)
+
+    await writePages()
+
+    expect(spy).toBeCalledWith(
+      joinPath(`my`, `gatsby`, `project`, `.cache`, `data.json.${now}`),
+      expectedResult
+    )
+  })
+
+  it(`writes pages with the good order #2`, async () => {
+    const spy = jest.spyOn(mockFsExtra, `writeFile`)
+
+    // Reorder data in state
+    mockState = {
+      ...mockState,
+      jsonDataPaths: {
+        bar: jsonDataPathsFixture.bar,
+        foo: jsonDataPathsFixture.foo,
+        baz: jsonDataPathsFixture.baz,
+      },
+      pages: {
+        values: () =>
+          _(pagesFixture)
+            .chunk(2)
+            .reverse()
+            .flatten()
+            .value(),
+      },
+    }
+
+    await writePages()
+
+    expect(spy).toBeCalledWith(
+      joinPath(`my`, `gatsby`, `project`, `.cache`, `data.json.${now}`),
+      expectedResult
+    )
+  })
+})
diff --git a/node_modules/gatsby/src/bootstrap/__tests__/resolve-module-exports.js b/node_modules/gatsby/src/bootstrap/__tests__/resolve-module-exports.js
new file mode 100644
index 0000000..9eefec1
--- /dev/null
+++ b/node_modules/gatsby/src/bootstrap/__tests__/resolve-module-exports.js
@@ -0,0 +1,201 @@
+jest.mock(`fs`)
+jest.mock(`gatsby-cli/lib/reporter`, () => {
+  return {
+    panic: jest.fn(),
+  }
+})
+
+const reporter = require(`gatsby-cli/lib/reporter`)
+const resolveModuleExports = require(`../resolve-module-exports`)
+let resolver
+
+describe(`Resolve module exports`, () => {
+  const MOCK_FILE_INFO = {
+    "/bad/file": `const exports.blah = () = }}}`,
+    "/simple/export": `exports.foo = '';`,
+    "/export/const": `export const fooConst = '';`,
+    "/module/exports": `module.exports.barExports = '';`,
+    "/multiple/export": `exports.bar = () => ''; exports.baz = {}; exports.foo = '';`,
+    "/import/with/export": `import React from 'react'; exports.baz = '';`,
+    "/realistic/export": `
+      /* eslint-disable react/prop-types */
+      /* globals window CustomEvent */
+      import React, { createElement } from "react"
+      import { Transition } from "react-transition-group"
+      import createHistory from "history/createBrowserHistory"
+
+      import getTransitionStyle from "./src/utils/getTransitionStyle"
+
+      const timeout = 250
+      const historyExitingEventType = 'history::exiting'
+
+      const getUserConfirmation = (pathname, callback) => {
+        const event = new CustomEvent(historyExitingEventType, { detail: { pathname } })
+        window.dispatchEvent(event)
+        setTimeout(() => {
+          callback(true)
+        }, timeout)
+      }
+      const history = createHistory({ getUserConfirmation })
+      // block must return a string to conform
+      history.block((location, action) => location.pathname)
+      exports.replaceHistory = () => history
+
+      class ReplaceComponentRenderer extends React.Component {
+        constructor(props) {
+          super(props)
+          this.state = { exiting: false, nextPageResources: {} }
+          this.listenerHandler = this.listenerHandler.bind(this)
+        }
+
+        listenerHandler(event) {
+          const nextPageResources = this.props.loader.getResourcesForPathname(
+            event.detail.pathname,
+            nextPageResources => this.setState({ nextPageResources })
+          ) || {}
+          this.setState({ exiting: true, nextPageResources })
+        }
+
+        componentDidMount() {
+          window.addEventListener(historyExitingEventType, this.listenerHandler)
+        }
+
+        componentWillUnmount() {
+          window.removeEventListener(historyExitingEventType, this.listenerHandler)
+        }
+
+        componentWillReceiveProps(nextProps) {
+          if (this.props.location.key !== nextProps.location.key) {
+            this.setState({ exiting: false, nextPageResources: {} })
+          }
+        }
+
+        render() {
+          const transitionProps = {
+            timeout: {
+              enter: 0,
+              exit: timeout,
+            },
+            appear: true,
+            in: !this.state.exiting,
+            key: this.props.location.key,
+          }
+          return (
+            <Transition {...transitionProps}>
+            {
+              (status) => createElement(this.props.pageResources.component, {
+                ...this.props,
+                ...this.props.pageResources.json,
+                transition: {
+                  status,
+                  timeout,
+                  style: getTransitionStyle({ status, timeout }),
+                  nextPageResources: this.state.nextPageResources,
+                },
+              })
+            }
+            </Transition>
+          )
+        }
+      }
+
+      // eslint-disable-next-line react/display-name
+      exports.replaceComponentRenderer = ({ props, loader }) => {
+        if (props.layout) {
+          return undefined
+        }
+        return createElement(ReplaceComponentRenderer, { ...props, loader })
+      }
+    `,
+    "/esmodule/export": `
+      exports.__esModule = true;
+      exports.foo = '';
+    `,
+    "/export/named": `const foo = ''; export { foo };`,
+    "/export/named/from": `export { Component } from 'react';`,
+    "/export/named/as": `const foo = ''; export { foo as bar };`,
+    "/export/named/multiple": `const foo = ''; const bar = ''; const baz = ''; export { foo, bar, baz };`,
+  }
+
+  beforeEach(() => {
+    resolver = jest.fn(arg => arg)
+    require(`fs`).__setMockFiles(MOCK_FILE_INFO)
+    reporter.panic.mockClear()
+  })
+
+  it(`Returns empty array for file paths that don't exist`, () => {
+    const result = resolveModuleExports(`/file/path/does/not/exist`)
+    expect(result).toEqual([])
+  })
+
+  it(`Returns empty array for directory paths that don't exist`, () => {
+    const result = resolveModuleExports(`/directory/path/does/not/exist/`)
+    expect(result).toEqual([])
+  })
+
+  it(`Show meaningful error message for invalid JavaScript`, () => {
+    resolveModuleExports(`/bad/file`, resolver)
+    expect(
+      reporter.panic.mock.calls.map(c =>
+        // Remove console colors + trim whitespace
+        // eslint-disable-next-line
+        c[0].replace(/\x1B[[(?);]{0,2}(;?\d)*./g, ``).trim()
+      )
+    ).toMatchSnapshot()
+  })
+
+  it(`Resolves an export`, () => {
+    const result = resolveModuleExports(`/simple/export`, resolver)
+    expect(result).toEqual([`foo`])
+  })
+
+  it(`Resolves multiple exports`, () => {
+    const result = resolveModuleExports(`/multiple/export`, resolver)
+    expect(result).toEqual([`bar`, `baz`, `foo`])
+  })
+
+  it(`Resolves an export from an ES6 file`, () => {
+    const result = resolveModuleExports(`/import/with/export`, resolver)
+    expect(result).toEqual([`baz`])
+  })
+
+  it(`Resolves an exported const`, () => {
+    const result = resolveModuleExports(`/export/const`, resolver)
+    expect(result).toEqual([`fooConst`])
+  })
+
+  it(`Resolves module.exports`, () => {
+    const result = resolveModuleExports(`/module/exports`, resolver)
+    expect(result).toEqual([`barExports`])
+  })
+
+  it(`Resolves exports from a larger file`, () => {
+    const result = resolveModuleExports(`/realistic/export`, resolver)
+    expect(result).toEqual([`replaceHistory`, `replaceComponentRenderer`])
+  })
+
+  it(`Ignores exports.__esModule`, () => {
+    const result = resolveModuleExports(`/esmodule/export`, resolver)
+    expect(result).toEqual([`foo`])
+  })
+
+  it(`Resolves a named export`, () => {
+    const result = resolveModuleExports(`/export/named`, resolver)
+    expect(result).toEqual([`foo`])
+  })
+
+  it(`Resolves a named export from`, () => {
+    const result = resolveModuleExports(`/export/named/from`, resolver)
+    expect(result).toEqual([`Component`])
+  })
+
+  it(`Resolves a named export as`, () => {
+    const result = resolveModuleExports(`/export/named/as`, resolver)
+    expect(result).toEqual([`bar`])
+  })
+
+  it(`Resolves multiple named exports`, () => {
+    const result = resolveModuleExports(`/export/named/multiple`, resolver)
+    expect(result).toEqual([`foo`, `bar`, `baz`])
+  })
+})
diff --git a/node_modules/gatsby/src/bootstrap/get-config-file.js b/node_modules/gatsby/src/bootstrap/get-config-file.js
new file mode 100644
index 0000000..55b1e70
--- /dev/null
+++ b/node_modules/gatsby/src/bootstrap/get-config-file.js
@@ -0,0 +1,53 @@
+/* @flow */
+const levenshtein = require(`fast-levenshtein`)
+const fs = require(`fs-extra`)
+const testRequireError = require(`../utils/test-require-error`).default
+const report = require(`gatsby-cli/lib/reporter`)
+const chalk = require(`chalk`)
+const path = require(`path`)
+const existsSync = require(`fs-exists-cached`).sync
+
+function isNearMatch(
+  fileName: string,
+  configName: string,
+  distance: number
+): boolean {
+  return levenshtein.get(fileName, configName) <= distance
+}
+
+module.exports = async function getConfigFile(
+  rootDir: string,
+  configName: string,
+  distance: number = 3
+) {
+  const configPath = path.join(rootDir, configName)
+  let configModule
+  try {
+    configModule = require(configPath)
+  } catch (err) {
+    const nearMatch = await fs.readdir(rootDir).then(files =>
+      files.find(file => {
+        const fileName = file.split(rootDir).pop()
+        return isNearMatch(fileName, configName, distance)
+      })
+    )
+    if (!testRequireError(configPath, err)) {
+      report.panic(
+        `We encountered an error while trying to load your site's ${configName}. Please fix the error and try again.`,
+        err
+      )
+    } else if (nearMatch) {
+      report.panic(
+        `It looks like you were trying to add the config file? Please rename "${chalk.bold(
+          nearMatch
+        )}" to "${chalk.bold(configName)}"`
+      )
+    } else if (existsSync(path.join(rootDir, `src`, configName))) {
+      report.panic(
+        `Your ${configName} file is in the wrong place. You've placed it in the src/ directory. It must instead be at the root of your site next to your package.json file.`
+      )
+    }
+  }
+
+  return configModule
+}
diff --git a/node_modules/gatsby/src/bootstrap/index.js b/node_modules/gatsby/src/bootstrap/index.js
new file mode 100644
index 0000000..84bf224
--- /dev/null
+++ b/node_modules/gatsby/src/bootstrap/index.js
@@ -0,0 +1,475 @@
+/* @flow */
+
+const _ = require(`lodash`)
+const slash = require(`slash`)
+const fs = require(`fs-extra`)
+const md5File = require(`md5-file/promise`)
+const crypto = require(`crypto`)
+const del = require(`del`)
+const path = require(`path`)
+const Promise = require(`bluebird`)
+const telemetry = require(`gatsby-telemetry`)
+
+const apiRunnerNode = require(`../utils/api-runner-node`)
+const getBrowserslist = require(`../utils/browserslist`)
+const { graphql } = require(`graphql`)
+const { store, emitter } = require(`../redux`)
+const loadPlugins = require(`./load-plugins`)
+const loadThemes = require(`./load-themes`)
+const report = require(`gatsby-cli/lib/reporter`)
+const getConfigFile = require(`./get-config-file`)
+const tracer = require(`opentracing`).globalTracer()
+const preferDefault = require(`./prefer-default`)
+const nodeTracking = require(`../db/node-tracking`)
+const withResolverContext = require(`../schema/context`)
+require(`../db`).startAutosave()
+
+// Show stack trace on unhandled promises.
+process.on(`unhandledRejection`, (reason, p) => {
+  report.panic(reason)
+})
+
+const { extractQueries } = require(`../query/query-watcher`)
+const writeJsRequires = require(`./write-js-requires`)
+const { writeRedirects } = require(`./redirects-writer`)
+
+// Override console.log to add the source file + line number.
+// Useful for debugging if you lose a console.log somewhere.
+// Otherwise leave commented out.
+// require(`./log-line-function`)
+
+type BootstrapArgs = {
+  directory: string,
+  prefixPaths?: boolean,
+  parentSpan: Object,
+}
+
+module.exports = async (args: BootstrapArgs) => {
+  const spanArgs = args.parentSpan ? { childOf: args.parentSpan } : {}
+  const bootstrapSpan = tracer.startSpan(`bootstrap`, spanArgs)
+
+  // Start plugin runner which listens to the store
+  // and invokes Gatsby API based on actions.
+  require(`../redux/plugin-runner`)
+
+  const directory = slash(args.directory)
+
+  const program = {
+    ...args,
+    browserslist: getBrowserslist(directory),
+    // Fix program directory path for windows env.
+    directory,
+  }
+
+  store.dispatch({
+    type: `SET_PROGRAM`,
+    payload: program,
+  })
+
+  // Try opening the site's gatsby-config.js file.
+  let activity = report.activityTimer(`open and validate gatsby-configs`, {
+    parentSpan: bootstrapSpan,
+  })
+  activity.start()
+  let config = await preferDefault(
+    getConfigFile(program.directory, `gatsby-config`)
+  )
+
+  // theme gatsby configs can be functions or objects
+  if (config && config.__experimentalThemes) {
+    const themes = await loadThemes(config)
+    config = themes.config
+
+    store.dispatch({
+      type: `SET_RESOLVED_THEMES`,
+      payload: themes.themes,
+    })
+  }
+
+  if (config && config.polyfill) {
+    report.warn(
+      `Support for custom Promise polyfills has been removed in Gatsby v2. We only support Babel 7's new automatic polyfilling behavior.`
+    )
+  }
+
+  store.dispatch({
+    type: `SET_SITE_CONFIG`,
+    payload: config,
+  })
+
+  activity.end()
+
+  activity = report.activityTimer(`load plugins`)
+  activity.start()
+  const flattenedPlugins = await loadPlugins(config, program.directory)
+  activity.end()
+
+  telemetry.decorateEvent(`BUILD_END`, {
+    plugins: flattenedPlugins.map(p => `${p.name}@${p.version}`),
+  })
+
+  // onPreInit
+  activity = report.activityTimer(`onPreInit`, {
+    parentSpan: bootstrapSpan,
+  })
+  activity.start()
+  await apiRunnerNode(`onPreInit`, { parentSpan: activity.span })
+  activity.end()
+
+  // During builds, delete html and css files from the public directory as we don't want
+  // deleted pages and styles from previous builds to stick around.
+  if (process.env.NODE_ENV === `production`) {
+    activity = report.activityTimer(
+      `delete html and css files from previous builds`,
+      {
+        parentSpan: bootstrapSpan,
+      }
+    )
+    activity.start()
+    await del([
+      `public/*.{html,css}`,
+      `public/**/*.{html,css}`,
+      `!public/static`,
+      `!public/static/**/*.{html,css}`,
+    ])
+    activity.end()
+  }
+
+  activity = report.activityTimer(`initialize cache`)
+  activity.start()
+  // Check if any plugins have been updated since our last run. If so
+  // we delete the cache is there's likely been changes
+  // since the previous run.
+  //
+  // We do this by creating a hash of all the version numbers of installed
+  // plugins, the site's package.json, gatsby-config.js, and gatsby-node.js.
+  // The last, gatsby-node.js, is important as many gatsby sites put important
+  // logic in there e.g. generating slugs for custom pages.
+  const pluginVersions = flattenedPlugins.map(p => p.version)
+  const hashes = await Promise.all([
+    md5File(`package.json`),
+    Promise.resolve(
+      md5File(`${program.directory}/gatsby-config.js`).catch(() => {})
+    ), // ignore as this file isn't required),
+    Promise.resolve(
+      md5File(`${program.directory}/gatsby-node.js`).catch(() => {})
+    ), // ignore as this file isn't required),
+  ])
+  const pluginsHash = crypto
+    .createHash(`md5`)
+    .update(JSON.stringify(pluginVersions.concat(hashes)))
+    .digest(`hex`)
+  const { status } = store.getState()
+  const oldPluginsHash = status ? status.PLUGINS_HASH : ``
+
+  // Check if anything has changed. If it has, delete the site's .cache
+  // directory and tell reducers to empty themselves.
+  //
+  // Also if the hash isn't there, then delete things just in case something
+  // is weird.
+  if (oldPluginsHash && pluginsHash !== oldPluginsHash) {
+    report.info(report.stripIndent`
+      One or more of your plugins have changed since the last time you ran Gatsby. As
+      a precaution, we're deleting your site's cache to ensure there's not any stale
+      data
+    `)
+  }
+  const cacheDirectory = `${program.directory}/.cache`
+  if (!oldPluginsHash || pluginsHash !== oldPluginsHash) {
+    try {
+      // Attempt to empty dir if remove fails,
+      // like when directory is mount point
+      await fs.remove(cacheDirectory).catch(() => fs.emptyDir(cacheDirectory))
+    } catch (e) {
+      report.error(`Failed to remove .cache files.`, e)
+    }
+    // Tell reducers to delete their data (the store will already have
+    // been loaded from the file system cache).
+    store.dispatch({
+      type: `DELETE_CACHE`,
+    })
+  }
+
+  // Update the store with the new plugins hash.
+  store.dispatch({
+    type: `UPDATE_PLUGINS_HASH`,
+    payload: pluginsHash,
+  })
+
+  // Now that we know the .cache directory is safe, initialize the cache
+  // directory.
+  await fs.ensureDir(cacheDirectory)
+
+  // Ensure the public/static directory
+  await fs.ensureDir(`${program.directory}/public/static`)
+
+  activity.end()
+
+  if (process.env.GATSBY_DB_NODES === `loki`) {
+    const loki = require(`../db/loki`)
+    // Start the nodes database (in memory loki js with interval disk
+    // saves). If data was saved from a previous build, it will be
+    // loaded here
+    activity = report.activityTimer(`start nodes db`, {
+      parentSpan: bootstrapSpan,
+    })
+    activity.start()
+    const dbSaveFile = `${cacheDirectory}/loki/loki.db`
+    try {
+      await loki.start({
+        saveFile: dbSaveFile,
+      })
+    } catch (e) {
+      report.error(
+        `Error starting DB. Perhaps try deleting ${path.dirname(dbSaveFile)}`
+      )
+    }
+    activity.end()
+  }
+
+  // By now, our nodes database has been loaded, so ensure that we
+  // have tracked all inline objects
+  nodeTracking.trackDbNodes()
+
+  // Copy our site files to the root of the site.
+  activity = report.activityTimer(`copy gatsby files`, {
+    parentSpan: bootstrapSpan,
+  })
+  activity.start()
+  const srcDir = `${__dirname}/../../cache-dir`
+  const siteDir = cacheDirectory
+  const tryRequire = `${__dirname}/../utils/test-require-error.js`
+  try {
+    await fs.copy(srcDir, siteDir, {
+      clobber: true,
+    })
+    await fs.copy(tryRequire, `${siteDir}/test-require-error.js`, {
+      clobber: true,
+    })
+    await fs.ensureDirSync(`${cacheDirectory}/json`)
+
+    // Ensure .cache/fragments exists and is empty. We want fragments to be
+    // added on every run in response to data as fragments can only be added if
+    // the data used to create the schema they're dependent on is available.
+    await fs.emptyDir(`${cacheDirectory}/fragments`)
+  } catch (err) {
+    report.panic(`Unable to copy site files to .cache`, err)
+  }
+
+  // Find plugins which implement gatsby-browser and gatsby-ssr and write
+  // out api-runners for them.
+  const hasAPIFile = (env, plugin) => {
+    // The plugin loader has disabled SSR APIs for this plugin. Usually due to
+    // multiple implementations of an API that can only be implemented once
+    if (env === `ssr` && plugin.skipSSR === true) return undefined
+
+    const envAPIs = plugin[`${env}APIs`]
+
+    // Always include gatsby-browser.js files if they exists as they're
+    // a handy place to include global styles and other global imports.
+    try {
+      if (env === `browser`) {
+        return slash(
+          require.resolve(path.join(plugin.resolve, `gatsby-${env}`))
+        )
+      }
+    } catch (e) {
+      // ignore
+    }
+
+    if (envAPIs && Array.isArray(envAPIs) && envAPIs.length > 0) {
+      return slash(path.join(plugin.resolve, `gatsby-${env}`))
+    }
+    return undefined
+  }
+
+  const ssrPlugins = _.filter(
+    flattenedPlugins.map(plugin => {
+      return {
+        resolve: hasAPIFile(`ssr`, plugin),
+        options: plugin.pluginOptions,
+      }
+    }),
+    plugin => plugin.resolve
+  )
+
+  const browserPlugins = _.filter(
+    flattenedPlugins.map(plugin => {
+      return {
+        resolve: hasAPIFile(`browser`, plugin),
+        options: plugin.pluginOptions,
+      }
+    }),
+    plugin => plugin.resolve
+  )
+
+  const browserPluginsRequires = browserPlugins
+    .map(
+      plugin =>
+        `{
+      plugin: require('${plugin.resolve}'),
+      options: ${JSON.stringify(plugin.options)},
+    }`
+    )
+    .join(`,`)
+
+  const browserAPIRunner = `module.exports = [${browserPluginsRequires}]\n`
+
+  let sSRAPIRunner = ``
+
+  try {
+    sSRAPIRunner = fs.readFileSync(`${siteDir}/api-runner-ssr.js`, `utf-8`)
+  } catch (err) {
+    report.panic(`Failed to read ${siteDir}/api-runner-ssr.js`, err)
+  }
+
+  const ssrPluginsRequires = ssrPlugins
+    .map(
+      plugin =>
+        `{
+      plugin: require('${plugin.resolve}'),
+      options: ${JSON.stringify(plugin.options)},
+    }`
+    )
+    .join(`,`)
+  sSRAPIRunner = `var plugins = [${ssrPluginsRequires}]\n${sSRAPIRunner}`
+
+  fs.writeFileSync(
+    `${siteDir}/api-runner-browser-plugins.js`,
+    browserAPIRunner,
+    `utf-8`
+  )
+  fs.writeFileSync(`${siteDir}/api-runner-ssr.js`, sSRAPIRunner, `utf-8`)
+
+  activity.end()
+  /**
+   * Start the main bootstrap processes.
+   */
+
+  // onPreBootstrap
+  activity = report.activityTimer(`onPreBootstrap`)
+  activity.start()
+  await apiRunnerNode(`onPreBootstrap`)
+  activity.end()
+
+  // Source nodes
+  activity = report.activityTimer(`source and transform nodes`, {
+    parentSpan: bootstrapSpan,
+  })
+  activity.start()
+  await require(`../utils/source-nodes`)({ parentSpan: activity.span })
+  activity.end()
+
+  // Create Schema.
+  activity = report.activityTimer(`building schema`, {
+    parentSpan: bootstrapSpan,
+  })
+  activity.start()
+  await require(`../schema`).build({ parentSpan: activity.span })
+  activity.end()
+
+  // Collect resolvable extensions and attach to program.
+  const extensions = [`.mjs`, `.js`, `.jsx`, `.wasm`, `.json`]
+  // Change to this being an action and plugins implement `onPreBootstrap`
+  // for adding extensions.
+  const apiResults = await apiRunnerNode(`resolvableExtensions`, {
+    traceId: `initial-resolvableExtensions`,
+    parentSpan: bootstrapSpan,
+  })
+
+  store.dispatch({
+    type: `SET_PROGRAM_EXTENSIONS`,
+    payload: _.flattenDeep([extensions, apiResults]),
+  })
+
+  const graphqlRunner = (query, context = {}) => {
+    const schema = store.getState().schema
+    return graphql(
+      schema,
+      query,
+      context,
+      withResolverContext(context, schema),
+      context
+    )
+  }
+
+  // Collect pages.
+  activity = report.activityTimer(`createPages`, {
+    parentSpan: bootstrapSpan,
+  })
+  activity.start()
+  await apiRunnerNode(`createPages`, {
+    graphql: graphqlRunner,
+    traceId: `initial-createPages`,
+    waitForCascadingActions: true,
+    parentSpan: activity.span,
+  })
+  activity.end()
+
+  // A variant on createPages for plugins that want to
+  // have full control over adding/removing pages. The normal
+  // "createPages" API is called every time (during development)
+  // that data changes.
+  activity = report.activityTimer(`createPagesStatefully`, {
+    parentSpan: bootstrapSpan,
+  })
+  activity.start()
+  await apiRunnerNode(`createPagesStatefully`, {
+    graphql: graphqlRunner,
+    traceId: `initial-createPagesStatefully`,
+    waitForCascadingActions: true,
+    parentSpan: activity.span,
+  })
+  activity.end()
+
+  activity = report.activityTimer(`onPreExtractQueries`, {
+    parentSpan: bootstrapSpan,
+  })
+  activity.start()
+  await apiRunnerNode(`onPreExtractQueries`, { parentSpan: activity.span })
+  activity.end()
+
+  // Update Schema for SitePage.
+  activity = report.activityTimer(`update schema`, {
+    parentSpan: bootstrapSpan,
+  })
+  activity.start()
+  await require(`../schema`).rebuildWithSitePage({ parentSpan: activity.span })
+  activity.end()
+
+  // Extract queries
+  activity = report.activityTimer(`extract queries from components`, {
+    parentSpan: bootstrapSpan,
+  })
+  activity.start()
+  await extractQueries()
+  activity.end()
+
+  try {
+    await writeJsRequires.writeAll(store.getState())
+  } catch (err) {
+    report.panic(`Failed to write out page data`, err)
+  }
+
+  await writeRedirects()
+
+  // onPostBootstrap
+  activity = report.activityTimer(`onPostBootstrap`, {
+    parentSpan: bootstrapSpan,
+  })
+  activity.start()
+  await apiRunnerNode(`onPostBootstrap`, { parentSpan: activity.span })
+  activity.end()
+
+  report.log(``)
+  report.info(`bootstrap finished - ${process.uptime()} s`)
+  report.log(``)
+  emitter.emit(`BOOTSTRAP_FINISHED`)
+  require(`../redux/actions`).boundActionCreators.setProgramStatus(
+    `BOOTSTRAP_FINISHED`
+  )
+
+  bootstrapSpan.finish()
+
+  return { graphqlRunner }
+}
diff --git a/node_modules/gatsby/src/bootstrap/load-plugins/__tests__/__snapshots__/load-plugins.js.snap b/node_modules/gatsby/src/bootstrap/load-plugins/__tests__/__snapshots__/load-plugins.js.snap
new file mode 100644
index 0000000..a06954d
--- /dev/null
+++ b/node_modules/gatsby/src/bootstrap/load-plugins/__tests__/__snapshots__/load-plugins.js.snap
@@ -0,0 +1,221 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`Load plugins Load plugins for a site 1`] = `
+Array [
+  Object {
+    "browserAPIs": Array [],
+    "id": "d48d1c52-fe48-53cb-8f08-aa4b47dde5a5",
+    "name": "dev-404-page",
+    "nodeAPIs": Array [
+      "createPagesStatefully",
+    ],
+    "pluginOptions": Object {
+      "plugins": Array [],
+    },
+    "resolve": "",
+    "ssrAPIs": Array [],
+    "version": "1.0.0",
+  },
+  Object {
+    "browserAPIs": Array [],
+    "id": "1fc32581-893a-55e8-8927-bcd667e2b700",
+    "name": "load-babel-config",
+    "nodeAPIs": Array [
+      "onPreBootstrap",
+    ],
+    "pluginOptions": Object {
+      "plugins": Array [],
+    },
+    "resolve": "",
+    "ssrAPIs": Array [],
+    "version": "1.0.0",
+  },
+  Object {
+    "browserAPIs": Array [],
+    "id": "a5079d69-ba80-53dc-82f9-0f440bd5448c",
+    "name": "internal-data-bridge",
+    "nodeAPIs": Array [
+      "sourceNodes",
+      "onCreatePage",
+    ],
+    "pluginOptions": Object {
+      "plugins": Array [],
+    },
+    "resolve": "",
+    "ssrAPIs": Array [],
+    "version": "1.0.0",
+  },
+  Object {
+    "browserAPIs": Array [],
+    "id": "f795702c-a3b8-5a88-88ee-5d06019d44fa",
+    "name": "prod-404",
+    "nodeAPIs": Array [
+      "onCreatePage",
+    ],
+    "pluginOptions": Object {
+      "plugins": Array [],
+    },
+    "resolve": "",
+    "ssrAPIs": Array [],
+    "version": "1.0.0",
+  },
+  Object {
+    "browserAPIs": Array [],
+    "id": "6f4b2fa9-66b5-5205-a03f-140005a2cfe5",
+    "name": "webpack-theme-component-shadowing",
+    "nodeAPIs": Array [
+      "onCreateWebpackConfig",
+    ],
+    "pluginOptions": Object {
+      "plugins": Array [],
+    },
+    "resolve": "",
+    "ssrAPIs": Array [],
+    "version": "1.0.0",
+  },
+  Object {
+    "browserAPIs": Array [],
+    "id": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "name": "default-site-plugin",
+    "nodeAPIs": Array [],
+    "pluginOptions": Object {
+      "plugins": Array [],
+    },
+    "resolve": "",
+    "ssrAPIs": Array [],
+    "version": "1.0.0",
+  },
+  Object {
+    "browserAPIs": Array [],
+    "id": "cc2293db-7635-5675-bb5e-05c41ff28688",
+    "name": "gatsby-plugin-page-creator",
+    "nodeAPIs": Array [
+      "createPagesStatefully",
+    ],
+    "pluginOptions": Object {
+      "path": "/src/pages",
+      "pathCheck": false,
+      "plugins": Array [],
+    },
+    "resolve": "",
+    "ssrAPIs": Array [],
+    "version": "1.0.0",
+  },
+]
+`;
+
+exports[`Load plugins Loads plugins defined with an object but without an option key 1`] = `
+Array [
+  Object {
+    "browserAPIs": Array [],
+    "id": "d48d1c52-fe48-53cb-8f08-aa4b47dde5a5",
+    "name": "dev-404-page",
+    "nodeAPIs": Array [
+      "createPagesStatefully",
+    ],
+    "pluginOptions": Object {
+      "plugins": Array [],
+    },
+    "resolve": "",
+    "ssrAPIs": Array [],
+    "version": "1.0.0",
+  },
+  Object {
+    "browserAPIs": Array [],
+    "id": "1fc32581-893a-55e8-8927-bcd667e2b700",
+    "name": "load-babel-config",
+    "nodeAPIs": Array [
+      "onPreBootstrap",
+    ],
+    "pluginOptions": Object {
+      "plugins": Array [],
+    },
+    "resolve": "",
+    "ssrAPIs": Array [],
+    "version": "1.0.0",
+  },
+  Object {
+    "browserAPIs": Array [],
+    "id": "a5079d69-ba80-53dc-82f9-0f440bd5448c",
+    "name": "internal-data-bridge",
+    "nodeAPIs": Array [
+      "sourceNodes",
+      "onCreatePage",
+    ],
+    "pluginOptions": Object {
+      "plugins": Array [],
+    },
+    "resolve": "",
+    "ssrAPIs": Array [],
+    "version": "1.0.0",
+  },
+  Object {
+    "browserAPIs": Array [],
+    "id": "f795702c-a3b8-5a88-88ee-5d06019d44fa",
+    "name": "prod-404",
+    "nodeAPIs": Array [
+      "onCreatePage",
+    ],
+    "pluginOptions": Object {
+      "plugins": Array [],
+    },
+    "resolve": "",
+    "ssrAPIs": Array [],
+    "version": "1.0.0",
+  },
+  Object {
+    "browserAPIs": Array [],
+    "id": "6f4b2fa9-66b5-5205-a03f-140005a2cfe5",
+    "name": "webpack-theme-component-shadowing",
+    "nodeAPIs": Array [
+      "onCreateWebpackConfig",
+    ],
+    "pluginOptions": Object {
+      "plugins": Array [],
+    },
+    "resolve": "",
+    "ssrAPIs": Array [],
+    "version": "1.0.0",
+  },
+  Object {
+    "browserAPIs": Array [],
+    "id": "c731052f-1e62-5905-9fb3-edc9057be8f1",
+    "name": "TEST",
+    "nodeAPIs": Array [],
+    "pluginOptions": Object {
+      "plugins": Array [],
+    },
+    "resolve": "",
+    "ssrAPIs": Array [],
+    "version": "1.0.0",
+  },
+  Object {
+    "browserAPIs": Array [],
+    "id": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "name": "default-site-plugin",
+    "nodeAPIs": Array [],
+    "pluginOptions": Object {
+      "plugins": Array [],
+    },
+    "resolve": "",
+    "ssrAPIs": Array [],
+    "version": "1.0.0",
+  },
+  Object {
+    "browserAPIs": Array [],
+    "id": "cc2293db-7635-5675-bb5e-05c41ff28688",
+    "name": "gatsby-plugin-page-creator",
+    "nodeAPIs": Array [
+      "createPagesStatefully",
+    ],
+    "pluginOptions": Object {
+      "path": "/src/pages",
+      "pathCheck": false,
+      "plugins": Array [],
+    },
+    "resolve": "",
+    "ssrAPIs": Array [],
+    "version": "1.0.0",
+  },
+]
+`;
diff --git a/node_modules/gatsby/src/bootstrap/load-plugins/__tests__/__snapshots__/validate.js.snap b/node_modules/gatsby/src/bootstrap/load-plugins/__tests__/__snapshots__/validate.js.snap
new file mode 100644
index 0000000..5f35c51
--- /dev/null
+++ b/node_modules/gatsby/src/bootstrap/load-plugins/__tests__/__snapshots__/validate.js.snap
@@ -0,0 +1,198 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`collatePluginAPIs Identifies APIs used by a site's plugins 1`] = `
+Object {
+  "badExports": Object {
+    "browser": Array [],
+    "node": Array [],
+    "ssr": Array [],
+  },
+  "flattenedPlugins": Array [
+    Object {
+      "browserAPIs": Array [
+        "browser-1",
+        "browser-2",
+      ],
+      "id": "Plugin foo",
+      "name": "foo-plugin",
+      "nodeAPIs": Array [
+        "node-1",
+        "node-2",
+      ],
+      "pluginOptions": Object {
+        "plugins": Array [],
+      },
+      "resolve": "/foo",
+      "ssrAPIs": Array [
+        "ssr-1",
+        "ssr-2",
+      ],
+      "version": "1.0.0",
+    },
+    Object {
+      "browserAPIs": Array [
+        "browser-2",
+        "browser-3",
+      ],
+      "id": "Plugin default-site-plugin",
+      "name": "default-site-plugin",
+      "nodeAPIs": Array [
+        "node-2",
+        "node-3",
+      ],
+      "pluginOptions": Object {
+        "plugins": Array [],
+      },
+      "resolve": "/bar",
+      "ssrAPIs": Array [
+        "ssr-2",
+        "ssr-3",
+      ],
+      "version": "ec21d02c31ab044d027a1d2fcaeb4a79",
+    },
+  ],
+}
+`;
+
+exports[`collatePluginAPIs Identifies incorrect APIs used by a site's plugins 1`] = `
+Object {
+  "badExports": Object {
+    "browser": Array [
+      Object {
+        "exportName": "bad-browser-2",
+        "pluginName": "default-site-plugin",
+        "pluginVersion": "ec21d02c31ab044d027a1d2fcaeb4a79",
+      },
+      Object {
+        "exportName": "bad-browser-3",
+        "pluginName": "default-site-plugin",
+        "pluginVersion": "ec21d02c31ab044d027a1d2fcaeb4a79",
+      },
+    ],
+    "node": Array [
+      Object {
+        "exportName": "bad-node-2",
+        "pluginName": "default-site-plugin",
+        "pluginVersion": "ec21d02c31ab044d027a1d2fcaeb4a79",
+      },
+      Object {
+        "exportName": "bad-node-3",
+        "pluginName": "default-site-plugin",
+        "pluginVersion": "ec21d02c31ab044d027a1d2fcaeb4a79",
+      },
+    ],
+    "ssr": Array [
+      Object {
+        "exportName": "bad-ssr-2",
+        "pluginName": "default-site-plugin",
+        "pluginVersion": "ec21d02c31ab044d027a1d2fcaeb4a79",
+      },
+      Object {
+        "exportName": "bad-ssr-3",
+        "pluginName": "default-site-plugin",
+        "pluginVersion": "ec21d02c31ab044d027a1d2fcaeb4a79",
+      },
+    ],
+  },
+  "flattenedPlugins": Array [
+    Object {
+      "browserAPIs": Array [
+        "browser-1",
+        "browser-2",
+      ],
+      "id": "Plugin foo",
+      "name": "foo-plugin",
+      "nodeAPIs": Array [
+        "node-1",
+        "node-2",
+      ],
+      "pluginOptions": Object {
+        "plugins": Array [],
+      },
+      "resolve": "/foo",
+      "ssrAPIs": Array [
+        "ssr-1",
+        "ssr-2",
+      ],
+      "version": "1.0.0",
+    },
+    Object {
+      "browserAPIs": Array [],
+      "id": "Plugin default-site-plugin",
+      "name": "default-site-plugin",
+      "nodeAPIs": Array [],
+      "pluginOptions": Object {
+        "plugins": Array [],
+      },
+      "resolve": "/bad-apis",
+      "ssrAPIs": Array [],
+      "version": "ec21d02c31ab044d027a1d2fcaeb4a79",
+    },
+  ],
+}
+`;
+
+exports[`handleMultipleReplaceRenderers Does nothing when replaceRenderers is implemented once 1`] = `
+Array [
+  Object {
+    "browserAPIs": Array [],
+    "id": "Plugin foo",
+    "name": "foo-plugin",
+    "nodeAPIs": Array [],
+    "pluginOptions": Object {
+      "plugins": Array [],
+    },
+    "resolve": "___TEST___",
+    "ssrAPIs": Array [
+      "replaceRenderer",
+    ],
+    "version": "1.0.0",
+  },
+  Object {
+    "browserAPIs": Array [],
+    "id": "Plugin default-site-plugin",
+    "name": "default-site-plugin",
+    "nodeAPIs": Array [],
+    "pluginOptions": Object {
+      "plugins": Array [],
+    },
+    "resolve": "___TEST___",
+    "ssrAPIs": Array [],
+    "version": "ec21d02c31ab044d027a1d2fcaeb4a79",
+  },
+]
+`;
+
+exports[`handleMultipleReplaceRenderers Sets skipSSR when replaceRenderers is implemented more than once 1`] = `
+Array [
+  Object {
+    "browserAPIs": Array [],
+    "id": "Plugin foo",
+    "name": "foo-plugin",
+    "nodeAPIs": Array [],
+    "pluginOptions": Object {
+      "plugins": Array [],
+    },
+    "resolve": "___TEST___",
+    "skipSSR": true,
+    "ssrAPIs": Array [
+      "replaceRenderer",
+    ],
+    "version": "1.0.0",
+  },
+  Object {
+    "browserAPIs": Array [],
+    "id": "Plugin default-site-plugin",
+    "name": "default-site-plugin",
+    "nodeAPIs": Array [],
+    "pluginOptions": Object {
+      "plugins": Array [],
+    },
+    "resolve": "___TEST___",
+    "ssrAPIs": Array [
+      "replaceRenderer",
+    ],
+    "version": "ec21d02c31ab044d027a1d2fcaeb4a79",
+  },
+]
+`;
diff --git a/node_modules/gatsby/src/bootstrap/load-plugins/__tests__/load-plugins.js b/node_modules/gatsby/src/bootstrap/load-plugins/__tests__/load-plugins.js
new file mode 100644
index 0000000..4b8d60e
--- /dev/null
+++ b/node_modules/gatsby/src/bootstrap/load-plugins/__tests__/load-plugins.js
@@ -0,0 +1,42 @@
+const loadPlugins = require(`../index`)
+
+describe(`Load plugins`, () => {
+  /**
+   * Replace the resolve path and version string.
+   * Resolve path will vary depending on platform.
+   * Version can be updated (we use external plugin in default config).
+   * Both will cause snapshots to differ.
+   */
+  const replaceFieldsThatCanVary = plugins =>
+    plugins.map(plugin => {
+      return {
+        ...plugin,
+        resolve: ``,
+        version: `1.0.0`,
+      }
+    })
+
+  it(`Load plugins for a site`, async () => {
+    let plugins = await loadPlugins({ plugins: [] })
+
+    plugins = replaceFieldsThatCanVary(plugins)
+
+    expect(plugins).toMatchSnapshot()
+  })
+
+  it(`Loads plugins defined with an object but without an option key`, async () => {
+    const config = {
+      plugins: [
+        {
+          resolve: `___TEST___`,
+        },
+      ],
+    }
+
+    let plugins = await loadPlugins(config)
+
+    plugins = replaceFieldsThatCanVary(plugins)
+
+    expect(plugins).toMatchSnapshot()
+  })
+})
diff --git a/node_modules/gatsby/src/bootstrap/load-plugins/__tests__/validate.js b/node_modules/gatsby/src/bootstrap/load-plugins/__tests__/validate.js
new file mode 100644
index 0000000..a445a0d
--- /dev/null
+++ b/node_modules/gatsby/src/bootstrap/load-plugins/__tests__/validate.js
@@ -0,0 +1,215 @@
+jest.mock(`gatsby-cli/lib/reporter`, () => {
+  return {
+    panicOnBuild: jest.fn(),
+    warn: jest.fn(),
+  }
+})
+jest.mock(`../../resolve-module-exports`)
+
+const reporter = require(`gatsby-cli/lib/reporter`)
+const {
+  collatePluginAPIs,
+  handleBadExports,
+  handleMultipleReplaceRenderers,
+  warnOnIncompatiblePeerDependency,
+} = require(`../validate`)
+
+describe(`collatePluginAPIs`, () => {
+  const MOCK_RESULTS = {
+    "/foo/gatsby-node": [`node-1`, `node-2`],
+    "/foo/gatsby-browser": [`browser-1`, `browser-2`],
+    "/foo/gatsby-ssr": [`ssr-1`, `ssr-2`],
+    "/bar/gatsby-node": [`node-2`, `node-3`],
+    "/bar/gatsby-browser": [`browser-2`, `browser-3`],
+    "/bar/gatsby-ssr": [`ssr-2`, `ssr-3`],
+    "/bad-apis/gatsby-node": [`bad-node-2`, `bad-node-3`],
+    "/bad-apis/gatsby-browser": [`bad-browser-2`, `bad-browser-3`],
+    "/bad-apis/gatsby-ssr": [`bad-ssr-2`, `bad-ssr-3`],
+  }
+
+  beforeEach(() => {
+    const resolveModuleExports = require(`../../resolve-module-exports`)
+    resolveModuleExports(MOCK_RESULTS)
+  })
+
+  it(`Identifies APIs used by a site's plugins`, async () => {
+    const apis = {
+      node: [`node-1`, `node-2`, `node-3`, `node-4`],
+      browser: [`browser-1`, `browser-2`, `browser-3`, `browser-4`],
+      ssr: [`ssr-1`, `ssr-2`, `ssr-3`, `ssr-4`],
+    }
+    const flattenedPlugins = [
+      {
+        resolve: `/foo`,
+        id: `Plugin foo`,
+        name: `foo-plugin`,
+        version: `1.0.0`,
+        pluginOptions: { plugins: [] },
+      },
+      {
+        resolve: `/bar`,
+        id: `Plugin default-site-plugin`,
+        name: `default-site-plugin`,
+        version: `ec21d02c31ab044d027a1d2fcaeb4a79`,
+        pluginOptions: { plugins: [] },
+      },
+    ]
+
+    let result = collatePluginAPIs({ apis, flattenedPlugins })
+    expect(result).toMatchSnapshot()
+  })
+
+  it(`Identifies incorrect APIs used by a site's plugins`, async () => {
+    const apis = {
+      node: [`node-1`, `node-2`, `node-3`, `node-4`],
+      browser: [`browser-1`, `browser-2`, `browser-3`, `browser-4`],
+      ssr: [`ssr-1`, `ssr-2`, `ssr-3`, `ssr-4`],
+    }
+    const flattenedPlugins = [
+      {
+        resolve: `/foo`,
+        id: `Plugin foo`,
+        name: `foo-plugin`,
+        version: `1.0.0`,
+        pluginOptions: { plugins: [] },
+      },
+      {
+        resolve: `/bad-apis`,
+        id: `Plugin default-site-plugin`,
+        name: `default-site-plugin`,
+        version: `ec21d02c31ab044d027a1d2fcaeb4a79`,
+        pluginOptions: { plugins: [] },
+      },
+    ]
+
+    let result = collatePluginAPIs({ apis, flattenedPlugins })
+    expect(result).toMatchSnapshot()
+  })
+})
+
+describe(`handleBadExports`, () => {
+  it(`Does nothing when there are no bad exports`, async () => {
+    handleBadExports({
+      apis: {
+        node: [`these`, `can`, `be`],
+        browser: [`anything`, `as there`],
+        ssr: [`are no`, `bad errors`],
+      },
+      badExports: {
+        node: [],
+        browser: [],
+        ssr: [],
+      },
+    })
+  })
+
+  it(`Calls reporter.panicOnBuild when bad exports are detected`, async () => {
+    handleBadExports({
+      apis: {
+        node: [``],
+        browser: [``],
+        ssr: [`notFoo`, `bar`],
+      },
+      badExports: {
+        node: [],
+        browser: [],
+        ssr: [
+          {
+            exportName: `foo`,
+            pluginName: `default-site-plugin`,
+          },
+        ],
+      },
+    })
+
+    expect(reporter.panicOnBuild.mock.calls.length).toBe(1)
+  })
+})
+
+describe(`handleMultipleReplaceRenderers`, () => {
+  it(`Does nothing when replaceRenderers is implemented once`, async () => {
+    const flattenedPlugins = [
+      {
+        resolve: `___TEST___`,
+        id: `Plugin foo`,
+        name: `foo-plugin`,
+        version: `1.0.0`,
+        pluginOptions: { plugins: [] },
+        nodeAPIs: [],
+        browserAPIs: [],
+        ssrAPIs: [`replaceRenderer`],
+      },
+      {
+        resolve: `___TEST___`,
+        id: `Plugin default-site-plugin`,
+        name: `default-site-plugin`,
+        version: `ec21d02c31ab044d027a1d2fcaeb4a79`,
+        pluginOptions: { plugins: [] },
+        nodeAPIs: [],
+        browserAPIs: [],
+        ssrAPIs: [],
+      },
+    ]
+
+    const result = handleMultipleReplaceRenderers({
+      flattenedPlugins,
+    })
+
+    expect(result).toMatchSnapshot()
+  })
+
+  it(`Sets skipSSR when replaceRenderers is implemented more than once`, async () => {
+    const flattenedPlugins = [
+      {
+        resolve: `___TEST___`,
+        id: `Plugin foo`,
+        name: `foo-plugin`,
+        version: `1.0.0`,
+        pluginOptions: { plugins: [] },
+        nodeAPIs: [],
+        browserAPIs: [],
+        ssrAPIs: [`replaceRenderer`],
+      },
+      {
+        resolve: `___TEST___`,
+        id: `Plugin default-site-plugin`,
+        name: `default-site-plugin`,
+        version: `ec21d02c31ab044d027a1d2fcaeb4a79`,
+        pluginOptions: { plugins: [] },
+        nodeAPIs: [],
+        browserAPIs: [],
+        ssrAPIs: [`replaceRenderer`],
+      },
+    ]
+
+    const result = handleMultipleReplaceRenderers({
+      flattenedPlugins,
+    })
+
+    expect(result).toMatchSnapshot()
+  })
+})
+
+describe(`warnOnIncompatiblePeerDependency`, () => {
+  beforeEach(() => {
+    reporter.warn.mockClear()
+  })
+
+  it(`Does not warn when no peer dependency`, () => {
+    warnOnIncompatiblePeerDependency(`dummy-package`, { peerDependencies: {} })
+
+    expect(reporter.warn).not.toHaveBeenCalled()
+  })
+
+  it(`Warns on incompatible gatsby peer dependency`, async () => {
+    warnOnIncompatiblePeerDependency(`dummy-package`, {
+      peerDependencies: {
+        gatsby: `<2.0.0`,
+      },
+    })
+
+    expect(reporter.warn).toHaveBeenCalledWith(
+      expect.stringContaining(`Plugin dummy-package is not compatible`)
+    )
+  })
+})
diff --git a/node_modules/gatsby/src/bootstrap/load-plugins/index.js b/node_modules/gatsby/src/bootstrap/load-plugins/index.js
new file mode 100644
index 0000000..3f0bf4f
--- /dev/null
+++ b/node_modules/gatsby/src/bootstrap/load-plugins/index.js
@@ -0,0 +1,68 @@
+const _ = require(`lodash`)
+
+const { store } = require(`../../redux`)
+const nodeAPIs = require(`../../utils/api-node-docs`)
+const browserAPIs = require(`../../utils/api-browser-docs`)
+const ssrAPIs = require(`../../../cache-dir/api-ssr-docs`)
+const loadPlugins = require(`./load`)
+const {
+  collatePluginAPIs,
+  handleBadExports,
+  handleMultipleReplaceRenderers,
+} = require(`./validate`)
+
+const apis = {
+  node: _.keys(nodeAPIs),
+  browser: _.keys(browserAPIs),
+  ssr: _.keys(ssrAPIs),
+}
+
+// Create a "flattened" array of plugins with all subplugins
+// brought to the top-level. This simplifies running gatsby-* files
+// for subplugins.
+const flattenPlugins = plugins => {
+  const flattened = []
+  const extractPlugins = plugin => {
+    plugin.pluginOptions.plugins.forEach(subPlugin => {
+      flattened.push(subPlugin)
+      extractPlugins(subPlugin)
+    })
+  }
+
+  plugins.forEach(plugin => {
+    flattened.push(plugin)
+    extractPlugins(plugin)
+  })
+
+  return flattened
+}
+
+module.exports = async (config = {}, rootDir = null) => {
+  // Collate internal plugins, site config plugins, site default plugins
+  const plugins = loadPlugins(config, rootDir)
+
+  // Create a flattened array of the plugins
+  let flattenedPlugins = flattenPlugins(plugins)
+
+  // Work out which plugins use which APIs, including those which are not
+  // valid Gatsby APIs, aka 'badExports'
+  const x = collatePluginAPIs({ apis, flattenedPlugins })
+  flattenedPlugins = x.flattenedPlugins
+  const badExports = x.badExports
+
+  // Show errors for any non-Gatsby APIs exported from plugins
+  handleBadExports({ apis, badExports })
+
+  // Show errors when ReplaceRenderer has been implemented multiple times
+  flattenedPlugins = handleMultipleReplaceRenderers({
+    flattenedPlugins,
+  })
+
+  // If we get this far, everything looks good. Update the store
+  store.dispatch({
+    type: `SET_SITE_FLATTENED_PLUGINS`,
+    payload: flattenedPlugins,
+  })
+
+  return flattenedPlugins
+}
diff --git a/node_modules/gatsby/src/bootstrap/load-plugins/load.js b/node_modules/gatsby/src/bootstrap/load-plugins/load.js
new file mode 100644
index 0000000..fb8f8ac
--- /dev/null
+++ b/node_modules/gatsby/src/bootstrap/load-plugins/load.js
@@ -0,0 +1,208 @@
+const _ = require(`lodash`)
+const slash = require(`slash`)
+const fs = require(`fs`)
+const path = require(`path`)
+const crypto = require(`crypto`)
+const glob = require(`glob`)
+const { warnOnIncompatiblePeerDependency } = require(`./validate`)
+const { store } = require(`../../redux`)
+const existsSync = require(`fs-exists-cached`).sync
+const createNodeId = require(`../../utils/create-node-id`)
+const createRequireFromPath = require(`../../utils/create-require-from-path`)
+
+function createFileContentHash(root, globPattern) {
+  const hash = crypto.createHash(`md5`)
+  const files = glob.sync(`${root}/${globPattern}`, { nodir: true })
+
+  files.forEach(filepath => {
+    hash.update(fs.readFileSync(filepath))
+  })
+
+  return hash.digest(`hex`)
+}
+
+/**
+ * Make sure key is unique to plugin options. E.g there could
+ * be multiple source-filesystem plugins, with different names
+ * (docs, blogs).
+ * @param {*} name Name of the plugin
+ * @param {*} pluginObject
+ */
+const createPluginId = (name, pluginObject = null) =>
+  createNodeId(
+    name + (pluginObject ? JSON.stringify(pluginObject.options) : ``),
+    `Plugin`
+  )
+
+/**
+ * @typedef {Object} PluginInfo
+ * @property {string} resolve The absolute path to the plugin
+ * @property {string} name The plugin name
+ * @property {string} version The plugin version (can be content hash)
+ */
+
+/**
+ * resolvePlugin
+ * @param {string} pluginName
+ * This can be a name of a local plugin, the name of a plugin located in
+ * node_modules, or a Gatsby internal plugin. In the last case the pluginName
+ * will be an absolute path.
+ * @param {string} rootDir
+ * This is the project location, from which are found the plugins
+ * @return {PluginInfo}
+ */
+function resolvePlugin(pluginName, rootDir) {
+  // Only find plugins when we're not given an absolute path
+  if (!existsSync(pluginName)) {
+    // Find the plugin in the local plugins folder
+    const resolvedPath = slash(path.resolve(`./plugins/${pluginName}`))
+
+    if (existsSync(resolvedPath)) {
+      if (existsSync(`${resolvedPath}/package.json`)) {
+        const packageJSON = JSON.parse(
+          fs.readFileSync(`${resolvedPath}/package.json`, `utf-8`)
+        )
+        const name = packageJSON.name || pluginName
+        warnOnIncompatiblePeerDependency(name, packageJSON)
+
+        return {
+          resolve: resolvedPath,
+          name,
+          id: createPluginId(name),
+          version:
+            packageJSON.version || createFileContentHash(resolvedPath, `**`),
+        }
+      } else {
+        // Make package.json a requirement for local plugins too
+        throw new Error(`Plugin ${pluginName} requires a package.json file`)
+      }
+    }
+  }
+
+  /**
+   * Here we have an absolute path to an internal plugin, or a name of a module
+   * which should be located in node_modules.
+   */
+  try {
+    const requireSource =
+      rootDir !== null
+        ? createRequireFromPath(`${rootDir}/:internal:`)
+        : require
+    const resolvedPath = slash(path.dirname(requireSource.resolve(pluginName)))
+
+    const packageJSON = JSON.parse(
+      fs.readFileSync(`${resolvedPath}/package.json`, `utf-8`)
+    )
+    warnOnIncompatiblePeerDependency(packageJSON.name, packageJSON)
+
+    return {
+      resolve: resolvedPath,
+      id: createPluginId(packageJSON.name),
+      name: packageJSON.name,
+      version: packageJSON.version,
+    }
+  } catch (err) {
+    throw new Error(
+      `Unable to find plugin "${pluginName}". Perhaps you need to install its package?`
+    )
+  }
+}
+
+module.exports = (config = {}, rootDir = null) => {
+  // Instantiate plugins.
+  const plugins = []
+
+  // Create fake little site with a plugin for testing this
+  // w/ snapshots. Move plugin processing to its own module.
+  // Also test adding to redux store.
+  const processPlugin = plugin => {
+    if (_.isString(plugin)) {
+      const info = resolvePlugin(plugin, rootDir)
+
+      return {
+        ...info,
+        pluginOptions: {
+          plugins: [],
+        },
+      }
+    } else {
+      plugin.options = plugin.options || {}
+
+      // Plugins can have plugins.
+      const subplugins = []
+      if (plugin.options.plugins) {
+        plugin.options.plugins.forEach(p => {
+          subplugins.push(processPlugin(p))
+        })
+
+        plugin.options.plugins = subplugins
+      }
+
+      // Add some default values for tests as we don't actually
+      // want to try to load anything during tests.
+      if (plugin.resolve === `___TEST___`) {
+        const name = `TEST`
+
+        return {
+          id: createPluginId(name, plugin),
+          name,
+          pluginOptions: {
+            plugins: [],
+          },
+        }
+      }
+
+      const info = resolvePlugin(plugin.resolve, rootDir)
+
+      return {
+        ...info,
+        id: createPluginId(info.name, plugin),
+        pluginOptions: _.merge({ plugins: [] }, plugin.options),
+      }
+    }
+  }
+
+  // Add internal plugins
+  const internalPlugins = [
+    `../../internal-plugins/dev-404-page`,
+    `../../internal-plugins/load-babel-config`,
+    `../../internal-plugins/internal-data-bridge`,
+    `../../internal-plugins/prod-404`,
+    `../../internal-plugins/webpack-theme-component-shadowing`,
+  ]
+  internalPlugins.forEach(relPath => {
+    const absPath = path.join(__dirname, relPath)
+    plugins.push(processPlugin(absPath))
+  })
+
+  // Add plugins from the site config.
+  if (config.plugins) {
+    config.plugins.forEach(plugin => {
+      plugins.push(processPlugin(plugin))
+    })
+  }
+
+  // Add the site's default "plugin" i.e. gatsby-x files in root of site.
+  plugins.push({
+    resolve: slash(process.cwd()),
+    id: createPluginId(`default-site-plugin`),
+    name: `default-site-plugin`,
+    version: createFileContentHash(process.cwd(), `gatsby-*`),
+    pluginOptions: {
+      plugins: [],
+    },
+  })
+
+  const program = store.getState().program
+  plugins.push(
+    processPlugin({
+      resolve: require.resolve(`gatsby-plugin-page-creator`),
+      options: {
+        path: slash(path.join(program.directory, `src/pages`)),
+        pathCheck: false,
+      },
+    })
+  )
+
+  return plugins
+}
diff --git a/node_modules/gatsby/src/bootstrap/load-plugins/validate.js b/node_modules/gatsby/src/bootstrap/load-plugins/validate.js
new file mode 100644
index 0000000..cbfeeca
--- /dev/null
+++ b/node_modules/gatsby/src/bootstrap/load-plugins/validate.js
@@ -0,0 +1,226 @@
+const _ = require(`lodash`)
+const semver = require(`semver`)
+const { version: gatsbyVersion } = require(`gatsby/package.json`)
+const reporter = require(`gatsby-cli/lib/reporter`)
+const resolveModuleExports = require(`../resolve-module-exports`)
+
+// Given a plugin object, an array of the API names it exports and an
+// array of valid API names, return an array of invalid API exports.
+const getBadExports = (plugin, pluginAPIKeys, apis) => {
+  let badExports = []
+  // Discover any exports from plugins which are not "known"
+  badExports = badExports.concat(
+    _.difference(pluginAPIKeys, apis).map(e => {
+      return {
+        exportName: e,
+        pluginName: plugin.name,
+        pluginVersion: plugin.version,
+      }
+    })
+  )
+  return badExports
+}
+
+const getBadExportsMessage = (badExports, exportType, apis) => {
+  const { stripIndent } = require(`common-tags`)
+  const stringSimiliarity = require(`string-similarity`)
+  let capitalized = `${exportType[0].toUpperCase()}${exportType.slice(1)}`
+  if (capitalized === `Ssr`) capitalized = `SSR`
+
+  let message = `\n`
+  message += stripIndent`
+    Your plugins must export known APIs from their gatsby-${exportType}.js.
+    The following exports aren't APIs. Perhaps you made a typo or your plugin is outdated?
+
+    See https://www.gatsbyjs.org/docs/${exportType}-apis/ for the list of Gatsby ${capitalized} APIs
+  `
+
+  badExports.forEach(bady => {
+    message += `\n\n`
+    const similarities = stringSimiliarity.findBestMatch(bady.exportName, apis)
+    const isDefaultPlugin = bady.pluginName == `default-site-plugin`
+    const badExportsMigrationMap = {
+      modifyWebpackConfig: {
+        replacement: `onCreateWebpackConfig`,
+        migrationLink: `https://gatsby.dev/update-webpack-config`,
+      },
+      wrapRootComponent: {
+        replacement: `wrapRootElement`,
+        migrationLink: `https://gatsby.dev/update-wraprootcomponent`,
+      },
+    }
+    const isOldAPI = Object.keys(badExportsMigrationMap).includes(
+      bady.exportName
+    )
+
+    if (isDefaultPlugin && isOldAPI) {
+      const { replacement, migrationLink } = badExportsMigrationMap[
+        bady.exportName
+      ]
+      message += stripIndent`
+        - Your site's gatsby-${exportType}.js is exporting "${
+        bady.exportName
+      }" which was removed in Gatsby v2. Refer to the migration guide for more info on upgrading to "${replacement}":
+      `
+      message += `\n ${migrationLink}`
+    } else if (isDefaultPlugin) {
+      message += stripIndent`
+        - Your site's gatsby-${exportType}.js is exporting a variable named "${
+        bady.exportName
+      }" which isn't an API.
+      `
+    } else {
+      message += stripIndent`
+        - The plugin "${bady.pluginName}@${
+        bady.pluginVersion
+      }" is exporting a variable named "${bady.exportName}" which isn't an API.
+      `
+    }
+
+    if (similarities.bestMatch.rating > 0.5 && !isOldAPI) {
+      message += `\n\n`
+      message += `Perhaps you meant to export "${
+        similarities.bestMatch.target
+      }"?`
+    }
+  })
+
+  return message
+}
+
+const handleBadExports = ({ apis, badExports }) => {
+  // Output error messages for all bad exports
+  _.toPairs(badExports).forEach(badItem => {
+    const [exportType, entries] = badItem
+    if (entries.length > 0) {
+      reporter.panicOnBuild(
+        getBadExportsMessage(entries, exportType, apis[exportType])
+      )
+    }
+  })
+}
+
+/**
+ * Identify which APIs each plugin exports
+ */
+const collatePluginAPIs = ({ apis, flattenedPlugins }) => {
+  // Get a list of bad exports
+  const badExports = {
+    node: [],
+    browser: [],
+    ssr: [],
+  }
+
+  flattenedPlugins.forEach(plugin => {
+    plugin.nodeAPIs = []
+    plugin.browserAPIs = []
+    plugin.ssrAPIs = []
+
+    // Discover which APIs this plugin implements and store an array against
+    // the plugin node itself *and* in an API to plugins map for faster lookups
+    // later.
+    const pluginNodeExports = resolveModuleExports(
+      `${plugin.resolve}/gatsby-node`
+    )
+    const pluginBrowserExports = resolveModuleExports(
+      `${plugin.resolve}/gatsby-browser`
+    )
+    const pluginSSRExports = resolveModuleExports(
+      `${plugin.resolve}/gatsby-ssr`
+    )
+
+    if (pluginNodeExports.length > 0) {
+      plugin.nodeAPIs = _.intersection(pluginNodeExports, apis.node)
+      badExports.node = badExports.node.concat(
+        getBadExports(plugin, pluginNodeExports, apis.node)
+      ) // Collate any bad exports
+    }
+
+    if (pluginBrowserExports.length > 0) {
+      plugin.browserAPIs = _.intersection(pluginBrowserExports, apis.browser)
+      badExports.browser = badExports.browser.concat(
+        getBadExports(plugin, pluginBrowserExports, apis.browser)
+      ) // Collate any bad exports
+    }
+
+    if (pluginSSRExports.length > 0) {
+      plugin.ssrAPIs = _.intersection(pluginSSRExports, apis.ssr)
+      badExports.ssr = badExports.ssr.concat(
+        getBadExports(plugin, pluginSSRExports, apis.ssr)
+      ) // Collate any bad exports
+    }
+  })
+
+  return { flattenedPlugins, badExports }
+}
+
+const handleMultipleReplaceRenderers = ({ flattenedPlugins }) => {
+  // multiple replaceRenderers may cause problems at build time
+  const rendererPlugins = flattenedPlugins
+    .filter(plugin => plugin.ssrAPIs.includes(`replaceRenderer`))
+    .map(plugin => plugin.name)
+  if (rendererPlugins.length > 1) {
+    if (rendererPlugins.includes(`default-site-plugin`)) {
+      reporter.warn(`replaceRenderer API found in these plugins:`)
+      reporter.warn(rendererPlugins.join(`, `))
+      reporter.warn(
+        `This might be an error, see: https://www.gatsbyjs.org/docs/debugging-replace-renderer-api/`
+      )
+    } else {
+      console.log(``)
+      reporter.error(
+        `Gatsby's replaceRenderer API is implemented by multiple plugins:`
+      )
+      reporter.error(rendererPlugins.join(`, `))
+      reporter.error(`This will break your build`)
+      reporter.error(
+        `See: https://www.gatsbyjs.org/docs/debugging-replace-renderer-api/`
+      )
+      if (process.env.NODE_ENV === `production`) process.exit(1)
+    }
+
+    // Now update plugin list so only final replaceRenderer will run
+    const ignorable = rendererPlugins.slice(0, -1)
+
+    // For each plugin in ignorable, set a skipSSR flag to true
+    // This prevents apiRunnerSSR() from attempting to run it later
+    const messages = []
+    flattenedPlugins.forEach((fp, i) => {
+      if (ignorable.includes(fp.name)) {
+        messages.push(
+          `Duplicate replaceRenderer found, skipping gatsby-ssr.js for plugin: ${
+            fp.name
+          }`
+        )
+        flattenedPlugins[i].skipSSR = true
+      }
+    })
+    if (messages.length > 0) {
+      console.log(``)
+      messages.forEach(m => reporter.warn(m))
+      console.log(``)
+    }
+  }
+
+  return flattenedPlugins
+}
+
+function warnOnIncompatiblePeerDependency(name, packageJSON) {
+  // Note: In the future the peer dependency should be enforced for all plugins.
+  const gatsbyPeerDependency = _.get(packageJSON, `peerDependencies.gatsby`)
+  if (
+    gatsbyPeerDependency &&
+    !semver.satisfies(gatsbyVersion, gatsbyPeerDependency)
+  ) {
+    reporter.warn(
+      `Plugin ${name} is not compatible with your gatsby version ${gatsbyVersion} - It requires gatsby@${gatsbyPeerDependency}`
+    )
+  }
+}
+
+module.exports = {
+  collatePluginAPIs,
+  handleBadExports,
+  handleMultipleReplaceRenderers,
+  warnOnIncompatiblePeerDependency,
+}
diff --git a/node_modules/gatsby/src/bootstrap/load-themes/index.js b/node_modules/gatsby/src/bootstrap/load-themes/index.js
new file mode 100644
index 0000000..0099c1e
--- /dev/null
+++ b/node_modules/gatsby/src/bootstrap/load-themes/index.js
@@ -0,0 +1,88 @@
+const path = require(`path`)
+const mergeGatsbyConfig = require(`../../utils/merge-gatsby-config`)
+const Promise = require(`bluebird`)
+const _ = require(`lodash`)
+const debug = require(`debug`)(`gatsby:load-themes`)
+const preferDefault = require(`../prefer-default`)
+const getConfigFile = require(`../get-config-file`)
+
+// get the gatsby-config file for a theme
+const resolveTheme = async themeSpec => {
+  const themeName = themeSpec.resolve || themeSpec
+  const themeDir = path.dirname(require.resolve(themeName))
+  const theme = await preferDefault(getConfigFile(themeDir, `gatsby-config`))
+  // if theme is a function, call it with the themeConfig
+  let themeConfig = theme
+  if (_.isFunction(theme)) {
+    themeConfig = theme(themeSpec.options || {})
+  }
+  return { themeName, themeConfig, themeSpec, themeDir }
+}
+
+// single iteration of a recursive function that resolve parent themes
+// It's recursive because we support child themes declaring parents and
+// have to resolve all the way `up the tree` of parent/children relationships
+//
+// Theoretically, there could be an infinite loop here but in practice there is
+// no use case for a loop so I expect that to only happen if someone is very
+// off track and creating their own set of themes
+const processTheme = ({ themeName, themeConfig, themeSpec, themeDir }) => {
+  // gatsby themes don't have to specify a gatsby-config.js (they might only use gatsby-node, etc)
+  // in this case they're technically plugins, but we should support it anyway
+  // because we can't guarentee which files theme creators create first
+  if (themeConfig && themeConfig.__experimentalThemes) {
+    // for every parent theme a theme defines, resolve the parent's
+    // gatsby config and return it in order [parentA, parentB, child]
+    return Promise.mapSeries(themeConfig.__experimentalThemes, async spec => {
+      const themeObj = await resolveTheme(spec)
+      return processTheme(themeObj)
+    }).then(arr =>
+      arr.concat([{ themeName, themeConfig, themeSpec, themeDir }])
+    )
+  } else {
+    // if a theme doesn't define additional themes, return the original theme
+    return [{ themeName, themeConfig, themeSpec, themeDir }]
+  }
+}
+
+module.exports = async config => {
+  const themesA = await Promise.mapSeries(
+    config.__experimentalThemes,
+    async themeSpec => {
+      const themeObj = await resolveTheme(themeSpec)
+      return processTheme(themeObj)
+    }
+  ).then(arr => _.flattenDeep(arr))
+
+  // log out flattened themes list to aid in debugging
+  debug(themesA)
+
+  // map over each theme, adding the theme itself to the plugins
+  // list in the config for the theme. This enables the usage of
+  // gatsby-node, etc in themes.
+  return (
+    Promise.mapSeries(themesA, ({ themeName, themeConfig = {}, themeSpec }) => {
+      return {
+        ...themeConfig,
+        plugins: [
+          ...(themeConfig.plugins || []),
+          // theme plugin is last so it's gatsby-node, etc can override it's declared plugins, like a normal site.
+          { resolve: themeName, options: themeSpec.options || {} },
+        ],
+      }
+    })
+      /**
+       * themes resolve to a gatsby-config, so here we merge all of the configs
+       * into a single config, making sure to maintain the order in which
+       * they were defined so that later configs, like the user's site and
+       * children, can override functionality in earlier themes.
+       */
+      .reduce(mergeGatsbyConfig, {})
+      .then(newConfig => {
+        return {
+          config: mergeGatsbyConfig(newConfig, config),
+          themes: themesA,
+        }
+      })
+  )
+}
diff --git a/node_modules/gatsby/src/bootstrap/log-line-function.js b/node_modules/gatsby/src/bootstrap/log-line-function.js
new file mode 100644
index 0000000..231b1cc
--- /dev/null
+++ b/node_modules/gatsby/src/bootstrap/log-line-function.js
@@ -0,0 +1,12 @@
+;[`log`, `warn`].forEach(function(method) {
+  var old = console[method]
+  console[method] = function() {
+    var stack = new Error().stack.split(/\n/)
+    // Chrome includes a single "Error" line, FF doesn't.
+    if (stack[0].indexOf(`Error`) === 0) {
+      stack = stack.slice(1)
+    }
+    var args = [].slice.apply(arguments).concat([stack[1].trim()])
+    return old.apply(console, args)
+  }
+})
diff --git a/node_modules/gatsby/src/bootstrap/page-hot-reloader.js b/node_modules/gatsby/src/bootstrap/page-hot-reloader.js
new file mode 100644
index 0000000..4d4f92b
--- /dev/null
+++ b/node_modules/gatsby/src/bootstrap/page-hot-reloader.js
@@ -0,0 +1,59 @@
+const { emitter, store } = require(`../redux`)
+const apiRunnerNode = require(`../utils/api-runner-node`)
+const { boundActionCreators } = require(`../redux/actions`)
+const { deletePage, deleteComponentsDependencies } = boundActionCreators
+
+let pagesDirty = false
+let graphql
+
+emitter.on(`CREATE_NODE`, action => {
+  if (action.payload.internal.type !== `SitePage`) {
+    pagesDirty = true
+  }
+})
+emitter.on(`DELETE_NODE`, action => {
+  if (action.payload.internal.type !== `SitePage`) {
+    pagesDirty = true
+    // Make a fake API call to trigger `API_RUNNING_QUEUE_EMPTY` being called.
+    // We don't want to call runCreatePages here as there might be work in
+    // progress. So this is a safe way to make sure runCreatePages gets called
+    // at a safe time.
+    apiRunnerNode(`FAKE_API_CALL`)
+  }
+})
+
+emitter.on(`API_RUNNING_QUEUE_EMPTY`, () => {
+  if (pagesDirty) {
+    runCreatePages()
+  }
+})
+
+const runCreatePages = async () => {
+  pagesDirty = false
+
+  const timestamp = Date.now()
+
+  await apiRunnerNode(`createPages`, {
+    graphql,
+    traceId: `createPages`,
+    waitForCascadingActions: true,
+  })
+
+  // Delete pages that weren't updated when running createPages.
+  Array.from(store.getState().pages.values()).forEach(page => {
+    if (
+      !page.isCreatedByStatefulCreatePages &&
+      page.updatedAt < timestamp &&
+      page.path !== `/404.html`
+    ) {
+      deleteComponentsDependencies([page.path])
+      deletePage(page)
+    }
+  })
+
+  emitter.emit(`CREATE_PAGE_END`)
+}
+
+module.exports = graphqlRunner => {
+  graphql = graphqlRunner
+}
diff --git a/node_modules/gatsby/src/bootstrap/prefer-default.js b/node_modules/gatsby/src/bootstrap/prefer-default.js
new file mode 100644
index 0000000..13b0f0f
--- /dev/null
+++ b/node_modules/gatsby/src/bootstrap/prefer-default.js
@@ -0,0 +1 @@
+module.exports = m => (m && m.default) || m
diff --git a/node_modules/gatsby/src/bootstrap/redirects-writer.js b/node_modules/gatsby/src/bootstrap/redirects-writer.js
new file mode 100644
index 0000000..5dc4dee
--- /dev/null
+++ b/node_modules/gatsby/src/bootstrap/redirects-writer.js
@@ -0,0 +1,51 @@
+import _ from "lodash"
+import crypto from "crypto"
+import fs from "fs-extra"
+import { store, emitter } from "../redux/"
+import { joinPath } from "../utils/path"
+
+let lastHash = null
+
+const writeRedirects = async () => {
+  bootstrapFinished = true
+
+  let { program, redirects } = store.getState()
+
+  // Filter for redirects that are meant for the browser.
+  const browserRedirects = redirects.filter(r => r.redirectInBrowser)
+
+  const newHash = crypto
+    .createHash(`md5`)
+    .update(JSON.stringify(browserRedirects))
+    .digest(`hex`)
+
+  if (newHash === lastHash) {
+    return Promise.resolve()
+  }
+
+  lastHash = newHash
+
+  return await fs.writeFile(
+    joinPath(program.directory, `.cache/redirects.json`),
+    JSON.stringify(browserRedirects, null, 2)
+  )
+}
+
+exports.writeRedirects = writeRedirects
+
+let bootstrapFinished = false
+let oldRedirects
+const debouncedWriteRedirects = _.debounce(() => {
+  // Don't write redirects again until bootstrap has finished.
+  if (
+    bootstrapFinished &&
+    !_.isEqual(oldRedirects, store.getState().redirects)
+  ) {
+    writeRedirects()
+    oldRedirects = store.getState().Redirects
+  }
+}, 250)
+
+emitter.on(`CREATE_REDIRECT`, () => {
+  debouncedWriteRedirects()
+})
diff --git a/node_modules/gatsby/src/bootstrap/resolve-module-exports.js b/node_modules/gatsby/src/bootstrap/resolve-module-exports.js
new file mode 100644
index 0000000..6f61e9a
--- /dev/null
+++ b/node_modules/gatsby/src/bootstrap/resolve-module-exports.js
@@ -0,0 +1,120 @@
+// @flow
+const fs = require(`fs`)
+const traverse = require(`@babel/traverse`).default
+const get = require(`lodash/get`)
+const { codeFrameColumns } = require(`@babel/code-frame`)
+const { babelParseToAst } = require(`../utils/babel-parse-to-ast`)
+const report = require(`gatsby-cli/lib/reporter`)
+
+/**
+ * Given a `require.resolve()` compatible path pointing to a JS module,
+ * return an array listing the names of the module's exports.
+ *
+ * Returns [] for invalid paths and modules without exports.
+ *
+ * @param {string} modulePath
+ * @param {function} resolver
+ */
+module.exports = (modulePath, resolver = require.resolve) => {
+  let absPath
+  const exportNames = []
+
+  try {
+    absPath = resolver(modulePath)
+  } catch (err) {
+    return exportNames // doesn't exist
+  }
+  const code = fs.readFileSync(absPath, `utf8`) // get file contents
+
+  let ast
+  try {
+    ast = babelParseToAst(code, absPath)
+  } catch (err) {
+    if (err instanceof SyntaxError) {
+      // Pretty print syntax errors
+      const codeFrame = codeFrameColumns(
+        code,
+        {
+          start: err.loc,
+        },
+        {
+          highlightCode: true,
+        }
+      )
+
+      report.panic(
+        `Syntax error in "${absPath}":\n${err.message}\n${codeFrame}`
+      )
+    } else {
+      // if it's not syntax error, just throw it
+      throw err
+    }
+  }
+
+  let isCommonJS = false
+  let isES6 = false
+
+  // extract names of exports from file
+  traverse(ast, {
+    // Check if the file is using ES6 imports
+    ImportDeclaration: function ImportDeclaration(astPath) {
+      isES6 = true
+    },
+
+    // get foo from `export const foo = bar`
+    ExportNamedDeclaration: function ExportNamedDeclaration(astPath) {
+      const exportName = get(
+        astPath,
+        `node.declaration.declarations[0].id.name`
+      )
+      isES6 = true
+      if (exportName) exportNames.push(exportName)
+    },
+
+    // get foo from `export { foo } from 'bar'`
+    // get foo from `export { foo }`
+    ExportSpecifier: function ExportSpecifier(astPath) {
+      const exportName = get(astPath, `node.exported.name`)
+      isES6 = true
+      if (exportName) exportNames.push(exportName)
+    },
+
+    AssignmentExpression: function AssignmentExpression(astPath) {
+      const nodeLeft = astPath.node.left
+
+      if (nodeLeft.type !== `MemberExpression`) return
+
+      // ignore marker property `__esModule`
+      if (get(nodeLeft, `property.name`) === `__esModule`) return
+
+      // get foo from `exports.foo = bar`
+      if (get(nodeLeft, `object.name`) === `exports`) {
+        isCommonJS = true
+        exportNames.push(nodeLeft.property.name)
+      }
+
+      // get foo from `module.exports.foo = bar`
+      if (
+        get(nodeLeft, `object.object.name`) === `module` &&
+        get(nodeLeft, `object.property.name`) === `exports`
+      ) {
+        isCommonJS = true
+        exportNames.push(nodeLeft.property.name)
+      }
+    },
+  })
+
+  if (isES6 && isCommonJS && process.env.NODE_ENV !== `test`) {
+    report.panic(
+      `This plugin file is using both CommonJS and ES6 module systems together which we don't support.
+You'll need to edit the file to use just one or the other.
+
+plugin: ${modulePath}.js
+
+This didn't cause a problem in Gatsby v1 so you might want to review the migration doc for this:
+https://gatsby.dev/no-mixed-modules
+      `
+    )
+  }
+  return exportNames
+}
diff --git a/node_modules/gatsby/src/bootstrap/write-js-requires.js b/node_modules/gatsby/src/bootstrap/write-js-requires.js
new file mode 100644
index 0000000..3fb2823
--- /dev/null
+++ b/node_modules/gatsby/src/bootstrap/write-js-requires.js
@@ -0,0 +1,91 @@
+const _ = require(`lodash`)
+const fs = require(`fs-extra`)
+import { joinPath } from "../utils/path"
+const { store, emitter } = require(`../redux`)
+
+const writeAll = async state => {
+  let { program, pages, matchPaths } = state
+  pages = [...pages.values()]
+
+  let components = []
+  pages.forEach(p => {
+    components.push({
+      componentChunkName: p.componentChunkName,
+      component: p.component,
+    })
+  })
+
+  components = _.uniqBy(components, c => c.componentChunkName)
+
+  // Create file with sync requires of components/json files.
+  let syncRequires = `const { hot } = require("react-hot-loader/root")
+
+// prefer default export if available
+const preferDefault = m => m && m.default || m
+\n\n`
+  syncRequires += `exports.components = {\n${components
+    .map(
+      c =>
+        `  "${c.componentChunkName}": hot(preferDefault(require("${joinPath(
+          c.component
+        )}")))`
+    )
+    .join(`,\n`)}
+}\n\n`
+
+  // Create file with async requires of components/json files.
+  let asyncRequires = `// prefer default export if available
+const preferDefault = m => m && m.default || m
+\n`
+  asyncRequires += `exports.components = {\n${components
+    .map(
+      c =>
+        `  "${c.componentChunkName}": () => import("${joinPath(
+          c.component
+        )}" /* webpackChunkName: "${c.componentChunkName}" */)`
+    )
+    .join(`,\n`)}
+}\n\n`
+
+  const writeAndMove = (file, data) => {
+    const destination = joinPath(program.directory, `.cache`, file)
+    const tmp = `${destination}.${Date.now()}`
+    return fs
+      .writeFile(tmp, data)
+      .then(() => fs.move(tmp, destination, { overwrite: true }))
+  }
+
+  return await Promise.all([
+    // writeAndMove(`pages.json`, JSON.stringify(pagesData, null, 4)),
+    writeAndMove(`sync-requires.js`, syncRequires),
+    writeAndMove(`async-requires.js`, asyncRequires),
+    writeAndMove(`match-paths.json`, JSON.stringify(matchPaths, null, 4)),
+  ])
+}
+
+const debouncedWriteAll = _.debounce(() => writeAll(store.getState()), 500, {
+  leading: true,
+})
+
+const startPageListener = () => {
+  emitter.on(`CREATE_PAGE`, () => {
+    debouncedWriteAll()
+  })
+
+  emitter.on(`CREATE_PAGE_END`, () => {
+    debouncedWriteAll()
+  })
+
+  emitter.on(`DELETE_PAGE`, () => {
+    debouncedWriteAll()
+  })
+
+  emitter.on(`DELETE_PAGE_BY_PATH`, () => {
+    debouncedWriteAll()
+  })
+}
+
+module.exports = {
+  writeAll,
+  startPageListener,
+}
diff --git a/node_modules/gatsby/src/commands/build-html.js b/node_modules/gatsby/src/commands/build-html.js
new file mode 100644
index 0000000..18aa78d
--- /dev/null
+++ b/node_modules/gatsby/src/commands/build-html.js
@@ -0,0 +1,68 @@
+/* @flow */
+const webpack = require(`webpack`)
+const fs = require(`fs`)
+
+const webpackConfig = require(`../utils/webpack.config`)
+const { createErrorFromString } = require(`gatsby-cli/lib/reporter/errors`)
+const renderHTMLQueue = require(`../utils/html-renderer-queue`)
+const telemetry = require(`gatsby-telemetry`)
+
+const runWebpack = compilerConfig =>
+  new Promise((resolve, reject) => {
+    webpack(compilerConfig).run((e, stats) => {
+      if (e) {
+        reject(e)
+      } else {
+        resolve(stats)
+      }
+    })
+  })
+
+const doBuildRenderer = async (program, webpackConfig) => {
+  const { directory } = program
+  const stats = await runWebpack(webpackConfig)
+  const outputFile = `${directory}/public/render-page.js`
+  if (stats.hasErrors()) {
+    let webpackErrors = stats.toJson().errors.filter(Boolean)
+    const error = webpackErrors.length
+      ? createErrorFromString(webpackErrors[0], `${outputFile}.map`)
+      : new Error(
+          `There was an issue while building the site: ` +
+            `\n\n${stats.toString()}`
+        )
+    throw error
+  }
+}
+
+const buildRenderer = async (program, stage) => {
+  const { directory } = program
+  const config = await webpackConfig(program, directory, stage, null)
+  await doBuildRenderer(program, config)
+}
+
+async function buildPages({ program, pagePaths, activity }) {
+  const { directory } = program
+  telemetry.decorateEvent(`BUILD_END`, {
+    siteMeasurements: { pagesCount: pagePaths.length },
+  })
+
+  const outputFile = `${directory}/public/render-page.js`
+  try {
+    await renderHTMLQueue(outputFile, pagePaths, activity)
+    try {
+      await fs.unlink(outputFile)
+      await fs.unlink(`${outputFile}.map`)
+    } catch (e) {
+      // This function will fail on Windows with no further consequences.
+    }
+  } catch (e) {
+    const prettyError = createErrorFromString(e.stack, `${outputFile}.map`)
+    prettyError.context = e.context
+    throw prettyError
+  }
+}
+
+module.exports = {
+  buildRenderer,
+  buildPages,
+}
diff --git a/node_modules/gatsby/src/commands/build-javascript.js b/node_modules/gatsby/src/commands/build-javascript.js
new file mode 100644
index 0000000..0810c13
--- /dev/null
+++ b/node_modules/gatsby/src/commands/build-javascript.js
@@ -0,0 +1,30 @@
+/* @flow */
+const webpack = require(`webpack`)
+const webpackConfig = require(`../utils/webpack.config`)
+
+module.exports = async program => {
+  const { directory } = program
+
+  const compilerConfig = await webpackConfig(
+    program,
+    directory,
+    `build-javascript`
+  )
+
+  return new Promise((resolve, reject) => {
+    webpack(compilerConfig).run((err, stats) => {
+      if (err) {
+        reject(err)
+        return
+      }
+
+      const jsonStats = stats.toJson()
+      if (jsonStats.errors && jsonStats.errors.length > 0) {
+        reject(jsonStats.errors)
+        return
+      }
+
+      resolve(stats)
+    })
+  })
+}
diff --git a/node_modules/gatsby/src/commands/build.js b/node_modules/gatsby/src/commands/build.js
new file mode 100644
index 0000000..33aad27
--- /dev/null
+++ b/node_modules/gatsby/src/commands/build.js
@@ -0,0 +1,166 @@
+/* @flow */
+
+const _ = require(`lodash`)
+const path = require(`path`)
+const report = require(`gatsby-cli/lib/reporter`)
+const buildHTML = require(`./build-html`)
+const buildProductionBundle = require(`./build-javascript`)
+const bootstrap = require(`../bootstrap`)
+const apiRunnerNode = require(`../utils/api-runner-node`)
+const { copyStaticDirs } = require(`../utils/get-static-dir`)
+const { initTracer, stopTracer } = require(`../utils/tracer`)
+const chalk = require(`chalk`)
+const tracer = require(`opentracing`).globalTracer()
+const signalExit = require(`signal-exit`)
+const telemetry = require(`gatsby-telemetry`)
+const queryRunner = require(`../query`)
+const { store, emitter } = require(`../redux`)
+const db = require(`../db`)
+const pageDataUtil = require(`../utils/page-data`)
+
+function reportFailure(msg, err: Error) {
+  report.log(``)
+  report.panic(msg, err)
+}
+
+type BuildArgs = {
+  directory: string,
+  sitePackageJson: object,
+  prefixPaths: boolean,
+  noUglify: boolean,
+  openTracingConfigFile: string,
+}
+
+const handleChangedCompilationHash = async (state, pageQueryIds, newHash) => {
+  const publicDir = path.join(state.program.directory, `public`)
+  const stalePaths = _.difference([...state.pages.keys()], pageQueryIds)
+  await pageDataUtil.rewriteCompilationHashes(
+    { publicDir },
+    stalePaths,
+    newHash
+  )
+  store.dispatch({
+    type: `SET_WEBPACK_COMPILATION_HASH`,
+    payload: newHash,
+  })
+}
+
+module.exports = async function build(program: BuildArgs) {
+  let activity
+  initTracer(program.openTracingConfigFile)
+
+  telemetry.trackCli(`BUILD_START`)
+  signalExit(() => {
+    telemetry.trackCli(`BUILD_END`)
+  })
+
+  const buildSpan = tracer.startSpan(`build`)
+  buildSpan.setTag(`directory`, program.directory)
+
+  const { graphqlRunner } = await bootstrap({
+    ...program,
+    parentSpan: buildSpan,
+  })
+
+  const queryIds = queryRunner.calcBootstrapDirtyQueryIds(store.getState())
+  const { staticQueryIds, pageQueryIds } = queryRunner.groupQueryIds(queryIds)
+
+  activity = report.activityTimer(`run static queries`, {
+    parentSpan: buildSpan,
+  })
+  activity.start()
+  await queryRunner.processStaticQueries(staticQueryIds, { activity })
+  activity.end()
+
+  await apiRunnerNode(`onPreBuild`, {
+    graphql: graphqlRunner,
+    parentSpan: buildSpan,
+  })
+
+  // Copy files from the static directory to
+  // an equivalent static directory within public.
+  copyStaticDirs()
+
+  activity = report.activityTimer(
+    `Building production JavaScript and CSS bundles`,
+    { parentSpan: buildSpan }
+  )
+  activity.start()
+  const stats = await buildProductionBundle(program).catch(err => {
+    reportFailure(`Generating JavaScript bundles failed`, err)
+  })
+  activity.end()
+
+  const webpackCompilationHash = stats.hash
+  if (webpackCompilationHash !== store.getState().webpackCompilationHash) {
+    activity = report.activityTimer(`Rewriting compilation hashes`, {
+      parentSpan: buildSpan,
+    })
+    activity.start()
+    await handleChangedCompilationHash(
+      store.getState(),
+      pageQueryIds,
+      webpackCompilationHash
+    )
+    activity.end()
+  }
+
+  activity = report.activityTimer(`run page queries`)
+  activity.start()
+  await queryRunner.processPageQueries(pageQueryIds, { activity })
+  activity.end()
+
+  const waitJobsFinished = () =>
+    new Promise((resolve, reject) => {
+      const onEndJob = () => {
+        if (store.getState().jobs.active.length === 0) {
+          resolve()
+          emitter.off(`END_JOB`, onEndJob)
+        }
+      }
+      emitter.on(`END_JOB`, onEndJob)
+      onEndJob()
+    })
+
+  await waitJobsFinished()
+
+  await db.saveState()
+
+  require(`../redux/actions`).boundActionCreators.setProgramStatus(
+    `BOOTSTRAP_QUERY_RUNNING_FINISHED`
+  )
+
+  activity = report.activityTimer(`Building static HTML for pages`, {
+    parentSpan: buildSpan,
+  })
+  activity.start()
+  try {
+    await buildHTML.buildRenderer(program, `build-html`)
+    const pagePaths = [...store.getState().pages.keys()]
+    await buildHTML.buildPages({ program, pagePaths, activity })
+  } catch (err) {
+    reportFailure(
+      report.stripIndent`
+        Building static HTML failed${
+          err.context && err.context.path
+            ? ` for path "${chalk.bold(err.context.path)}"`
+            : ``
+        }
+
+        See our docs page on debugging HTML builds for help https://gatsby.dev/debug-html
+      `,
+      err
+    )
+  }
+  activity.end()
+
+  await apiRunnerNode(`onPostBuild`, {
+    graphql: graphqlRunner,
+    parentSpan: buildSpan,
+  })
+
+  report.info(`Done building in ${process.uptime()} sec`)
+
+  buildSpan.finish()
+  await stopTracer()
+}
diff --git a/node_modules/gatsby/src/commands/clean.js b/node_modules/gatsby/src/commands/clean.js
new file mode 100644
index 0000000..b9e0752
--- /dev/null
+++ b/node_modules/gatsby/src/commands/clean.js
@@ -0,0 +1,16 @@
+const fs = require(`fs-extra`)
+const path = require(`path`)
+
+module.exports = async function clean(args) {
+  const { directory, report } = args
+
+  const directories = [`.cache`, `public`]
+
+  report.info(`Deleting ${directories.join(`, `)}`)
+
+  await Promise.all(
+    directories.map(dir => fs.remove(path.join(directory, dir)))
+  )
+
+  report.info(`Successfully deleted directories`)
+}
diff --git a/node_modules/gatsby/src/commands/data-explorer.js b/node_modules/gatsby/src/commands/data-explorer.js
new file mode 100644
index 0000000..7ceba05
--- /dev/null
+++ b/node_modules/gatsby/src/commands/data-explorer.js
@@ -0,0 +1,28 @@
+/* @flow */
+
+const express = require(`express`)
+const graphqlHTTP = require(`express-graphql`)
+const { store } = require(`../redux`)
+const bootstrap = require(`../bootstrap`)
+
+module.exports = async (program: any) => {
+  let { port, host } = program
+  port = typeof port === `string` ? parseInt(port, 10) : port
+
+  // bootstrap to ensure schema is in the store
+  await bootstrap(program)
+
+  const schema = store.getState().schema
+
+  const app = express()
+  app.use(
+    `/`,
+    graphqlHTTP({
+      schema,
+      graphiql: true,
+    })
+  )
+
+  console.log(`Gatsby data explorer running at`, `http://${host}:${port}`)
+  app.listen(port, host)
+}
diff --git a/node_modules/gatsby/src/commands/develop-static.js b/node_modules/gatsby/src/commands/develop-static.js
new file mode 100644
index 0000000..43d22a3
--- /dev/null
+++ b/node_modules/gatsby/src/commands/develop-static.js
@@ -0,0 +1,33 @@
+const sysPath = require(`path`)
+const express = require(`express`)
+const parseUrl = require(`parseurl`)
+
+/**
+ * Module exports.
+ * @public
+ */
+
+module.exports = serveStatic
+
+/**
+ * @param {string} root
+ * @param {object} [options]
+ * @return {function}
+ * @public
+ */
+
+function serveStatic(root, options) {
+  const expressStatic = express.static(root, options)
+
+  return function(req, res, next) {
+    if ([`GET`, `HEAD`].includes(req.method)) {
+      const path = parseUrl(req).pathname
+      const parsedPath = sysPath.parse(path)
+      if ([`.htm`, `.html`].includes(parsedPath.ext)) {
+        return next()
+      }
+    }
+
+    return expressStatic(req, res, next)
+  }
+}
diff --git a/node_modules/gatsby/src/commands/develop.js b/node_modules/gatsby/src/commands/develop.js
new file mode 100644
index 0000000..52df12d
--- /dev/null
+++ b/node_modules/gatsby/src/commands/develop.js
@@ -0,0 +1,610 @@
+/* @flow */
+
+const url = require(`url`)
+const glob = require(`glob`)
+const fs = require(`fs`)
+const openurl = require(`better-opn`)
+const chokidar = require(`chokidar`)
+const express = require(`express`)
+const graphqlHTTP = require(`express-graphql`)
+const graphqlPlayground = require(`graphql-playground-middleware-express`)
+  .default
+const { formatError } = require(`graphql`)
+const request = require(`request`)
+const rl = require(`readline`)
+const webpack = require(`webpack`)
+const webpackConfig = require(`../utils/webpack.config`)
+const bootstrap = require(`../bootstrap`)
+const { store, emitter } = require(`../redux`)
+const { syncStaticDir } = require(`../utils/get-static-dir`)
+const buildHTML = require(`./build-html`)
+const { withBasePath } = require(`../utils/path`)
+const report = require(`gatsby-cli/lib/reporter`)
+const launchEditor = require(`react-dev-utils/launchEditor`)
+const formatWebpackMessages = require(`react-dev-utils/formatWebpackMessages`)
+const chalk = require(`chalk`)
+const address = require(`address`)
+const withResolverContext = require(`../schema/context`)
+const sourceNodes = require(`../utils/source-nodes`)
+const websocketManager = require(`../utils/websocket-manager`)
+const getSslCert = require(`../utils/get-ssl-cert`)
+const slash = require(`slash`)
+const { initTracer } = require(`../utils/tracer`)
+const apiRunnerNode = require(`../utils/api-runner-node`)
+const telemetry = require(`gatsby-telemetry`)
+const queryRunner = require(`../query`)
+const queryWatcher = require(`../query/query-watcher`)
+const writeJsRequires = require(`../bootstrap/write-js-requires`)
+const db = require(`../db`)
+const detectPortInUseAndPrompt = require(`../utils/detect-port-in-use-and-prompt`)
+const onExit = require(`signal-exit`)
+
+// const isInteractive = process.stdout.isTTY
+
+// Watch the static directory and copy files to public as they're added or
+// changed. Wait 10 seconds so copying doesn't interfere with the regular
+// bootstrap.
+setTimeout(() => {
+  syncStaticDir()
+}, 10000)
+
+const rlInterface = rl.createInterface({
+  input: process.stdin,
+  output: process.stdout,
+})
+
+// Quit immediately on hearing ctrl-c
+rlInterface.on(`SIGINT`, () => {
+  process.exit()
+})
+
+function startQueryListener() {
+  const processing = new Set()
+  const waiting = new Map()
+
+  const betterQueueOptions = {
+    priority: (job, cb) => {
+      const activePaths = Array.from(websocketManager.activePaths.values())
+      if (job.id && activePaths.includes(job.id)) {
+        cb(null, 10)
+      } else {
+        cb(null, 1)
+      }
+    },
+    merge: (oldTask, newTask, cb) => {
+      cb(null, newTask)
+    },
+    filter: (job, cb) => {
+      if (processing.has(job.id)) {
+        waiting.set(job.id, job)
+        cb(`already running`)
+      } else {
+        cb(null, job)
+      }
+    },
+  }
+
+  const postHandler = async ({ queryJob, result }) => {
+    if (queryJob.isPage) {
+      websocketManager.emitPageData({
+        ...result,
+        id: queryJob.id,
+      })
+    } else {
+      websocketManager.emitStaticQueryData({
+        ...result,
+        id: queryJob.id,
+      })
+    }
+    processing.delete(queryJob.id)
+    if (waiting.has(queryJob.id)) {
+      queue.push(waiting.get(queryJob.id))
+      waiting.delete(queryJob.id)
+    }
+  }
+
+  const queue = queryRunner.createQueue({ postHandler, betterQueueOptions })
+  queryRunner.startListener(queue)
+}
+
+const runPageQueries = async queryIds => {
+  let activity = report.activityTimer(`run page queries`)
+  activity.start()
+  await queryRunner.processPageQueries(queryIds, { activity })
+  activity.end()
+
+  require(`../redux/actions`).boundActionCreators.setProgramStatus(
+    `BOOTSTRAP_QUERY_RUNNING_FINISHED`
+  )
+}
+
+const waitJobsFinished = () =>
+  new Promise((resolve, reject) => {
+    const onEndJob = () => {
+      if (store.getState().jobs.active.length === 0) {
+        resolve()
+        emitter.off(`END_JOB`, onEndJob)
+      }
+    }
+    emitter.on(`END_JOB`, onEndJob)
+    onEndJob()
+  })
+
+onExit(() => {
+  telemetry.trackCli(`DEVELOP_STOP`)
+})
+
+async function startServer(program) {
+  const directory = program.directory
+  const directoryPath = withBasePath(directory)
+  const createIndexHtml = async () => {
+    try {
+      await buildHTML.buildRenderer(program, `develop-html`)
+      await buildHTML.buildPages({ program, pagePaths: [`/`] })
+    } catch (err) {
+      if (err.name !== `WebpackError`) {
+        report.panic(err)
+        return
+      }
+      report.panic(
+        report.stripIndent`
+          There was an error compiling the html.js component for the development server.
+
+          See our docs page on debugging HTML builds for help https://gatsby.dev/debug-html
+        `,
+        err
+      )
+    }
+  }
+
+  await createIndexHtml()
+
+  const devConfig = await webpackConfig(
+    program,
+    directory,
+    `develop`,
+    program.port
+  )
+
+  const compiler = webpack(devConfig)
+
+  /**
+   * Set up the express app.
+   **/
+  const app = express()
+  app.use(telemetry.expressMiddleware(`DEVELOP`))
+  app.use(
+    require(`webpack-hot-middleware`)(compiler, {
+      log: false,
+      path: `/__webpack_hmr`,
+      heartbeat: 10 * 1000,
+    })
+  )
+
+  if (process.env.GATSBY_GRAPHQL_IDE === `playground`) {
+    app.get(
+      `/___graphql`,
+      graphqlPlayground({
+        endpoint: `/___graphql`,
+      }),
+      () => {}
+    )
+  }
+
+  app.use(
+    `/___graphql`,
+    graphqlHTTP(() => {
+      const schema = store.getState().schema
+      return {
+        schema,
+        graphiql:
+          process.env.GATSBY_GRAPHQL_IDE === `playground` ? false : true,
+        context: withResolverContext({}, schema),
+        formatError(err) {
+          return {
+            ...formatError(err),
+            stack: err.stack ? err.stack.split(`\n`) : [],
+          }
+        },
+      }
+    })
+  )
+
+  const mapToObject = map => {
+    const obj = {}
+    for (let [key, value] of map) {
+      obj[key] = value
+    }
+    return obj
+  }
+
+  app.get(`/___pages`, (req, res) => {
+    res.json(mapToObject(store.getState().pages))
+  })
+
+  // Allow requests from any origin. Avoids CORS issues when using the `--host` flag.
+  app.use((req, res, next) => {
+    res.header(`Access-Control-Allow-Origin`, `*`)
+    res.header(
+      `Access-Control-Allow-Headers`,
+      `Origin, X-Requested-With, Content-Type, Accept`
+    )
+    next()
+  })
+
+  /**
+   * Refresh external data sources.
+   * This behavior is disabled by default, but the ENABLE_REFRESH_ENDPOINT env var enables it
+   * If no GATSBY_REFRESH_TOKEN env var is available, then no Authorization header is required
+   **/
+  app.post(`/__refresh`, (req, res) => {
+    const enableRefresh = process.env.ENABLE_GATSBY_REFRESH_ENDPOINT
+    const refreshToken = process.env.GATSBY_REFRESH_TOKEN
+    const authorizedRefresh =
+      !refreshToken || req.headers.authorization === refreshToken
+
+    if (enableRefresh && authorizedRefresh) {
+      console.log(`Refreshing source data`)
+      sourceNodes()
+    }
+    res.end()
+  })
+
+  app.get(`/__open-stack-frame-in-editor`, (req, res) => {
+    launchEditor(req.query.fileName, req.query.lineNumber)
+    res.end()
+  })
+
+  // Disable directory indexing i.e. serving index.html from a directory.
+  // This can lead to serving stale html files during development.
+  //
+  // We serve by default an empty index.html that sets up the dev environment.
+  app.use(require(`./develop-static`)(`public`, { index: false }))
+
+  app.use(
+    require(`webpack-dev-middleware`)(compiler, {
+      logLevel: `trace`,
+      publicPath: devConfig.output.publicPath,
+      stats: `errors-only`,
+    })
+  )
+
+  // Expose access to app for advanced use cases
+  const { developMiddleware } = store.getState().config
+
+  if (developMiddleware) {
+    developMiddleware(app)
+  }
+
+  // Set up API proxy.
+  const { proxy } = store.getState().config
+  if (proxy) {
+    const { prefix, url } = proxy
+    app.use(`${prefix}/*`, (req, res) => {
+      const proxiedUrl = url + req.originalUrl
+      req
+        .pipe(
+          request(proxiedUrl).on(`error`, err => {
+            const message = `Error when trying to proxy request "${
+              req.originalUrl
+            }" to "${proxiedUrl}"`
+
+            report.error(message, err)
+            res.status(500).end()
+          })
+        )
+        .pipe(res)
+    })
+  }
+
+  await apiRunnerNode(`onCreateDevServer`, { app })
+
+  // Render an HTML page and serve it.
+  app.use((req, res, next) => {
+    res.sendFile(directoryPath(`public/index.html`), err => {
+      if (err) {
+        res.status(500).end()
+      }
+    })
+  })
+
+  /**
+   * Set up the HTTP server and socket.io.
+   **/
+  let server = require(`http`).Server(app)
+
+  // If a SSL cert exists in program, use it with `createServer`.
+  if (program.ssl) {
+    server = require(`https`).createServer(program.ssl, app)
+  }
+  websocketManager.init({ server, directory: program.directory })
+  const socket = websocketManager.getSocket()
+
+  const listener = server.listen(program.port, program.host, err => {
+    if (err) {
+      if (err.code === `EADDRINUSE`) {
+        // eslint-disable-next-line max-len
+        report.panic(
+          `Unable to start Gatsby on port ${
+            program.port
+          } as there's already a process listening on that port.`
+        )
+        return
+      }
+
+      report.panic(`There was a problem starting the development server`, err)
+    }
+  })
+
+  // Register watcher that rebuilds index.html every time html.js changes.
+  const watchGlobs = [`src/html.js`, `plugins/**/gatsby-ssr.js`].map(path =>
+    slash(directoryPath(path))
+  )
+
+  chokidar.watch(watchGlobs).on(`change`, async () => {
+    await createIndexHtml()
+    socket.to(`clients`).emit(`reload`)
+  })
+
+  return [compiler, listener]
+}
+
+module.exports = async (program: any) => {
+  initTracer(program.openTracingConfigFile)
+  telemetry.trackCli(`DEVELOP_START`)
+  telemetry.startBackgroundUpdate()
+
+  const port =
+    typeof program.port === `string` ? parseInt(program.port, 10) : program.port
+
+  // In order to enable custom ssl, --cert-file --key-file and -https flags must all be
+  // used together
+  if ((program[`cert-file`] || program[`key-file`]) && !program.https) {
+    report.panic(
+      `for custom ssl --https, --cert-file, and --key-file must be used together`
+    )
+  }
+
+  // Check if https is enabled, then create or get SSL cert.
+  // Certs are named after `name` inside the project's package.json.
+  // Scoped names are converted from @npm/package-name to npm--package-name
+  if (program.https) {
+    program.ssl = await getSslCert({
+      name: program.sitePackageJson.name.replace(`@`, ``).replace(`/`, `--`),
+      certFile: program[`cert-file`],
+      keyFile: program[`key-file`],
+      directory: program.directory,
+    })
+  }
+
+  program.port = await new Promise(resolve => {
+    detectPortInUseAndPrompt(port, rlInterface, newPort => {
+      resolve(newPort)
+    })
+  })
+
+  function prepareUrls(protocol, host, port) {
+    const formatUrl = hostname =>
+      url.format({
+        protocol,
+        hostname,
+        port,
+        pathname: `/`,
+      })
+    const prettyPrintUrl = hostname =>
+      url.format({
+        protocol,
+        hostname,
+        port: chalk.bold(port),
+        pathname: `/`,
+      })
+
+    const isUnspecifiedHost = host === `0.0.0.0` || host === `::`
+    let lanUrlForConfig, lanUrlForTerminal
+    if (isUnspecifiedHost) {
+      try {
+        // This can only return an IPv4 address
+        lanUrlForConfig = address.ip()
+        if (lanUrlForConfig) {
+          // Check if the address is a private ip
+          // https://en.wikipedia.org/wiki/Private_network#Private_IPv4_address_spaces
+          if (
+            /^10[.]|^172[.](1[6-9]|2[0-9]|3[0-1])[.]|^192[.]168[.]/.test(
+              lanUrlForConfig
+            )
+          ) {
+            // Address is private, format it for later use
+            lanUrlForTerminal = prettyPrintUrl(lanUrlForConfig)
+          } else {
+            // Address is not private, so we will discard it
+            lanUrlForConfig = undefined
+          }
+        }
+      } catch (_e) {
+        // ignored
+      }
+    }
+    // TODO collect errors (GraphQL + Webpack) in Redux so we
+    // can clear terminal and print them out on every compile.
+    // Borrow pretty printing code from webpack plugin.
+    const localUrlForTerminal = prettyPrintUrl(host)
+    const localUrlForBrowser = formatUrl(host)
+    return {
+      lanUrlForConfig,
+      lanUrlForTerminal,
+      localUrlForTerminal,
+      localUrlForBrowser,
+    }
+  }
+
+  function printInstructions(appName, urls, useYarn) {
+    console.log()
+    console.log(`You can now view ${chalk.bold(appName)} in the browser.`)
+    console.log()
+
+    if (urls.lanUrlForTerminal) {
+      console.log(
+        `  ${chalk.bold(`Local:`)}            ${urls.localUrlForTerminal}`
+      )
+      console.log(
+        `  ${chalk.bold(`On Your Network:`)}  ${urls.lanUrlForTerminal}`
+      )
+    } else {
+      console.log(`  ${urls.localUrlForTerminal}`)
+    }
+
+    console.log()
+    console.log(
+      `View ${
+        process.env.GATSBY_GRAPHQL_IDE === `playground`
+          ? `the GraphQL Playground`
+          : `GraphiQL`
+      }, an in-browser IDE, to explore your site's data and schema`
+    )
+    console.log()
+    console.log(`  ${urls.localUrlForTerminal}___graphql`)
+
+    console.log()
+    console.log(`Note that the development build is not optimized.`)
+    console.log(
+      `To create a production build, use ` + `${chalk.cyan(`npm run build`)}`
+    )
+    console.log()
+  }
+
+  function printDeprecationWarnings() {
+    const deprecatedApis = [`boundActionCreators`, `pathContext`]
+    const fixMap = {
+      boundActionCreators: {
+        newName: `actions`,
+        docsLink: `https://gatsby.dev/boundActionCreators`,
+      },
+      pathContext: {
+        newName: `pageContext`,
+        docsLink: `https://gatsby.dev/pathContext`,
+      },
+    }
+    const deprecatedLocations = {}
+    deprecatedApis.forEach(api => (deprecatedLocations[api] = []))
+
+    glob
+      .sync(`{,!(node_modules|public)/**/}*.js`, { nodir: true })
+      .forEach(file => {
+        const fileText = fs.readFileSync(file)
+        const matchingApis = deprecatedApis.filter(
+          api => fileText.indexOf(api) !== -1
+        )
+        matchingApis.forEach(api => deprecatedLocations[api].push(file))
+      })
+
+    deprecatedApis.forEach(api => {
+      if (deprecatedLocations[api].length) {
+        console.log(
+          `%s %s %s %s`,
+          chalk.cyan(api),
+          chalk.yellow(`is deprecated. Please use`),
+          chalk.cyan(fixMap[api].newName),
+          chalk.yellow(
+            `instead. For migration instructions, see ${
+              fixMap[api].docsLink
+            }\nCheck the following files:`
+          )
+        )
+        console.log()
+        deprecatedLocations[api].forEach(file => console.log(file))
+        console.log()
+      }
+    })
+  }
+
+  // Start bootstrap process.
+  const { graphqlRunner } = await bootstrap(program)
+
+  // Start the createPages hot reloader.
+  require(`../bootstrap/page-hot-reloader`)(graphqlRunner)
+
+  const queryIds = queryRunner.calcBootstrapDirtyQueryIds(store.getState())
+  const { staticQueryIds, pageQueryIds } = queryRunner.groupQueryIds(queryIds)
+  let activity = report.activityTimer(`run static queries`)
+  activity.start()
+  await queryRunner.processStaticQueries(staticQueryIds, { activity })
+  activity.end()
+
+  await runPageQueries(pageQueryIds)
+  await waitJobsFinished()
+  await writeJsRequires.startPageListener()
+  await db.saveState()
+  db.startAutosave()
+  startQueryListener()
+  queryWatcher.startWatchDeletePage()
+
+  const [compiler] = await startServer(program)
+
+  let isFirstCompile = true
+
+  // "done" event fires when Webpack has finished recompiling the bundle.
+  // Whether or not you have warnings or errors, you will get this event.
+  compiler.hooks.done.tapAsync(`print getsby instructions`, (stats, done) => {
+    // We have switched off the default Webpack output in WebpackDevServer
+    // options so we are going to "massage" the warnings and errors and present
+    // them in a readable focused way.
+    const messages = formatWebpackMessages(stats.toJson({}, true))
+    const urls = prepareUrls(
+      program.ssl ? `https` : `http`,
+      program.host,
+      program.port
+    )
+    const isSuccessful = !messages.errors.length
+    // if (isSuccessful) {
+    // console.log(chalk.green(`Compiled successfully!`))
+    // }
+    // if (isSuccessful && (isInteractive || isFirstCompile)) {
+    if (isSuccessful && isFirstCompile) {
+      printInstructions(program.sitePackageJson.name, urls, program.useYarn)
+      printDeprecationWarnings()
+      if (program.open) {
+        Promise.resolve(openurl(urls.localUrlForBrowser)).catch(err =>
+          console.log(
+            `${chalk.yellow(
+              `warn`
+            )} Browser not opened because no browser was found`
+          )
+        )
+      }
+    }
+
+    isFirstCompile = false
+
+    // If errors exist, only show errors.
+    // if (messages.errors.length) {
+    // // Only keep the first error. Others are often indicative
+    // // of the same problem, but confuse the reader with noise.
+    // if (messages.errors.length > 1) {
+    // messages.errors.length = 1
+    // }
+    // console.log(chalk.red("Failed to compile.\n"))
+    // console.log(messages.errors.join("\n\n"))
+    // return
+    // }
+
+    // Show warnings if no errors were found.
+    // if (messages.warnings.length) {
+    // console.log(chalk.yellow("Compiled with warnings.\n"))
+    // console.log(messages.warnings.join("\n\n"))
+
+    // // Teach some ESLint tricks.
+    // console.log(
+    // "\nSearch for the " +
+    // chalk.underline(chalk.yellow("keywords")) +
+    // " to learn more about each warning."
+    // )
+    // console.log(
+    // "To ignore, add " +
+    // chalk.cyan("// eslint-disable-next-line") +
+    // " to the line before.\n"
+    // )
+    // }
+
+    done()
+  })
+}
diff --git a/node_modules/gatsby/src/commands/repl.js b/node_modules/gatsby/src/commands/repl.js
new file mode 100644
index 0000000..ce42a56
--- /dev/null
+++ b/node_modules/gatsby/src/commands/repl.js
@@ -0,0 +1,53 @@
+const repl = require(`repl`)
+const { graphql } = require(`graphql`)
+const bootstrap = require(`../bootstrap`)
+const {
+  loadNodeContent,
+  getNodes,
+  getNode,
+  getNodesByType,
+} = require(`../db/nodes`)
+const { store } = require(`../redux`)
+
+module.exports = async program => {
+  // run bootstrap
+  await bootstrap(program)
+
+  // get all the goodies from the store
+  const {
+    schema,
+    config,
+    babelrc,
+    pages,
+    components,
+    staticQueryComponents,
+  } = store.getState()
+
+  const nodes = getNodes()
+
+  const query = async query => {
+    const result = await graphql(schema, query, {}, {}, {})
+    console.log(`query result: ${JSON.stringify(result)}`)
+  }
+
+  // init new repl
+  const _ = repl.start({
+    prompt: `gatsby > `,
+  })
+
+  // set some globals to make life easier
+  _.context.babelrc = babelrc
+  _.context.components = components
+  _.context.getNode = getNode
+  _.context.getNodes = getNodes
+  _.context.getNodesByType = getNodesByType
+  _.context.loadNodeContent = loadNodeContent
+  _.context.nodes = [...nodes.entries()]
+  _.context.pages = [...pages.entries()]
+  _.context.graphql = query
+  _.context.schema = schema
+  _.context.siteConfig = config
+  _.context.staticQueries = staticQueryComponents
+
+  _.on(`exit`, () => process.exit(0))
+}
diff --git a/node_modules/gatsby/src/commands/serve.js b/node_modules/gatsby/src/commands/serve.js
new file mode 100644
index 0000000..a1bd0a8
--- /dev/null
+++ b/node_modules/gatsby/src/commands/serve.js
@@ -0,0 +1,118 @@
+/* @flow weak */
+const path = require(`path`)
+const openurl = require(`better-opn`)
+const fs = require(`fs-extra`)
+const compression = require(`compression`)
+const express = require(`express`)
+const getConfigFile = require(`../bootstrap/get-config-file`)
+const preferDefault = require(`../bootstrap/prefer-default`)
+const chalk = require(`chalk`)
+const { match: reachMatch } = require(`@reach/router/lib/utils`)
+const detectPortInUseAndPrompt = require(`../utils/detect-port-in-use-and-prompt`)
+const rl = require(`readline`)
+const onExit = require(`signal-exit`)
+
+const telemetry = require(`gatsby-telemetry`)
+
+const rlInterface = rl.createInterface({
+  input: process.stdin,
+  output: process.stdout,
+})
+
+// Quit immediately on hearing ctrl-c
+rlInterface.on(`SIGINT`, () => {
+  process.exit()
+})
+
+onExit(() => {
+  telemetry.trackCli(`SERVE_STOP`)
+})
+
+const getPages = directory =>
+  fs
+    .readFile(path.join(directory, `.cache`, `pages.json`))
+    .then(contents => JSON.parse(contents))
+    .catch(() => [])
+
+const clientOnlyPathsRouter = (pages, options) => {
+  const clientOnlyRoutes = pages.filter(page => page.matchPath)
+  return (req, res, next) => {
+    const { url } = req
+    if (req.accepts(`html`)) {
+      const route = clientOnlyRoutes.find(
+        clientRoute => reachMatch(clientRoute.matchPath, url) !== null
+      )
+      if (route && route.path) {
+        return res.sendFile(
+          path.join(route.path, `index.html`),
+          options,
+          err => {
+            if (err) {
+              next()
+            }
+          }
+        )
+      }
+    }
+    return next()
+  }
+}
+
+module.exports = async program => {
+  telemetry.trackCli(`SERVE_START`)
+  telemetry.startBackgroundUpdate()
+  let { prefixPaths, port, open, host } = program
+  port = typeof port === `string` ? parseInt(port, 10) : port
+
+  const config = await preferDefault(
+    getConfigFile(program.directory, `gatsby-config`)
+  )
+
+  let pathPrefix = config && config.pathPrefix
+  pathPrefix = prefixPaths && pathPrefix ? pathPrefix : `/`
+
+  const root = path.join(program.directory, `public`)
+  const pages = await getPages(program.directory)
+
+  const app = express()
+  const router = express.Router()
+
+  app.use(telemetry.expressMiddleware(`SERVE`))
+
+  router.use(compression())
+  router.use(express.static(`public`))
+  router.use(clientOnlyPathsRouter(pages, { root }))
+  router.use((req, res, next) => {
+    if (req.accepts(`html`)) {
+      return res.status(404).sendFile(`404.html`, { root })
+    }
+    return next()
+  })
+  app.use(pathPrefix, router)
+
+  const startListening = () => {
+    app.listen(port, host, () => {
+      let openUrlString = `http://${host}:${port}${pathPrefix}`
+      console.log(
+        `${chalk.blue(`info`)} gatsby serve running at: ${chalk.bold(
+          openUrlString
+        )}`
+      )
+      if (open) {
+        console.log(`${chalk.blue(`info`)} Opening browser...`)
+        Promise.resolve(openurl(openUrlString)).catch(err =>
+          console.log(
+            `${chalk.yellow(
+              `warn`
+            )} Browser not opened because no browser was found`
+          )
+        )
+      }
+    })
+  }
+
+  detectPortInUseAndPrompt(port, rlInterface, newPort => {
+    port = newPort
+    startListening()
+  })
+}
diff --git a/node_modules/gatsby/src/db/__tests__/fixtures/ensure-loki.js b/node_modules/gatsby/src/db/__tests__/fixtures/ensure-loki.js
new file mode 100644
index 0000000..e02a612
--- /dev/null
+++ b/node_modules/gatsby/src/db/__tests__/fixtures/ensure-loki.js
@@ -0,0 +1,8 @@
+const { backend } = require(`../../nodes`)
+
+module.exports = () => {
+  if (backend === `loki`) {
+    const lokiDb = require(`../../loki`)
+    beforeAll(lokiDb.start)
+  }
+}
diff --git a/node_modules/gatsby/src/db/__tests__/node-tracking-test.js b/node_modules/gatsby/src/db/__tests__/node-tracking-test.js
new file mode 100644
index 0000000..c627eab
--- /dev/null
+++ b/node_modules/gatsby/src/db/__tests__/node-tracking-test.js
@@ -0,0 +1,139 @@
+const { store } = require(`../../redux`)
+const {
+  boundActionCreators: { createNode },
+} = require(`../../redux/actions`)
+const { getNode } = require(`../../db/nodes`)
+const { findRootNodeAncestor, trackDbNodes } = require(`../node-tracking`)
+const { run: runQuery } = require(`../nodes-query`)
+require(`./fixtures/ensure-loki`)()
+
+function makeNode() {
+  return {
+    id: `id1`,
+    parent: null,
+    children: [],
+    inlineObject: {
+      field: `fieldOfFirstNode`,
+    },
+    inlineArray: [1, 2, 3],
+    internal: {
+      type: `Test`,
+      contentDigest: `digest1`,
+      owner: `test`,
+    },
+  }
+}
+
+describe(`track root nodes`, () => {
+  beforeEach(() => {
+    const nodes = [makeNode()]
+    store.dispatch({ type: `DELETE_CACHE` })
+    for (const node of nodes) {
+      store.dispatch({ type: `CREATE_NODE`, payload: node })
+    }
+    trackDbNodes()
+    createNode(
+      {
+        id: `id2`,
+        parent: null,
+        children: [],
+        inlineObject: {
+          field: `fieldOfSecondNode`,
+        },
+        inlineArray: [1, 2, 3],
+        internal: {
+          type: `Test`,
+          contentDigest: `digest2`,
+        },
+      },
+      {
+        name: `test`,
+      }
+    )
+  })
+  describe(`Tracks nodes read from redux state cache`, () => {
+    it(`Tracks inline objects`, () => {
+      const node = getNode(`id1`)
+      const inlineObject = node.inlineObject
+      const trackedRootNode = findRootNodeAncestor(inlineObject)
+
+      expect(trackedRootNode).toEqual(node)
+    })
+    it(`Tracks inline arrays`, () => {
+      const node = getNode(`id1`)
+      const inlineObject = node.inlineArray
+      const trackedRootNode = findRootNodeAncestor(inlineObject)
+
+      expect(trackedRootNode).toEqual(node)
+    })
+    it(`Doesn't track copied objects`, () => {
+      const node = getNode(`id1`)
+      const copiedInlineObject = { ...node.inlineObject }
+      const trackedRootNode = findRootNodeAncestor(copiedInlineObject)
+
+      expect(trackedRootNode).not.toEqual(node)
+    })
+  })
+  describe(`Tracks nodes created using createNode action`, () => {
+    it(`Tracks inline objects`, () => {
+      const node = getNode(`id2`)
+      const inlineObject = node.inlineObject
+      const trackedRootNode = findRootNodeAncestor(inlineObject)
+
+      expect(trackedRootNode).toEqual(node)
+    })
+  })
+
+  describe(`Tracks nodes returned by queries`, () => {
+    let type
+
+    beforeAll(async () => {
+      const { createSchemaComposer } = require(`../../schema/schema-composer`)
+      const {
+        addInferredFields,
+      } = require(`../../schema/infer/add-inferred-fields`)
+      const { getExampleValue } = require(`../../schema/infer/example-value`)
+
+      const sc = createSchemaComposer()
+      const typeName = `Test`
+      const tc = sc.createObjectTC(typeName)
+      addInferredFields({
+        schemaComposer: sc,
+        typeComposer: tc,
+        exampleValue: getExampleValue({ nodes: [makeNode()], typeName }),
+      })
+      type = tc.getType()
+    })
+
+    it(`Tracks objects when running query without filter`, async () => {
+      const result = await runQuery({
+        queryArgs: {},
+        gqlType: type,
+        firstOnly: false,
+      })
+
+      expect(result.length).toEqual(2)
+      expect(findRootNodeAncestor(result[0].inlineObject)).toEqual(result[0])
+      expect(findRootNodeAncestor(result[1].inlineObject)).toEqual(result[1])
+    })
+
+    it(`Tracks objects when running query with filter`, async () => {
+      const result = await runQuery({
+        queryArgs: {
+          filter: {
+            inlineObject: {
+              field: {
+                eq: `fieldOfSecondNode`,
+              },
+            },
+          },
+        },
+        gqlType: type,
+        firstOnly: false,
+      })
+
+      expect(result.length).toEqual(1)
+      expect(findRootNodeAncestor(result[0].inlineObject)).toEqual(result[0])
+    })
+  })
+})
diff --git a/node_modules/gatsby/src/db/__tests__/nodes.js b/node_modules/gatsby/src/db/__tests__/nodes.js
new file mode 100644
index 0000000..f9c9449
--- /dev/null
+++ b/node_modules/gatsby/src/db/__tests__/nodes.js
@@ -0,0 +1,358 @@
+const { actions } = require(`../../redux/actions`)
+const { getNode, getNodes } = require(`../nodes`)
+const { store } = require(`../../redux`)
+require(`./fixtures/ensure-loki`)()
+
+const report = require(`gatsby-cli/lib/reporter`)
+jest.mock(`gatsby-cli/lib/reporter`)
+
+describe(`nodes db tests`, () => {
+  beforeEach(() => {
+    store.dispatch({ type: `DELETE_CACHE` })
+  })
+
+  it(`deletes previously transformed children nodes when the parent node is updated`, () => {
+    store.dispatch(
+      actions.createNode(
+        {
+          id: `hi`,
+          children: [],
+          parent: null,
+          internal: {
+            contentDigest: `hasdfljds`,
+            type: `Test`,
+          },
+        },
+        {
+          name: `tests`,
+        }
+      )
+    )
+    store.dispatch(
+      actions.createNode(
+        {
+          id: `hi-1`,
+          children: [],
+          parent: `hi`,
+          internal: {
+            contentDigest: `hasdfljds-1`,
+            type: `Test-1`,
+          },
+        },
+        {
+          name: `tests`,
+        }
+      )
+    )
+    store.dispatch(
+      actions.createParentChildLink(
+        {
+          parent: getNode(`hi`),
+          child: getNode(`hi-1`),
+        },
+        {
+          name: `tests`,
+        }
+      )
+    )
+    store.dispatch(
+      actions.createNode(
+        {
+          id: `hi-1-1`,
+          children: [],
+          parent: `hi-1`,
+          internal: {
+            contentDigest: `hasdfljds-1-1`,
+            type: `Test-1-1`,
+          },
+        },
+        {
+          name: `tests`,
+        }
+      )
+    )
+    store.dispatch(
+      actions.createParentChildLink(
+        {
+          parent: getNode(`hi-1`),
+          child: getNode(`hi-1-1`),
+        },
+        {
+          name: `tests`,
+        }
+      )
+    )
+    store.dispatch(
+      actions.createNode(
+        {
+          id: `hi`,
+          children: [],
+          parent: `test`,
+          internal: {
+            contentDigest: `hasdfljds2`,
+            type: `Test`,
+          },
+        },
+        {
+          name: `tests`,
+        }
+      )
+    )
+    expect(getNodes()).toHaveLength(1)
+  })
+
+  it(`deletes previously transformed children nodes when the parent node is deleted`, () => {
+    store.dispatch(
+      actions.createNode(
+        {
+          id: `hi`,
+          children: [],
+          parent: `test`,
+          internal: {
+            contentDigest: `hasdfljds`,
+            type: `Test`,
+          },
+        },
+        {
+          name: `tests`,
+        }
+      )
+    )
+    store.dispatch(
+      actions.createNode(
+        {
+          id: `hi2`,
+          children: [],
+          parent: `test`,
+          internal: {
+            contentDigest: `hasdfljds`,
+            type: `Test`,
+          },
+        },
+        {
+          name: `tests`,
+        }
+      )
+    )
+    store.dispatch(
+      actions.createNode(
+        {
+          id: `hi-1`,
+          children: [],
+          parent: `hi`,
+          internal: {
+            contentDigest: `hasdfljds-1`,
+            type: `Test-1`,
+          },
+        },
+        {
+          name: `tests`,
+        }
+      )
+    )
+    store.dispatch(
+      actions.createParentChildLink(
+        {
+          parent: getNode(`hi`),
+          child: getNode(`hi-1`),
+        },
+        {
+          name: `tests`,
+        }
+      )
+    )
+    store.dispatch(
+      actions.createNode(
+        {
+          id: `hi-1-1`,
+          children: [],
+          parent: `hi-1`,
+          internal: {
+            contentDigest: `hasdfljds-1-1`,
+            type: `Test-1-1`,
+          },
+        },
+        {
+          name: `tests`,
+        }
+      )
+    )
+    store.dispatch(
+      actions.createParentChildLink(
+        {
+          parent: getNode(`hi-1`),
+          child: getNode(`hi-1-1`),
+        },
+        {
+          name: `tests`,
+        }
+      )
+    )
+    store.dispatch(
+      actions.deleteNode(
+        {
+          node: getNode(`hi`),
+        },
+        {
+          name: `tests`,
+        }
+      )
+    )
+    expect(getNodes()).toHaveLength(1)
+  })
+
+  it(`deletes previously transformed children nodes when parent nodes are deleted`, () => {
+    store.dispatch(
+      actions.createNode(
+        {
+          id: `hi`,
+          children: [],
+          parent: `test`,
+          internal: {
+            contentDigest: `hasdfljds`,
+            type: `Test`,
+          },
+        },
+        {
+          name: `tests`,
+        }
+      )
+    )
+    store.dispatch(
+      actions.createNode(
+        {
+          id: `hi-1`,
+          children: [],
+          parent: `hi`,
+          internal: {
+            contentDigest: `hasdfljds-1`,
+            type: `Test-1`,
+          },
+        },
+        {
+          name: `tests`,
+        }
+      )
+    )
+    store.dispatch(
+      actions.createParentChildLink(
+        {
+          parent: getNode(`hi`),
+          child: getNode(`hi-1`),
+        },
+        {
+          name: `tests`,
+        }
+      )
+    )
+    store.dispatch(
+      actions.createNode(
+        {
+          id: `hi-1-1`,
+          children: [],
+          parent: `hi-1`,
+          internal: {
+            contentDigest: `hasdfljds-1-1`,
+            type: `Test-1-1`,
+          },
+        },
+        {
+          name: `tests`,
+        }
+      )
+    )
+    store.dispatch(
+      actions.createParentChildLink(
+        {
+          parent: getNode(`hi-1`),
+          child: getNode(`hi-1-1`),
+        },
+        {
+          name: `tests`,
+        }
+      )
+    )
+    store.dispatch(
+      actions.deleteNode(
+        { node: getNode(`hi`) },
+        {
+          name: `tests`,
+        }
+      )
+    )
+    expect(getNodes()).toHaveLength(0)
+  })
+
+  it(`allows deleting nodes`, () => {
+    store.dispatch(
+      actions.createNode(
+        {
+          id: `hi`,
+          children: [],
+          parent: `test`,
+          internal: {
+            contentDigest: `hasdfljds`,
+            type: `Test`,
+          },
+          pickle: true,
+          deep: {
+            array: [
+              0,
+              1,
+              {
+                boom: true,
+              },
+            ],
+          },
+        },
+        {
+          name: `tests`,
+        }
+      )
+    )
+    store.dispatch(
+      actions.deleteNode({
+        node: getNode(`hi`),
+      })
+    )
+    expect(getNode(`hi`)).toBeUndefined()
+  })
+
+  it(`warns when using old deleteNode signature `, () => {
+    store.dispatch(
+      actions.createNode(
+        {
+          id: `hi`,
+          children: [],
+          parent: `test`,
+          internal: {
+            contentDigest: `hasdfljds`,
+            type: `Test`,
+          },
+        },
+        {
+          name: `tests`,
+        }
+      )
+    )
+    expect(getNode(`hi`)).toMatchObject({ id: `hi` })
+    store.dispatch(
+      actions.deleteNode(`hi`, getNode(`hi`), {
+        name: `tests`,
+      })
+    )
+    expect(getNode(`hi`)).toBeUndefined()
+    const deprecationNotice =
+      `Calling "deleteNode" with a nodeId is deprecated. Please pass an ` +
+      `object containing a full node instead: deleteNode({ node }). ` +
+      `"deleteNode" was called by tests`
+    expect(report.warn).toHaveBeenCalledWith(deprecationNotice)
+  })
+
+  it(`does not crash when delete node is called on undefined`, () => {
+    actions.deleteNode(undefined, {
+      name: `tests`,
+    })
+    expect(getNodes()).toHaveLength(0)
+  })
+})
diff --git a/node_modules/gatsby/src/db/index.js b/node_modules/gatsby/src/db/index.js
new file mode 100644
index 0000000..5d6bbff
--- /dev/null
+++ b/node_modules/gatsby/src/db/index.js
@@ -0,0 +1,40 @@
+const _ = require(`lodash`)
+const report = require(`gatsby-cli/lib/reporter`)
+const redux = require(`../redux`)
+const { emitter } = redux
+
+// Even if we are using loki, we still include redux in the list of
+// dbs since it still has pages, config, etc.
+const dbs = [redux]
+if (process.env.GATSBY_DB_NODES === `loki`) {
+  dbs.push(require(`./loki`))
+}
+
+// calls `saveState()` on all DBs
+let saveInProgress = false
+async function saveState() {
+  if (saveInProgress) return
+  saveInProgress = true
+
+  try {
+    await Promise.all(dbs.map(db => db.saveState()))
+  } catch (err) {
+    report.warn(`Error persisting state: ${(err && err.message) || err}`)
+  }
+
+  saveInProgress = false
+}
+const saveStateDebounced = _.debounce(saveState, 1000)
+
+/**
+ * Starts listening to redux actions and triggers a database save to
+ * disk upon any action (debounced to every 1 second)
+ */
+function startAutosave() {
+  emitter.on(`*`, () => saveStateDebounced())
+}
+
+module.exports = {
+  startAutosave,
+  saveState,
+}
diff --git a/node_modules/gatsby/src/db/loki/__tests__/index.js b/node_modules/gatsby/src/db/loki/__tests__/index.js
new file mode 100644
index 0000000..45e0988
--- /dev/null
+++ b/node_modules/gatsby/src/db/loki/__tests__/index.js
@@ -0,0 +1,12 @@
+const { colls, getDb, start } = require(`../index`)
+
+describe(`db`, () => {
+  start()
+  it(`should create system collections`, () => {
+    const db = getDb()
+    const nodeMetaColl = db.getCollection(colls.nodeMeta.name)
+    const nodeTypesColl = db.getCollection(colls.nodeTypes.name)
+    expect(nodeMetaColl).toBeDefined()
+    expect(nodeTypesColl).toBeDefined()
+  })
+})
diff --git a/node_modules/gatsby/src/db/loki/__tests__/nodes-query-test.js b/node_modules/gatsby/src/db/loki/__tests__/nodes-query-test.js
new file mode 100644
index 0000000..aae1f42
--- /dev/null
+++ b/node_modules/gatsby/src/db/loki/__tests__/nodes-query-test.js
@@ -0,0 +1,56 @@
+if (process.env.GATSBY_DB_NODES === `loki`) {
+  const _ = require(`lodash`)
+  const { GraphQLObjectType } = require(`graphql`)
+  const { store } = require(`../../../redux`)
+  const runQuery = require(`../nodes-query`)
+  const { getNodeTypeCollection } = require(`../nodes`)
+  const lokiDb = require(`../index`)
+
+  function makeNodes() {
+    return [
+      {
+        id: `1`,
+        internal: { type: `Test` },
+        children: [],
+        foo: `bar`,
+      },
+    ]
+  }
+
+  async function runQueries(nodes, n) {
+    for (const node of nodes) {
+      store.dispatch({ type: `CREATE_NODE`, payload: node })
+    }
+    const gqlType = new GraphQLObjectType({
+      name: `Test`,
+      fields: {
+        foo: { type: `String` },
+      },
+    })
+    const queryArgs = { filter: { foo: { eq: `bar` } } }
+    const args = { gqlType, queryArgs }
+    return await Promise.all(_.map(new Array(n), () => runQuery(args)))
+  }
+
+  describe(`query indexing`, () => {
+    beforeEach(async () => {
+      await lokiDb.start()
+      store.dispatch({ type: `DELETE_CACHE` })
+    })
+    it(`does not create index when query run 1 time`, async () => {
+      await runQueries(makeNodes(), 1)
+      const coll = getNodeTypeCollection(`Test`)
+      expect(coll.binaryIndices.hasOwnProperty(`foo`)).toEqual(false)
+    })
+
+    it(`creates index when query run 5 times`, async () => {
+      await runQueries(makeNodes(), 5)
+      const coll = getNodeTypeCollection(`Test`)
+      expect(coll.binaryIndices.hasOwnProperty(`foo`)).toEqual(true)
+    })
+  })
+} else {
+  it(`skipping loki nodes-query-test`, () => {
+    expect(true).toEqual(true)
+  })
+}
diff --git a/node_modules/gatsby/src/db/loki/__tests__/nodes.js b/node_modules/gatsby/src/db/loki/__tests__/nodes.js
new file mode 100644
index 0000000..b520d66
--- /dev/null
+++ b/node_modules/gatsby/src/db/loki/__tests__/nodes.js
@@ -0,0 +1,30 @@
+const { start, getDb, colls } = require(`../index`)
+const { createNode, deleteNode } = require(`../nodes`)
+
+const type = `Test`
+const node = {
+  id: `1`,
+  foo: `bar`,
+  internal: { type: type },
+}
+
+beforeAll(start)
+
+describe(`node`, () => {
+  it(`should create node ID index`, () => {
+    createNode(node)
+    const nodeMetaColl = getDb().getCollection(colls.nodeMeta.name)
+    expect(nodeMetaColl).toBeDefined()
+    const nodeMeta = nodeMetaColl.by(`id`, node.id)
+    const nodeTypeColl = getDb().getCollection(nodeMeta.typeCollName)
+    expect(nodeTypeColl).toBeDefined()
+    expect(nodeTypeColl.name).toEqual(`gatsby:nodeType:${type}`)
+  })
+
+  it(`should delete node ID index`, () => {
+    deleteNode(node)
+    const nodeMetaColl = getDb().getCollection(colls.nodeMeta.name)
+    const nodeMeta = nodeMetaColl.by(`id`, node.id)
+    expect(nodeMeta).toBeUndefined()
+  })
+})
diff --git a/node_modules/gatsby/src/db/loki/custom-comparators.js b/node_modules/gatsby/src/db/loki/custom-comparators.js
new file mode 100644
index 0000000..78eef70
--- /dev/null
+++ b/node_modules/gatsby/src/db/loki/custom-comparators.js
@@ -0,0 +1,218 @@
+// Gatsby has very specific sorting requirements. Specifically,
+// undefined > null > everything else. So, if an orderby `desc` is
+// specified, then nulls and undefined values are of higher rank. This
+// is due to the use of lodash's `orderBy` function in
+// `run-sift`.
+//
+// The below functions are alternate versions of the comparators used
+// by loki that match lodash's behavior
+//
+// Note: This is quite hacky and not officially supported by Loki, but
+// works quite well.
+//
+// The below implementation is a direct copy of Loki, except that
+// undefined's rank is 11, and null's rank is 10. Whereas in loki,
+// they are both of rank 1
+
+function ltHelper(prop1, prop2, equal) {
+  var cv1, cv2, t1, t2
+
+  // if one of the params is falsy or strictly true or not equal to itself
+  // 0, 0.0, "", NaN, null, undefined, not defined, false, true
+  if (
+    !prop1 ||
+    !prop2 ||
+    prop1 === true ||
+    prop2 === true ||
+    prop1 !== prop1 ||
+    prop2 !== prop2
+  ) {
+    switch (prop1) {
+      case undefined:
+        t1 = 11
+        break
+      case null:
+        t1 = 10
+        break
+      case false:
+        t1 = 3
+        break
+      case true:
+        t1 = 4
+        break
+      case ``:
+        t1 = 5
+        break
+      // if strict equal probably 0 so sort higher, otherwise
+      // probably NaN so sort lower than even null
+      default:
+        t1 = prop1 === prop1 ? 9 : 0
+        break
+    }
+
+    switch (prop2) {
+      case undefined:
+        t2 = 11
+        break
+      case null:
+        t2 = 10
+        break
+      case false:
+        t2 = 3
+        break
+      case true:
+        t2 = 4
+        break
+      case ``:
+        t2 = 5
+        break
+      default:
+        t2 = prop2 === prop2 ? 9 : 0
+        break
+    }
+
+    // one or both is edge case
+    if (t1 !== 9 || t2 !== 9) {
+      return t1 === t2 ? equal : t1 < t2
+    }
+  }
+
+  // if both are numbers (string encoded or not), compare as numbers
+  cv1 = Number(prop1)
+  cv2 = Number(prop2)
+
+  if (cv1 === cv1 && cv2 === cv2) {
+    if (cv1 < cv2) return true
+    if (cv1 > cv2) return false
+    return equal
+  }
+
+  if (cv1 === cv1 && cv2 !== cv2) {
+    return true
+  }
+
+  if (cv2 === cv2 && cv1 !== cv1) {
+    return false
+  }
+
+  if (prop1 < prop2) return true
+  if (prop1 > prop2) return false
+  if (prop1 == prop2) return equal
+
+  // not strict equal nor less than nor gt so must be mixed types, convert to string and use that to compare
+  cv1 = prop1.toString()
+  cv2 = prop2.toString()
+
+  if (cv1 < cv2) {
+    return true
+  }
+
+  if (cv1 == cv2) {
+    return equal
+  }
+
+  return false
+}
+
+function gtHelper(prop1, prop2, equal) {
+  var cv1, cv2, t1, t2
+
+  // 'falsy' and Boolean handling
+  if (
+    !prop1 ||
+    !prop2 ||
+    prop1 === true ||
+    prop2 === true ||
+    prop1 !== prop1 ||
+    prop2 !== prop2
+  ) {
+    switch (prop1) {
+      case undefined:
+        t1 = 11
+        break
+      case null:
+        t1 = 10
+        break
+      case false:
+        t1 = 3
+        break
+      case true:
+        t1 = 4
+        break
+      case ``:
+        t1 = 5
+        break
+      // NaN 0
+      default:
+        t1 = prop1 === prop1 ? 9 : 0
+        break
+    }
+
+    switch (prop2) {
+      case undefined:
+        t2 = 11
+        break
+      case null:
+        t2 = 10
+        break
+      case false:
+        t2 = 3
+        break
+      case true:
+        t2 = 4
+        break
+      case ``:
+        t2 = 5
+        break
+      default:
+        t2 = prop2 === prop2 ? 9 : 0
+        break
+    }
+
+    // one or both is edge case
+    if (t1 !== 9 || t2 !== 9) {
+      return t1 === t2 ? equal : t1 > t2
+    }
+  }
+
+  // if both are numbers (string encoded or not), compare as numbers
+  cv1 = Number(prop1)
+  cv2 = Number(prop2)
+  if (cv1 === cv1 && cv2 === cv2) {
+    if (cv1 > cv2) return true
+    if (cv1 < cv2) return false
+    return equal
+  }
+
+  if (cv1 === cv1 && cv2 !== cv2) {
+    return false
+  }
+
+  if (cv2 === cv2 && cv1 !== cv1) {
+    return true
+  }
+
+  if (prop1 > prop2) return true
+  if (prop1 < prop2) return false
+  if (prop1 == prop2) return equal
+
+  // not strict equal nor less than nor gt so must be dates or mixed types
+  // convert to string and use that to compare
+  cv1 = prop1.toString()
+  cv2 = prop2.toString()
+
+  if (cv1 > cv2) {
+    return true
+  }
+
+  if (cv1 == cv2) {
+    return equal
+  }
+
+  return false
+}
+
+module.exports = {
+  ltHelper,
+  gtHelper,
+}
diff --git a/node_modules/gatsby/src/db/loki/index.js b/node_modules/gatsby/src/db/loki/index.js
new file mode 100644
index 0000000..37fbea6
--- /dev/null
+++ b/node_modules/gatsby/src/db/loki/index.js
@@ -0,0 +1,143 @@
+const _ = require(`lodash`)
+const fs = require(`fs-extra`)
+const path = require(`path`)
+const loki = require(`lokijs`)
+const uuidv4 = require(`uuid/v4`)
+const customComparators = require(`./custom-comparators`)
+
+// Ensure sorting behavior matches old lodash `orderBy`
+// implementation. See `custom-comparators.js` for why.
+loki.Comparators.lt = customComparators.ltHelper
+loki.Comparators.gt = customComparators.gtHelper
+
+// Loki is a document store with the same semantics as mongo. This
+// means there are no tables or relationships. Just a bunch of
+// collections, each with objects.
+//
+// Gatsby stores nodes in collections by splitting them up by their
+// `node.internal.type`. All nodes of a particular type go in 1
+// collection. The below `colls` object contains the metadata for
+// these collections, and the "meta collections" used to track them.
+//
+// You won't use these directly. They are used by the collection
+// functions in `./nodes.js`. E.g `getTypeCollName()` and
+// `getNodeTypeCollection`
+const colls = {
+  // Each object has keys `id` and `typeCollName`. It's a way of
+  // quickly looking up the collection that a node is contained in.
+  // E.g { id: `someNodeId`, typeCollName: `gatsby:nodeType:myType` }
+  nodeMeta: {
+    name: `gatsby:nodeMeta`,
+    options: {
+      unique: [`id`],
+      indices: [`id`],
+    },
+  },
+  // The list of all node type collections. Each object has keys
+  // `type` and `collName` so you can quickly look up the collection
+  // name for a node type.
+  // e.g { type: `myType`, collName: `gatsby:nodeType:myType` }
+  nodeTypes: {
+    name: `gatsby:nodeTypes`,
+    options: {
+      unique: [`type`, `collName`],
+      indices: [`type`],
+    },
+  },
+}
+
+// Must be set using `start()`
+let db
+
+/**
+ * Ensures that the collections that support nodes have been
+ * created. See `colls` var in this file
+ */
+function ensureNodeCollections(db) {
+  _.forEach(colls, collInfo => {
+    const { name, options } = collInfo
+    db.addCollection(name, options)
+  })
+}
+
+function startFileDb(saveFile) {
+  return new Promise((resolve, reject) => {
+    const dbOptions = {
+      autoload: true,
+      autoloadCallback: err => {
+        if (err) {
+          reject(err)
+        } else {
+          resolve()
+        }
+      },
+    }
+    db = new loki(saveFile, dbOptions)
+  })
+}
+
+async function startInMemory() {
+  // Use uuid purely for a random name
+  db = new loki(uuidv4())
+}
+
+/**
+ * Starts a loki database. If the file already exists, it will be
+ * loaded as the database state. If not, a new database will be
+ * created. If `saveFile` is omitted, an in-memory DB will be created.
+ *
+ * @param {string} saveFile on disk file that the database will be
+ * saved and loaded from. If this is omitted, an in-memory database
+ * will be created instead
+ * @returns {Promise} promise that is resolved once the database and
+ * the existing state has been loaded (if there was an existing
+ * saveFile)
+ */
+async function start({ saveFile } = {}) {
+  if (saveFile && !_.isString(saveFile)) {
+    throw new Error(`saveFile must be a path`)
+  }
+  if (saveFile) {
+    const saveDir = path.dirname(saveFile)
+    await fs.ensureDir(saveDir)
+    await startFileDb(saveFile)
+  } else {
+    await startInMemory()
+  }
+  ensureNodeCollections(db)
+}
+
+// Saves the database to disk and returns a promise that will be
+// resolved once the save has finished
+function saveState() {
+  return new Promise((resolve, reject) => {
+    if (db) {
+      db.saveDatabase(err => {
+        if (err) {
+          reject(err)
+        } else {
+          resolve()
+        }
+      })
+    } else {
+      reject(`No database found.`)
+    }
+  })
+}
+
+/**
+ * Returns a reference to the database. If undefined, the db has not been
+ * initalized yet. Call `start()`
+ *
+ * @returns {Object} database, or undefined
+ */
+function getDb() {
+  return db
+}
+
+module.exports = {
+  start,
+  getDb,
+  colls,
+  saveState,
+}
diff --git a/node_modules/gatsby/src/db/loki/nodes-query.js b/node_modules/gatsby/src/db/loki/nodes-query.js
new file mode 100644
index 0000000..1f9f22a
--- /dev/null
+++ b/node_modules/gatsby/src/db/loki/nodes-query.js
@@ -0,0 +1,318 @@
+const _ = require(`lodash`)
+const prepareRegex = require(`../../utils/prepare-regex`)
+const { getNodeTypeCollection } = require(`./nodes`)
+const sift = require(`sift`)
+const { emitter } = require(`../../redux`)
+
+// Cleared on DELETE_CACHE
+const fieldUsages = {}
+const FIELD_INDEX_THRESHOLD = 5
+
+emitter.on(`DELETE_CACHE`, () => {
+  for (var field in fieldUsages) {
+    delete fieldUsages[field]
+  }
+})
+
+// Takes a raw graphql filter and converts it into a mongo-like args
+// object that can be understood by the `sift` library. E.g `eq`
+// becomes `$eq`
+function siftifyArgs(object) {
+  const newObject = {}
+  _.each(object, (v, k) => {
+    if (_.isPlainObject(v)) {
+      if (k === `elemMatch`) {
+        k = `$elemMatch`
+      }
+      newObject[k] = siftifyArgs(v)
+    } else {
+      // Compile regex first.
+      if (k === `regex`) {
+        newObject[`$regex`] = prepareRegex(v)
+      } else if (k === `glob`) {
+        const Minimatch = require(`minimatch`).Minimatch
+        const mm = new Minimatch(v)
+        newObject[`$regex`] = mm.makeRe()
+      } else {
+        newObject[`$${k}`] = v
+      }
+    }
+  })
+  return newObject
+}
+
+// filter nodes using the `sift` library. But isn't this a loki query
+// file? Yes, but we need to support all functionality provided by
+// `run-sift`, and there are some operators that loki can't
+// support. Like `elemMatch`, so for those fields, we fall back to
+// sift
+function runSift(nodes, query) {
+  if (nodes) {
+    const siftQuery = {
+      $elemMatch: siftifyArgs(query),
+    }
+    return sift(siftQuery, nodes)
+  } else {
+    return null
+  }
+}
+
+// Takes a raw graphql filter and converts it into a mongo-like args
+// object that can be understood by loki. E.g `eq` becomes
+// `$eq`. gqlFilter should be the raw graphql filter returned from
+// graphql-js. e.g gqlFilter:
+//
+// {
+//   internal: {
+//     type: {
+//       eq: "TestNode"
+//     },
+//     content: {
+//       glob: "et"
+//     }
+//   },
+//   id: {
+//     glob: "12*"
+//   }
+// }
+//
+// would return
+//
+// {
+//   internal: {
+//     type: {
+//       $eq: "TestNode"  // append $ to eq
+//     },
+//     content: {
+//       $regex: new MiniMatch(v) // convert glob to regex
+//     }
+//   },
+//   id: {
+//     $regex: // as above
+//   }
+// }
+function toMongoArgs(gqlFilter, lastFieldType) {
+  const mongoArgs = {}
+  _.each(gqlFilter, (v, k) => {
+    if (_.isPlainObject(v)) {
+      if (k === `elemMatch`) {
+        // loki doesn't support elemMatch, so use sift (see runSift
+        // comment above)
+        mongoArgs[`$where`] = obj => {
+          const result = runSift(obj, v)
+          return result && result.length > 0
+        }
+      } else {
+        const gqlFieldType = lastFieldType.getFields()[k].type
+        mongoArgs[k] = toMongoArgs(v, gqlFieldType)
+      }
+    } else {
+      if (k === `regex`) {
+        const re = prepareRegex(v)
+        // To ensure that false is returned if a field doesn't
+        // exist. E.g `{nested.field: {$regex: /.*/}}`
+        mongoArgs[`$where`] = obj => !_.isUndefined(obj) && re.test(obj)
+      } else if (k === `glob`) {
+        const Minimatch = require(`minimatch`).Minimatch
+        const mm = new Minimatch(v)
+        mongoArgs[`$regex`] = mm.makeRe()
+      } else if (k === `eq` && v === null) {
+        mongoArgs[`$in`] = [null, undefined]
+      } else if (
+        k === `eq` &&
+        lastFieldType &&
+        lastFieldType.constructor.name === `GraphQLList`
+      ) {
+        mongoArgs[`$contains`] = v
+      } else if (
+        k === `ne` &&
+        lastFieldType &&
+        lastFieldType.constructor.name === `GraphQLList`
+      ) {
+        mongoArgs[`$containsNone`] = v
+      } else if (
+        k === `in` &&
+        lastFieldType &&
+        lastFieldType.constructor.name === `GraphQLList`
+      ) {
+        mongoArgs[`$containsAny`] = v
+      } else if (
+        k === `nin` &&
+        lastFieldType &&
+        lastFieldType.constructor.name === `GraphQLList`
+      ) {
+        mongoArgs[`$containsNone`] = v
+      } else if (k === `ne` && v === null) {
+        mongoArgs[`$ne`] = undefined
+      } else if (k === `nin` && lastFieldType.name === `Boolean`) {
+        mongoArgs[`$nin`] = v.concat([undefined])
+      } else {
+        mongoArgs[`$${k}`] = v
+      }
+    }
+  })
+  return mongoArgs
+}
+
+// Converts a nested mongo args object into a dotted notation. acc
+// (accumulator) must be a reference to an empty object. The converted
+// fields will be added to it. E.g
+//
+// {
+//   internal: {
+//     type: {
+//       $eq: "TestNode"
+//     },
+//     content: {
+//       $regex: new MiniMatch(v)
+//     }
+//   },
+//   id: {
+//     $regex: newMiniMatch(v)
+//   }
+// }
+//
+// After execution, acc would be:
+//
+// {
+//   "internal.type": {
+//     $eq: "TestNode"
+//   },
+//   "internal.content": {
+//     $regex: new MiniMatch(v)
+//   },
+//   "id": {
+//     $regex: // as above
+//   }
+// }
+const toDottedFields = (filter, acc = {}, path = []) => {
+  Object.keys(filter).forEach(key => {
+    const value = filter[key]
+    const nextValue = _.isPlainObject(value) && value[Object.keys(value)[0]]
+    if (_.isPlainObject(nextValue)) {
+      toDottedFields(value, acc, path.concat(key))
+    } else {
+      acc[path.concat(key).join(`.`)] = value
+    }
+  })
+  return acc
+}
+
+// The query language that Gatsby has used since day 1 is `sift`. Both
+// sift and loki are mongo-like query languages, but they have some
+// subtle differences. One is that in sift, a nested filter such as
+// `{foo: {bar: {ne: true} } }` will return true if the foo field
+// doesn't exist, is null, or bar is null. Whereas loki will return
+// false if the foo field doesn't exist or is null. This ensures that
+// loki queries behave like sift
+const isNeTrue = (obj, path) => {
+  if (path.length) {
+    const [first, ...rest] = path
+    return obj == null || obj[first] == null || isNeTrue(obj[first], rest)
+  } else {
+    return obj !== true
+  }
+}
+
+const fixNeTrue = filter =>
+  Object.keys(filter).reduce((acc, key) => {
+    const value = filter[key]
+    if (value[`$ne`] === true) {
+      const [first, ...path] = key.split(`.`)
+      acc[first] = { [`$where`]: obj => isNeTrue(obj, path) }
+    } else {
+      acc[key] = value
+    }
+    return acc
+  }, {})
+
+// Converts graphQL args to a loki filter
+const convertArgs = (gqlArgs, gqlType) =>
+  fixNeTrue(toDottedFields(toMongoArgs(gqlArgs.filter, gqlType)))
+
+// Converts graphql Sort args into the form expected by loki, which is
+// a vector where the first value is a field name, and the second is a
+// boolean `isDesc`. Nested fields delimited by `___` are replaced by
+// periods. E.g
+//
+// {
+//   fields: [ `frontmatter___date`, `id` ],
+//   order: [`desc`]
+// }
+//
+// would return
+//
+// [ [ `frontmatter.date`, true ], [ `id`, false ] ]
+//
+function toSortFields(sortArgs) {
+  const { fields, order } = sortArgs
+  const lokiSortFields = []
+  for (let i = 0; i < fields.length; i++) {
+    const dottedField = fields[i]
+    const isDesc = order[i] && order[i].toLowerCase() === `desc`
+    lokiSortFields.push([dottedField, isDesc])
+  }
+  return lokiSortFields
+}
+
+// Every time we run a query, we increment a counter for each of its
+// fields, so that we can determine which fields are used the
+// most. Any time a field is seen more than `FIELD_INDEX_THRESHOLD`
+// times, we create a loki index so that future queries with that
+// field will execute faster.
+function ensureFieldIndexes(coll, lokiArgs) {
+  _.forEach(lokiArgs, (v, fieldName) => {
+    // Increment the usages of the field
+    _.update(fieldUsages, fieldName, n => (n ? n + 1 : 1))
+    // If we have crossed the threshold, then create the index
+    if (_.get(fieldUsages, fieldName) === FIELD_INDEX_THRESHOLD) {
+      // Loki ensures that this is a noop if index already exists. E.g
+      // if it was previously added via a sort field
+      coll.ensureIndex(fieldName)
+    }
+  })
+}
+
+/**
+ * Runs the graphql query over the loki nodes db.
+ *
+ * @param {Object} args. Object with:
+ *
+ * {Object} gqlType: built during `./build-node-types.js`
+ *
+ * {Object} queryArgs: The raw graphql query as a js object. E.g `{
+ * filter: { fields { slug: { eq: "/somepath" } } } }`
+ *
+ * {Object} context: The context from the QueryJob
+ *
+ * {boolean} firstOnly: Whether to return the first found match, or
+ * all matching results
+ *
+ * @returns {promise} A promise that will eventually be resolved with
+ * a collection of matching objects (even if `firstOnly` is true)
+ */
+async function runQuery({ gqlType, queryArgs, firstOnly }) {
+  // Clone args as for some reason graphql-js removes the constructor
+  // from nested objects which breaks a check in sift.js.
+  const gqlArgs = JSON.parse(JSON.stringify(queryArgs))
+  const lokiArgs = convertArgs(gqlArgs, gqlType)
+  const coll = getNodeTypeCollection(gqlType.name)
+  ensureFieldIndexes(coll, lokiArgs)
+  let chain = coll.chain().find(lokiArgs, firstOnly)
+
+  if (queryArgs.sort) {
+    const sortFields = toSortFields(queryArgs.sort)
+
+    // Create an index for each sort field. Indexing requires sorting
+    // so we lose nothing by ensuring an index is added for each sort
+    // field. Loki ensures this is a noop if the index already exists
+    for (const sortField of sortFields) {
+      coll.ensureIndex(sortField[0])
+    }
+    chain = chain.compoundsort(sortFields)
+  }
+
+  return chain.data()
+}
+
+module.exports = runQuery
diff --git a/node_modules/gatsby/src/db/loki/nodes.js b/node_modules/gatsby/src/db/loki/nodes.js
new file mode 100644
index 0000000..6cecd36
--- /dev/null
+++ b/node_modules/gatsby/src/db/loki/nodes.js
@@ -0,0 +1,352 @@
+const _ = require(`lodash`)
+const invariant = require(`invariant`)
+const { getDb, colls } = require(`./index`)
+
+/////////////////////////////////////////////////////////////////////
+// Node collection metadata
+/////////////////////////////////////////////////////////////////////
+
+function makeTypeCollName(type) {
+  return `gatsby:nodeType:${type}`
+}
+
+/**
+ * Creates a collection that will contain nodes of a certain type. The
+ * name of the collection for type `MyType` will be something like
+ * `gatsby:nodeType:MyType` (see `makeTypeCollName`)
+ */
+function createNodeTypeCollection(type) {
+  const collName = makeTypeCollName(type)
+  const nodeTypesColl = getDb().getCollection(colls.nodeTypes.name)
+  invariant(nodeTypesColl, `Collection ${colls.nodeTypes.name} should exist`)
+  nodeTypesColl.insert({ type, collName })
+  // TODO what if `addCollection` fails? We will have inserted into
+  // nodeTypesColl but no collection will exist. Need to make this
+  // into a transaction
+  const options = {
+    unique: [`id`],
+    indices: [`id`],
+    disableMeta: true,
+  }
+  const coll = getDb().addCollection(collName, options)
+  return coll
+}
+
+/**
+ * Returns the name of the collection that contains nodes of the
+ * specified type, where type is the node's `node.internal.type`
+ */
+function getTypeCollName(type) {
+  const nodeTypesColl = getDb().getCollection(colls.nodeTypes.name)
+  invariant(nodeTypesColl, `Collection ${colls.nodeTypes.name} should exist`)
+  let nodeTypeInfo = nodeTypesColl.by(`type`, type)
+  return nodeTypeInfo ? nodeTypeInfo.collName : undefined
+}
+
+/**
+ * Returns a reference to the collection that contains nodes of the
+ * specified type, where type is the node's `node.internal.type`
+ */
+function getNodeTypeCollection(type) {
+  const typeCollName = getTypeCollName(type)
+  let coll
+  if (typeCollName) {
+    coll = getDb().getCollection(typeCollName)
+    invariant(
+      coll,
+      `Type [${type}] Collection doesn't exist for nodeTypeInfo: [${typeCollName}]`
+    )
+    return coll
+  } else {
+    return undefined
+  }
+}
+
+/**
+ * Deletes all empty node type collections, unless `force` is true, in
+ * which case it deletes the collections even if they have nodes in
+ * them
+ */
+function deleteNodeTypeCollections(force = false) {
+  const nodeTypesColl = getDb().getCollection(colls.nodeTypes.name)
+  // find() returns all objects in collection
+  const nodeTypes = nodeTypesColl.find()
+  for (const nodeType of nodeTypes) {
+    let coll = getDb().getCollection(nodeType.collName)
+    if (coll.count() === 0 || force) {
+      getDb().removeCollection(coll.name)
+      nodeTypesColl.remove(nodeType)
+    }
+  }
+}
+
+/**
+ * Deletes all nodes from all the node type collections, including the
+ * id -> type metadata. There will be no nodes related data in loki
+ * after this is called
+ */
+function deleteAll() {
+  const db = getDb()
+  if (db) {
+    deleteNodeTypeCollections(true)
+    db.getCollection(colls.nodeMeta.name).clear()
+  }
+}
+
+/////////////////////////////////////////////////////////////////////
+// Queries
+/////////////////////////////////////////////////////////////////////
+
+/**
+ * Returns the node with `id` == id, or null if not found
+ */
+function getNode(id) {
+  if (!id) {
+    return null
+  }
+  // First, find out which collection the node is in
+  const nodeMetaColl = getDb().getCollection(colls.nodeMeta.name)
+  invariant(nodeMetaColl, `nodeMeta collection should exist`)
+  const nodeMeta = nodeMetaColl.by(`id`, id)
+  if (nodeMeta) {
+    // Now get the collection and query it by the `id` field, which
+    // has an index on it
+    const { typeCollName } = nodeMeta
+    const typeColl = getDb().getCollection(typeCollName)
+    invariant(
+      typeColl,
+      `type collection ${typeCollName} referenced by nodeMeta but doesn't exist`
+    )
+    return typeColl.by(`id`, id)
+  } else {
+    return undefined
+  }
+}
+
+/**
+ * Returns all nodes of a type (where `typeName ==
+ * node.internal.type`). This is an O(1) operation since nodes are
+ * already stored in seperate collections by type
+ */
+function getNodesByType(typeName) {
+  invariant(typeName, `typeName is null`)
+  const collName = getTypeCollName(typeName)
+  const coll = getDb().getCollection(collName)
+  if (!coll) return []
+  return coll.data
+}
+
+/**
+ * Returns the collection of all nodes. This should be deprecated and
+ * `getNodesByType` should be used instead. Or at least where possible
+ */
+function getNodes() {
+  const nodeTypes = getTypes()
+  return _.flatMap(nodeTypes, nodeType => getNodesByType(nodeType))
+}
+
+/**
+ * Returns the unique collection of all node types
+ */
+function getTypes() {
+  const nodeTypes = getDb().getCollection(colls.nodeTypes.name).data
+  return nodeTypes.map(nodeType => nodeType.type)
+}
+
+/**
+ * Looks up the node by id, records a dependency between the node and
+ * the path, and then returns the node
+ *
+ * @param {string} id node id to lookup
+ * @param {string} path the page path to record a node dependency
+ * against
+ * @returns {Object} node or undefined if not found
+ */
+function getNodeAndSavePathDependency(id, path) {
+  invariant(id, `id is null`)
+  invariant(id, `path is null`)
+  const createPageDependency = require(`../../redux/actions/add-page-dependency`)
+  const node = getNode(id)
+  createPageDependency({ path, nodeId: id })
+  return node
+}
+
+/**
+ * Determine if node has changed (by comparing its
+ * `internal.contentDigest`
+ *
+ * @param {string} id
+ * @param {string} digest
+ * @returns {boolean}
+ */
+function hasNodeChanged(id, digest) {
+  const node = getNode(id)
+  if (!node) {
+    return true
+  } else {
+    return node.internal.contentDigest !== digest
+  }
+}
+
+/////////////////////////////////////////////////////////////////////
+// Create/Update/Delete
+/////////////////////////////////////////////////////////////////////
+
+/**
+ * Creates a node in the DB. Will create a collection for the node
+ * type if one hasn't been created yet
+ *
+ * @param {Object} node The node to add. Must have an `id` and
+ * `internal.type`
+ */
+function createNode(node, oldNode) {
+  invariant(node.internal, `node has no "internal" field`)
+  invariant(node.internal.type, `node has no "internal.type" field`)
+  invariant(node.id, `node has no "id" field`)
+
+  const type = node.internal.type
+
+  // Loki doesn't provide "upsert", so if the node already exists, we
+  // delete and then create it
+  if (oldNode) {
+    deleteNode(oldNode)
+  }
+
+  let nodeTypeColl = getNodeTypeCollection(type)
+  if (!nodeTypeColl) {
+    nodeTypeColl = createNodeTypeCollection(type)
+  }
+
+  const nodeMetaColl = getDb().getCollection(colls.nodeMeta.name)
+  invariant(nodeMetaColl, `Collection ${colls.nodeMeta.name} should exist`)
+  nodeMetaColl.insert({ id: node.id, typeCollName: nodeTypeColl.name })
+  // TODO what if this insert fails? We will have inserted the id ->
+  // collName mapping, but there won't be any nodes in the type
+  // collection. Need to create a transaction around this
+  return nodeTypeColl.insert(node)
+}
+
+/**
+ * Updates a node in the DB. The contents of `node` will completely
+ * overwrite value in the DB. Note, `node` must be a loki node. i.e it
+ * has `$loki` and `meta` fields.
+ *
+ * @param {Object} node The new node information. This should be all
+ * the node information. Not just changes
+ */
+function updateNode(node) {
+  invariant(node.internal, `node has no "internal" field`)
+  invariant(node.internal.type, `node has no "internal.type" field`)
+  invariant(node.id, `node has no "id" field`)
+
+  const type = node.internal.type
+
+  let coll = getNodeTypeCollection(type)
+  invariant(coll, `${type} collection doesn't exist. When trying to update`)
+  coll.update(node)
+}
+
+/**
+ * Deletes a node from its type collection and removes its id ->
+ * collName mapping. Function is idempotent. If the node has already
+ * been deleted, this is a noop.
+ *
+ * @param {Object} the node to delete. Must have an `id` and
+ * `internal.type`
+ */
+function deleteNode(node) {
+  invariant(node.internal, `node has no "internal" field`)
+  invariant(node.internal.type, `node has no "internal.type" field`)
+  invariant(node.id, `node has no "id" field`)
+
+  const type = node.internal.type
+
+  let nodeTypeColl = getNodeTypeCollection(type)
+  if (!nodeTypeColl) {
+    invariant(
+      nodeTypeColl,
+      `${type} collection doesn't exist. When trying to delete`
+    )
+  }
+
+  if (nodeTypeColl.by(`id`, node.id)) {
+    const nodeMetaColl = getDb().getCollection(colls.nodeMeta.name)
+    invariant(nodeMetaColl, `Collection ${colls.nodeMeta.name} should exist`)
+    nodeMetaColl.findAndRemove({ id: node.id })
+    // TODO What if this `remove()` fails? We will have removed the id
+    // -> collName mapping, but not the actual node in the
+    // collection. Need to make this into a transaction
+    nodeTypeColl.remove(node)
+  }
+  // idempotent. Do nothing if node wasn't already in DB
+}
+
+/**
+ * deprecated
+ */
+function deleteNodes(nodes) {
+  for (const node of nodes) {
+    deleteNode(node)
+  }
+}
+
+/////////////////////////////////////////////////////////////////////
+// Reducer
+/////////////////////////////////////////////////////////////////////
+
+function reducer(state = new Map(), action) {
+  switch (action.type) {
+    case `DELETE_CACHE`:
+      deleteAll()
+      return null
+
+    case `CREATE_NODE`: {
+      createNode(action.payload, action.oldNode)
+      return null
+    }
+
+    case `ADD_FIELD_TO_NODE`:
+    case `ADD_CHILD_NODE_TO_PARENT_NODE`:
+      updateNode(action.payload)
+      return null
+
+    case `DELETE_NODE`: {
+      if (action.payload) {
+        deleteNode(action.payload)
+      }
+      return null
+    }
+
+    case `DELETE_NODES`: {
+      deleteNodes(action.payload)
+      return null
+    }
+
+    default:
+      return null
+  }
+}
+
+/////////////////////////////////////////////////////////////////////
+// Exports
+/////////////////////////////////////////////////////////////////////
+
+module.exports = {
+  getNodeTypeCollection,
+
+  getNodes,
+  getNode,
+  getNodesByType,
+  getTypes,
+  hasNodeChanged,
+  getNodeAndSavePathDependency,
+
+  createNode,
+  updateNode,
+  deleteNode,
+
+  deleteNodeTypeCollections,
+  deleteAll,
+
+  reducer,
+}
diff --git a/node_modules/gatsby/src/db/node-tracking.js b/node_modules/gatsby/src/db/node-tracking.js
new file mode 100644
index 0000000..b344a62
--- /dev/null
+++ b/node_modules/gatsby/src/db/node-tracking.js
@@ -0,0 +1,94 @@
+const _ = require(`lodash`)
+
+/**
+ * Map containing links between inline objects or arrays
+ * and Node that contains them
+ * @type {Object.<(Object|Array),string>}
+ */
+const rootNodeMap = new WeakMap()
+
+const getRootNodeId = node => rootNodeMap.get(node)
+
+/**
+ * Add link between passed data and Node. This function shouldn't be used
+ * directly. Use higher level `trackInlineObjectsInRootNode`
+ * @see trackInlineObjectsInRootNode
+ * @param {(Object|Array)} data Inline object or array
+ * @param {string} nodeId Id of node that contains data passed in first parameter
+ */
+const addRootNodeToInlineObject = (data, nodeId) => {
+  if (_.isPlainObject(data) || _.isArray(data)) {
+    _.each(data, o => addRootNodeToInlineObject(o, nodeId))
+    rootNodeMap.set(data, nodeId)
+  }
+}
+
+/**
+ * Adds link between inline objects/arrays contained in Node object
+ * and that Node object.
+ * @param {Node} node Root Node
+ */
+const trackInlineObjectsInRootNode = node => {
+  _.each(node, (v, k) => {
+    // Ignore the node internal object.
+    if (k === `internal`) {
+      return
+    }
+    addRootNodeToInlineObject(v, node.id)
+  })
+
+  return node
+}
+exports.trackInlineObjectsInRootNode = trackInlineObjectsInRootNode
+
+/**
+ * Finds top most ancestor of node that contains passed Object or Array
+ * @param {(Object|Array)} obj Object/Array belonging to Node object or Node object
+ * @param {nodePredicate} [predicate] Optional callback to check if ancestor meets defined conditions
+ * @returns {Node} Top most ancestor if predicate is not specified
+ * or first node that meet predicate conditions if predicate is specified
+ */
+const findRootNodeAncestor = (obj, predicate = null) => {
+  const { getNode } = require(`./nodes`)
+
+  // Find the root node.
+  let rootNode = obj
+  let whileCount = 0
+  let rootNodeId
+  while (
+    (!predicate || !predicate(rootNode)) &&
+    (rootNodeId = getRootNodeId(rootNode) || rootNode.parent) &&
+    ((rootNode.parent && getNode(rootNode.parent) !== undefined) ||
+      getNode(rootNodeId)) &&
+    whileCount < 101
+  ) {
+    if (rootNodeId) {
+      rootNode = getNode(rootNodeId)
+    } else {
+      rootNode = getNode(rootNode.parent)
+    }
+    whileCount += 1
+    if (whileCount > 100) {
+      console.log(
+        `It looks like you have a node that's set its parent as itself`,
+        rootNode
+      )
+    }
+  }
+
+  return !predicate || predicate(rootNode) ? rootNode : null
+}
+
+function trackDbNodes() {
+  const { getNodes } = require(`./nodes`)
+  _.each(getNodes(), node => {
+    trackInlineObjectsInRootNode(node)
+  })
+}
+
+/**
+ * @callback nodePredicate
+ * @param {Node} node Node that is examined
+ */
+exports.findRootNodeAncestor = findRootNodeAncestor
+exports.trackDbNodes = trackDbNodes
diff --git a/node_modules/gatsby/src/db/nodes-query.js b/node_modules/gatsby/src/db/nodes-query.js
new file mode 100644
index 0000000..c933c33
--- /dev/null
+++ b/node_modules/gatsby/src/db/nodes-query.js
@@ -0,0 +1,92 @@
+const _ = require(`lodash`)
+const { getNamedType } = require(`graphql`)
+
+const lokiRunQuery = require(`./loki/nodes-query`)
+const siftRunQuery = require(`../redux/run-sift`)
+
+// FIXME: This is duplicate code (`extractFieldsToSift`)
+const dropQueryOperators = filter =>
+  Object.keys(filter).reduce((acc, key) => {
+    let value = filter[key]
+    let k = Object.keys(value)[0]
+    let v = value[k]
+    if (_.isPlainObject(value) && _.isPlainObject(v)) {
+      acc[key] =
+        k === `elemMatch` ? dropQueryOperators(v) : dropQueryOperators(value)
+    } else {
+      acc[key] = true
+    }
+    return acc
+  }, {})
+
+const hasFieldResolvers = (type, filterFields) => {
+  const fields = type.getFields()
+  return Object.keys(filterFields).some(fieldName => {
+    const filterValue = filterFields[fieldName]
+    const field = fields[fieldName]
+    return (
+      Boolean(field.resolve) ||
+      (filterValue !== true &&
+        hasFieldResolvers(getNamedType(field.type), filterValue))
+    )
+  })
+}
+
+function chooseQueryEngine(args) {
+  const { backend } = require(`./nodes`)
+
+  const { queryArgs, gqlType } = args
+  // TODO: Resolve nodes on sort fields
+  // TODO: Need to get group and distinct `field` arg from projection
+  const { filter } = queryArgs
+  const fields = filter ? dropQueryOperators(filter) : {}
+
+  // NOTE: `hasFieldResolvers` is also true for Date fields
+  if (
+    backend === `loki` &&
+    !args.nodes &&
+    !hasFieldResolvers(gqlType, fields)
+  ) {
+    return lokiRunQuery
+  } else {
+    return siftRunQuery
+  }
+}
+
+/**
+ * Runs the query over all nodes of type. It must first select the
+ * appropriate query engine. Sift, or Loki. Sift is used by default,
+ * or if the query includes fields with custom resolver functions,
+ * those that need to be resolved before being queried.
+ * These could be either plugin fields, i.e those declared by plugins during
+ * the `setFieldsOnGraphQLNodeType` API, or they could be linked fields.
+ * See `../redux/run-sift.js` for more.
+ *
+ * If the query does *not* include fields with custom resolver functions,
+ * and environment variable `GATSBY_DB_NODES` = `loki` then we can perform
+ * a much faster pure data query using loki. See `loki/nodes-query.js` for
+ * more.
+ *
+ * @param {Object} args. Object with:
+ *
+ * {Object} gqlType: built during `./build-node-types.js`
+ *
+ * {Object} queryArgs: The raw graphql query as a js object. E.g `{
+ * filter: { fields { slug: { eq: "/somepath" } } } }`
+ *
+ * {Object} context: The context from the QueryJob
+ *
+ * {boolean} firstOnly: Whether to return the first found match, or
+ * all matching result.
+ *
+ * @returns {promise} A promise that will eventually be resolved with
+ * a collection of matching objects (even if `firstOnly` is true, in
+ * which case it will be a collection of length 1 or zero)
+ */
+function run(args) {
+  const queryFunction = chooseQueryEngine(args)
+
+  return queryFunction(args)
+}
+
+module.exports.run = run
diff --git a/node_modules/gatsby/src/db/nodes.js b/node_modules/gatsby/src/db/nodes.js
new file mode 100644
index 0000000..df1f804
--- /dev/null
+++ b/node_modules/gatsby/src/db/nodes.js
@@ -0,0 +1,65 @@
+/* @flow */
+const _ = require(`lodash`)
+const { store } = require(`../redux`)
+const { run: runQuery } = require(`./nodes-query`)
+const { findRootNodeAncestor } = require(`../db/node-tracking`)
+
+interface NodeStore {
+  getNodes: () => Array<any>;
+  getNode: (id: string) => any | undefined;
+  getNodesByType: (type: string) => Array<any>;
+  getTypes: () => Array<string>;
+  hasNodeChanged: (id: string, digest: string) => boolean;
+  getNodeAndSavePathDependency: (id: string, path: string) => any | undefined;
+  // XXX(freiksenet): types
+  runQuery: (...args: any) => any | undefined;
+  findRootNodeAncestor: (...args: any) => any | undefined;
+}
+
+const backend = process.env.GATSBY_DB_NODES || `redux`
+let nodesDb: NodeStore
+switch (backend) {
+  case `redux`:
+    nodesDb = require(`../redux/nodes`)
+    break
+  case `loki`:
+    nodesDb = require(`./loki/nodes`)
+    break
+  default:
+    throw new Error(
+      `Unsupported DB nodes backend (value of env var GATSBY_DB_NODES)`
+    )
+}
+
+module.exports = { ...nodesDb, runQuery, findRootNodeAncestor }
+module.exports.backend = backend
+
+/**
+ * Get content for a node from the plugin that created it.
+ *
+ * @param {Object} node
+ * @returns {promise}
+ */
+module.exports.loadNodeContent = node => {
+  if (_.isString(node.internal.content)) {
+    return Promise.resolve(node.internal.content)
+  } else {
+    return new Promise(resolve => {
+      // Load plugin's loader function
+      const plugin = store
+        .getState()
+        .flattenedPlugins.find(plug => plug.name === node.internal.owner)
+      const { loadNodeContent } = require(plugin.resolve)
+      if (!loadNodeContent) {
+        throw new Error(
+          `Could not find function loadNodeContent for plugin ${plugin.name}`
+        )
+      }
+
+      return loadNodeContent(node).then(content => {
+        // TODO update node's content field here.
+        resolve(content)
+      })
+    })
+  }
+}
diff --git a/node_modules/gatsby/src/internal-plugins/dev-404-page/gatsby-node.js b/node_modules/gatsby/src/internal-plugins/dev-404-page/gatsby-node.js
new file mode 100644
index 0000000..1204fa1
--- /dev/null
+++ b/node_modules/gatsby/src/internal-plugins/dev-404-page/gatsby-node.js
@@ -0,0 +1,28 @@
+const path = require(`path`)
+const fs = require(`fs-extra`)
+const chokidar = require(`chokidar`)
+
+exports.createPagesStatefully = async ({ store, actions }, options, done) => {
+  if (process.env.NODE_ENV !== `production`) {
+    const { program } = store.getState()
+    const { createPage } = actions
+    const source = path.join(__dirname, `./raw_dev-404-page.js`)
+    const destination = path.join(
+      program.directory,
+      `.cache`,
+      `dev-404-page.js`
+    )
+    const copy = () => fs.copy(source, destination)
+    await copy()
+    createPage({
+      component: destination,
+      path: `/dev-404-page/`,
+    })
+    chokidar
+      .watch(source)
+      .on(`change`, () => copy())
+      .on(`ready`, () => done())
+  } else {
+    done()
+  }
+}
diff --git a/node_modules/gatsby/src/internal-plugins/dev-404-page/index.js b/node_modules/gatsby/src/internal-plugins/dev-404-page/index.js
new file mode 100644
index 0000000..172f1ae
--- /dev/null
+++ b/node_modules/gatsby/src/internal-plugins/dev-404-page/index.js
@@ -0,0 +1 @@
+// noop
diff --git a/node_modules/gatsby/src/internal-plugins/dev-404-page/raw_dev-404-page.js b/node_modules/gatsby/src/internal-plugins/dev-404-page/raw_dev-404-page.js
new file mode 100644
index 0000000..aefadc8
--- /dev/null
+++ b/node_modules/gatsby/src/internal-plugins/dev-404-page/raw_dev-404-page.js
@@ -0,0 +1,86 @@
+import React from "react"
+import PropTypes from "prop-types"
+import { Link } from "gatsby"
+
+class Dev404Page extends React.Component {
+  static propTypes = {
+    pages: PropTypes.arrayOf(PropTypes.object),
+    custom404: PropTypes.element,
+    location: PropTypes.object,
+  }
+
+  constructor(props) {
+    super(props)
+    this.state = { showCustom404: false }
+    this.showCustom404 = this.showCustom404.bind(this)
+  }
+
+  showCustom404() {
+    this.setState({ showCustom404: true })
+  }
+
+  render() {
+    const { pathname } = this.props.location
+    const paths = this.props.pagePaths.filter(
+      p => !/^\/dev-404-page\/$/.test(p)
+    )
+    let newFilePath
+    if (pathname === `/`) {
+      newFilePath = `src/pages/index.js`
+    } else if (pathname.slice(-1) === `/`) {
+      newFilePath = `src/pages${pathname.slice(0, -1)}.js`
+    } else {
+      newFilePath = `src/pages${pathname}.js`
+    }
+
+    return this.state.showCustom404 ? (
+      this.props.custom404
+    ) : (
+      <div>
+        <h1>Gatsby.js development 404 page</h1>
+        <p>
+          {`There's not a page yet at `}
+          <code>{pathname}</code>
+        </p>
+        {this.props.custom404 ? (
+          <p>
+            <button onClick={this.showCustom404}>
+              Preview custom 404 page
+            </button>
+          </p>
+        ) : (
+          <p>
+            {`A custom 404 page wasn't detected - if you would like to add one, create a component in your site directory at `}
+            <code>src/pages/404.js</code>.
+          </p>
+        )}
+        <p>
+          Create a React.js component in your site directory at
+          {` `}
+          <code>{newFilePath}</code>
+          {` `}
+          and this page will automatically refresh to show the new page
+          component you created.
+        </p>
+        {paths.length > 0 && (
+          <div>
+            <p>
+              If you were trying to reach another page, perhaps you can find it
+              below.
+            </p>
+            <h2>Pages ({paths.length})</h2>
+            <ul>
+              {paths.map(path => (
+                <li key={path}>
+                  <Link to={path}>{path}</Link>
+                </li>
+              ))}
+            </ul>
+          </div>
+        )}
+      </div>
+    )
+  }
+}
+
+export default Dev404Page
diff --git a/node_modules/gatsby/src/internal-plugins/internal-data-bridge/gatsby-node.js b/node_modules/gatsby/src/internal-plugins/internal-data-bridge/gatsby-node.js
new file mode 100644
index 0000000..7f134ce
--- /dev/null
+++ b/node_modules/gatsby/src/internal-plugins/internal-data-bridge/gatsby-node.js
@@ -0,0 +1,159 @@
+const moment = require(`moment`)
+const chokidar = require(`chokidar`)
+const systemPath = require(`path`)
+const _ = require(`lodash`)
+
+const { emitter } = require(`../../redux`)
+const { boundActionCreators } = require(`../../redux/actions`)
+const { getNode } = require(`../../db/nodes`)
+
+function transformPackageJson(json) {
+  const transformDeps = deps =>
+    _.entries(deps).map(([name, version]) => {
+      return {
+        name,
+        version,
+      }
+    })
+
+  json = _.pick(json, [
+    `name`,
+    `description`,
+    `version`,
+    `main`,
+    `keywords`,
+    `author`,
+    `license`,
+    `dependencies`,
+    `devDependencies`,
+    `peerDependencies`,
+    `optionalDependecies`,
+    `bundledDependecies`,
+  ])
+  json.dependencies = transformDeps(json.dependencies)
+  json.devDependencies = transformDeps(json.devDependencies)
+  json.peerDependencies = transformDeps(json.peerDependencies)
+  json.optionalDependecies = transformDeps(json.optionalDependecies)
+  json.bundledDependecies = transformDeps(json.bundledDependecies)
+
+  return json
+}
+
+const createPageId = path => `SitePage ${path}`
+
+exports.sourceNodes = ({ createContentDigest, actions, store }) => {
+  const { createNode } = actions
+  const state = store.getState()
+  const { program } = state
+  const { flattenedPlugins } = state
+
+  // Add our default development page since we know it's going to
+  // exist and we need a node to exist so its query works :-)
+  const page = { path: `/dev-404-page/` }
+  createNode({
+    ...page,
+    id: createPageId(page.path),
+    parent: null,
+    children: [],
+    internal: {
+      type: `SitePage`,
+      contentDigest: createContentDigest(page),
+    },
+  })
+
+  flattenedPlugins.forEach(plugin => {
+    plugin.pluginFilepath = plugin.resolve
+    createNode({
+      ...plugin,
+      packageJson: transformPackageJson(
+        require(`${plugin.resolve}/package.json`)
+      ),
+      parent: null,
+      children: [],
+      internal: {
+        contentDigest: createContentDigest(plugin),
+        type: `SitePlugin`,
+      },
+    })
+  })
+
+  // Add site node.
+  const buildTime = moment()
+    .subtract(process.uptime(), `seconds`)
+    .toJSON()
+
+  const createGatsbyConfigNode = (config = {}) => {
+    // Delete plugins from the config as we add plugins above.
+    const configCopy = { ...config }
+    delete configCopy.plugins
+    const node = {
+      siteMetadata: {
+        ...configCopy.siteMetadata,
+      },
+      port: state.program.port,
+      host: state.program.host,
+      ...configCopy,
+      buildTime,
+    }
+    createNode({
+      ...node,
+      id: `Site`,
+      parent: null,
+      children: [],
+      internal: {
+        contentDigest: createContentDigest(node),
+        type: `Site`,
+      },
+    })
+  }
+
+  createGatsbyConfigNode(state.config)
+
+  const pathToGatsbyConfig = systemPath.join(
+    program.directory,
+    `gatsby-config.js`
+  )
+  chokidar.watch(pathToGatsbyConfig).on(`change`, () => {
+    const oldCache = require.cache[require.resolve(pathToGatsbyConfig)]
+    try {
+      // Delete require cache so we can reload the module.
+      delete require.cache[require.resolve(pathToGatsbyConfig)]
+      const config = require(pathToGatsbyConfig)
+      createGatsbyConfigNode(config)
+    } catch (e) {
+      // Restore the old cache since requiring the new gatsby-config.js failed.
+      if (oldCache !== undefined) {
+        require.cache[require.resolve(pathToGatsbyConfig)] = oldCache
+      }
+    }
+  })
+}
+
+exports.onCreatePage = ({ createContentDigest, page, actions }) => {
+  const { createNode } = actions
+  // eslint-disable-next-line
+  const { updatedAt, ...pageWithoutUpdated } = page
+
+  // Add page.
+  createNode({
+    ...pageWithoutUpdated,
+    id: createPageId(page.path),
+    parent: null,
+    children: [],
+    internal: {
+      type: `SitePage`,
+      contentDigest: createContentDigest(pageWithoutUpdated),
+      description:
+        page.pluginCreatorId === `Plugin default-site-plugin`
+          ? `Your site's "gatsby-node.js"`
+          : page.pluginCreatorId,
+    },
+  })
+}
+
+// Listen for DELETE_PAGE and delete page nodes.
+emitter.on(`DELETE_PAGE`, action => {
+  const nodeId = createPageId(action.payload.path)
+  const node = getNode(nodeId)
+  boundActionCreators.deleteNode({ node })
+})
diff --git a/node_modules/gatsby/src/internal-plugins/internal-data-bridge/index.js b/node_modules/gatsby/src/internal-plugins/internal-data-bridge/index.js
new file mode 100644
index 0000000..172f1ae
--- /dev/null
+++ b/node_modules/gatsby/src/internal-plugins/internal-data-bridge/index.js
@@ -0,0 +1 @@
+// noop
diff --git a/node_modules/gatsby/src/internal-plugins/load-babel-config/gatsby-node.js b/node_modules/gatsby/src/internal-plugins/load-babel-config/gatsby-node.js
new file mode 100644
index 0000000..5f0cf62
--- /dev/null
+++ b/node_modules/gatsby/src/internal-plugins/load-babel-config/gatsby-node.js
@@ -0,0 +1,35 @@
+/* @flow */
+
+const fs = require(`fs-extra`)
+
+const apiRunnerNode = require(`../../utils/api-runner-node`)
+const { withBasePath } = require(`../../utils/path`)
+
+exports.onPreBootstrap = async ({ store }) => {
+  const { directory, browserslist } = store.getState().program
+  const directoryPath = withBasePath(directory)
+
+  await apiRunnerNode(`onCreateBabelConfig`, {
+    stage: `develop`,
+  })
+  await apiRunnerNode(`onCreateBabelConfig`, {
+    stage: `develop-html`,
+  })
+  await apiRunnerNode(`onCreateBabelConfig`, {
+    stage: `build-javascript`,
+  })
+  await apiRunnerNode(`onCreateBabelConfig`, {
+    stage: `build-html`,
+  })
+
+  const babelState = JSON.stringify(
+    {
+      ...store.getState().babelrc,
+      browserslist,
+    },
+    null,
+    2
+  )
+
+  await fs.writeFile(directoryPath(`.cache/babelState.json`), babelState)
+}
diff --git a/node_modules/gatsby/src/internal-plugins/load-babel-config/index.js b/node_modules/gatsby/src/internal-plugins/load-babel-config/index.js
new file mode 100644
index 0000000..172f1ae
--- /dev/null
+++ b/node_modules/gatsby/src/internal-plugins/load-babel-config/index.js
@@ -0,0 +1 @@
+// noop
diff --git a/node_modules/gatsby/src/internal-plugins/prod-404/gatsby-node.js b/node_modules/gatsby/src/internal-plugins/prod-404/gatsby-node.js
new file mode 100644
index 0000000..e74f4f0
--- /dev/null
+++ b/node_modules/gatsby/src/internal-plugins/prod-404/gatsby-node.js
@@ -0,0 +1,13 @@
+let created404 = false
+exports.onCreatePage = ({ page, store, actions }) => {
+  // Copy /404/ to /404.html as many static site hosts expect
+  // site 404 pages to be named this.
+  // https://www.gatsbyjs.org/docs/add-404-page/
+  if (!created404 && page.path === `/404/`) {
+    actions.createPage({
+      ...page,
+      path: `/404.html`,
+    })
+    created404 = true
+  }
+}
diff --git a/node_modules/gatsby/src/internal-plugins/prod-404/index.js b/node_modules/gatsby/src/internal-plugins/prod-404/index.js
new file mode 100644
index 0000000..172f1ae
--- /dev/null
+++ b/node_modules/gatsby/src/internal-plugins/prod-404/index.js
@@ -0,0 +1 @@
+// noop
diff --git a/node_modules/gatsby/src/internal-plugins/webpack-theme-component-shadowing/gatsby-node.js b/node_modules/gatsby/src/internal-plugins/webpack-theme-component-shadowing/gatsby-node.js
new file mode 100644
index 0000000..1f19141
--- /dev/null
+++ b/node_modules/gatsby/src/internal-plugins/webpack-theme-component-shadowing/gatsby-node.js
@@ -0,0 +1,21 @@
+const GatsbyThemeComponentShadowingResolverPlugin = require(`.`)
+
+exports.onCreateWebpackConfig = (
+  { store, stage, getConfig, rules, loaders, actions },
+  pluginOptions
+) => {
+  const { program, themes } = store.getState()
+
+  if (themes.themes) {
+    actions.setWebpackConfig({
+      resolve: {
+        plugins: [
+          new GatsbyThemeComponentShadowingResolverPlugin({
+            themes: themes.themes.map(({ themeName }) => themeName),
+            projectRoot: program.directory,
+          }),
+        ],
+      },
+    })
+  }
+}
diff --git a/node_modules/gatsby/src/internal-plugins/webpack-theme-component-shadowing/index.js b/node_modules/gatsby/src/internal-plugins/webpack-theme-component-shadowing/index.js
new file mode 100644
index 0000000..0af1317
--- /dev/null
+++ b/node_modules/gatsby/src/internal-plugins/webpack-theme-component-shadowing/index.js
@@ -0,0 +1,137 @@
+const path = require(`path`)
+const debug = require(`debug`)(`gatsby:component-shadowing`)
+const fs = require(`fs`)
+const _ = require(`lodash`)
+
+module.exports = class GatsbyThemeComponentShadowingResolverPlugin {
+  cache = {}
+
+  constructor({ projectRoot, themes }) {
+    debug(`themes list`, themes)
+    this.themes = themes
+    this.projectRoot = projectRoot
+  }
+
+  apply(resolver) {
+    resolver.plugin(`relative`, (request, callback) => {
+      // find out which theme's src/components dir we're requiring from
+      const allMatchingThemes = this.themes.filter(name =>
+        request.path.includes(path.join(name, `src`))
+      )
+
+      // The same theme can be included twice in the themes list causing multiple
+      // matches. This case should only be counted as a single match for that theme.
+      const matchingThemes = _.uniq(allMatchingThemes)
+
+      // 0 matching themes happens a lot for paths we don't want to handle
+      // > 1 matching theme means we have a path like
+      //   `gatsby-theme-blog/src/components/gatsby-theme-something/src/components`
+      if (matchingThemes.length > 1) {
+        throw new Error(
+          `Gatsby can't differentiate between themes ${matchingThemes.join(
+            ` and `
+          )} for path ${request.path}`
+        )
+      }
+      if (matchingThemes.length !== 1) {
+        return callback()
+      }
+      // theme is the theme package from which we're requiring the relative component
+      const [theme] = matchingThemes
+      // get the location of the component relative to src/
+      const [, component] = request.path.split(path.join(theme, `src`))
+
+      /**
+       * if someone adds
+       * ```
+       * modules: [path.resolve(__dirname, 'src'), 'node_modules'],
+       * ```
+       * to the webpack config, `issuer` is `null`, so we skip this check.
+       * note that it's probably a bad idea in general to set `modules`
+       * like this in a theme, but we also shouldn't artificially break
+       * people that do.
+       */
+      if (request.context.issuer) {
+        const issuerExtension = path.extname(request.context.issuer)
+
+        if (
+          request.context.issuer
+            .slice(0, -issuerExtension.length)
+            .endsWith(component)
+        ) {
+          return resolver.doResolve(
+            `describedRelative`,
+            request,
+            null,
+            {},
+            callback
+          )
+        }
+      }
+      const builtComponentPath = this.resolveComponentPath({
+        matchingTheme: theme,
+        themes: this.themes,
+        component,
+        projectRoot: this.projectRoot,
+      })
+
+      return resolver.doResolve(
+        `describedRelative`,
+        { ...request, path: builtComponentPath || request.path },
+        null,
+        {},
+        callback
+      )
+    })
+  }
+
+  // check the cache, the user's project, and finally the theme files
+  resolveComponentPath({
+    matchingTheme: theme,
+    themes: ogThemes,
+    component,
+    projectRoot,
+  }) {
+    // don't include matching theme in possible shadowing paths
+    const themes = ogThemes.filter(t => t !== theme)
+    if (!this.cache[`${theme}-${component}`]) {
+      this.cache[`${theme}-${component}`] = [
+        path.join(path.resolve(`.`), `src`, theme),
+      ]
+        .concat(
+          Array.from(themes)
+            .reverse()
+            .map(aTheme =>
+              path.join(path.dirname(require.resolve(aTheme)), `src`, theme)
+            )
+        )
+        .map(dir => path.join(dir, component))
+        .find(possibleComponentPath => {
+          debug(`possibleComponentPath`, possibleComponentPath)
+          let dir
+          try {
+            // we use fs/path instead of require.resolve to work with
+            // TypeScript and alternate syntaxes
+            dir = fs.readdirSync(path.dirname(possibleComponentPath))
+          } catch (e) {
+            return false
+          }
+          const exists = dir
+            .map(filepath => {
+              const ext = path.extname(filepath)
+              const filenameWithoutExtension = path.basename(filepath, ext)
+              return filenameWithoutExtension
+            })
+            .includes(
+              path.basename(
+                possibleComponentPath,
+                path.extname(possibleComponentPath)
+              )
+            )
+          return exists
+        })
+    }
+
+    return this.cache[`${theme}-${component}`]
+  }
+}
diff --git a/node_modules/gatsby/src/joi-schemas/joi.js b/node_modules/gatsby/src/joi-schemas/joi.js
new file mode 100644
index 0000000..7a5d1f9
--- /dev/null
+++ b/node_modules/gatsby/src/joi-schemas/joi.js
@@ -0,0 +1,50 @@
+const Joi = require(`joi`)
+
+export const gatsbyConfigSchema = Joi.object().keys({
+  __experimentalThemes: Joi.array(),
+  polyfill: Joi.boolean(),
+  siteMetadata: Joi.object(),
+  pathPrefix: Joi.string(),
+  mapping: Joi.object(),
+  plugins: Joi.array(),
+  proxy: Joi.object().keys({
+    prefix: Joi.string().required(),
+    url: Joi.string().required(),
+  }),
+  developMiddleware: Joi.func(),
+})
+
+export const pageSchema = Joi.object()
+  .keys({
+    path: Joi.string().required(),
+    matchPath: Joi.string(),
+    component: Joi.string().required(),
+    componentChunkName: Joi.string().required(),
+    context: Joi.object(),
+    pluginCreator___NODE: Joi.string(),
+    pluginCreatorId: Joi.string(),
+  })
+  .unknown()
+
+export const nodeSchema = Joi.object()
+  .keys({
+    id: Joi.string().required(),
+    children: Joi.array().items(Joi.string(), Joi.object().forbidden()),
+    parent: Joi.string().allow(null),
+    fields: Joi.object(),
+    internal: Joi.object()
+      .keys({
+        contentDigest: Joi.string().required(),
+        mediaType: Joi.string(),
+        type: Joi.string().required(),
+        owner: Joi.string().required(),
+        fieldOwners: Joi.object(),
+        content: Joi.string().allow(``),
+        description: Joi.string(),
+        ignoreType: Joi.boolean(),
+      })
+      .unknown({
+        allow: false,
+      }), // Don't allow non-standard fields
+  })
+  .unknown()
diff --git a/node_modules/gatsby/src/query/__tests__/__snapshots__/file-parser.js.snap b/node_modules/gatsby/src/query/__tests__/__snapshots__/file-parser.js.snap
new file mode 100644
index 0000000..47ed7db
--- /dev/null
+++ b/node_modules/gatsby/src/query/__tests__/__snapshots__/file-parser.js.snap
@@ -0,0 +1,993 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`File parser extracts query AST correctly from files 1`] = `
+Map {
+  "page-query.js" => Object {
+    "definitions": Array [
+      Object {
+        "directives": Array [],
+        "kind": "OperationDefinition",
+        "loc": Object {
+          "end": 30,
+          "start": 1,
+        },
+        "name": Object {
+          "kind": "Name",
+          "loc": Object {
+            "end": 20,
+            "start": 7,
+          },
+          "value": "PageQueryName",
+        },
+        "operation": "query",
+        "selectionSet": Object {
+          "kind": "SelectionSet",
+          "loc": Object {
+            "end": 30,
+            "start": 21,
+          },
+          "selections": Array [
+            Object {
+              "alias": undefined,
+              "arguments": Array [],
+              "directives": Array [],
+              "kind": "Field",
+              "loc": Object {
+                "end": 28,
+                "start": 25,
+              },
+              "name": Object {
+                "kind": "Name",
+                "loc": Object {
+                  "end": 28,
+                  "start": 25,
+                },
+                "value": "foo",
+              },
+              "selectionSet": undefined,
+            },
+          ],
+        },
+        "variableDefinitions": Array [],
+      },
+    ],
+    "kind": "Document",
+  },
+  "page-query-no-name.js" => Object {
+    "definitions": Array [
+      Object {
+        "directives": Array [],
+        "kind": "OperationDefinition",
+        "loc": Object {
+          "end": 16,
+          "start": 1,
+        },
+        "name": Object {
+          "kind": "Name",
+          "value": "pageQueryNoNameJs2538359280",
+        },
+        "operation": "query",
+        "selectionSet": Object {
+          "kind": "SelectionSet",
+          "loc": Object {
+            "end": 16,
+            "start": 7,
+          },
+          "selections": Array [
+            Object {
+              "alias": undefined,
+              "arguments": Array [],
+              "directives": Array [],
+              "kind": "Field",
+              "loc": Object {
+                "end": 14,
+                "start": 11,
+              },
+              "name": Object {
+                "kind": "Name",
+                "loc": Object {
+                  "end": 14,
+                  "start": 11,
+                },
+                "value": "foo",
+              },
+              "selectionSet": undefined,
+            },
+          ],
+        },
+        "variableDefinitions": Array [],
+      },
+    ],
+    "kind": "Document",
+  },
+  "static-query.js" => Object {
+    "definitions": Array [
+      Object {
+        "directives": Array [],
+        "hash": 407706182,
+        "isHook": false,
+        "isStaticQuery": true,
+        "kind": "OperationDefinition",
+        "loc": Object {
+          "end": 29,
+          "start": 0,
+        },
+        "name": Object {
+          "kind": "Name",
+          "loc": Object {
+            "end": 21,
+            "start": 6,
+          },
+          "value": "StaticQueryName",
+        },
+        "operation": "query",
+        "selectionSet": Object {
+          "kind": "SelectionSet",
+          "loc": Object {
+            "end": 29,
+            "start": 22,
+          },
+          "selections": Array [
+            Object {
+              "alias": undefined,
+              "arguments": Array [],
+              "directives": Array [],
+              "kind": "Field",
+              "loc": Object {
+                "end": 27,
+                "start": 24,
+              },
+              "name": Object {
+                "kind": "Name",
+                "loc": Object {
+                  "end": 27,
+                  "start": 24,
+                },
+                "value": "foo",
+              },
+              "selectionSet": undefined,
+            },
+          ],
+        },
+        "text": "query StaticQueryName { foo }",
+        "variableDefinitions": Array [],
+      },
+    ],
+    "kind": "Document",
+  },
+  "static-query-no-name.js" => Object {
+    "definitions": Array [
+      Object {
+        "directives": Array [],
+        "hash": 2605331189,
+        "isHook": false,
+        "isStaticQuery": true,
+        "kind": "OperationDefinition",
+        "loc": Object {
+          "end": 7,
+          "start": 0,
+        },
+        "name": Object {
+          "kind": "Name",
+          "value": "staticQueryNoNameJs2605331189",
+        },
+        "operation": "query",
+        "selectionSet": Object {
+          "kind": "SelectionSet",
+          "loc": Object {
+            "end": 7,
+            "start": 0,
+          },
+          "selections": Array [
+            Object {
+              "alias": undefined,
+              "arguments": Array [],
+              "directives": Array [],
+              "kind": "Field",
+              "loc": Object {
+                "end": 5,
+                "start": 2,
+              },
+              "name": Object {
+                "kind": "Name",
+                "loc": Object {
+                  "end": 5,
+                  "start": 2,
+                },
+                "value": "foo",
+              },
+              "selectionSet": undefined,
+            },
+          ],
+        },
+        "text": "{ foo }",
+        "variableDefinitions": Array [],
+      },
+    ],
+    "kind": "Document",
+  },
+  "static-query-named-export.js" => Object {
+    "definitions": Array [
+      Object {
+        "directives": Array [],
+        "hash": 407706182,
+        "isHook": false,
+        "isStaticQuery": true,
+        "kind": "OperationDefinition",
+        "loc": Object {
+          "end": 29,
+          "start": 0,
+        },
+        "name": Object {
+          "kind": "Name",
+          "loc": Object {
+            "end": 21,
+            "start": 6,
+          },
+          "value": "StaticQueryName",
+        },
+        "operation": "query",
+        "selectionSet": Object {
+          "kind": "SelectionSet",
+          "loc": Object {
+            "end": 29,
+            "start": 22,
+          },
+          "selections": Array [
+            Object {
+              "alias": undefined,
+              "arguments": Array [],
+              "directives": Array [],
+              "kind": "Field",
+              "loc": Object {
+                "end": 27,
+                "start": 24,
+              },
+              "name": Object {
+                "kind": "Name",
+                "loc": Object {
+                  "end": 27,
+                  "start": 24,
+                },
+                "value": "foo",
+              },
+              "selectionSet": undefined,
+            },
+          ],
+        },
+        "text": "query StaticQueryName { foo }",
+        "variableDefinitions": Array [],
+      },
+    ],
+    "kind": "Document",
+  },
+  "static-query-closing-tag.js" => Object {
+    "definitions": Array [
+      Object {
+        "directives": Array [],
+        "hash": 2605331189,
+        "isHook": false,
+        "isStaticQuery": true,
+        "kind": "OperationDefinition",
+        "loc": Object {
+          "end": 7,
+          "start": 0,
+        },
+        "name": Object {
+          "kind": "Name",
+          "value": "staticQueryClosingTagJs2605331189",
+        },
+        "operation": "query",
+        "selectionSet": Object {
+          "kind": "SelectionSet",
+          "loc": Object {
+            "end": 7,
+            "start": 0,
+          },
+          "selections": Array [
+            Object {
+              "alias": undefined,
+              "arguments": Array [],
+              "directives": Array [],
+              "kind": "Field",
+              "loc": Object {
+                "end": 5,
+                "start": 2,
+              },
+              "name": Object {
+                "kind": "Name",
+                "loc": Object {
+                  "end": 5,
+                  "start": 2,
+                },
+                "value": "foo",
+              },
+              "selectionSet": undefined,
+            },
+          ],
+        },
+        "text": "{ foo }",
+        "variableDefinitions": Array [],
+      },
+    ],
+    "kind": "Document",
+  },
+  "page-query-and-static-query-named-export.js" => Object {
+    "definitions": Array [
+      Object {
+        "directives": Array [],
+        "hash": 407706182,
+        "isHook": false,
+        "isStaticQuery": true,
+        "kind": "OperationDefinition",
+        "loc": Object {
+          "end": 29,
+          "start": 0,
+        },
+        "name": Object {
+          "kind": "Name",
+          "loc": Object {
+            "end": 21,
+            "start": 6,
+          },
+          "value": "StaticQueryName",
+        },
+        "operation": "query",
+        "selectionSet": Object {
+          "kind": "SelectionSet",
+          "loc": Object {
+            "end": 29,
+            "start": 22,
+          },
+          "selections": Array [
+            Object {
+              "alias": undefined,
+              "arguments": Array [],
+              "directives": Array [],
+              "kind": "Field",
+              "loc": Object {
+                "end": 27,
+                "start": 24,
+              },
+              "name": Object {
+                "kind": "Name",
+                "loc": Object {
+                  "end": 27,
+                  "start": 24,
+                },
+                "value": "foo",
+              },
+              "selectionSet": undefined,
+            },
+          ],
+        },
+        "text": "query StaticQueryName { foo }",
+        "variableDefinitions": Array [],
+      },
+      Object {
+        "directives": Array [],
+        "kind": "OperationDefinition",
+        "loc": Object {
+          "end": 27,
+          "start": 0,
+        },
+        "name": Object {
+          "kind": "Name",
+          "loc": Object {
+            "end": 19,
+            "start": 6,
+          },
+          "value": "PageQueryName",
+        },
+        "operation": "query",
+        "selectionSet": Object {
+          "kind": "SelectionSet",
+          "loc": Object {
+            "end": 27,
+            "start": 20,
+          },
+          "selections": Array [
+            Object {
+              "alias": undefined,
+              "arguments": Array [],
+              "directives": Array [],
+              "kind": "Field",
+              "loc": Object {
+                "end": 25,
+                "start": 22,
+              },
+              "name": Object {
+                "kind": "Name",
+                "loc": Object {
+                  "end": 25,
+                  "start": 22,
+                },
+                "value": "foo",
+              },
+              "selectionSet": undefined,
+            },
+          ],
+        },
+        "variableDefinitions": Array [],
+      },
+    ],
+    "kind": "Document",
+  },
+  "multiple-fragment-exports.js" => Object {
+    "definitions": Array [
+      Object {
+        "directives": Array [],
+        "kind": "FragmentDefinition",
+        "loc": Object {
+          "end": 53,
+          "start": 3,
+        },
+        "name": Object {
+          "kind": "Name",
+          "loc": Object {
+            "end": 21,
+            "start": 12,
+          },
+          "value": "Fragment1",
+        },
+        "selectionSet": Object {
+          "kind": "SelectionSet",
+          "loc": Object {
+            "end": 53,
+            "start": 40,
+          },
+          "selections": Array [
+            Object {
+              "alias": undefined,
+              "arguments": Array [],
+              "directives": Array [],
+              "kind": "Field",
+              "loc": Object {
+                "end": 49,
+                "start": 46,
+              },
+              "name": Object {
+                "kind": "Name",
+                "loc": Object {
+                  "end": 49,
+                  "start": 46,
+                },
+                "value": "foo",
+              },
+              "selectionSet": undefined,
+            },
+          ],
+        },
+        "typeCondition": Object {
+          "kind": "NamedType",
+          "loc": Object {
+            "end": 39,
+            "start": 25,
+          },
+          "name": Object {
+            "kind": "Name",
+            "loc": Object {
+              "end": 39,
+              "start": 25,
+            },
+            "value": "RootQueryField",
+          },
+        },
+      },
+      Object {
+        "directives": Array [],
+        "kind": "FragmentDefinition",
+        "loc": Object {
+          "end": 106,
+          "start": 56,
+        },
+        "name": Object {
+          "kind": "Name",
+          "loc": Object {
+            "end": 74,
+            "start": 65,
+          },
+          "value": "Fragment2",
+        },
+        "selectionSet": Object {
+          "kind": "SelectionSet",
+          "loc": Object {
+            "end": 106,
+            "start": 93,
+          },
+          "selections": Array [
+            Object {
+              "alias": undefined,
+              "arguments": Array [],
+              "directives": Array [],
+              "kind": "Field",
+              "loc": Object {
+                "end": 102,
+                "start": 99,
+              },
+              "name": Object {
+                "kind": "Name",
+                "loc": Object {
+                  "end": 102,
+                  "start": 99,
+                },
+                "value": "bar",
+              },
+              "selectionSet": undefined,
+            },
+          ],
+        },
+        "typeCondition": Object {
+          "kind": "NamedType",
+          "loc": Object {
+            "end": 92,
+            "start": 78,
+          },
+          "name": Object {
+            "kind": "Name",
+            "loc": Object {
+              "end": 92,
+              "start": 78,
+            },
+            "value": "RootQueryField",
+          },
+        },
+      },
+      Object {
+        "directives": Array [],
+        "kind": "FragmentDefinition",
+        "loc": Object {
+          "end": 53,
+          "start": 3,
+        },
+        "name": Object {
+          "kind": "Name",
+          "loc": Object {
+            "end": 21,
+            "start": 12,
+          },
+          "value": "Fragment3",
+        },
+        "selectionSet": Object {
+          "kind": "SelectionSet",
+          "loc": Object {
+            "end": 53,
+            "start": 40,
+          },
+          "selections": Array [
+            Object {
+              "alias": undefined,
+              "arguments": Array [],
+              "directives": Array [],
+              "kind": "Field",
+              "loc": Object {
+                "end": 49,
+                "start": 46,
+              },
+              "name": Object {
+                "kind": "Name",
+                "loc": Object {
+                  "end": 49,
+                  "start": 46,
+                },
+                "value": "baz",
+              },
+              "selectionSet": undefined,
+            },
+          ],
+        },
+        "typeCondition": Object {
+          "kind": "NamedType",
+          "loc": Object {
+            "end": 39,
+            "start": 25,
+          },
+          "name": Object {
+            "kind": "Name",
+            "loc": Object {
+              "end": 39,
+              "start": 25,
+            },
+            "value": "RootQueryField",
+          },
+        },
+      },
+    ],
+    "kind": "Document",
+  },
+  "fragment-shorthand.js" => Object {
+    "definitions": Array [
+      Object {
+        "directives": Array [],
+        "hash": 1097489062,
+        "isHook": false,
+        "isStaticQuery": true,
+        "kind": "OperationDefinition",
+        "loc": Object {
+          "end": 74,
+          "start": 3,
+        },
+        "name": Object {
+          "kind": "Name",
+          "value": "fragmentShorthandJs1097489062",
+        },
+        "operation": "query",
+        "selectionSet": Object {
+          "kind": "SelectionSet",
+          "loc": Object {
+            "end": 74,
+            "start": 9,
+          },
+          "selections": Array [
+            Object {
+              "alias": undefined,
+              "arguments": Array [],
+              "directives": Array [],
+              "kind": "Field",
+              "loc": Object {
+                "end": 70,
+                "start": 15,
+              },
+              "name": Object {
+                "kind": "Name",
+                "loc": Object {
+                  "end": 19,
+                  "start": 15,
+                },
+                "value": "site",
+              },
+              "selectionSet": Object {
+                "kind": "SelectionSet",
+                "loc": Object {
+                  "end": 70,
+                  "start": 20,
+                },
+                "selections": Array [
+                  Object {
+                    "alias": undefined,
+                    "arguments": Array [],
+                    "directives": Array [],
+                    "kind": "Field",
+                    "loc": Object {
+                      "end": 64,
+                      "start": 28,
+                    },
+                    "name": Object {
+                      "kind": "Name",
+                      "loc": Object {
+                        "end": 40,
+                        "start": 28,
+                      },
+                      "value": "siteMetadata",
+                    },
+                    "selectionSet": Object {
+                      "kind": "SelectionSet",
+                      "loc": Object {
+                        "end": 64,
+                        "start": 41,
+                      },
+                      "selections": Array [
+                        Object {
+                          "alias": undefined,
+                          "arguments": Array [],
+                          "directives": Array [],
+                          "kind": "Field",
+                          "loc": Object {
+                            "end": 56,
+                            "start": 51,
+                          },
+                          "name": Object {
+                            "kind": "Name",
+                            "loc": Object {
+                              "end": 56,
+                              "start": 51,
+                            },
+                            "value": "title",
+                          },
+                          "selectionSet": undefined,
+                        },
+                      ],
+                    },
+                  },
+                ],
+              },
+            },
+          ],
+        },
+        "text": "
+  query {
+    site {
+      siteMetadata {
+        title
+      }
+    }
+  }
+",
+        "variableDefinitions": Array [],
+      },
+    ],
+    "kind": "Document",
+  },
+  "query-in-separate-variable.js" => Object {
+    "definitions": Array [
+      Object {
+        "directives": Array [],
+        "hash": 3748317405,
+        "isHook": false,
+        "isStaticQuery": true,
+        "kind": "OperationDefinition",
+        "loc": Object {
+          "end": 47,
+          "start": 0,
+        },
+        "name": Object {
+          "kind": "Name",
+          "value": "queryInSeparateVariableJs3748317405",
+        },
+        "operation": "query",
+        "selectionSet": Object {
+          "kind": "SelectionSet",
+          "loc": Object {
+            "end": 47,
+            "start": 0,
+          },
+          "selections": Array [
+            Object {
+              "alias": undefined,
+              "arguments": Array [],
+              "directives": Array [],
+              "kind": "Field",
+              "loc": Object {
+                "end": 46,
+                "start": 2,
+              },
+              "name": Object {
+                "kind": "Name",
+                "loc": Object {
+                  "end": 19,
+                  "start": 2,
+                },
+                "value": "allMarkdownRemark",
+              },
+              "selectionSet": Object {
+                "kind": "SelectionSet",
+                "loc": Object {
+                  "end": 46,
+                  "start": 20,
+                },
+                "selections": Array [
+                  Object {
+                    "alias": undefined,
+                    "arguments": Array [],
+                    "directives": Array [],
+                    "kind": "Field",
+                    "loc": Object {
+                      "end": 45,
+                      "start": 22,
+                    },
+                    "name": Object {
+                      "kind": "Name",
+                      "loc": Object {
+                        "end": 26,
+                        "start": 22,
+                      },
+                      "value": "blah",
+                    },
+                    "selectionSet": Object {
+                      "kind": "SelectionSet",
+                      "loc": Object {
+                        "end": 45,
+                        "start": 27,
+                      },
+                      "selections": Array [
+                        Object {
+                          "alias": undefined,
+                          "arguments": Array [],
+                          "directives": Array [],
+                          "kind": "Field",
+                          "loc": Object {
+                            "end": 44,
+                            "start": 29,
+                          },
+                          "name": Object {
+                            "kind": "Name",
+                            "loc": Object {
+                              "end": 33,
+                              "start": 29,
+                            },
+                            "value": "node",
+                          },
+                          "selectionSet": Object {
+                            "kind": "SelectionSet",
+                            "loc": Object {
+                              "end": 44,
+                              "start": 34,
+                            },
+                            "selections": Array [
+                              Object {
+                                "alias": undefined,
+                                "arguments": Array [],
+                                "directives": Array [],
+                                "kind": "Field",
+                                "loc": Object {
+                                  "end": 42,
+                                  "start": 36,
+                                },
+                                "name": Object {
+                                  "kind": "Name",
+                                  "loc": Object {
+                                    "end": 42,
+                                    "start": 36,
+                                  },
+                                  "value": "cheese",
+                                },
+                                "selectionSet": undefined,
+                              },
+                            ],
+                          },
+                        },
+                      ],
+                    },
+                  },
+                ],
+              },
+            },
+          ],
+        },
+        "text": "{ allMarkdownRemark { blah { node { cheese }}}}",
+        "variableDefinitions": Array [],
+      },
+    ],
+    "kind": "Document",
+  },
+  "query-in-separate-variable-2.js" => Object {
+    "definitions": Array [
+      Object {
+        "directives": Array [],
+        "hash": 1352988887,
+        "isHook": false,
+        "isStaticQuery": true,
+        "kind": "OperationDefinition",
+        "loc": Object {
+          "end": 49,
+          "start": 0,
+        },
+        "name": Object {
+          "kind": "Name",
+          "value": "queryInSeparateVariable2Js1352988887",
+        },
+        "operation": "query",
+        "selectionSet": Object {
+          "kind": "SelectionSet",
+          "loc": Object {
+            "end": 49,
+            "start": 0,
+          },
+          "selections": Array [
+            Object {
+              "alias": undefined,
+              "arguments": Array [],
+              "directives": Array [],
+              "kind": "Field",
+              "loc": Object {
+                "end": 48,
+                "start": 2,
+              },
+              "name": Object {
+                "kind": "Name",
+                "loc": Object {
+                  "end": 21,
+                  "start": 2,
+                },
+                "value": "allStrangeQueryName",
+              },
+              "selectionSet": Object {
+                "kind": "SelectionSet",
+                "loc": Object {
+                  "end": 48,
+                  "start": 22,
+                },
+                "selections": Array [
+                  Object {
+                    "alias": undefined,
+                    "arguments": Array [],
+                    "directives": Array [],
+                    "kind": "Field",
+                    "loc": Object {
+                      "end": 47,
+                      "start": 24,
+                    },
+                    "name": Object {
+                      "kind": "Name",
+                      "loc": Object {
+                        "end": 28,
+                        "start": 24,
+                      },
+                      "value": "blah",
+                    },
+                    "selectionSet": Object {
+                      "kind": "SelectionSet",
+                      "loc": Object {
+                        "end": 47,
+                        "start": 29,
+                      },
+                      "selections": Array [
+                        Object {
+                          "alias": undefined,
+                          "arguments": Array [],
+                          "directives": Array [],
+                          "kind": "Field",
+                          "loc": Object {
+                            "end": 46,
+                            "start": 31,
+                          },
+                          "name": Object {
+                            "kind": "Name",
+                            "loc": Object {
+                              "end": 35,
+                              "start": 31,
+                            },
+                            "value": "node",
+                          },
+                          "selectionSet": Object {
+                            "kind": "SelectionSet",
+                            "loc": Object {
+                              "end": 46,
+                              "start": 36,
+                            },
+                            "selections": Array [
+                              Object {
+                                "alias": undefined,
+                                "arguments": Array [],
+                                "directives": Array [],
+                                "kind": "Field",
+                                "loc": Object {
+                                  "end": 44,
+                                  "start": 38,
+                                },
+                                "name": Object {
+                                  "kind": "Name",
+                                  "loc": Object {
+                                    "end": 44,
+                                    "start": 38,
+                                  },
+                                  "value": "cheese",
+                                },
+                                "selectionSet": undefined,
+                              },
+                            ],
+                          },
+                        },
+                      ],
+                    },
+                  },
+                ],
+              },
+            },
+          ],
+        },
+        "text": "{ allStrangeQueryName { blah { node { cheese }}}}",
+        "variableDefinitions": Array [],
+      },
+    ],
+    "kind": "Document",
+  },
+}
+`;
+
+exports[`File parser extracts query AST correctly from files 2`] = `
+Array [
+  "warning 
+We were unable to find the declaration of variable \\"strangeQueryName\\", which you passed as the \\"query\\" prop into the <StaticQuery> declaration in \\"query-not-defined.js\\".
+
+Perhaps the variable name has a typo?
+
+Also note that we are currently unable to use queries defined in files other than the file where the <StaticQuery> is defined. If you're attempting to import the query, please move it into \\"query-not-defined.js\\". If being able to import queries from another file is an important capability for you, we invite your help fixing it.",
+  "warning 
+We were unable to find the declaration of variable \\"strangeQueryName\\", which you passed as the \\"query\\" prop into the <StaticQuery> declaration in \\"query-imported.js\\".
+
+Perhaps the variable name has a typo?
+
+Also note that we are currently unable to use queries defined in files other than the file where the <StaticQuery> is defined. If you're attempting to import the query, please move it into \\"query-imported.js\\". If being able to import queries from another file is an important capability for you, we invite your help fixing it.",
+]
+`;
diff --git a/node_modules/gatsby/src/query/__tests__/__snapshots__/utils.js.snap b/node_modules/gatsby/src/query/__tests__/__snapshots__/utils.js.snap
new file mode 100644
index 0000000..e66e7d4
--- /dev/null
+++ b/node_modules/gatsby/src/query/__tests__/__snapshots__/utils.js.snap
@@ -0,0 +1,16 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`Text formatting  format error details correctly 1`] = `
+"Field:
+  One line error
+Bar:
+  Three
+  line
+  error"
+`;
+
+exports[`Text formatting  indent string correctly 1`] = `
+"  Line 1
+  Line 2
+    - Line 3"
+`;
diff --git a/node_modules/gatsby/src/query/__tests__/better-queue-custom-store.js b/node_modules/gatsby/src/query/__tests__/better-queue-custom-store.js
new file mode 100644
index 0000000..1f07518
--- /dev/null
+++ b/node_modules/gatsby/src/query/__tests__/better-queue-custom-store.js
@@ -0,0 +1,202 @@
+const MemoryStoreWithPriorityBuckets = require(`../better-queue-custom-store`)
+const pify = require(`pify`)
+
+// those are tests copied from https://github.com/diamondio/better-queue-store-test/blob/master/tester.js
+// and converted from mocha to jest + used pify to make it nicer to read than callback chain
+describe(`Custom better-queue memory store`, () => {
+  let store
+
+  const functions = [
+    `connect`,
+    `getTask`,
+    `putTask`,
+    `deleteTask`,
+    `takeFirstN`,
+    `takeLastN`,
+    `getLock`,
+    `getRunningTasks`,
+    `releaseLock`,
+  ]
+  beforeEach(() => {
+    store = MemoryStoreWithPriorityBuckets()
+    functions.forEach(fnName => {
+      if (store[fnName]) {
+        store[fnName] = pify(store[fnName])
+      }
+    })
+  })
+
+  it(`all required functions exist`, () => {
+    functions.forEach(fnName => {
+      expect(typeof store[fnName]).toBe(`function`)
+    })
+  })
+
+  it(`connect starts empty`, async () => {
+    const len = await store.connect()
+    expect(len).toBe(0)
+  })
+
+  it(`put and get`, async () => {
+    await store.connect()
+    await store.putTask(`test`, { value: `secret` }, 1)
+
+    const task = await store.getTask(`test`)
+    expect(task.value).toBe(`secret`)
+  })
+
+  it(`put 3, take last 2, take last 2`, async () => {
+    await store.connect()
+    await store.putTask(`task1`, { value: `secret 1` }, 1)
+    await store.putTask(`task2`, { value: `secret 2` }, 1)
+    await store.putTask(`task3`, { value: `secret 3` }, 1)
+
+    let lockId, tasks
+
+    lockId = await store.takeLastN(2)
+    tasks = await store.getLock(lockId)
+
+    // should get the third task
+    expect(tasks.task3.value).toBe(`secret 3`)
+    // should get the second task
+    expect(tasks.task2.value).toBe(`secret 2`)
+    // should not get the first task
+    expect(tasks.task1).toBeUndefined()
+
+    lockId = await store.takeLastN(2)
+    tasks = await store.getLock(lockId)
+
+    // should not get the third task
+    expect(tasks.task3).toBeUndefined()
+    // should not get the second task
+    expect(tasks.task2).toBeUndefined()
+    // should get the first task
+    expect(tasks.task1.value).toBe(`secret 1`)
+  })
+
+  it(`put 3, take first 2, take first 2`, async () => {
+    await store.connect()
+    await store.putTask(`task1`, { value: `secret 1` }, 1)
+    await store.putTask(`task2`, { value: `secret 2` }, 1)
+    await store.putTask(`task3`, { value: `secret 3` }, 1)
+
+    let lockId, tasks
+
+    lockId = await store.takeFirstN(2)
+    tasks = await store.getLock(lockId)
+
+    // should get the first task
+    expect(tasks.task1.value).toBe(`secret 1`)
+    // should get the second task
+    expect(tasks.task2.value).toBe(`secret 2`)
+    // should not get the third task
+    expect(tasks.task3).toBeUndefined()
+
+    lockId = await store.takeFirstN(2)
+    tasks = await store.getLock(lockId)
+
+    // should not get the first task
+    expect(tasks.task1).toBeUndefined()
+    // should not get the second task
+    expect(tasks.task2).toBeUndefined()
+    // should get the third task
+    expect(tasks.task3.value).toBe(`secret 3`)
+  })
+
+  it(`get and release workers`, async () => {
+    await store.connect()
+    await store.putTask(`task1`, { value: `secret 1` }, 1)
+    await store.putTask(`task2`, { value: `secret 2` }, 1)
+    await store.putTask(`task3`, { value: `secret 3` }, 1)
+
+    const lock1 = await store.takeFirstN(1)
+    const lock2 = await store.takeLastN(1)
+
+    let workers
+
+    workers = await store.getRunningTasks()
+
+    // should have first lock
+    expect(workers[lock1]).toBeDefined()
+    // should have second lock
+    expect(workers[lock2]).toBeDefined()
+    // should have two workers
+    expect(Object.keys(workers).length).toBe(2)
+    // should have task1
+    expect(workers[lock1].task1.value).toBe(`secret 1`)
+    // should have task3
+    expect(workers[lock2].task3.value).toBe(`secret 3`)
+
+    await store.releaseLock(lock1)
+    await store.releaseLock(lock2)
+
+    workers = await store.getRunningTasks()
+
+    // should not have lock 1
+    expect(workers[lock1]).toBeUndefined()
+    // should not have lock 2
+    expect(workers[lock2]).toBeUndefined()
+    // should have no workers
+    expect(Object.keys(workers).length).toBe(0)
+  })
+
+  it(`put 4, delete 1, take first 2`, async () => {
+    await store.connect()
+    await store.putTask(`task1`, { value: `secret 1` }, 1)
+    await store.putTask(`task2`, { value: `secret 2` }, 1)
+    await store.putTask(`task3`, { value: `secret 3` }, 1)
+    await store.putTask(`task4`, { value: `secret 4` }, 1)
+
+    // Remove the second
+    await store.deleteTask(`task2`)
+
+    // take 2
+    const lockId = await store.takeFirstN(2)
+    const tasks = await store.getLock(lockId)
+
+    // should get the first task
+    expect(tasks.task1.value).toBe(`secret 1`)
+    // should not get the second task
+    expect(tasks.task2).toBeUndefined()
+    // should get the third task
+    expect(tasks.task3.value).toBe(`secret 3`)
+    // should not get the fourth task
+    expect(tasks.task4).toBeUndefined()
+  })
+
+  // extra tests to cover priority
+  it(`handles priority`, async () => {
+    await store.connect()
+    await store.putTask(`task1`, { value: `secret 1` }, 1)
+    await store.putTask(`task2`, { value: `secret 2` }, 3)
+    await store.putTask(`task3`, { value: `secret 3` }, 4)
+    await store.putTask(`task4`, { value: `secret 4` }, 2)
+
+    // take first 2
+    let lockId, tasks
+    lockId = await store.takeFirstN(2)
+    tasks = await store.getLock(lockId)
+
+    // should get the third task
+    expect(tasks.task3.value).toBe(`secret 3`)
+    // should get the second task
+    expect(tasks.task2.value).toBe(`secret 2`)
+    // should not get first task
+    expect(tasks.task1).toBeUndefined()
+    // should not get the fourth task
+    expect(tasks.task4).toBeUndefined()
+
+    // take last 1
+    lockId = await store.takeLastN(1)
+    tasks = await store.getLock(lockId)
+
+    // should get the first task
+    expect(tasks.task1.value).toBe(`secret 1`)
+    // should not get second task
+    expect(tasks.task2).toBeUndefined()
+    // should not get third task
+    expect(tasks.task3).toBeUndefined()
+    // should not get the fourth task
+    expect(tasks.task4).toBeUndefined()
+  })
+})
diff --git a/node_modules/gatsby/src/query/__tests__/file-parser.js b/node_modules/gatsby/src/query/__tests__/file-parser.js
new file mode 100644
index 0000000..1e1c9dc
--- /dev/null
+++ b/node_modules/gatsby/src/query/__tests__/file-parser.js
@@ -0,0 +1,167 @@
+jest.mock(`fs-extra`, () => {
+  let mockFiles = {}
+  return {
+    __setMockFiles: newMockFiles => {
+      mockFiles = Object.assign({}, newMockFiles)
+    },
+    readFile: (filePath, parser) =>
+      new Promise(resolve => resolve(mockFiles[filePath])),
+  }
+})
+jest.mock(`../../utils/api-runner-node`, () => () => [])
+
+const FileParser = require(`../file-parser`).default
+
+describe(`File parser`, () => {
+  const MOCK_FILE_INFO = {
+    "no-query.js": `import React from "react"`,
+    "page-query.js": `import { graphql } from 'gatsby'
+    export const query = graphql\`
+query PageQueryName {
+  foo
+}
+\``,
+    "page-query-no-name.js": `import { graphql } from 'gatsby'
+  export const query = graphql\`
+query {
+  foo
+}
+\``,
+    "static-query.js": `import { graphql } from 'gatsby'
+  export default () => (
+  <StaticQuery
+    query={graphql\`query StaticQueryName { foo }\`}
+    render={data => <div>{data.doo}</div>}
+  />
+)`,
+    "static-query-no-name.js": `import { graphql } from 'gatsby'
+  export default () => (
+  <StaticQuery
+    query={graphql\`{ foo }\`}
+    render={data => <div>{data.foo}</div>}
+  />
+)`,
+    "static-query-named-export.js": `import { graphql } from 'gatsby'
+  export const Component = () => (
+  <StaticQuery
+    query={graphql\`query StaticQueryName { foo }\`}
+    render={data => <div>{data.doo}</div>}
+  />
+)`,
+    "static-query-closing-tag.js": `import { graphql } from 'gatsby'
+  export default () => (
+  <StaticQuery
+    query={graphql\`{ foo }\`}
+  >
+    {data => <div>{data.foo}</div>}
+  </StaticQuery>
+)`,
+    "page-query-and-static-query-named-export.js": `import { graphql } from 'gatsby'
+  export const Component = () => (
+  <StaticQuery
+    query={graphql\`query StaticQueryName { foo }\`}
+    render={data => <div>{data.doo}</div>}
+  />
+)
+export const pageQuery = graphql\`query PageQueryName { foo }\`
+`,
+    "multiple-fragment-exports.js": `import { graphql } from 'gatsby'
+  export const fragment1 = graphql\`
+  fragment Fragment1 on RootQueryField {
+    foo
+  }
+  fragment Fragment2 on RootQueryField {
+    bar
+  }
+\`
+export const fragment3 = graphql\`
+  fragment Fragment3 on RootQueryField {
+    baz
+  }
+\`
+`,
+    "fragment-shorthand.js": `import React from "react"
+import { StaticQuery, graphql } from "gatsby"
+
+const query = graphql\`
+  query {
+    site {
+      siteMetadata {
+        title
+      }
+    }
+  }
+\`
+
+export default () => (
+  <>
+    <StaticQuery
+      query={query}
+      render={data => <div>{data.title}</div>}
+    />
+  </>
+)`,
+    "query-in-separate-variable.js": `import React from "react"
+import { StaticQuery, graphql } from "gatsby"
+
+const query = graphql\`{ allMarkdownRemark { blah { node { cheese }}}}\`
+
+export default () => (
+  <StaticQuery
+    query={query}
+    render={data => <div>{data.pizza}</div>}
+  />
+)`,
+    "query-in-separate-variable-2.js": `import React from "react"
+import { StaticQuery, graphql } from "gatsby"
+
+const query = graphql\`{ fakeOut { blah { node { cheese }}}}\`
+const strangeQueryName = graphql\`{ allStrangeQueryName { blah { node { cheese }}}}\`
+
+export default () => (
+  <StaticQuery
+    query={strangeQueryName}
+    render={data => <div>{data.pizza}</div>}
+  />
+)`,
+    "query-not-defined.js": `import React from "react"
+import { StaticQuery, graphql } from "gatsby"
+
+export default () => (
+  <StaticQuery
+    query={strangeQueryName}
+    render={data => <div>{data.pizza}</div>}
+  />
+)`,
+    "query-imported.js": `import React from "react"
+import { StaticQuery, graphql } from "gatsby"
+import strangeQueryName from "./another-file.js"
+
+export default () => (
+  <StaticQuery
+    query={strangeQueryName}
+    render={data => <div>{data.pizza}</div>}
+  />
+)`,
+  }
+
+  const parser = new FileParser()
+
+  beforeAll(() => {
+    require(`fs-extra`).__setMockFiles(MOCK_FILE_INFO)
+  })
+
+  it(`extracts query AST correctly from files`, async () => {
+    const spyStderr = jest.spyOn(process.stderr, `write`)
+    const results = await parser.parseFiles(Object.keys(MOCK_FILE_INFO))
+    expect(results).toMatchSnapshot()
+    expect(
+      spyStderr.mock.calls
+        .filter(c => c[0].includes(`warning`))
+        // Remove console colors + trim whitespace
+        // eslint-disable-next-line
+        .map(c => c[0].replace(/\x1B[[(?);]{0,2}(;?\d)*./g, ``).trim())
+    ).toMatchSnapshot()
+    spyStderr.mockRestore()
+  })
+})
diff --git a/node_modules/gatsby/src/query/__tests__/query-compiler.js b/node_modules/gatsby/src/query/__tests__/query-compiler.js
new file mode 100644
index 0000000..01f91af
--- /dev/null
+++ b/node_modules/gatsby/src/query/__tests__/query-compiler.js
@@ -0,0 +1,98 @@
+jest.mock(`glob`, () => {
+  const sync = jest.fn().mockImplementation(() => [])
+  return {
+    sync,
+  }
+})
+const path = require(`path`)
+const glob = require(`glob`)
+const { resolveThemes, Runner } = require(`../query-compiler`)
+
+const base = path.resolve(``)
+
+describe(`Runner`, () => {
+  beforeEach(() => {
+    glob.sync.mockClear()
+  })
+
+  it(`returns a file parser instance`, async () => {
+    const runner = new Runner(base, [], {})
+
+    const parser = await runner.parseEverything()
+
+    expect(parser).toEqual(new Map())
+  })
+
+  describe(`expected directories`, () => {
+    it(`compiles src directory`, async () => {
+      const runner = new Runner(base, [], {})
+
+      await runner.parseEverything()
+
+      expect(glob.sync).toHaveBeenCalledWith(
+        expect.stringContaining(path.join(base, `src`)),
+        expect.any(Object)
+      )
+    })
+
+    it(`compiles fragments directory`, async () => {
+      const runner = new Runner(base, [], {})
+
+      await runner.parseEverything()
+
+      expect(glob.sync).toHaveBeenCalledWith(
+        expect.stringContaining(path.join(base, `src`)),
+        expect.any(Object)
+      )
+    })
+
+    it(`compiles themes directory(s)`, async () => {
+      const theme = `gatsby-theme-whatever`
+      const runner = new Runner(
+        base,
+        [path.join(base, `node_modules`, theme)],
+        {}
+      )
+
+      await runner.parseEverything()
+
+      expect(glob.sync).toHaveBeenCalledWith(
+        expect.stringContaining(path.join(base, `node_modules`, theme)),
+        expect.any(Object)
+      )
+    })
+  })
+})
+
+describe(`resolveThemes`, () => {
+  it(`returns empty array if zero themes appear in store`, () => {
+    ;[[], undefined].forEach(testRun => {
+      expect(resolveThemes(testRun)).toEqual([])
+    })
+  })
+
+  it(`returns themes in the store`, () => {
+    const theme = `gatsby-theme-example`
+    expect(
+      resolveThemes([
+        {
+          name: theme,
+          themeDir: path.join(base, `gatsby-theme-example`),
+        },
+      ])
+    ).toEqual([expect.stringContaining(theme)])
+  })
+
+  it(`handles scoped packages`, () => {
+    const theme = `@dschau/gatsby-theme-example`
+
+    expect(
+      resolveThemes([
+        {
+          name: theme,
+          themeDir: path.join(base, theme),
+        },
+      ])
+    ).toEqual([expect.stringContaining(theme.split(`/`).join(path.sep))])
+  })
+})
diff --git a/node_modules/gatsby/src/query/__tests__/utils.js b/node_modules/gatsby/src/query/__tests__/utils.js
new file mode 100644
index 0000000..8f572ba
--- /dev/null
+++ b/node_modules/gatsby/src/query/__tests__/utils.js
@@ -0,0 +1,25 @@
+import { indentString, formatErrorDetails } from "../utils"
+
+describe(`Text formatting `, () => {
+  it(`indent string correctly`, () => {
+    expect(
+      indentString(
+        `  Line 1
+Line 2
+  - Line 3`
+      )
+    ).toMatchSnapshot()
+  })
+
+  it(`format error details correctly`, () => {
+    const testErrors = new Map()
+    testErrors.set(`Field`, `One line error`)
+    testErrors.set(
+      `Bar`,
+      `Three
+line
+error`
+    )
+    expect(formatErrorDetails(testErrors)).toMatchSnapshot()
+  })
+})
diff --git a/node_modules/gatsby/src/query/better-queue-custom-store.js b/node_modules/gatsby/src/query/better-queue-custom-store.js
new file mode 100644
index 0000000..e083d39
--- /dev/null
+++ b/node_modules/gatsby/src/query/better-queue-custom-store.js
@@ -0,0 +1,190 @@
+function MemoryStoreWithPriorityBuckets() {
+  let uuid = 0
+
+  /**
+   * Task ids grouped by priority
+   */
+  const queueMap = new Map()
+
+  /**
+   * Task id to task lookup
+   */
+  const tasks = new Map()
+
+  /**
+   * Task id to priority lookup
+   */
+  const taskIdToPriority = new Map()
+
+  /**
+   * Lock to running tasks object
+   */
+  const running = {}
+
+  let priorityKeys = []
+  const updatePriorityKeys = () => {
+    priorityKeys = Array.from(queueMap.keys()).sort((a, b) => b - a)
+  }
+
+  const addTaskWithPriority = (taskId, priority) => {
+    let needToUpdatePriorityKeys = false
+    let priorityTasks = queueMap.get(priority)
+    if (!priorityTasks) {
+      priorityTasks = []
+      queueMap.set(priority, priorityTasks)
+      needToUpdatePriorityKeys = true
+    }
+
+    taskIdToPriority.set(taskId, priority)
+    priorityTasks.push(taskId)
+    return needToUpdatePriorityKeys
+  }
+
+  return {
+    connect: function(cb) {
+      cb(null, tasks.size)
+    },
+    getTask: function(taskId, cb) {
+      cb(null, tasks.get(taskId))
+    },
+    deleteTask: function(taskId, cb) {
+      if (tasks.get(taskId)) {
+        tasks.delete(taskId)
+        const priority = taskIdToPriority.get(taskId)
+        const priorityTasks = queueMap.get(priority)
+        priorityTasks.splice(priorityTasks.indexOf(taskId), 1)
+        taskIdToPriority.delete(taskId)
+      }
+      cb()
+    },
+    putTask: function(taskId, task, priority = 0, cb) {
+      const oldTask = tasks.get(taskId)
+      tasks.set(taskId, task)
+      let needToUpdatePriorityKeys = false
+      if (oldTask) {
+        const oldPriority = taskIdToPriority.get(taskId)
+
+        if (oldPriority !== priority) {
+          const oldPriorityTasks = queueMap.get(oldPriority)
+          oldPriorityTasks.splice(oldPriorityTasks.indexOf(taskId), 1)
+
+          if (
+            addTaskWithPriority(taskId, priority) ||
+            oldPriority.length === 0
+          ) {
+            needToUpdatePriorityKeys = true
+          }
+        }
+      } else {
+        needToUpdatePriorityKeys = addTaskWithPriority(taskId, priority)
+      }
+
+      if (needToUpdatePriorityKeys) {
+        updatePriorityKeys()
+      }
+      cb()
+    },
+    takeFirstN: function(n, cb) {
+      const lockId = uuid++
+      let remainingTasks = n
+      let needToUpdatePriorityKeys = false
+      let haveSomeTasks = false
+      const tasksToRun = {}
+
+      for (let priority of priorityKeys) {
+        const taskWithSamePriority = queueMap.get(priority)
+        const grabbedTaskIds = taskWithSamePriority.splice(0, remainingTasks)
+        grabbedTaskIds.forEach(taskId => {
+          // add task to task that will run
+          // and remove it from waiting list
+          tasksToRun[taskId] = tasks.get(taskId)
+          tasks.delete(taskId)
+          taskIdToPriority.delete(taskId)
+          haveSomeTasks = true
+        })
+
+        remainingTasks -= grabbedTaskIds.length
+        if (taskWithSamePriority.length === 0) {
+          queueMap.delete(priority)
+          needToUpdatePriorityKeys = true
+        }
+        if (remainingTasks <= 0) {
+          break
+        }
+      }
+
+      if (needToUpdatePriorityKeys) {
+        updatePriorityKeys()
+      }
+
+      if (haveSomeTasks) {
+        running[lockId] = tasksToRun
+      }
+
+      cb(null, lockId)
+    },
+    takeLastN: function(n, cb) {
+      // This is not really used by Gatsby, but will be implemented for
+      // completion in easiest possible way (so not very performant).
+      // Mostly done so generic test suite used by other stores passes.
+      // This is mostly C&P from takeFirstN, with array reversal and different
+      // splice args
+      const lockId = uuid++
+      let remainingTasks = n
+      let needToUpdatePriorityKeys = false
+      let haveSomeTasks = false
+      const tasksToRun = {}
+
+      for (let priority of priorityKeys.reverse()) {
+        const taskWithSamePriority = queueMap.get(priority)
+        const deleteCount = Math.min(
+          remainingTasks,
+          taskWithSamePriority.length
+        )
+        const grabbedTaskIds = taskWithSamePriority.splice(
+          taskWithSamePriority.length - deleteCount,
+          deleteCount
+        )
+        grabbedTaskIds.forEach(taskId => {
+          // add task to task that will run
+          // and remove it from waiting list
+          tasksToRun[taskId] = tasks.get(taskId)
+          tasks.delete(taskId)
+          taskIdToPriority.delete(taskId)
+          haveSomeTasks = true
+        })
+
+        remainingTasks -= grabbedTaskIds.length
+        if (taskWithSamePriority.length === 0) {
+          queueMap.delete(priority)
+          needToUpdatePriorityKeys = true
+        }
+        if (remainingTasks <= 0) {
+          break
+        }
+      }
+
+      if (needToUpdatePriorityKeys) {
+        updatePriorityKeys()
+      }
+
+      if (haveSomeTasks) {
+        running[lockId] = tasksToRun
+      }
+
+      cb(null, lockId)
+    },
+    getRunningTasks: function(cb) {
+      cb(null, running)
+    },
+    getLock: function(lockId, cb) {
+      cb(null, running[lockId])
+    },
+    releaseLock: function(lockId, cb) {
+      delete running[lockId]
+      cb()
+    },
+  }
+}
+
+module.exports = MemoryStoreWithPriorityBuckets
diff --git a/node_modules/gatsby/src/query/file-parser.js b/node_modules/gatsby/src/query/file-parser.js
new file mode 100644
index 0000000..2b262d8
--- /dev/null
+++ b/node_modules/gatsby/src/query/file-parser.js
@@ -0,0 +1,363 @@
+// @flow
+const fs = require(`fs-extra`)
+const crypto = require(`crypto`)
+const _ = require(`lodash`)
+
+// Traverse is a es6 module...
+import traverse from "@babel/traverse"
+const getGraphQLTag = require(`babel-plugin-remove-graphql-queries`)
+  .getGraphQLTag
+const report = require(`gatsby-cli/lib/reporter`)
+
+import type { DocumentNode, DefinitionNode } from "graphql"
+import { babelParseToAst } from "../utils/babel-parse-to-ast"
+
+const apiRunnerNode = require(`../utils/api-runner-node`)
+const { boundActionCreators } = require(`../redux/actions`)
+
+/**
+ * Add autogenerated query name if it wasn't defined by user.
+ */
+const generateQueryName = ({ def, hash, file }) => {
+  if (!def.name || !def.name.value) {
+    def.name = {
+      value: `${_.camelCase(file)}${hash}`,
+      kind: `Name`,
+    }
+  }
+  return def
+}
+
+const warnForUnknownQueryVariable = (varName, file, usageFunction) =>
+  report.warn(
+    `\nWe were unable to find the declaration of variable "${varName}", which you passed as the "query" prop into the ${usageFunction} declaration in "${file}".
+
+Perhaps the variable name has a typo?
+
+Also note that we are currently unable to use queries defined in files other than the file where the ${usageFunction} is defined. If you're attempting to import the query, please move it into "${file}". If being able to import queries from another file is an important capability for you, we invite your help fixing it.\n`
+  )
+
+async function parseToAst(filePath, fileStr) {
+  let ast
+
+  // Preprocess and attempt to parse source; return an AST if we can, log an
+  // error if we can't.
+  const transpiled = await apiRunnerNode(`preprocessSource`, {
+    filename: filePath,
+    contents: fileStr,
+  })
+  if (transpiled && transpiled.length) {
+    for (const item of transpiled) {
+      try {
+        const tmp = babelParseToAst(item, filePath)
+        ast = tmp
+        break
+      } catch (error) {
+        report.error(error)
+        boundActionCreators.queryExtractionGraphQLError({
+          componentPath: filePath,
+        })
+        continue
+      }
+    }
+    if (ast === undefined) {
+      report.error(`Failed to parse preprocessed file ${filePath}`)
+      boundActionCreators.queryExtractionGraphQLError({
+        componentPath: filePath,
+      })
+
+      return null
+    }
+  } else {
+    try {
+      ast = babelParseToAst(fileStr, filePath)
+    } catch (error) {
+      boundActionCreators.queryExtractionBabelError({
+        componentPath: filePath,
+        error,
+      })
+      report.error(
+        `There was a problem parsing "${filePath}"; any GraphQL ` +
+          `fragments or queries in this file were not processed. \n` +
+          `This may indicate a syntax error in the code, or it may be a file type ` +
+          `that Gatsby does not know how to parse.`
+      )
+
+      return null
+    }
+  }
+
+  return ast
+}
+
+const warnForGlobalTag = file =>
+  report.warn(
+    `Using the global \`graphql\` tag is deprecated, and will not be supported in v3.\n` +
+      `Import it instead like:  import { graphql } from 'gatsby' in file:\n` +
+      file
+  )
+
+async function findGraphQLTags(file, text): Promise<Array<DefinitionNode>> {
+  return new Promise((resolve, reject) => {
+    parseToAst(file, text)
+      .then(ast => {
+        let queries = []
+        if (!ast) {
+          resolve(queries)
+          return
+        }
+
+        /**
+         * A map of graphql documents to unique locations.
+         *
+         * A graphql document's unique location is made of:
+         *
+         *  - the location of the graphql template literal that contains the document, and
+         *  - the document's location within the graphql template literal
+         *
+         * This is used to prevent returning duplicated documents.
+         */
+        const documentLocations = new WeakMap()
+
+        const extractStaticQuery = (
+          taggedTemplateExpressPath,
+          isHook = false
+        ) => {
+          const { ast: gqlAst, text, hash, isGlobal } = getGraphQLTag(
+            taggedTemplateExpressPath
+          )
+          if (!gqlAst) return
+
+          if (isGlobal) warnForGlobalTag(file)
+
+          gqlAst.definitions.forEach(def => {
+            documentLocations.set(
+              def,
+              `${taggedTemplateExpressPath.node.start}-${def.loc.start}`
+            )
+            generateQueryName({
+              def,
+              hash,
+              file,
+            })
+          })
+
+          const definitions = [...gqlAst.definitions].map(d => {
+            d.isStaticQuery = true
+            d.isHook = isHook
+            d.text = text
+            d.hash = hash
+            return d
+          })
+
+          queries.push(...definitions)
+        }
+
+        // Look for queries in <StaticQuery /> elements.
+        traverse(ast, {
+          JSXElement(path) {
+            if (path.node.openingElement.name.name !== `StaticQuery`) {
+              return
+            }
+
+            // astexplorer.com link I (@kyleamathews) used when prototyping this algorithm
+            // https://astexplorer.net/#/gist/ab5d71c0f08f287fbb840bf1dd8b85ff/2f188345d8e5a4152fe7c96f0d52dbcc6e9da466
+            path.traverse({
+              JSXAttribute(jsxPath) {
+                if (jsxPath.node.name.name !== `query`) {
+                  return
+                }
+                jsxPath.traverse({
+                  // Assume the query is inline in the component and extract that.
+                  TaggedTemplateExpression(templatePath) {
+                    extractStaticQuery(templatePath)
+                  },
+                  // Also see if it's a variable that's passed in as a prop
+                  // and if it is, go find it.
+                  Identifier(identifierPath) {
+                    if (identifierPath.node.name !== `graphql`) {
+                      const varName = identifierPath.node.name
+                      let found = false
+                      traverse(ast, {
+                        VariableDeclarator(varPath) {
+                          if (
+                            varPath.node.id.name === varName &&
+                            varPath.node.init.type ===
+                              `TaggedTemplateExpression`
+                          ) {
+                            varPath.traverse({
+                              TaggedTemplateExpression(templatePath) {
+                                found = true
+                                extractStaticQuery(templatePath)
+                              },
+                            })
+                          }
+                        },
+                      })
+                      if (!found) {
+                        warnForUnknownQueryVariable(
+                          varName,
+                          file,
+                          `<StaticQuery>`
+                        )
+                      }
+                    }
+                  },
+                })
+              },
+            })
+            return
+          },
+        })
+
+        // Look for queries in useStaticQuery hooks.
+        traverse(ast, {
+          CallExpression(hookPath) {
+            if (
+              hookPath.node.callee.name !== `useStaticQuery` ||
+              !hookPath.get(`callee`).referencesImport(`gatsby`)
+            ) {
+              return
+            }
+
+            hookPath.traverse({
+              // Assume the query is inline in the component and extract that.
+              TaggedTemplateExpression(templatePath) {
+                extractStaticQuery(templatePath, true)
+              },
+              // // Also see if it's a variable that's passed in as a prop
+              // // and if it is, go find it.
+              Identifier(identifierPath) {
+                if (
+                  identifierPath.node.name !== `graphql` &&
+                  identifierPath.node.name !== `useStaticQuery`
+                ) {
+                  const varName = identifierPath.node.name
+                  let found = false
+                  traverse(ast, {
+                    VariableDeclarator(varPath) {
+                      if (
+                        varPath.node.id.name === varName &&
+                        varPath.node.init.type === `TaggedTemplateExpression`
+                      ) {
+                        varPath.traverse({
+                          TaggedTemplateExpression(templatePath) {
+                            found = true
+                            extractStaticQuery(templatePath, true)
+                          },
+                        })
+                      }
+                    },
+                  })
+                  if (!found) {
+                    warnForUnknownQueryVariable(varName, file, `useStaticQuery`)
+                  }
+                }
+              },
+            })
+          },
+        })
+
+        // Look for exported page queries
+        traverse(ast, {
+          ExportNamedDeclaration(path, state) {
+            path.traverse({
+              TaggedTemplateExpression(innerPath) {
+                const { ast: gqlAst, isGlobal, hash } = getGraphQLTag(innerPath)
+                if (!gqlAst) return
+
+                if (isGlobal) warnForGlobalTag(file)
+
+                gqlAst.definitions.forEach(def => {
+                  documentLocations.set(
+                    def,
+                    `${innerPath.node.start}-${def.loc.start}`
+                  )
+                  generateQueryName({
+                    def,
+                    hash,
+                    file,
+                  })
+                })
+
+                queries.push(...gqlAst.definitions)
+              },
+            })
+          },
+        })
+
+        // Remove duplicate queries
+        const uniqueQueries = _.uniqBy(queries, q => documentLocations.get(q))
+
+        resolve(uniqueQueries)
+      })
+      .catch(reject)
+  })
+}
+
+const cache = {}
+
+export default class FileParser {
+  async parseFile(file: string): Promise<?DocumentNode> {
+    let text
+    try {
+      text = await fs.readFile(file, `utf8`)
+    } catch (err) {
+      report.error(`There was a problem reading the file: ${file}`, err)
+      boundActionCreators.queryExtractionGraphQLError({
+        componentPath: file,
+      })
+      return null
+    }
+
+    if (text.indexOf(`graphql`) === -1) return null
+    const hash = crypto
+      .createHash(`md5`)
+      .update(file)
+      .update(text)
+      .digest(`hex`)
+
+    try {
+      let astDefinitions =
+        cache[hash] || (cache[hash] = await findGraphQLTags(file, text))
+
+      // If any AST definitions were extracted, report success.
+      // This can mean there is none or there was a babel error when
+      // we tried to extract the graphql AST.
+      if (astDefinitions.length > 0) {
+        boundActionCreators.queryExtractedBabelSuccess({
+          componentPath: file,
+        })
+      }
+
+      return astDefinitions.length
+        ? {
+            kind: `Document`,
+            definitions: astDefinitions,
+          }
+        : null
+    } catch (err) {
+      report.error(
+        `There was a problem parsing the GraphQL query in file: ${file}`,
+        err
+      )
+      boundActionCreators.queryExtractionGraphQLError({
+        componentPath: file,
+      })
+      return null
+    }
+  }
+
+  async parseFiles(files: Array<string>): Promise<Map<string, DocumentNode>> {
+    const documents = new Map()
+
+    return Promise.all(
+      files.map(file =>
+        this.parseFile(file).then(doc => {
+          if (!doc) return
+          documents.set(file, doc)
+        })
+      )
+    ).then(() => documents)
+  }
+}
diff --git a/node_modules/gatsby/src/query/graphql-errors.js b/node_modules/gatsby/src/query/graphql-errors.js
new file mode 100644
index 0000000..afcebac
--- /dev/null
+++ b/node_modules/gatsby/src/query/graphql-errors.js
@@ -0,0 +1,202 @@
+// @flow
+
+import { print, visit, GraphQLError, getLocation } from "graphql"
+import babelCodeFrame from "@babel/code-frame"
+import _ from "lodash"
+import report from "gatsby-cli/lib/reporter"
+
+type RelayGraphQLError = Error & { validationErrors?: Object }
+
+// These handle specific errors throw by RelayParser. If an error matches
+// you get a pointer to the location in the query that is broken, otherwise
+// we show the error and the query.
+const handlers = [
+  [
+    /Unknown field `(.+)` on type `(.+)`/i,
+    ([name], node) => {
+      if (node.kind === `Field` && node.name.value === name) {
+        return node.name.loc
+      }
+      return null
+    },
+  ],
+  [
+    /Unknown argument `(.+)`/i,
+    ([name], node) => {
+      if (node.kind === `Argument` && node.name.value === name) {
+        return node.name.loc
+      }
+      return null
+    },
+  ],
+  [
+    /Unknown directive `@(.+)`/i,
+    ([name], node) => {
+      if (node.kind === `Directive` && node.name.value === name) {
+        return node.name.loc
+      }
+      return null
+    },
+  ],
+]
+
+function formatFilePath(filePath: string) {
+  return `${report.format.bold(`file:`)} ${report.format.blue(filePath)}`
+}
+
+function formatError(message: string, filePath: string, codeFrame: string) {
+  return (
+    report.stripIndent`
+    ${message}
+
+      ${formatFilePath(filePath)}
+  ` + `\n\n${codeFrame}\n`
+  )
+}
+
+function extractError(error: Error): { message: string, docName: string } {
+  const docRegex = /Error:.(RelayParser|GraphQLParser):(.*)Source: document.`(.*)`.file.*(GraphQL.request.*^\s*$)/gms
+  let matches
+  let message = ``
+  let docName = ``
+  let codeBlock = ``
+  while ((matches = docRegex.exec(error.toString())) !== null) {
+    // This is necessary to avoid infinite loops with zero-width matches
+    if (matches.index === docRegex.lastIndex) docRegex.lastIndex++
+    ;[, , message, docName, codeBlock] = matches
+  }
+
+  if (!message) {
+    message = error.toString()
+  }
+
+  return { message, codeBlock, docName }
+}
+
+function findLocation(extractedMessage, def) {
+  let location = null
+  visit(def, {
+    enter(node) {
+      if (location) return
+      for (let [regex, handler] of handlers) {
+        let match = extractedMessage.match(regex)
+        if (!match) continue
+        if ((location = handler(match.slice(1), node))) break
+      }
+    },
+  })
+  return location
+}
+
+function getCodeFrame(query: string, lineNumber?: number, column?: number) {
+  return babelCodeFrame(query, lineNumber, column, {
+    linesAbove: 10,
+    linesBelow: 10,
+  })
+}
+
+function getCodeFrameFromRelayError(
+  def: any,
+  extractedMessage: string,
+  error: Error
+) {
+  let { start, source } = findLocation(extractedMessage, def) || {}
+  let query = source ? source.body : print(def)
+
+  // we can't reliably get a location without the location source, since
+  // the printed query may differ from the original.
+  let { line, column } = (source && getLocation(source, start)) || {}
+  return getCodeFrame(query, line, column)
+}
+
+export function multipleRootQueriesError(
+  filePath: string,
+  def: any,
+  otherDef: any
+) {
+  let name = def.name.value
+  let otherName = otherDef.name.value
+  let unifiedName = `${_.camelCase(name)}And${_.upperFirst(
+    _.camelCase(otherName)
+  )}`
+
+  return formatError(
+    `Multiple "root" queries found in file: "${name}" and "${otherName}". ` +
+      `Only the first ("${otherName}") will be registered.`,
+    filePath,
+    `  ${report.format.yellow(`Instead of:`)} \n\n` +
+      babelCodeFrame(report.stripIndent`
+      query ${otherName} {
+        bar {
+          #...
+        }
+      }
+
+      query ${name} {
+        foo {
+          #...
+        }
+      }
+    `) +
+      `\n\n  ${report.format.green(`Do:`)} \n\n` +
+      babelCodeFrame(report.stripIndent`
+      query ${unifiedName} {
+        bar {
+          #...
+        }
+        foo {
+          #...
+        }
+      }
+    `)
+  )
+}
+
+export function graphqlValidationError(
+  errors: Array<GraphQLError>,
+  filePath: string,
+  doc: any
+): string {
+  if (!errors || !errors.length) return ``
+  let error = errors[0]
+  let { source, locations: [{ line, column }] = [{}] } = error
+  let query = source ? source.body : print(doc)
+
+  return formatError(error.message, filePath, getCodeFrame(query, line, column))
+}
+
+export function graphqlError(
+  namePathMap: Map<string, string>,
+  nameDefMap: Map<string, any>,
+  error: Error | RelayGraphQLError
+) {
+  let codeBlock
+  let { message, docName } = extractError(error)
+  let filePath = namePathMap.get(docName)
+
+  if (filePath && docName) {
+    codeBlock = getCodeFrameFromRelayError(
+      nameDefMap.get(docName),
+      message,
+      error
+    )
+    const formattedMessage = formatError(message, filePath, codeBlock)
+    return { formattedMessage, docName, message, codeBlock }
+  }
+
+  let reportedMessage = `There was an error while compiling your site's GraphQL queries.
+  ${message || error.message}
+    `
+
+  if (error.message.match(/must be an instance of/)) {
+    reportedMessage +=
+      `This usually means that more than one instance of 'graphql' is installed ` +
+      `in your node_modules. Remove all but the top level one or run \`npm dedupe\` to fix it.`
+  }
+
+  if (error.message.match(/Duplicate document/)) {
+    reportedMessage += `${error.message.slice(21)}\n`
+  }
+
+  return { formattedMessage: reportedMessage, docName, message, codeBlock }
+}
diff --git a/node_modules/gatsby/src/query/index.js b/node_modules/gatsby/src/query/index.js
new file mode 100644
index 0000000..3892d81
--- /dev/null
+++ b/node_modules/gatsby/src/query/index.js
@@ -0,0 +1,280 @@
+const _ = require(`lodash`)
+const convertHrtime = require(`convert-hrtime`)
+const { store, emitter } = require(`../redux`)
+const queryQueue = require(`./query-queue`)
+const jobHandler = require(`./job-handler`)
+
+let seenIdsWithoutDataDependencies = []
+let queuedDirtyActions = []
+const extractedQueryIds = new Set()
+
+// Remove pages from seenIdsWithoutDataDependencies when they're deleted
+// so their query will be run again if they're created again.
+emitter.on(`DELETE_PAGE`, action => {
+  seenIdsWithoutDataDependencies = seenIdsWithoutDataDependencies.filter(
+    p => p !== action.payload.path
+  )
+})
+
+emitter.on(`CREATE_NODE`, action => {
+  queuedDirtyActions.push(action)
+})
+
+emitter.on(`DELETE_NODE`, action => {
+  queuedDirtyActions.push({ payload: action.payload })
+})
+
+const enqueueExtractedQueryId = queryId => {
+  extractedQueryIds.add(queryId)
+}
+
+/////////////////////////////////////////////////////////////////////
+// Calculate dirty static/page queries
+
+const findIdsWithoutDataDependencies = state => {
+  const allTrackedIds = _.uniq(
+    _.flatten(
+      _.concat(
+        _.values(state.componentDataDependencies.nodes),
+        _.values(state.componentDataDependencies.connections)
+      )
+    )
+  )
+
+  // Get list of paths not already tracked and run the queries for these
+  // paths.
+  const notTrackedIds = _.difference(
+    [
+      ...Array.from(state.pages.values(), p => p.path),
+      ...[...state.staticQueryComponents.values()].map(c => c.id),
+    ],
+    [...allTrackedIds, ...seenIdsWithoutDataDependencies]
+  )
+
+  // Add new IDs to our seen array so we don't keep trying to run queries for them.
+  // Pages without queries can't be tracked.
+  seenIdsWithoutDataDependencies = _.uniq([
+    ...notTrackedIds,
+    ...seenIdsWithoutDataDependencies,
+  ])
+
+  return notTrackedIds
+}
+
+const popNodeQueries = ({ state }) => {
+  const actions = _.uniq(queuedDirtyActions, a => a.payload.id)
+
+  const uniqDirties = _.uniq(
+    actions.reduce((dirtyIds, action) => {
+      const node = action.payload
+
+      if (!node || !node.id || !node.internal.type) return dirtyIds
+
+      // Find components that depend on this node so are now dirty.
+      dirtyIds = dirtyIds.concat(state.componentDataDependencies.nodes[node.id])
+
+      // Find connections that depend on this node so are now invalid.
+      dirtyIds = dirtyIds.concat(
+        state.componentDataDependencies.connections[node.internal.type]
+      )
+
+      return _.compact(dirtyIds)
+    }, [])
+  )
+  queuedDirtyActions = []
+  return uniqDirties
+}
+
+const popNodeAndDepQueries = state => {
+  const nodeQueries = popNodeQueries({ state })
+
+  const noDepQueries = findIdsWithoutDataDependencies(state)
+
+  return _.uniq([...nodeQueries, ...noDepQueries])
+}
+
+const popExtractedQueries = () => {
+  const queries = [...extractedQueryIds]
+  extractedQueryIds.clear()
+  return queries
+}
+
+/**
+ * Calculates the set of dirty query IDs (page.paths, or
+ * staticQuery.hash's). These are queries that:
+ *
+ * - depend on nodes or node collections (via
+ *   `actions.createPageDependency`) that have changed.
+ * - do NOT have node dependencies. Since all queries should return
+ *   data, then this implies that node dependencies have not been
+ *   tracked, and therefore these queries haven't been run before
+ * - have been recently extracted (see `./query-watcher.js`)
+ *
+ * Note, this function pops queries off internal queues, so it's up
+ * to the caller to reference the results
+ */
+
+const calcDirtyQueryIds = state =>
+  _.union(popNodeAndDepQueries(state), popExtractedQueries())
+
+/**
+ * Same as `calcDirtyQueryIds`, except that we only include extracted
+ * queries that depend on nodes or haven't been run yet. We do this
+ * because the page component reducer/machine always enqueues
+ * extractedQueryIds but during bootstrap we may not want to run those
+ * page queries if their data hasn't changed since the last time we
+ * ran Gatsby.
+ */
+const calcBootstrapDirtyQueryIds = state => {
+  const nodeAndNoDepQueries = popNodeAndDepQueries(state)
+
+  const extractedQueriesThatNeedRunning = _.intersection(
+    popExtractedQueries(),
+    nodeAndNoDepQueries
+  )
+  return _.union(extractedQueriesThatNeedRunning, nodeAndNoDepQueries)
+}
+
+/**
+ * groups queryIds by whether they are static or page queries.
+ */
+const groupQueryIds = queryIds => {
+  const grouped = _.groupBy(queryIds, p => p.slice(0, 4) === `sq--`)
+  return {
+    staticQueryIds: grouped[true] || [],
+    pageQueryIds: grouped[false] || [],
+  }
+}
+
+/////////////////////////////////////////////////////////////////////
+// Create Query Jobs
+
+const processQueries = async (queryJobs, { activity }) => {
+  if (queryJobs.length == 0) {
+    return
+  }
+  const startQueries = process.hrtime()
+
+  const queue = queryQueue.create()
+  queue.on(`task_finish`, () => {
+    const stats = queue.getStats()
+    if (activity) {
+      activity.setStatus(
+        `${stats.total}/${stats.peak} ${(
+          stats.total / convertHrtime(process.hrtime(startQueries)).seconds
+        ).toFixed(2)} queries/second`
+      )
+    }
+  })
+  const drainedPromise = new Promise(resolve => {
+    queue.once(`drain`, resolve)
+  })
+
+  queryJobs.forEach(queryJob => {
+    queue.push(queryJob)
+  })
+  await drainedPromise
+}
+
+const makePageQueryJob = (state, queryId) => {
+  const page = state.pages.get(queryId)
+  const component = state.components.get(page.componentPath)
+  const { path, componentPath, context } = page
+  const { query } = component
+  return {
+    id: path,
+    query,
+    isPage: true,
+    componentPath,
+    context: {
+      ...page,
+      ...context,
+    },
+  }
+}
+
+const processPageQueries = async (queryIds, { state, activity }) => {
+  state = state || store.getState()
+  await processQueries(queryIds.map(id => makePageQueryJob(state, id)), {
+    activity,
+  })
+}
+
+const makeStaticQueryJob = (state, queryId) => {
+  const component = state.staticQueryComponents.get(queryId)
+  const { hash, id, query, componentPath } = component
+  return {
+    id,
+    hash,
+    query,
+    componentPath,
+    context: { path: id },
+  }
+}
+
+const processStaticQueries = async (queryIds, { state, activity }) => {
+  state = state || store.getState()
+  await processQueries(queryIds.map(id => makeStaticQueryJob(state, id)), {
+    activity,
+  })
+}
+
+/////////////////////////////////////////////////////////////////////
+// Background query daemon (for gatsby develop)
+
+/**
+ * Starts a background process that processes any dirty queries
+ * whenever one of the following occurs.
+ *
+ * 1. A node has changed (but only after the api call has finished
+ * running)
+ * 2. A component query (e.g by editing a React Component) has
+ * changed
+ *
+ * For what constitutes a dirty query, see `calcDirtyQueryIds`
+ */
+const startListener = queue => {
+  const runQueuedActions = () => {
+    const state = store.getState()
+
+    const dirtyQueryIds = calcDirtyQueryIds(state)
+    const { staticQueryIds, pageQueryIds } = groupQueryIds(dirtyQueryIds)
+
+    staticQueryIds
+      .map(id => makeStaticQueryJob(state, id))
+      .forEach(queryJob => {
+        queue.push(queryJob)
+      })
+
+    pageQueryIds
+      .map(id => makePageQueryJob(state, id))
+      .forEach(queryJob => {
+        queue.push(queryJob)
+      })
+  }
+  runQueuedActions()
+  emitter.on(`API_RUNNING_QUEUE_EMPTY`, runQueuedActions)
+  emitter.on(`QUERY_RUNNER_QUERIES_ENQUEUED`, runQueuedActions)
+}
+
+/**
+ * Force query processing to run. Noop until `startDaemon` has been
+ * called.
+ */
+const runQueries = () => {
+  // A bit hacky bit it works well.
+  emitter.emit(`QUERY_RUNNER_QUERIES_ENQUEUED`)
+}
+
+module.exports = {
+  enqueueExtractedQueryId,
+  calcBootstrapDirtyQueryIds,
+  groupQueryIds,
+  processQueries,
+  processPageQueries,
+  processStaticQueries,
+  runQueries,
+  startListener,
+  createQueue: queryQueue.create,
+  jobHandler,
+}
diff --git a/node_modules/gatsby/src/query/job-handler.js b/node_modules/gatsby/src/query/job-handler.js
new file mode 100644
index 0000000..6bed758
--- /dev/null
+++ b/node_modules/gatsby/src/query/job-handler.js
@@ -0,0 +1,110 @@
+// @flow
+
+import { graphql as graphqlFunction } from "graphql"
+const fs = require(`fs-extra`)
+const path = require(`path`)
+const report = require(`gatsby-cli/lib/reporter`)
+const { boundActionCreators } = require(`../redux/actions`)
+const { store } = require(`../redux`)
+const withResolverContext = require(`../schema/context`)
+const { formatErrorDetails } = require(`./utils`)
+const pageDataUtil = require(`../utils/page-data`)
+
+const resultHashes = {}
+
+const jobHandler = async ({ queryJob }) => {
+  const { schema, program, pages, webpackCompilationHash } = store.getState()
+
+  const graphql = (query, context) =>
+    graphqlFunction(
+      schema,
+      query,
+      context,
+      withResolverContext(context, schema),
+      context
+    )
+
+  // Run query
+  let result
+  // Nothing to do if the query doesn't exist.
+  if (!queryJob.query || queryJob.query === ``) {
+    result = {}
+  } else {
+    result = await graphql(queryJob.query, queryJob.context)
+  }
+
+  // If there's a graphql error then log the error. If we're building, also
+  // quit.
+  if (result && result.errors) {
+    const errorDetails = new Map()
+    errorDetails.set(`Errors`, result.errors || [])
+    if (queryJob.isPage) {
+      errorDetails.set(`URL path`, queryJob.context.path)
+      errorDetails.set(
+        `Context`,
+        JSON.stringify(queryJob.context.context, null, 2)
+      )
+    }
+    errorDetails.set(`Plugin`, queryJob.pluginCreatorId || `none`)
+    errorDetails.set(`Query`, queryJob.query)
+
+    report.panicOnBuild(`
+The GraphQL query from ${queryJob.componentPath} failed.
+
+${formatErrorDetails(errorDetails)}`)
+  }
+
+  // Add the page context onto the results.
+  if (queryJob && queryJob.isPage) {
+    result[`pageContext`] = Object.assign({}, queryJob.context)
+  }
+
+  // Delete internal data from pageContext
+  if (result.pageContext) {
+    delete result.pageContext.path
+    delete result.pageContext.internalComponentName
+    delete result.pageContext.component
+    delete result.pageContext.componentChunkName
+    delete result.pageContext.updatedAt
+    delete result.pageContext.pluginCreator___NODE
+    delete result.pageContext.pluginCreatorId
+    delete result.pageContext.componentPath
+    delete result.pageContext.context
+  }
+
+  const resultJSON = JSON.stringify(result)
+  const resultHash = require(`crypto`)
+    .createHash(`sha1`)
+    .update(resultJSON)
+    .digest(`base64`)
+
+  if (resultHashes[queryJob.id] !== resultHash) {
+    resultHashes[queryJob.id] = resultHash
+
+    const publicDir = path.join(program.directory, `public`)
+    if (queryJob.isPage) {
+      const page = pages.get(queryJob.id)
+      await pageDataUtil.write(
+        { publicDir },
+        page,
+        result,
+        webpackCompilationHash
+      )
+    } else {
+      const staticDir = path.join(publicDir, `static`)
+      const resultPath = path.join(staticDir, `d`, `${queryJob.hash}.json`)
+      await fs.outputFile(resultPath, resultJSON)
+    }
+  }
+
+  // Send event that the page query finished.
+  boundActionCreators.pageQueryRun({
+    path: queryJob.id,
+    componentPath: queryJob.componentPath,
+    isPage: queryJob.isPage,
+  })
+
+  return result
+}
+
+module.exports = jobHandler
diff --git a/node_modules/gatsby/src/query/query-compiler.js b/node_modules/gatsby/src/query/query-compiler.js
new file mode 100644
index 0000000..f8240e3
--- /dev/null
+++ b/node_modules/gatsby/src/query/query-compiler.js
@@ -0,0 +1,278 @@
+// @flow
+import path from "path"
+const normalize = require(`normalize-path`)
+import glob from "glob"
+
+import { validate } from "graphql"
+import { IRTransforms } from "@gatsbyjs/relay-compiler"
+import RelayParser from "@gatsbyjs/relay-compiler/lib/RelayParser"
+import ASTConvert from "@gatsbyjs/relay-compiler/lib/ASTConvert"
+import GraphQLCompilerContext from "@gatsbyjs/relay-compiler/lib/GraphQLCompilerContext"
+import filterContextForNode from "@gatsbyjs/relay-compiler/lib/filterContextForNode"
+const _ = require(`lodash`)
+
+import { store } from "../redux"
+const { boundActionCreators } = require(`../redux/actions`)
+import FileParser from "./file-parser"
+import GraphQLIRPrinter from "@gatsbyjs/relay-compiler/lib/GraphQLIRPrinter"
+import {
+  graphqlError,
+  graphqlValidationError,
+  multipleRootQueriesError,
+} from "./graphql-errors"
+import report from "gatsby-cli/lib/reporter"
+const websocketManager = require(`../utils/websocket-manager`)
+
+import type { DocumentNode, GraphQLSchema } from "graphql"
+
+const { printTransforms } = IRTransforms
+
+const {
+  ValuesOfCorrectTypeRule,
+  FragmentsOnCompositeTypesRule,
+  KnownTypeNamesRule,
+  LoneAnonymousOperationRule,
+  PossibleFragmentSpreadsRule,
+  ScalarLeafsRule,
+  VariablesAreInputTypesRule,
+  VariablesInAllowedPositionRule,
+} = require(`graphql`)
+
+type RootQuery = {
+  name: string,
+  path: string,
+  text: string,
+  originalText: string,
+  isStaticQuery: boolean,
+  hash: string,
+}
+
+type Queries = Map<string, RootQuery>
+
+const validationRules = [
+  ValuesOfCorrectTypeRule,
+  FragmentsOnCompositeTypesRule,
+  KnownTypeNamesRule,
+  LoneAnonymousOperationRule,
+  PossibleFragmentSpreadsRule,
+  ScalarLeafsRule,
+  VariablesAreInputTypesRule,
+  VariablesInAllowedPositionRule,
+]
+
+let lastRunHadErrors = null
+const overlayErrorID = `graphql-compiler`
+
+const resolveThemes = (themes = []) =>
+  themes.reduce((merged, theme) => {
+    merged.push(theme.themeDir)
+    return merged
+  }, [])
+
+class Runner {
+  base: string
+  additional: string[]
+  schema: GraphQLSchema
+  errors: string[]
+  fragmentsDir: string
+
+  constructor(base: string, additional: string[], schema: GraphQLSchema) {
+    this.base = base
+    this.additional = additional
+    this.schema = schema
+  }
+
+  reportError(message) {
+    const queryErrorMessage = `${report.format.red(`GraphQL Error`)} ${message}`
+    report.panicOnBuild(queryErrorMessage)
+    if (process.env.gatsby_executing_command === `develop`) {
+      websocketManager.emitError(overlayErrorID, queryErrorMessage)
+      lastRunHadErrors = true
+    }
+  }
+
+  async compileAll() {
+    let nodes = await this.parseEverything()
+    return await this.write(nodes)
+  }
+
+  async parseEverything() {
+    const filesRegex = path.join(`/**`, `*.+(t|j)s?(x)`)
+    let files = [
+      path.join(this.base, `src`),
+      path.join(this.base, `.cache`, `fragments`),
+    ]
+      .concat(this.additional.map(additional => path.join(additional, `src`)))
+      .reduce(
+        (merged, folderPath) =>
+          merged.concat(
+            glob.sync(path.join(folderPath, filesRegex), {
+              nodir: true,
+            })
+          ),
+        []
+      )
+    files = files.filter(d => !d.match(/\.d\.ts$/))
+    files = files.map(normalize)
+
+    // Ensure all page components added as they're not necessarily in the
+    // pages directory e.g. a plugin could add a page component.  Plugins
+    // *should* copy their components (if they add a query) to .cache so that
+    // our babel plugin to remove the query on building is active (we don't
+    // run babel on code in node_modules). Otherwise the component will throw
+    // an error in the browser of "graphql is not defined".
+    files = files.concat(
+      Array.from(store.getState().components.keys(), c => normalize(c))
+    )
+    files = _.uniq(files)
+
+    let parser = new FileParser()
+
+    return await parser.parseFiles(files)
+  }
+
+  async write(nodes: Map<string, DocumentNode>): Promise<Queries> {
+    const compiledNodes: Queries = new Map()
+    const namePathMap = new Map()
+    const nameDefMap = new Map()
+    const nameErrorMap = new Map()
+    const documents = []
+
+    for (let [filePath, doc] of nodes.entries()) {
+      let errors = validate(this.schema, doc, validationRules)
+
+      if (errors && errors.length) {
+        this.reportError(graphqlValidationError(errors, filePath))
+        boundActionCreators.queryExtractionGraphQLError({
+          componentPath: filePath,
+        })
+        return compiledNodes
+      }
+
+      documents.push(doc)
+      doc.definitions.forEach((def: any) => {
+        const name: string = def.name.value
+        namePathMap.set(name, filePath)
+        nameDefMap.set(name, def)
+      })
+    }
+
+    let compilerContext = new GraphQLCompilerContext(this.schema)
+    try {
+      compilerContext = compilerContext.addAll(
+        ASTConvert.convertASTDocuments(
+          this.schema,
+          documents,
+          validationRules,
+          RelayParser.transform.bind(RelayParser)
+        )
+      )
+    } catch (error) {
+      const { formattedMessage, docName, message, codeBlock } = graphqlError(
+        namePathMap,
+        nameDefMap,
+        error
+      )
+      nameErrorMap.set(docName, { formattedMessage, message, codeBlock })
+      boundActionCreators.queryExtractionGraphQLError({
+        componentPath: namePathMap.get(docName),
+        error: formattedMessage,
+      })
+      this.reportError(formattedMessage)
+      return false
+    }
+
+    // relay-compiler v1.5.0 added "StripUnusedVariablesTransform" to
+    // printTransforms. Unfortunately it currently doesn't detect variables
+    // in input objects widely used in gatsby, and therefore removing
+    // variable declaration from queries.
+    // As a temporary workaround remove that transform by slicing printTransforms.
+    const printContext = printTransforms
+      .slice(0, -1)
+      .reduce((ctx, transform) => transform(ctx, this.schema), compilerContext)
+
+    compilerContext.documents().forEach((node: { name: string }) => {
+      if (node.kind !== `Root`) return
+
+      const { name } = node
+      let filePath = namePathMap.get(name) || ``
+
+      if (compiledNodes.has(filePath)) {
+        let otherNode = compiledNodes.get(filePath)
+        this.reportError(
+          multipleRootQueriesError(
+            filePath,
+            nameDefMap.get(name),
+            otherNode && nameDefMap.get(otherNode.name)
+          )
+        )
+        boundActionCreators.queryExtractionGraphQLError({
+          componentPath: filePath,
+        })
+        return
+      }
+
+      let text = filterContextForNode(printContext.getRoot(name), printContext)
+        .documents()
+        .map(GraphQLIRPrinter.print)
+        .join(`\n`)
+
+      const query = {
+        name,
+        text,
+        originalText: nameDefMap.get(name).text,
+        path: filePath,
+        isHook: nameDefMap.get(name).isHook,
+        isStaticQuery: nameDefMap.get(name).isStaticQuery,
+        hash: nameDefMap.get(name).hash,
+      }
+
+      if (query.isStaticQuery) {
+        query.id =
+          `sq--` +
+          _.kebabCase(
+            `${path.relative(store.getState().program.directory, filePath)}`
+          )
+      }
+
+      if (
+        query.isHook &&
+        process.env.NODE_ENV === `production` &&
+        typeof require(`react`).useContext !== `function`
+      ) {
+        report.panicOnBuild(
+          `You're likely using a version of React that doesn't support Hooks\n` +
+            `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`
+        )
+      }
+
+      compiledNodes.set(filePath, query)
+    })
+
+    if (
+      process.env.gatsby_executing_command === `develop` &&
+      lastRunHadErrors
+    ) {
+      websocketManager.emitError(overlayErrorID, null)
+      lastRunHadErrors = false
+    }
+
+    return compiledNodes
+  }
+}
+export { Runner, resolveThemes }
+
+export default async function compile(): Promise<Map<string, RootQuery>> {
+  // TODO: swap plugins to themes
+  const { program, schema, themes } = store.getState()
+
+  const runner = new Runner(
+    program.directory,
+    resolveThemes(themes.themes),
+    schema
+  )
+
+  const queries = await runner.compileAll()
+
+  return queries
+}
diff --git a/node_modules/gatsby/src/query/query-queue.js b/node_modules/gatsby/src/query/query-queue.js
new file mode 100644
index 0000000..9f057a7
--- /dev/null
+++ b/node_modules/gatsby/src/query/query-queue.js
@@ -0,0 +1,35 @@
+const Queue = require(`better-queue`)
+
+const FastMemoryStore = require(`./better-queue-custom-store`)
+const jobHandler = require(`./job-handler`)
+
+const makeBaseOptions = () => {
+  return {
+    concurrent: 4,
+    store: FastMemoryStore(),
+  }
+}
+
+const defaultPostHandler = ({ queryJob, result }) => result
+
+const create = ({
+  postHandler = defaultPostHandler,
+  betterQueueOptions = {},
+} = {}) => {
+  const queueOptions = { ...makeBaseOptions, ...betterQueueOptions }
+  const queue = new Queue(async (queryJob, callback) => {
+    try {
+      const result = await jobHandler({ queryJob })
+      postHandler({ queryJob, result })
+      callback(null, result)
+    } catch (err) {
+      console.log(`Error running queryRunner`, err)
+      callback(err)
+    }
+  }, queueOptions)
+  return queue
+}
+
+module.exports = {
+  create,
+}
diff --git a/node_modules/gatsby/src/query/query-watcher.js b/node_modules/gatsby/src/query/query-watcher.js
new file mode 100644
index 0000000..0a3c097
--- /dev/null
+++ b/node_modules/gatsby/src/query/query-watcher.js
@@ -0,0 +1,285 @@
+/** *
+ * Jobs of this module
+ * - Maintain the list of components in the Redux store. So monitor new components
+ *   and add/remove components.
+ * - Watch components for query changes and extract these and update the store.
+ * - Ensure all page queries are run as part of bootstrap and report back when
+ *   this is done
+ * - Whenever a query changes, re-run all pages that rely on this query.
+ ***/
+
+const _ = require(`lodash`)
+const chokidar = require(`chokidar`)
+const path = require(`path`)
+const slash = require(`slash`)
+
+const { store, emitter } = require(`../redux/`)
+const { boundActionCreators } = require(`../redux/actions`)
+const queryCompiler = require(`./query-compiler`).default
+const report = require(`gatsby-cli/lib/reporter`)
+const queryRunner = require(`./index`)
+const debug = require(`debug`)(`gatsby:query-watcher`)
+
+const getQueriesSnapshot = () => {
+  const state = store.getState()
+
+  const snapshot = {
+    components: new Map(state.components),
+    staticQueryComponents: new Map(state.staticQueryComponents),
+  }
+
+  return snapshot
+}
+
+const handleComponentsWithRemovedQueries = (
+  { components, staticQueryComponents },
+  queries
+) => {
+  // If a component had static query and it doesn't have it
+  // anymore - update the store
+  staticQueryComponents.forEach(c => {
+    if (c.query !== `` && !queries.has(c.componentPath)) {
+      debug(`Static query was removed from ${c.componentPath}`)
+      store.dispatch({
+        type: `REMOVE_STATIC_QUERY`,
+        payload: c.id,
+      })
+      boundActionCreators.deleteComponentsDependencies([c.id])
+    }
+  })
+}
+
+const handleQuery = (
+  { components, staticQueryComponents },
+  query,
+  component
+) => {
+  // If this is a static query
+  // Add action / reducer + watch staticquery files
+  if (query.isStaticQuery) {
+    const oldQuery = staticQueryComponents.get(query.id)
+    const isNewQuery = !oldQuery
+
+    // Compare query text because text is compiled query with any attached
+    // fragments and we want to rerun queries if fragments are edited.
+    // Compare hash because hash is used for identyfing query and
+    // passing data to component in development. Hash can change if user will
+    // format query text, but it doesn't mean that compiled text will change.
+    if (
+      isNewQuery ||
+      oldQuery.hash !== query.hash ||
+      oldQuery.text !== query.text
+    ) {
+      boundActionCreators.replaceStaticQuery({
+        id: query.id,
+        name: query.name,
+        componentPath: query.path,
+        query: query.text,
+        hash: query.hash,
+      })
+
+      debug(
+        `Static query in ${component} ${
+          isNewQuery ? `was added` : `has changed`
+        }.`
+      )
+
+      boundActionCreators.deleteComponentsDependencies([query.id])
+      queryRunner.enqueueExtractedQueryId(query.id)
+    }
+    return true
+  }
+
+  return false
+}
+
+const updateStateAndRunQueries = isFirstRun => {
+  const snapshot = getQueriesSnapshot()
+  return queryCompiler().then(queries => {
+    // If there's an error while extracting queries, the queryCompiler returns false
+    // or zero results.
+    // Yeah, should probably be an error but don't feel like threading the error
+    // all the way here.
+    if (!queries || queries.size === 0) {
+      return null
+    }
+    handleComponentsWithRemovedQueries(snapshot, queries)
+
+    // Run action for each component
+    const { components } = snapshot
+    components.forEach(c =>
+      boundActionCreators.queryExtracted({
+        componentPath: c.componentPath,
+        query: queries.get(c.componentPath)?.text || ``,
+      })
+    )
+
+    let queriesWillNotRun = false
+    queries.forEach((query, component) => {
+      const queryWillRun = handleQuery(snapshot, query, component)
+
+      if (queryWillRun) {
+        watchComponent(component)
+        // Check if this is a page component.
+        // If it is and this is our first run during bootstrap,
+        // show a warning about having a query in a non-page component.
+      } else if (isFirstRun && !snapshot.components.has(component)) {
+        report.warn(
+          `The GraphQL query in the non-page component "${component}" will not be run.`
+        )
+        queriesWillNotRun = true
+      }
+    })
+
+    if (queriesWillNotRun) {
+      report.log(report.stripIndent`
+
+        Exported queries are only executed for Page components. It's possible you're
+        trying to create pages in your gatsby-node.js and that's failing for some
+        reason.
+
+        If the failing component(s) is a regular component and not intended to be a page
+        component, you generally want to use a <StaticQuery> (https://gatsbyjs.org/docs/static-query)
+        instead of exporting a page query.
+
+        If you're more experienced with GraphQL, you can also export GraphQL
+        fragments from components and compose the fragments in the Page component
+        query and pass data down into the child component — http://graphql.org/learn/queries/#fragments
+
+      `)
+    }
+
+    queryRunner.runQueries()
+
+    return null
+  })
+}
+
+/**
+ * Removes components templates that aren't used by any page from redux store.
+ */
+const clearInactiveComponents = () => {
+  const { components, pages } = store.getState()
+
+  const activeTemplates = new Set()
+  pages.forEach(page => {
+    // Set will guarantee uniqeness of entires
+    activeTemplates.add(slash(page.component))
+  })
+
+  components.forEach(component => {
+    if (!activeTemplates.has(component.componentPath)) {
+      debug(
+        `${
+          component.componentPath
+        } component was removed because it isn't used by any page`
+      )
+      store.dispatch({
+        type: `REMOVE_TEMPLATE_COMPONENT`,
+        payload: component,
+      })
+    }
+  })
+}
+
+exports.extractQueries = () => {
+  // Remove template components that point to not existing page templates.
+  // We need to do this, because components data is cached and there might
+  // be changes applied when development server isn't running. This is needed
+  // only in initial run, because during development state will be adjusted.
+  clearInactiveComponents()
+
+  return updateStateAndRunQueries(true).then(() => {
+    // During development start watching files to recompile & run
+    // queries on the fly.
+    if (process.env.NODE_ENV !== `production`) {
+      watch(store.getState().program.directory)
+    }
+  })
+}
+
+const queueQueriesForPageComponent = componentPath => {
+  const pages = getPagesForComponent(componentPath)
+  // Remove page data dependencies before re-running queries because
+  // the changing of the query could have changed the data dependencies.
+  // Re-running the queries will add back data dependencies.
+  boundActionCreators.deleteComponentsDependencies(
+    pages.map(p => p.path || p.id)
+  )
+  pages.forEach(page => queryRunner.enqueueExtractedQueryId(page.path))
+  queryRunner.runQueries()
+}
+
+const runQueryForPage = path => {
+  queryRunner.enqueueExtractedQueryId(path)
+  queryRunner.runQueries()
+}
+
+exports.queueQueriesForPageComponent = queueQueriesForPageComponent
+exports.runQueryForPage = runQueryForPage
+
+const getPagesForComponent = componentPath => {
+  const state = store.getState()
+  return [...state.pages.values()].filter(
+    p => p.componentPath === componentPath
+  )
+}
+
+const filesToWatch = new Set()
+let watcher
+const watchComponent = componentPath => {
+  // We don't start watching until mid-way through the bootstrap so ignore
+  // new components being added until then. This doesn't affect anything as
+  // when extractQueries is called from bootstrap, we make sure that all
+  // components are being watched.
+  if (
+    process.env.NODE_ENV !== `production` &&
+    !filesToWatch.has(componentPath)
+  ) {
+    filesToWatch.add(componentPath)
+    if (watcher) {
+      watcher.add(componentPath)
+    }
+  }
+}
+
+const debounceCompile = _.debounce(() => {
+  updateStateAndRunQueries()
+}, 100)
+
+exports.watchComponent = watchComponent
+exports.debounceCompile = debounceCompile
+
+const watch = rootDir => {
+  if (watcher) return
+
+  watcher = chokidar
+    .watch(slash(path.join(rootDir, `/src/**/*.{js,jsx,ts,tsx}`)))
+    .on(`change`, path => {
+      debounceCompile()
+    })
+
+  filesToWatch.forEach(filePath => watcher.add(filePath))
+}
+
+exports.startWatchDeletePage = () => {
+  emitter.on(`DELETE_PAGE`, action => {
+    const componentPath = slash(action.payload.component)
+    const { pages } = store.getState()
+    let otherPageWithTemplateExists = false
+    for (let page of pages.values()) {
+      if (slash(page.component) === componentPath) {
+        otherPageWithTemplateExists = true
+        break
+      }
+    }
+    if (!otherPageWithTemplateExists) {
+      store.dispatch({
+        type: `REMOVE_TEMPLATE_COMPONENT`,
+        payload: {
+          componentPath,
+        },
+      })
+    }
+  })
+}
diff --git a/node_modules/gatsby/src/query/utils.js b/node_modules/gatsby/src/query/utils.js
new file mode 100644
index 0000000..71013bb
--- /dev/null
+++ b/node_modules/gatsby/src/query/utils.js
@@ -0,0 +1,13 @@
+// @flow
+
+const indentString = (string: string): string => string.replace(/\n/g, `\n  `)
+
+const formatErrorDetails = (errorDetails: Map<string, any>): string =>
+  Array.from(errorDetails.entries())
+    .map(
+      ([name, details]) => `${name}:
+  ${indentString(details.toString())}`
+    )
+    .join(`\n`)
+
+export { indentString, formatErrorDetails }
diff --git a/node_modules/gatsby/src/redux/__tests__/__snapshots__/babelrc.js.snap b/node_modules/gatsby/src/redux/__tests__/__snapshots__/babelrc.js.snap
new file mode 100644
index 0000000..b5e9455
--- /dev/null
+++ b/node_modules/gatsby/src/redux/__tests__/__snapshots__/babelrc.js.snap
@@ -0,0 +1,177 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`Babelrc actions/reducer allows adding a new plugin 1`] = `
+Object {
+  "stages": Object {
+    "build-html": Object {
+      "options": Object {
+        "cacheDirectory": true,
+        "sourceType": "unambiguous",
+      },
+      "plugins": Array [
+        Object {
+          "name": "test-babel-plugin",
+          "options": Object {},
+        },
+      ],
+      "presets": Array [],
+    },
+    "build-javascript": Object {
+      "options": Object {
+        "cacheDirectory": true,
+        "sourceType": "unambiguous",
+      },
+      "plugins": Array [
+        Object {
+          "name": "test-babel-plugin",
+          "options": Object {},
+        },
+      ],
+      "presets": Array [],
+    },
+    "develop": Object {
+      "options": Object {
+        "cacheDirectory": true,
+        "sourceType": "unambiguous",
+      },
+      "plugins": Array [
+        Object {
+          "name": "test-babel-plugin",
+          "options": Object {},
+        },
+      ],
+      "presets": Array [],
+    },
+    "develop-html": Object {
+      "options": Object {
+        "cacheDirectory": true,
+        "sourceType": "unambiguous",
+      },
+      "plugins": Array [
+        Object {
+          "name": "test-babel-plugin",
+          "options": Object {},
+        },
+      ],
+      "presets": Array [],
+    },
+  },
+}
+`;
+
+exports[`Babelrc actions/reducer allows adding a new preset 1`] = `
+Object {
+  "stages": Object {
+    "build-html": Object {
+      "options": Object {
+        "cacheDirectory": true,
+        "sourceType": "unambiguous",
+      },
+      "plugins": Array [],
+      "presets": Array [
+        Object {
+          "name": "test-babel-preset",
+          "options": Object {},
+        },
+      ],
+    },
+    "build-javascript": Object {
+      "options": Object {
+        "cacheDirectory": true,
+        "sourceType": "unambiguous",
+      },
+      "plugins": Array [],
+      "presets": Array [
+        Object {
+          "name": "test-babel-preset",
+          "options": Object {},
+        },
+      ],
+    },
+    "develop": Object {
+      "options": Object {
+        "cacheDirectory": true,
+        "sourceType": "unambiguous",
+      },
+      "plugins": Array [],
+      "presets": Array [
+        Object {
+          "name": "test-babel-preset",
+          "options": Object {},
+        },
+      ],
+    },
+    "develop-html": Object {
+      "options": Object {
+        "cacheDirectory": true,
+        "sourceType": "unambiguous",
+      },
+      "plugins": Array [],
+      "presets": Array [
+        Object {
+          "name": "test-babel-preset",
+          "options": Object {},
+        },
+      ],
+    },
+  },
+}
+`;
+
+exports[`Babelrc actions/reducer allows merging config items 1`] = `
+Array [
+  Array [
+    Array [
+      "hi",
+      Object {
+        "wat": 2,
+      },
+    ],
+    Object {
+      "type": "plugin",
+    },
+  ],
+]
+`;
+
+exports[`Babelrc actions/reducer allows merging config items 2`] = `
+Array [
+  Object {
+    "file": Object {
+      "resolved": "hi",
+    },
+    "options": Object {
+      "wat": 1,
+    },
+  },
+  Object {
+    "file": Object {
+      "resolved": "hi2",
+    },
+    "options": Object {
+      "wat": 2,
+    },
+  },
+]
+`;
+
+exports[`Babelrc actions/reducer sets default presets/plugins if there's no userland babelrc 1`] = `
+Array [
+  Array [
+    Array [
+      "/path/to/module/babel-plugin-remove-graphql-queries",
+    ],
+    Object {
+      "type": "plugin",
+    },
+  ],
+  Array [
+    Array [
+      "/path/to/module/babel-preset-gatsby",
+    ],
+    Object {
+      "type": "preset",
+    },
+  ],
+]
+`;
diff --git a/node_modules/gatsby/src/redux/__tests__/__snapshots__/jobs.js.snap b/node_modules/gatsby/src/redux/__tests__/__snapshots__/jobs.js.snap
new file mode 100644
index 0000000..8c8336f
--- /dev/null
+++ b/node_modules/gatsby/src/redux/__tests__/__snapshots__/jobs.js.snap
@@ -0,0 +1,30 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`Job actions/reducer allows completing jobs 1`] = `
+Object {
+  "active": Array [],
+  "done": Array [
+    Object {
+      "completedAt": 1482363367071,
+      "createdAt": 1482363367071,
+      "id": "test job",
+      "plugin": null,
+      "runTime": 0,
+    },
+  ],
+}
+`;
+
+exports[`Job actions/reducer allows creating jobs 1`] = `
+Object {
+  "payload": Object {
+    "id": "test job",
+  },
+  "plugin": null,
+  "type": "CREATE_JOB",
+}
+`;
+
+exports[`Job actions/reducer throws an error if an ID isn't provided 1`] = `"An ID must be provided when creating or setting job"`;
+
+exports[`Job actions/reducer throws an error if endJob is called for a job that's already ended 1`] = `"The plugin \\"test-plugin\\" tried to end a job with the id \\"test job\\" that either hasn't yet been created or has already been ended"`;
diff --git a/node_modules/gatsby/src/redux/__tests__/__snapshots__/nodes.js.snap b/node_modules/gatsby/src/redux/__tests__/__snapshots__/nodes.js.snap
new file mode 100644
index 0000000..18ba526
--- /dev/null
+++ b/node_modules/gatsby/src/redux/__tests__/__snapshots__/nodes.js.snap
@@ -0,0 +1,129 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`Create and update nodes allows adding fields to nodes 1`] = `
+Map {
+  "hi" => Object {
+    "children": Array [],
+    "fields": Object {
+      "joy": "soul's delight",
+    },
+    "id": "hi",
+    "internal": Object {
+      "contentDigest": "hasdfljds",
+      "fieldOwners": Object {
+        "joy": "test",
+      },
+      "owner": "tests",
+      "type": "Test",
+    },
+    "parent": "test",
+    "pickle": true,
+  },
+}
+`;
+
+exports[`Create and update nodes allows creating nodes 1`] = `
+Object {
+  "oldNode": undefined,
+  "payload": Object {
+    "children": Array [],
+    "id": "hi",
+    "internal": Object {
+      "contentDigest": "hasdfljds",
+      "owner": "tests",
+      "type": "Test",
+    },
+    "parent": "test",
+    "pickle": true,
+  },
+  "plugin": Object {
+    "name": "tests",
+  },
+  "type": "CREATE_NODE",
+}
+`;
+
+exports[`Create and update nodes allows creating nodes 2`] = `
+Map {
+  "hi" => Object {
+    "children": Array [],
+    "id": "hi",
+    "internal": Object {
+      "contentDigest": "hasdfljds",
+      "owner": "tests",
+      "type": "Test",
+    },
+    "parent": "test",
+    "pickle": true,
+  },
+}
+`;
+
+exports[`Create and update nodes throws error if a field is updated by a plugin not its owner 1`] = `
+"A plugin tried to update a node field that it doesn't own:
+
+Node id: hi
+Plugin: test2
+name: joy
+value: soul's delight"
+`;
+
+exports[`Create and update nodes throws error if a node is created by a plugin not its owner 1`] = `
+"The plugin \\"pluginB\\" created a node of a type owned by another plugin.
+
+        The node type \\"mineOnly\\" is owned by \\"pluginA\\".
+
+        If you copy and pasted code from elsewhere, you'll need to pick a new type name
+        for your new node(s).
+
+        The node object passed to \\"createNode\\":
+
+        {
+    \\"id\\": \\"hi2\\",
+    \\"children\\": [],
+    \\"parent\\": \\"test\\",
+    \\"internal\\": {
+        \\"contentDigest\\": \\"hasdfljds\\",
+        \\"type\\": \\"mineOnly\\",
+        \\"owner\\": \\"pluginB\\"
+    },
+    \\"pickle\\": true
+}
+
+        The plugin creating the node:
+
+        {
+    \\"name\\": \\"pluginB\\"
+}"
+`;
+
+exports[`Create and update nodes throws error if a node sets a value on "fields" 1`] = `
+"Plugins creating nodes can not set data on the reserved field \\"fields\\"
+      as this is reserved for plugins which wish to extend your nodes.
+
+      If your plugin didn't add \\"fields\\" you're probably seeing this
+      error because you're reusing an old node object.
+
+      Node:
+
+      {
+    \\"id\\": \\"hi\\",
+    \\"children\\": [],
+    \\"parent\\": \\"test\\",
+    \\"fields\\": {
+        \\"test\\": \\"I can't do this but I like to test boundaries\\"
+    },
+    \\"internal\\": {
+        \\"contentDigest\\": \\"hasdfljds\\",
+        \\"type\\": \\"mineOnly\\",
+        \\"owner\\": \\"pluginA\\"
+    },
+    \\"pickle\\": true
+}
+
+      Plugin that created the node:
+
+      {
+    \\"name\\": \\"pluginA\\"
+}"
+`;
diff --git a/node_modules/gatsby/src/redux/__tests__/__snapshots__/pages.js.snap b/node_modules/gatsby/src/redux/__tests__/__snapshots__/pages.js.snap
new file mode 100644
index 0000000..4f30f19
--- /dev/null
+++ b/node_modules/gatsby/src/redux/__tests__/__snapshots__/pages.js.snap
@@ -0,0 +1,227 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`Add pages Fails if component path is missing 1`] = `"The plugin \\"test\\" must set the absolute path to the page component when create creating a page"`;
+
+exports[`Add pages Fails if path is missing 1`] = `"The plugin \\"test\\" must set the page path when creating a page"`;
+
+exports[`Add pages Fails if the component path isn't absolute 1`] = `"The plugin \\"test\\" must set the absolute path to the page component when create creating a page"`;
+
+exports[`Add pages Fails if use a reserved field in the context object 1`] = `
+"The plugin \\"test\\" used reserved field names in the context object when creating a page:
+
+  * \\"path\\"
+  * \\"matchPath\\"
+
+{
+    \\"component\\": \\"/path/to/file1.js\\",
+    \\"path\\": \\"/yo/\\",
+    \\"context\\": {
+        \\"path\\": \\"/yo/\\",
+        \\"matchPath\\": \\"/pizz*\\"
+    }
+}
+
+Data in \\"context\\" is passed to GraphQL as potential arguments when running the
+page query.
+
+When arguments for GraphQL are constructed, the context object is combined with
+the page object so *both* page object and context data are available as
+arguments. So you don't need to add the page \\"path\\" to the context as it's
+already available in GraphQL. If a context field duplicates a field already
+used by the page object, this can break functionality within Gatsby so must be
+avoided.
+
+Please choose another name for the conflicting fields.
+
+The following fields are used by the page object and should be avoided.
+
+  * \\"path\\"
+  * \\"matchPath\\"
+  * \\"component\\"
+  * \\"componentChunkName\\"
+  * \\"pluginCreator___NODE\\"
+  * \\"pluginCreatorId\\"
+
+            "
+`;
+
+exports[`Add pages allows you to add multiple pages 1`] = `
+Map {
+  "/hi/" => Object {
+    "component": "/whatever/index.js",
+    "componentChunkName": "component---whatever-index-js",
+    "context": Object {},
+    "internalComponentName": "ComponentHi",
+    "isCreatedByStatefulCreatePages": undefined,
+    "jsonName": "hi-18e",
+    "matchPath": undefined,
+    "path": "/hi/",
+    "pluginCreatorId": "test",
+    "pluginCreator___NODE": "test",
+    "updatedAt": 1482363367071,
+  },
+  "/hi/pizza/" => Object {
+    "component": "/whatever/index.js",
+    "componentChunkName": "component---whatever-index-js",
+    "context": Object {},
+    "internalComponentName": "ComponentHiPizza",
+    "isCreatedByStatefulCreatePages": undefined,
+    "jsonName": "hi-pizza-f10",
+    "matchPath": undefined,
+    "path": "/hi/pizza/",
+    "pluginCreatorId": "test",
+    "pluginCreator___NODE": "test",
+    "updatedAt": 1482363367071,
+  },
+}
+`;
+
+exports[`Add pages allows you to add pages 1`] = `
+Object {
+  "contextModified": false,
+  "payload": Object {
+    "component": "/whatever/index.js",
+    "componentChunkName": "component---whatever-index-js",
+    "context": Object {},
+    "internalComponentName": "ComponentHi",
+    "isCreatedByStatefulCreatePages": undefined,
+    "jsonName": "hi-18e",
+    "matchPath": undefined,
+    "path": "/hi/",
+    "pluginCreatorId": "test",
+    "pluginCreator___NODE": "test",
+    "updatedAt": 1482363367071,
+  },
+  "plugin": Object {
+    "id": "test",
+    "name": "test",
+  },
+  "type": "CREATE_PAGE",
+}
+`;
+
+exports[`Add pages allows you to add pages 2`] = `
+Map {
+  "/hi/" => Object {
+    "component": "/whatever/index.js",
+    "componentChunkName": "component---whatever-index-js",
+    "context": Object {},
+    "internalComponentName": "ComponentHi",
+    "isCreatedByStatefulCreatePages": undefined,
+    "jsonName": "hi-18e",
+    "matchPath": undefined,
+    "path": "/hi/",
+    "pluginCreatorId": "test",
+    "pluginCreator___NODE": "test",
+    "updatedAt": 1482363367071,
+  },
+}
+`;
+
+exports[`Add pages allows you to add pages with context 1`] = `
+Object {
+  "contextModified": false,
+  "payload": Object {
+    "component": "/whatever/index.js",
+    "componentChunkName": "component---whatever-index-js",
+    "context": Object {
+      "id": 123,
+    },
+    "internalComponentName": "ComponentHi",
+    "isCreatedByStatefulCreatePages": undefined,
+    "jsonName": "hi-18e",
+    "matchPath": undefined,
+    "path": "/hi/",
+    "pluginCreatorId": "test",
+    "pluginCreator___NODE": "test",
+    "updatedAt": 1482363367071,
+  },
+  "plugin": Object {
+    "id": "test",
+    "name": "test",
+  },
+  "type": "CREATE_PAGE",
+}
+`;
+
+exports[`Add pages allows you to add pages with context 2`] = `
+Map {
+  "/hi/" => Object {
+    "component": "/whatever/index.js",
+    "componentChunkName": "component---whatever-index-js",
+    "context": Object {
+      "id": 123,
+    },
+    "internalComponentName": "ComponentHi",
+    "isCreatedByStatefulCreatePages": undefined,
+    "jsonName": "hi-18e",
+    "matchPath": undefined,
+    "path": "/hi/",
+    "pluginCreatorId": "test",
+    "pluginCreator___NODE": "test",
+    "updatedAt": 1482363367071,
+  },
+}
+`;
+
+exports[`Add pages allows you to add pages with matchPath 1`] = `
+Object {
+  "contextModified": false,
+  "payload": Object {
+    "component": "/whatever/index.js",
+    "componentChunkName": "component---whatever-index-js",
+    "context": Object {},
+    "internalComponentName": "ComponentHi",
+    "isCreatedByStatefulCreatePages": undefined,
+    "jsonName": "hi-18e",
+    "matchPath": "/hi-from-somewhere-else/",
+    "path": "/hi/",
+    "pluginCreatorId": "test",
+    "pluginCreator___NODE": "test",
+    "updatedAt": 1482363367071,
+  },
+  "plugin": Object {
+    "id": "test",
+    "name": "test",
+  },
+  "type": "CREATE_PAGE",
+}
+`;
+
+exports[`Add pages allows you to add pages with matchPath 2`] = `
+Map {
+  "/hi/" => Object {
+    "component": "/whatever/index.js",
+    "componentChunkName": "component---whatever-index-js",
+    "context": Object {},
+    "internalComponentName": "ComponentHi",
+    "isCreatedByStatefulCreatePages": undefined,
+    "jsonName": "hi-18e",
+    "matchPath": "/hi-from-somewhere-else/",
+    "path": "/hi/",
+    "pluginCreatorId": "test",
+    "pluginCreator___NODE": "test",
+    "updatedAt": 1482363367071,
+  },
+}
+`;
+
+exports[`Add pages allows you to delete paths 1`] = `Map {}`;
+
+exports[`Add pages allows you to update existing pages (based on path) 1`] = `
+Map {
+  "/hi/" => Object {
+    "component": "/whatever2/index.js",
+    "componentChunkName": "component---whatever-2-index-js",
+    "context": Object {},
+    "internalComponentName": "ComponentHi",
+    "isCreatedByStatefulCreatePages": undefined,
+    "jsonName": "hi-18e",
+    "matchPath": undefined,
+    "path": "/hi/",
+    "pluginCreatorId": "test",
+    "pluginCreator___NODE": "test",
+    "updatedAt": 1482363367071,
+  },
+}
+`;
diff --git a/node_modules/gatsby/src/redux/__tests__/__snapshots__/redirects.js.snap b/node_modules/gatsby/src/redux/__tests__/__snapshots__/redirects.js.snap
new file mode 100644
index 0000000..ab045bb
--- /dev/null
+++ b/node_modules/gatsby/src/redux/__tests__/__snapshots__/redirects.js.snap
@@ -0,0 +1,313 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`Add redirects allows you to add redirects 1`] = `
+Object {
+  "payload": Object {
+    "fromPath": "/old/hello-world",
+    "isPermanent": false,
+    "redirectInBrowser": false,
+    "toPath": "/new/hello-world",
+  },
+  "type": "CREATE_REDIRECT",
+}
+`;
+
+exports[`Add redirects create redirects as permanent 1`] = `
+Object {
+  "payload": Object {
+    "fromPath": "/old/hello-world",
+    "isPermanent": true,
+    "redirectInBrowser": false,
+    "toPath": "/new/hello-world",
+  },
+  "type": "CREATE_REDIRECT",
+}
+`;
+
+exports[`Add redirects creates redirects from the URL starts with // 1`] = `
+Object {
+  "payload": Object {
+    "fromPath": "//example.com",
+    "isPermanent": false,
+    "redirectInBrowser": false,
+    "toPath": "/new/hello-world-2",
+  },
+  "type": "CREATE_REDIRECT",
+}
+`;
+
+exports[`Add redirects creates redirects from the URL starts with ftp 1`] = `
+Object {
+  "payload": Object {
+    "fromPath": "ftp://example.com",
+    "isPermanent": false,
+    "redirectInBrowser": false,
+    "toPath": "/new/hello-world-3",
+  },
+  "type": "CREATE_REDIRECT",
+}
+`;
+
+exports[`Add redirects creates redirects from the URL starts with http 1`] = `
+Object {
+  "payload": Object {
+    "fromPath": "http://example.com",
+    "isPermanent": false,
+    "redirectInBrowser": false,
+    "toPath": "/new/hello-world-1",
+  },
+  "type": "CREATE_REDIRECT",
+}
+`;
+
+exports[`Add redirects creates redirects from the URL starts with https 1`] = `
+Object {
+  "payload": Object {
+    "fromPath": "https://example.com",
+    "isPermanent": false,
+    "redirectInBrowser": false,
+    "toPath": "/new/hello-world-0",
+  },
+  "type": "CREATE_REDIRECT",
+}
+`;
+
+exports[`Add redirects creates redirects from the URL starts with mailto 1`] = `
+Object {
+  "payload": Object {
+    "fromPath": "mailto:example@email.com",
+    "isPermanent": false,
+    "redirectInBrowser": false,
+    "toPath": "/new/hello-world-4",
+  },
+  "type": "CREATE_REDIRECT",
+}
+`;
+
+exports[`Add redirects creates redirects to the URL starts with // 1`] = `
+Object {
+  "payload": Object {
+    "fromPath": "/old/hello-world-2",
+    "isPermanent": false,
+    "redirectInBrowser": false,
+    "toPath": "//example.com",
+  },
+  "type": "CREATE_REDIRECT",
+}
+`;
+
+exports[`Add redirects creates redirects to the URL starts with ftp 1`] = `
+Object {
+  "payload": Object {
+    "fromPath": "/old/hello-world-3",
+    "isPermanent": false,
+    "redirectInBrowser": false,
+    "toPath": "ftp://example.com",
+  },
+  "type": "CREATE_REDIRECT",
+}
+`;
+
+exports[`Add redirects creates redirects to the URL starts with http 1`] = `
+Object {
+  "payload": Object {
+    "fromPath": "/old/hello-world-1",
+    "isPermanent": false,
+    "redirectInBrowser": false,
+    "toPath": "http://example.com",
+  },
+  "type": "CREATE_REDIRECT",
+}
+`;
+
+exports[`Add redirects creates redirects to the URL starts with https 1`] = `
+Object {
+  "payload": Object {
+    "fromPath": "/old/hello-world-0",
+    "isPermanent": false,
+    "redirectInBrowser": false,
+    "toPath": "https://example.com",
+  },
+  "type": "CREATE_REDIRECT",
+}
+`;
+
+exports[`Add redirects creates redirects to the URL starts with mailto 1`] = `
+Object {
+  "payload": Object {
+    "fromPath": "/old/hello-world-4",
+    "isPermanent": false,
+    "redirectInBrowser": false,
+    "toPath": "mailto:example@email.com",
+  },
+  "type": "CREATE_REDIRECT",
+}
+`;
+
+exports[`Add redirects creates redirects with in-browser redirect option 1`] = `
+Object {
+  "payload": Object {
+    "fromPath": "/old/hello-world",
+    "isPermanent": false,
+    "redirectInBrowser": true,
+    "toPath": "/new/hello-world",
+  },
+  "type": "CREATE_REDIRECT",
+}
+`;
+
+exports[`Add redirects with path prefixs allows you to add redirects 1`] = `
+Object {
+  "payload": Object {
+    "fromPath": "/blog/old/hello-world",
+    "isPermanent": false,
+    "redirectInBrowser": false,
+    "toPath": "/blog/new/hello-world",
+  },
+  "type": "CREATE_REDIRECT",
+}
+`;
+
+exports[`Add redirects with path prefixs create redirects as permanent 1`] = `
+Object {
+  "payload": Object {
+    "fromPath": "/blog/old/hello-world",
+    "isPermanent": true,
+    "redirectInBrowser": false,
+    "toPath": "/blog/new/hello-world",
+  },
+  "type": "CREATE_REDIRECT",
+}
+`;
+
+exports[`Add redirects with path prefixs creates redirects from the URL starts with // 1`] = `
+Object {
+  "payload": Object {
+    "fromPath": "//example.com",
+    "isPermanent": false,
+    "redirectInBrowser": false,
+    "toPath": "/blog/new/hello-world-2",
+  },
+  "type": "CREATE_REDIRECT",
+}
+`;
+
+exports[`Add redirects with path prefixs creates redirects from the URL starts with ftp 1`] = `
+Object {
+  "payload": Object {
+    "fromPath": "ftp://example.com",
+    "isPermanent": false,
+    "redirectInBrowser": false,
+    "toPath": "/blog/new/hello-world-3",
+  },
+  "type": "CREATE_REDIRECT",
+}
+`;
+
+exports[`Add redirects with path prefixs creates redirects from the URL starts with http 1`] = `
+Object {
+  "payload": Object {
+    "fromPath": "http://example.com",
+    "isPermanent": false,
+    "redirectInBrowser": false,
+    "toPath": "/blog/new/hello-world-1",
+  },
+  "type": "CREATE_REDIRECT",
+}
+`;
+
+exports[`Add redirects with path prefixs creates redirects from the URL starts with https 1`] = `
+Object {
+  "payload": Object {
+    "fromPath": "https://example.com",
+    "isPermanent": false,
+    "redirectInBrowser": false,
+    "toPath": "/blog/new/hello-world-0",
+  },
+  "type": "CREATE_REDIRECT",
+}
+`;
+
+exports[`Add redirects with path prefixs creates redirects from the URL starts with mailto 1`] = `
+Object {
+  "payload": Object {
+    "fromPath": "mailto:example@email.com",
+    "isPermanent": false,
+    "redirectInBrowser": false,
+    "toPath": "/blog/new/hello-world-4",
+  },
+  "type": "CREATE_REDIRECT",
+}
+`;
+
+exports[`Add redirects with path prefixs creates redirects to the URL starts with // 1`] = `
+Object {
+  "payload": Object {
+    "fromPath": "/blog/old/hello-world-2",
+    "isPermanent": false,
+    "redirectInBrowser": false,
+    "toPath": "//example.com",
+  },
+  "type": "CREATE_REDIRECT",
+}
+`;
+
+exports[`Add redirects with path prefixs creates redirects to the URL starts with ftp 1`] = `
+Object {
+  "payload": Object {
+    "fromPath": "/blog/old/hello-world-3",
+    "isPermanent": false,
+    "redirectInBrowser": false,
+    "toPath": "ftp://example.com",
+  },
+  "type": "CREATE_REDIRECT",
+}
+`;
+
+exports[`Add redirects with path prefixs creates redirects to the URL starts with http 1`] = `
+Object {
+  "payload": Object {
+    "fromPath": "/blog/old/hello-world-1",
+    "isPermanent": false,
+    "redirectInBrowser": false,
+    "toPath": "http://example.com",
+  },
+  "type": "CREATE_REDIRECT",
+}
+`;
+
+exports[`Add redirects with path prefixs creates redirects to the URL starts with https 1`] = `
+Object {
+  "payload": Object {
+    "fromPath": "/blog/old/hello-world-0",
+    "isPermanent": false,
+    "redirectInBrowser": false,
+    "toPath": "https://example.com",
+  },
+  "type": "CREATE_REDIRECT",
+}
+`;
+
+exports[`Add redirects with path prefixs creates redirects to the URL starts with mailto 1`] = `
+Object {
+  "payload": Object {
+    "fromPath": "/blog/old/hello-world-4",
+    "isPermanent": false,
+    "redirectInBrowser": false,
+    "toPath": "mailto:example@email.com",
+  },
+  "type": "CREATE_REDIRECT",
+}
+`;
+
+exports[`Add redirects with path prefixs creates redirects with in-browser redirect option 1`] = `
+Object {
+  "payload": Object {
+    "fromPath": "/blog/old/hello-world",
+    "isPermanent": false,
+    "redirectInBrowser": true,
+    "toPath": "/blog/new/hello-world",
+  },
+  "type": "CREATE_REDIRECT",
+}
+`;
diff --git a/node_modules/gatsby/src/redux/__tests__/__snapshots__/status.js.snap b/node_modules/gatsby/src/redux/__tests__/__snapshots__/status.js.snap
new file mode 100644
index 0000000..c3f19b6
--- /dev/null
+++ b/node_modules/gatsby/src/redux/__tests__/__snapshots__/status.js.snap
@@ -0,0 +1,15 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`Status actions/reducer allows setting plugin status 1`] = `
+Object {
+  "payload": Object {
+    "something": "test status",
+  },
+  "plugin": undefined,
+  "type": "SET_PLUGIN_STATUS",
+}
+`;
+
+exports[`Status actions/reducer throws an error if status isn't an object 1`] = `"You must pass an object into setPluginStatus. What was passed in was \\"test job\\""`;
+
+exports[`Status actions/reducer throws an error if the plugin name isn't set 1`] = `"Cannot read property 'name' of undefined"`;
diff --git a/node_modules/gatsby/src/redux/__tests__/babelrc.js b/node_modules/gatsby/src/redux/__tests__/babelrc.js
new file mode 100644
index 0000000..f9761a2
--- /dev/null
+++ b/node_modules/gatsby/src/redux/__tests__/babelrc.js
@@ -0,0 +1,133 @@
+const { actions } = require(`../actions`)
+const babelrcReducer = require(`../reducers/babelrc`)
+const {
+  prepareOptions,
+  mergeConfigItemOptions,
+} = require(`../../utils/babel-loader-helpers`)
+
+describe(`Babelrc actions/reducer`, () => {
+  it(`allows adding a new plugin`, () => {
+    const action = actions.setBabelPlugin(
+      { name: `test-babel-plugin` },
+      { name: `test` }
+    )
+    expect(babelrcReducer(undefined, action)).toMatchSnapshot()
+  })
+
+  it(`allows updating the options of an existing plugin`, () => {
+    const action = actions.setBabelPlugin(
+      { name: `test-babel-plugin`, options: { id: 1 } },
+      { name: `test` }
+    )
+    let state = babelrcReducer(undefined, action)
+    expect(state.stages.develop.plugins[0].options.id).toBe(1)
+
+    const updateAction = actions.setBabelPlugin(
+      { name: `test-babel-plugin`, options: { id: 2 } },
+      { name: `test` }
+    )
+    state = babelrcReducer(state, updateAction)
+    expect(state.stages.develop.plugins[0].options.id).toBe(2)
+  })
+
+  it(`allows adding a new preset`, () => {
+    const action = actions.setBabelPreset(
+      { name: `test-babel-preset` },
+      { name: `test` }
+    )
+    expect(babelrcReducer(undefined, action)).toMatchSnapshot()
+  })
+
+  it(`allows updating the options of an existing preset`, () => {
+    const action = actions.setBabelPreset(
+      { name: `test-babel-preset`, options: { id: 1 } },
+      { name: `test` }
+    )
+    let state = babelrcReducer(undefined, action)
+    expect(state.stages.develop.presets[0].options.id).toBe(1)
+
+    const updateAction = actions.setBabelPreset(
+      { name: `test-babel-preset`, options: { id: 2 } },
+      { name: `test` }
+    )
+    state = babelrcReducer(state, updateAction)
+    expect(state.stages.develop.presets[0].options.id).toBe(2)
+  })
+
+  it(`allows specifying the stage for the plugin`, () => {
+    const action = actions.setBabelPlugin(
+      { name: `test-babel-plugin`, stage: `build-javascript` },
+      { name: `test` }
+    )
+    const state = babelrcReducer(undefined, action)
+    expect(state.stages.develop.plugins.length).toBe(0)
+    expect(state.stages[`build-javascript`].plugins.length).toBe(1)
+  })
+
+  it(`allows specifying the stage for the preset`, () => {
+    const action = actions.setBabelPreset(
+      { name: `test-babel-preset`, stage: `build-javascript` },
+      { name: `test` }
+    )
+    const state = babelrcReducer(undefined, action)
+    expect(state.stages.develop.presets.length).toBe(0)
+    expect(state.stages[`build-javascript`].presets.length).toBe(1)
+  })
+
+  it(`sets default presets/plugins if there's no userland babelrc`, () => {
+    const fakeResolver = moduleName => `/path/to/module/${moduleName}`
+    const babel = { createConfigItem: jest.fn() }
+
+    prepareOptions(babel, fakeResolver)
+
+    expect(babel.createConfigItem.mock.calls).toMatchSnapshot()
+  })
+
+  it(`allows setting options`, () => {
+    const action = actions.setBabelOptions(
+      { options: { sourceMaps: `inline` } },
+      { name: `test` }
+    )
+    let state = babelrcReducer(undefined, action)
+    expect(state.stages.develop.options.sourceMaps).toBe(`inline`)
+
+    const updateAction = actions.setBabelOptions(
+      { options: { sourceMaps: true } },
+      { name: `test` }
+    )
+    state = babelrcReducer(state, updateAction)
+
+    expect(state.stages.develop.options.sourceMaps).toBe(true)
+  })
+
+  it(`allows setting options on a particular stage`, () => {
+    const action = actions.setBabelOptions(
+      { options: { sourceMaps: `inline` }, stage: `develop` },
+      { name: `test` }
+    )
+    let state = babelrcReducer(undefined, action)
+    expect(state.stages.develop.options.sourceMaps).toBe(`inline`)
+    expect(state.stages[`develop-html`].options.sourceMaps).toBe(undefined)
+  })
+
+  it(`allows merging config items`, () => {
+    const babel = { createConfigItem: jest.fn() }
+    // This merges in new change.
+    mergeConfigItemOptions({
+      items: [{ options: { wat: 1 }, file: { resolved: `hi` } }],
+      itemToMerge: { options: { wat: 2 }, file: { resolved: `hi` } },
+      type: `plugin`,
+      babel,
+    })
+    expect(babel.createConfigItem.mock.calls).toMatchSnapshot()
+
+    expect(
+      mergeConfigItemOptions({
+        items: [{ options: { wat: 1 }, file: { resolved: `hi` } }],
+        itemToMerge: { options: { wat: 2 }, file: { resolved: `hi2` } },
+        type: `plugin`,
+        babel,
+      })
+    ).toMatchSnapshot()
+  })
+})
diff --git a/node_modules/gatsby/src/redux/__tests__/jobs.js b/node_modules/gatsby/src/redux/__tests__/jobs.js
new file mode 100644
index 0000000..65c7ee5
--- /dev/null
+++ b/node_modules/gatsby/src/redux/__tests__/jobs.js
@@ -0,0 +1,54 @@
+const { actions } = require(`../actions`)
+const jobsReducer = require(`../reducers/jobs`)
+
+Date.now = jest.fn(() => 1482363367071)
+
+describe(`Job actions/reducer`, () => {
+  it(`allows creating jobs`, () => {
+    expect(actions.createJob({ id: `test job` })).toMatchSnapshot()
+  })
+
+  it(`allows completing jobs`, () => {
+    let state = jobsReducer(undefined, actions.createJob({ id: `test job` }))
+    state = jobsReducer(state, actions.endJob({ id: `test job` }))
+    expect(state).toMatchSnapshot()
+  })
+
+  it(`allows updating jobs`, () => {
+    let state = jobsReducer(undefined, actions.createJob({ id: `test job` }))
+    state = jobsReducer(state, actions.setJob({ id: `test job`, progress: 40 }))
+    expect(state.active[0].progress).toBeDefined()
+  })
+
+  it(`Allows you to set other info on the job`, () => {
+    let state = jobsReducer(
+      undefined,
+      actions.createJob({ id: `test job`, word: `yo` })
+    )
+    expect(state.active[0].word).toBeDefined()
+  })
+
+  it(`throws an error if an ID isn't provided`, done => {
+    function runReducer() {
+      return jobsReducer(undefined, actions.createJob(`test job`))
+    }
+
+    expect(runReducer).toThrowErrorMatchingSnapshot()
+    done()
+  })
+
+  it(`throws an error if endJob is called for a job that's already ended`, done => {
+    function runReducer() {
+      let state = jobsReducer(undefined, actions.createJob({ id: `test job` }))
+      state = jobsReducer(state, actions.endJob({ id: `test job` }))
+      state = jobsReducer(
+        state,
+        actions.endJob({ id: `test job` }, { name: `test-plugin` })
+      )
+      return state
+    }
+
+    expect(runReducer).toThrowErrorMatchingSnapshot()
+    done()
+  })
+})
diff --git a/node_modules/gatsby/src/redux/__tests__/mocks/.babelrc b/node_modules/gatsby/src/redux/__tests__/mocks/.babelrc
new file mode 100644
index 0000000..c62e733
--- /dev/null
+++ b/node_modules/gatsby/src/redux/__tests__/mocks/.babelrc
@@ -0,0 +1,35 @@
+{
+	"cacheDirectory": true,
+	"babelrc": false,
+	"presets": [
+		["@babel/preset-env", {
+			"loose": true,
+			"modules": false,
+			"useBuiltIns": "usage",
+			"shippedProposals": true,
+			"targets": {
+				"browsers": [
+					"> 1%",
+					"IE >= 9",
+					"last 2 versions"
+				]
+			}
+		}],
+		["@babel/preset-react", {
+			"useBuiltIns": true,
+			"pragma": "React.createElement"
+		}],
+		"@babel/preset-flow"
+	],
+	"plugins": [
+		["@babel/plugin-proposal/class-properties", {
+			"loose": true
+		}],
+		"@babel/plugin-syntax-dynamic-import",
+	    ["@babel/plugin-transform-runtime", {
+			"helpers": true,
+			"regenerator": true,
+			"polyfill": false
+		}]
+	]
+}
diff --git a/node_modules/gatsby/src/redux/__tests__/nodes.js b/node_modules/gatsby/src/redux/__tests__/nodes.js
new file mode 100644
index 0000000..f2954a7
--- /dev/null
+++ b/node_modules/gatsby/src/redux/__tests__/nodes.js
@@ -0,0 +1,252 @@
+const Redux = require(`redux`)
+const { actions } = require(`../actions`)
+const nodeReducer = require(`../reducers/nodes`)
+const nodeTouchedReducer = require(`../reducers/nodes-touched`)
+
+jest.mock(`../../db/nodes`)
+jest.mock(`../nodes`)
+
+const store = Redux.createStore(
+  Redux.combineReducers({ nodeReducer, nodeTouchedReducer }),
+  {}
+)
+describe(`Create and update nodes`, () => {
+  beforeEach(() => {
+    store.dispatch({
+      type: `DELETE_CACHE`,
+    })
+  })
+
+  it(`allows creating nodes`, () => {
+    const action = actions.createNode(
+      {
+        id: `hi`,
+        children: [],
+        parent: `test`,
+        internal: {
+          contentDigest: `hasdfljds`,
+          type: `Test`,
+        },
+        pickle: true,
+      },
+      {
+        name: `tests`,
+      }
+    )
+    expect(action).toMatchSnapshot()
+    expect(nodeReducer(undefined, action)).toMatchSnapshot()
+  })
+
+  it(`allows updating nodes`, () => {
+    const action = actions.createNode(
+      {
+        id: `hi`,
+        children: [],
+        parent: `test`,
+        internal: {
+          contentDigest: `hasdfljds`,
+          type: `Test`,
+        },
+        pickle: true,
+        deep: {
+          array: [
+            0,
+            1,
+            {
+              boom: true,
+            },
+          ],
+        },
+      },
+      {
+        name: `tests`,
+      }
+    )
+    const updateAction = actions.createNode(
+      {
+        id: `hi`,
+        children: [],
+        parent: `test`,
+        internal: {
+          contentDigest: `hasdfljds`,
+          type: `Test`,
+        },
+        pickle: false,
+        deep: {
+          array: [1, 2],
+        },
+        deep2: {
+          boom: `foo`,
+        },
+      },
+      {
+        name: `tests`,
+      }
+    )
+    let state = nodeReducer(undefined, action)
+    state = nodeReducer(state, updateAction)
+    expect(state.get(`hi`).pickle).toEqual(false)
+    expect(state.get(`hi`).deep.array[0]).toEqual(1)
+    expect(state.get(`hi`).deep2.boom).toEqual(`foo`)
+  })
+
+  it(`nodes that are added are also "touched"`, () => {
+    const action = actions.createNode(
+      {
+        id: `hi`,
+        children: [],
+        parent: `test`,
+        internal: {
+          contentDigest: `hasdfljds`,
+          type: `Test`,
+        },
+        pickle: true,
+      },
+      {
+        name: `tests`,
+      }
+    )
+    let state = nodeTouchedReducer(undefined, action)
+    expect(state[`hi`]).toBe(true)
+  })
+
+  it(`allows adding fields to nodes`, () => {
+    const action = actions.createNode(
+      {
+        id: `hi`,
+        children: [],
+        parent: `test`,
+        internal: {
+          contentDigest: `hasdfljds`,
+          type: `Test`,
+        },
+        pickle: true,
+      },
+      {
+        name: `tests`,
+      }
+    )
+    let state = nodeReducer(undefined, action)
+
+    const addFieldAction = actions.createNodeField(
+      {
+        node: state.get(`hi`),
+        name: `joy`,
+        value: `soul's delight`,
+      },
+      {
+        name: `test`,
+      }
+    )
+    state = nodeReducer(state, addFieldAction)
+    expect(state).toMatchSnapshot()
+  })
+
+  it(`throws error if a field is updated by a plugin not its owner`, () => {
+    const action = actions.createNode(
+      {
+        id: `hi`,
+        children: [],
+        parent: `test`,
+        internal: {
+          contentDigest: `hasdfljds`,
+          type: `Test`,
+        },
+        pickle: true,
+      },
+      {
+        name: `tests`,
+      }
+    )
+    let state = nodeReducer(undefined, action)
+
+    const addFieldAction = actions.createNodeField(
+      {
+        node: state.get(`hi`),
+        name: `joy`,
+        value: `soul's delight`,
+      },
+      {
+        name: `test`,
+      }
+    )
+    state = nodeReducer(state, addFieldAction)
+
+    function callActionCreator() {
+      actions.createNodeField(
+        {
+          node: state.get(`hi`),
+          name: `joy`,
+          value: `soul's delight`,
+        },
+        {
+          name: `test2`,
+        }
+      )
+    }
+    expect(callActionCreator).toThrowErrorMatchingSnapshot()
+  })
+
+  it(`throws error if a node is created by a plugin not its owner`, () => {
+    actions.createNode(
+      {
+        id: `hi`,
+        children: [],
+        parent: `test`,
+        internal: {
+          contentDigest: `hasdfljds`,
+          type: `mineOnly`,
+        },
+        pickle: true,
+      },
+      {
+        name: `pluginA`,
+      }
+    )
+
+    function callActionCreator() {
+      actions.createNode(
+        {
+          id: `hi2`,
+          children: [],
+          parent: `test`,
+          internal: {
+            contentDigest: `hasdfljds`,
+            type: `mineOnly`,
+          },
+          pickle: true,
+        },
+        {
+          name: `pluginB`,
+        }
+      )
+    }
+
+    expect(callActionCreator).toThrowErrorMatchingSnapshot()
+  })
+
+  it(`throws error if a node sets a value on "fields"`, () => {
+    function callActionCreator() {
+      actions.createNode(
+        {
+          id: `hi`,
+          children: [],
+          parent: `test`,
+          fields: {
+            test: `I can't do this but I like to test boundaries`,
+          },
+          internal: {
+            contentDigest: `hasdfljds`,
+            type: `mineOnly`,
+          },
+          pickle: true,
+        },
+        {
+          name: `pluginA`,
+        }
+      )
+    }
+
+    expect(callActionCreator).toThrowErrorMatchingSnapshot()
+  })
+})
diff --git a/node_modules/gatsby/src/redux/__tests__/pages.js b/node_modules/gatsby/src/redux/__tests__/pages.js
new file mode 100644
index 0000000..c9da9ac
--- /dev/null
+++ b/node_modules/gatsby/src/redux/__tests__/pages.js
@@ -0,0 +1,197 @@
+"use strict"
+
+const glob = require(`glob`)
+const reducer = require(`../reducers/pages`)
+const { actions } = require(`../actions`)
+const { readFile } = require(`fs-extra`)
+
+jest.mock(`fs`)
+jest.mock(`fs-extra`, () => {
+  return {
+    readFile: jest.fn(() => `contents`),
+  }
+})
+
+afterEach(() => {
+  readFile.mockClear()
+})
+
+Date.now = jest.fn(
+  () =>
+    // const diff = new Date().getTime() - start
+    1482363367071 // + diff
+)
+
+glob.sync = jest.fn(() => ``)
+
+describe(`Add pages`, () => {
+  const MOCK_FILE_INFO = {
+    "/whatever/index.js": `import React from 'react'; export default Page;`,
+    "/whatever2/index.js": `import React from 'react'; export default Page;`,
+  }
+  beforeEach(() => {
+    // Set up some mocked out file info before each test
+    require(`fs`).__setMockFiles(MOCK_FILE_INFO)
+  })
+  it(`allows you to add pages`, () => {
+    const action = actions.createPage(
+      {
+        path: `/hi/`,
+        component: `/whatever/index.js`,
+      },
+      { id: `test`, name: `test` }
+    )
+    const state = reducer(undefined, action)
+    expect(action).toMatchSnapshot()
+    expect(state).toMatchSnapshot()
+  })
+
+  it(`Fails if path is missing`, () => {
+    const action = actions.createPage(
+      {
+        component: `/path/to/file1.js`,
+      },
+      { id: `test`, name: `test` }
+    )
+    expect(action).toMatchSnapshot()
+  })
+
+  it(`Fails if component path is missing`, () => {
+    const action = actions.createPage(
+      {
+        path: `/whatever/`,
+      },
+      { id: `test`, name: `test` }
+    )
+    expect(action).toMatchSnapshot()
+  })
+
+  it(`Fails if the component path isn't absolute`, () => {
+    const action = actions.createPage(
+      {
+        path: `/whatever/`,
+        component: `cheese.js`,
+      },
+      { id: `test`, name: `test` }
+    )
+    expect(action).toMatchSnapshot()
+  })
+
+  it(`Fails if use a reserved field in the context object`, () => {
+    const action = actions.createPage(
+      {
+        component: `/path/to/file1.js`,
+        path: `/yo/`,
+        context: {
+          path: `/yo/`,
+          matchPath: `/pizz*`,
+        },
+      },
+      { id: `test`, name: `test` }
+    )
+    expect(action).toMatchSnapshot()
+  })
+
+  it(`adds an initial forward slash if the user doesn't`, () => {
+    const action = actions.createPage(
+      {
+        path: `hi/`,
+        component: `/whatever/index.js`,
+      },
+      { id: `test`, name: `test` }
+    )
+    const state = reducer(undefined, action)
+    expect(Array.from(state.values())[0].path).toEqual(`/hi/`)
+  })
+
+  it(`allows you to add pages with context`, () => {
+    const action = actions.createPage(
+      {
+        path: `/hi/`,
+        component: `/whatever/index.js`,
+        context: {
+          id: 123,
+        },
+      },
+      { id: `test`, name: `test` }
+    )
+    const state = reducer(undefined, action)
+    expect(action).toMatchSnapshot()
+    expect(state).toMatchSnapshot()
+  })
+
+  it(`allows you to add pages with matchPath`, () => {
+    const action = actions.createPage(
+      {
+        path: `/hi/`,
+        component: `/whatever/index.js`,
+        matchPath: `/hi-from-somewhere-else/`,
+      },
+      { id: `test`, name: `test` }
+    )
+    const state = reducer(undefined, action)
+    expect(action).toMatchSnapshot()
+    expect(state).toMatchSnapshot()
+  })
+
+  it(`allows you to add multiple pages`, () => {
+    const action = actions.createPage(
+      {
+        path: `/hi/`,
+        component: `/whatever/index.js`,
+      },
+      { id: `test`, name: `test` }
+    )
+    const action2 = actions.createPage(
+      {
+        path: `/hi/pizza/`,
+        component: `/whatever/index.js`,
+      },
+      { id: `test`, name: `test` }
+    )
+    let state = reducer(undefined, action)
+    state = reducer(state, action2)
+    expect(state).toMatchSnapshot()
+    expect(state.size).toEqual(2)
+  })
+
+  it(`allows you to update existing pages (based on path)`, () => {
+    const action = actions.createPage(
+      {
+        path: `/hi/`,
+        component: `/whatever/index.js`,
+      },
+      { id: `test`, name: `test` }
+    )
+
+    // Change the component
+    const action2 = actions.createPage(
+      {
+        path: `/hi/`,
+        component: `/whatever2/index.js`,
+      },
+      { id: `test`, name: `test` }
+    )
+
+    let state = reducer(undefined, action)
+    state = reducer(state, action2)
+    expect(state).toMatchSnapshot()
+    expect(state.size).toEqual(1)
+  })
+
+  it(`allows you to delete paths`, () => {
+    const action = actions.createPage(
+      {
+        path: `/hi/`,
+        component: `/whatever/index.js`,
+      },
+      { name: `test` }
+    )
+    const action2 = actions.deletePage({ path: `/hi/` })
+
+    let state = reducer(undefined, action)
+    state = reducer(state, action2)
+    expect(state).toMatchSnapshot()
+    expect(state.size).toEqual(0)
+  })
+})
diff --git a/node_modules/gatsby/src/redux/__tests__/redirects.js b/node_modules/gatsby/src/redux/__tests__/redirects.js
new file mode 100644
index 0000000..35c9820
--- /dev/null
+++ b/node_modules/gatsby/src/redux/__tests__/redirects.js
@@ -0,0 +1,140 @@
+const { actions } = require(`../actions`)
+const { store } = require(`../index`)
+
+jest.mock(`../index`, () => {
+  return {
+    store: {
+      getState: jest.fn(),
+    },
+    dispath: () => {},
+    emitter: {
+      on: jest.fn(),
+    },
+  }
+})
+
+const protocolArr = [
+  [`https`, `https://example.com`],
+  [`http`, `http://example.com`],
+  [`//`, `//example.com`],
+  [`ftp`, `ftp://example.com`],
+  [`mailto`, `mailto:example@email.com`],
+]
+
+describe(`Add redirects`, () => {
+  beforeEach(() => {
+    store.getState.mockReturnValue({ program: { pathPrefixs: false } })
+  })
+
+  it(`allows you to add redirects`, () => {
+    const action = actions.createRedirect({
+      fromPath: `/old/hello-world`,
+      toPath: `/new/hello-world`,
+    })
+
+    expect(action).toMatchSnapshot()
+  })
+  it(`create redirects as permanent`, () => {
+    const action = actions.createRedirect({
+      fromPath: `/old/hello-world`,
+      toPath: `/new/hello-world`,
+      isPermanent: true,
+    })
+
+    expect(action).toMatchSnapshot()
+  })
+
+  it(`creates redirects with in-browser redirect option`, () => {
+    const action = actions.createRedirect({
+      fromPath: `/old/hello-world`,
+      toPath: `/new/hello-world`,
+      redirectInBrowser: true,
+    })
+
+    expect(action).toMatchSnapshot()
+  })
+
+  protocolArr.forEach(([protocol, toPath], index) => {
+    it(`creates redirects to the URL starts with ${protocol}`, () => {
+      const action = actions.createRedirect({
+        fromPath: `/old/hello-world-${index}`,
+        toPath,
+      })
+
+      expect(action).toMatchSnapshot()
+    })
+  })
+
+  protocolArr.forEach(([protocol, fromPath], index) => {
+    it(`creates redirects from the URL starts with ${protocol}`, () => {
+      const action = actions.createRedirect({
+        fromPath,
+        toPath: `/new/hello-world-${index}`,
+      })
+
+      expect(action).toMatchSnapshot()
+    })
+  })
+})
+
+describe(`Add redirects with path prefixs`, () => {
+  beforeEach(() => {
+    store.getState.mockReturnValue({
+      program: {
+        prefixPaths: true,
+      },
+      config: {
+        pathPrefix: `/blog`,
+      },
+    })
+  })
+  it(`allows you to add redirects`, () => {
+    const action = actions.createRedirect({
+      fromPath: `/old/hello-world`,
+      toPath: `/new/hello-world`,
+    })
+
+    expect(action).toMatchSnapshot()
+  })
+  it(`create redirects as permanent`, () => {
+    const action = actions.createRedirect({
+      fromPath: `/old/hello-world`,
+      toPath: `/new/hello-world`,
+      isPermanent: true,
+    })
+
+    expect(action).toMatchSnapshot()
+  })
+
+  it(`creates redirects with in-browser redirect option`, () => {
+    const action = actions.createRedirect({
+      fromPath: `/old/hello-world`,
+      toPath: `/new/hello-world`,
+      redirectInBrowser: true,
+    })
+
+    expect(action).toMatchSnapshot()
+  })
+
+  protocolArr.forEach(([protocol, toPath], index) => {
+    it(`creates redirects to the URL starts with ${protocol}`, () => {
+      const action = actions.createRedirect({
+        fromPath: `/old/hello-world-${index}`,
+        toPath,
+      })
+
+      expect(action).toMatchSnapshot()
+    })
+  })
+
+  protocolArr.forEach(([protocol, fromPath], index) => {
+    it(`creates redirects from the URL starts with ${protocol}`, () => {
+      const action = actions.createRedirect({
+        fromPath,
+        toPath: `/new/hello-world-${index}`,
+      })
+
+      expect(action).toMatchSnapshot()
+    })
+  })
+})
diff --git a/node_modules/gatsby/src/redux/__tests__/run-sift.js b/node_modules/gatsby/src/redux/__tests__/run-sift.js
new file mode 100644
index 0000000..f6a5e01
--- /dev/null
+++ b/node_modules/gatsby/src/redux/__tests__/run-sift.js
@@ -0,0 +1,206 @@
+const runSift = require(`../run-sift`)
+const {
+  GraphQLObjectType,
+  GraphQLNonNull,
+  GraphQLID,
+  GraphQLString,
+  GraphQLList,
+} = require(`graphql`)
+
+jest.mock(`../../db/node-tracking`, () => {
+  return {
+    trackInlineObjectsInRootNode: () => jest.fn(),
+  }
+})
+
+const mockNodes = [
+  {
+    id: `id_1`,
+    string: `foo`,
+    internal: {
+      type: `notTest`,
+    },
+  },
+  {
+    id: `id_2`,
+    string: `bar`,
+    internal: {
+      type: `test`,
+    },
+  },
+  {
+    id: `id_3`,
+    string: `baz`,
+    internal: {
+      type: `test`,
+    },
+  },
+  {
+    id: `id_4`,
+    string: `qux`,
+    internal: {
+      type: `test`,
+    },
+    first: {
+      willBeResolved: `willBeResolved`,
+      second: [
+        {
+          willBeResolved: `willBeResolved`,
+          third: {
+            foo: `foo`,
+          },
+        },
+      ],
+    },
+  },
+]
+
+jest.mock(`../../db/nodes`, () => {
+  return {
+    getNode: id => mockNodes.find(node => node.id === id),
+    getNodesByType: type =>
+      mockNodes.filter(node => node.internal.type === type),
+  }
+})
+
+describe(`run-sift`, () => {
+  const typeName = `test`
+  const gqlType = new GraphQLObjectType({
+    name: typeName,
+    fields: () => {
+      return {
+        id: { type: new GraphQLNonNull(GraphQLID) },
+        string: { type: GraphQLString },
+        first: {
+          type: new GraphQLObjectType({
+            name: `First`,
+            fields: {
+              willBeResolved: {
+                type: GraphQLString,
+                resolve: () => `resolvedValue`,
+              },
+              second: {
+                type: new GraphQLList(
+                  new GraphQLObjectType({
+                    name: `Second`,
+                    fields: {
+                      willBeResolved: {
+                        type: GraphQLString,
+                        resolve: () => `resolvedValue`,
+                      },
+                      third: new GraphQLObjectType({
+                        name: `Third`,
+                        fields: {
+                          foo: GraphQLString,
+                        },
+                      }),
+                    },
+                  })
+                ),
+              },
+            },
+          }),
+        },
+      }
+    },
+  })
+  const nodes = mockNodes
+
+  describe(`filters by just id correctly`, () => {
+    it(`eq operator`, async () => {
+      const queryArgs = {
+        filter: {
+          id: { eq: `id_2` },
+        },
+      }
+
+      const resultSingular = await runSift({
+        gqlType,
+        queryArgs,
+        firstOnly: true,
+      })
+
+      const resultMany = await runSift({
+        gqlType,
+        queryArgs,
+        firstOnly: false,
+      })
+
+      expect(resultSingular).toEqual([nodes[1]])
+      expect(resultMany).toEqual([nodes[1]])
+    })
+
+    it(`eq operator honors type`, async () => {
+      const queryArgs = {
+        filter: {
+          id: { eq: `id_1` },
+        },
+      }
+
+      const resultSingular = await runSift({
+        gqlType,
+        queryArgs,
+        firstOnly: true,
+      })
+
+      const resultMany = await runSift({
+        gqlType,
+        queryArgs,
+        firstOnly: false,
+      })
+
+      // `id-1` node is not of queried type, so results should be empty
+      expect(resultSingular).toEqual([])
+      expect(resultMany).toEqual(null)
+    })
+
+    it(`non-eq operator`, async () => {
+      const queryArgs = {
+        filter: {
+          id: { ne: `id_2` },
+        },
+      }
+
+      const resultSingular = await runSift({
+        gqlType,
+        queryArgs,
+        firstOnly: true,
+      })
+
+      const resultMany = await runSift({
+        gqlType,
+        queryArgs,
+        firstOnly: false,
+      })
+
+      expect(resultSingular).toEqual([nodes[2]])
+      expect(resultMany).toEqual([nodes[2], nodes[3]])
+    })
+  })
+
+  it(`resolves fields before querying`, async () => {
+    const queryArgs = {
+      filter: {
+        first: {
+          willBeResolved: { eq: `resolvedValue` },
+          second: {
+            elemMatch: {
+              willBeResolved: { eq: `resolvedValue` },
+              third: {
+                foo: { eq: `foo` },
+              },
+            },
+          },
+        },
+      },
+    }
+
+    const results = await runSift({
+      gqlType,
+      queryArgs,
+      firstOnly: true,
+    })
+
+    expect(results[0].id).toBe(`id_4`)
+  })
+})
diff --git a/node_modules/gatsby/src/redux/__tests__/status.js b/node_modules/gatsby/src/redux/__tests__/status.js
new file mode 100644
index 0000000..6d2f8d0
--- /dev/null
+++ b/node_modules/gatsby/src/redux/__tests__/status.js
@@ -0,0 +1,48 @@
+const { actions } = require(`../actions`)
+const statusReducer = require(`../reducers/status`)
+
+Date.now = jest.fn(() => 1482363367071)
+
+describe(`Status actions/reducer`, () => {
+  it(`allows setting plugin status`, () => {
+    expect(
+      actions.setPluginStatus({ something: `test status` })
+    ).toMatchSnapshot()
+  })
+
+  it(`allows updating status`, () => {
+    let state = statusReducer(
+      undefined,
+      actions.setPluginStatus({ test: `test status` }, { name: `test-plugin` })
+    )
+    state = statusReducer(
+      state,
+      actions.setPluginStatus({ test: `test status2` }, { name: `test-plugin` })
+    )
+    expect(state.plugins[`test-plugin`].test).toEqual(`test status2`)
+  })
+
+  it(`throws an error if status isn't an object`, done => {
+    function runReducer() {
+      return statusReducer(
+        undefined,
+        actions.setPluginStatus(`test job`, { name: `test-plugin` })
+      )
+    }
+
+    expect(runReducer).toThrowErrorMatchingSnapshot()
+    done()
+  })
+
+  it(`throws an error if the plugin name isn't set`, done => {
+    function runReducer() {
+      return statusReducer(
+        undefined,
+        actions.setPluginStatus({ blah: `test job` })
+      )
+    }
+
+    expect(runReducer).toThrowErrorMatchingSnapshot()
+    done()
+  })
+})
diff --git a/node_modules/gatsby/src/redux/actions.js b/node_modules/gatsby/src/redux/actions.js
new file mode 100644
index 0000000..bdb474e
--- /dev/null
+++ b/node_modules/gatsby/src/redux/actions.js
@@ -0,0 +1,1450 @@
+// @flow
+const Joi = require(`joi`)
+const chalk = require(`chalk`)
+const _ = require(`lodash`)
+const { bindActionCreators } = require(`redux`)
+const { stripIndent } = require(`common-tags`)
+const report = require(`gatsby-cli/lib/reporter`)
+const path = require(`path`)
+const fs = require(`fs`)
+const truePath = require(`true-case-path`)
+const url = require(`url`)
+const kebabHash = require(`kebab-hash`)
+const slash = require(`slash`)
+const { hasNodeChanged, getNode } = require(`../db/nodes`)
+const { trackInlineObjectsInRootNode } = require(`../db/node-tracking`)
+const { store } = require(`./index`)
+const fileExistsSync = require(`fs-exists-cached`).sync
+const joiSchemas = require(`../joi-schemas/joi`)
+const { generateComponentChunkName } = require(`../utils/js-chunk-names`)
+
+const actions = {}
+
+const findChildrenRecursively = (children = []) => {
+  children = children.concat(
+    ...children.map(child => {
+      const newChildren = getNode(child).children
+      if (_.isArray(newChildren) && newChildren.length > 0) {
+        return findChildrenRecursively(newChildren)
+      } else {
+        return []
+      }
+    })
+  )
+
+  return children
+}
+
+type Job = {
+  id: string,
+}
+type PageInput = {
+  path: string,
+  component: string,
+  context?: Object,
+}
+
+type Page = {
+  path: string,
+  matchPath: ?string,
+  component: string,
+  context: Object,
+  internalComponentName: string,
+  componentChunkName: string,
+  updatedAt: number,
+}
+
+type Plugin = {
+  name: string,
+}
+
+type ActionOptions = {
+  traceId: ?string,
+  parentSpan: ?Object,
+  followsSpan: ?Object,
+}
+
+/**
+ * Delete a page
+ * @param {Object} page a page object
+ * @param {string} page.path The path of the page
+ * @param {string} page.component The absolute path to the page component
+ * @example
+ * deletePage(page)
+ */
+actions.deletePage = (page: PageInput) => {
+  return {
+    type: `DELETE_PAGE`,
+    payload: page,
+  }
+}
+
+const pascalCase = _.flow(
+  _.camelCase,
+  _.upperFirst
+)
+const hasWarnedForPageComponentInvalidContext = new Set()
+const hasWarnedForPageComponentInvalidCasing = new Set()
+const pageComponentCache = {}
+const fileOkCache = {}
+
+/**
+ * Create a page. See [the guide on creating and modifying pages](/docs/creating-and-modifying-pages/)
+ * for detailed documentation about creating pages.
+ * @param {Object} page a page object
+ * @param {string} page.path Any valid URL. Must start with a forward slash
+ * @param {string} page.component The absolute path to the component for this page
+ * @param {Object} page.context Context data for this page. Passed as props
+ * to the component `this.props.pageContext` as well as to the graphql query
+ * as graphql arguments.
+ * @example
+ * createPage({
+ *   path: `/my-sweet-new-page/`,
+ *   component: path.resolve(`./src/templates/my-sweet-new-page.js`),
+ *   // The context is passed as props to the component as well
+ *   // as into the component's GraphQL query.
+ *   context: {
+ *     id: `123456`,
+ *   },
+ * })
+ */
+actions.createPage = (
+  page: PageInput,
+  plugin?: Plugin,
+  actionOptions?: ActionOptions
+) => {
+  let noPageOrComponent = false
+  let name = `The plugin "${plugin.name}"`
+  if (plugin.name === `default-site-plugin`) {
+    name = `Your site's "gatsby-node.js"`
+  }
+  if (!page.path) {
+    const message = `${name} must set the page path when creating a page`
+    // Don't log out when testing
+    if (process.env.NODE_ENV !== `test`) {
+      console.log(chalk.bold.red(message))
+      console.log(``)
+      console.log(page)
+    } else {
+      return message
+    }
+    noPageOrComponent = true
+  }
+
+  // Validate that the context object doesn't overlap with any core page fields
+  // as this will cause trouble when running graphql queries.
+  if (_.isObject(page.context)) {
+    const reservedFields = [
+      `path`,
+      `matchPath`,
+      `component`,
+      `componentChunkName`,
+      `pluginCreator___NODE`,
+      `pluginCreatorId`,
+    ]
+    const invalidFields = Object.keys(_.pick(page.context, reservedFields))
+
+    const singularMessage = `${name} used a reserved field name in the context object when creating a page:`
+    const pluralMessage = `${name} used reserved field names in the context object when creating a page:`
+    if (invalidFields.length > 0) {
+      const error = `${
+        invalidFields.length === 1 ? singularMessage : pluralMessage
+      }
+
+${invalidFields.map(f => `  * "${f}"`).join(`\n`)}
+
+${JSON.stringify(page, null, 4)}
+
+Data in "context" is passed to GraphQL as potential arguments when running the
+page query.
+
+When arguments for GraphQL are constructed, the context object is combined with
+the page object so *both* page object and context data are available as
+arguments. So you don't need to add the page "path" to the context as it's
+already available in GraphQL. If a context field duplicates a field already
+used by the page object, this can break functionality within Gatsby so must be
+avoided.
+
+Please choose another name for the conflicting fields.
+
+The following fields are used by the page object and should be avoided.
+
+${reservedFields.map(f => `  * "${f}"`).join(`\n`)}
+
+            `
+      if (process.env.NODE_ENV === `test`) {
+        return error
+        // Only error if the context version is different than the page
+        // version.  People in v1 often thought that they needed to also pass
+        // the path to context for it to be available in GraphQL
+      } else if (invalidFields.some(f => page.context[f] !== page[f])) {
+        report.panic(error)
+      } else {
+        if (!hasWarnedForPageComponentInvalidContext.has(page.component)) {
+          report.warn(error)
+          hasWarnedForPageComponentInvalidContext.add(page.component)
+        }
+      }
+    }
+  }
+
+  // Don't check if the component exists during tests as we use a lot of fake
+  // component paths.
+  if (process.env.NODE_ENV !== `test`) {
+    if (!fileExistsSync(page.component)) {
+      const message = `${name} created a page with a component that doesn't exist. Missing component is ${
+        page.component
+      }`
+      console.log(``)
+      console.log(chalk.bold.red(message))
+      console.log(``)
+      console.log(page)
+      noPageOrComponent = true
+    } else if (page.component) {
+      // check if we've processed this component path
+      // before, before running the expensive "truePath"
+      // operation
+      if (pageComponentCache[page.component]) {
+        page.component = pageComponentCache[page.component]
+      } else {
+        const originalPageComponent = page.component
+
+        // normalize component path
+        page.component = slash(page.component)
+        // check if path uses correct casing - incorrect casing will
+        // cause issues in query compiler and inconsistencies when
+        // developing on Mac or Windows and trying to deploy from
+        // linux CI/CD pipeline
+        const trueComponentPath = slash(truePath(page.component))
+        if (trueComponentPath !== page.component) {
+          if (!hasWarnedForPageComponentInvalidCasing.has(page.component)) {
+            const markers = page.component
+              .split(``)
+              .map((letter, index) => {
+                if (letter !== trueComponentPath[index]) {
+                  return `^`
+                }
+                return ` `
+              })
+              .join(``)
+
+            report.warn(
+              stripIndent`
+            ${name} created a page with a component path that doesn't match the casing of the actual file. This may work locally, but will break on systems which are case-sensitive, e.g. most CI/CD pipelines.
+
+            page.component:     "${page.component}"
+            path in filesystem: "${trueComponentPath}"
+                                 ${markers}
+          `
+            )
+            hasWarnedForPageComponentInvalidCasing.add(page.component)
+          }
+
+          page.component = trueComponentPath
+        }
+        pageComponentCache[originalPageComponent] = page.component
+      }
+    }
+  }
+
+  if (!page.component || !path.isAbsolute(page.component)) {
+    const message = `${name} must set the absolute path to the page component when create creating a page`
+    // Don't log out when testing
+    if (process.env.NODE_ENV !== `test`) {
+      console.log(``)
+      console.log(chalk.bold.red(message))
+      console.log(``)
+      console.log(page)
+    } else {
+      return message
+    }
+    noPageOrComponent = true
+  }
+
+  if (noPageOrComponent) {
+    report.panic(
+      `See the documentation for createPage https://www.gatsbyjs.org/docs/actions/#createPage`
+    )
+  }
+
+  let internalComponentName
+  if (page.path === `/`) {
+    internalComponentName = `ComponentIndex`
+  } else {
+    internalComponentName = `Component${pascalCase(page.path)}`
+  }
+
+  let internalPage: Page = {
+    internalComponentName,
+    path: page.path,
+    matchPath: page.matchPath,
+    component: page.component,
+    componentChunkName: generateComponentChunkName(page.component),
+    isCreatedByStatefulCreatePages:
+      actionOptions &&
+      actionOptions.traceId === `initial-createPagesStatefully`,
+    // Ensure the page has a context object
+    context: page.context || {},
+    updatedAt: Date.now(),
+  }
+
+  // If the path doesn't have an initial forward slash, add it.
+  if (internalPage.path[0] !== `/`) {
+    internalPage.path = `/${internalPage.path}`
+  }
+
+  // Validate that the page component imports React and exports something
+  // (hopefully a component).
+  //
+  // Only run validation once during builds.
+  if (
+    !internalPage.component.includes(`/.cache/`) &&
+    (process.env.NODE_ENV === `production` &&
+      !fileOkCache[internalPage.component])
+  ) {
+    const fileName = internalPage.component
+    const fileContent = fs.readFileSync(fileName, `utf-8`)
+    let notEmpty = true
+    let includesDefaultExport = true
+
+    if (fileContent === ``) {
+      notEmpty = false
+    }
+
+    if (
+      !fileContent.includes(`export default`) &&
+      !fileContent.includes(`module.exports`) &&
+      !fileContent.includes(`exports.default`) &&
+      // this check only applies to js and ts, not mdx
+      /\.(jsx?|tsx?)/.test(path.extname(fileName))
+    ) {
+      includesDefaultExport = false
+    }
+    if (!notEmpty || !includesDefaultExport) {
+      const relativePath = path.relative(
+        store.getState().program.directory,
+        fileName
+      )
+
+      if (!notEmpty) {
+        report.panicOnBuild(
+          `You have an empty file in the "src/pages" directory at "${relativePath}". Please remove it or make it a valid component`
+        )
+      }
+
+      if (!includesDefaultExport) {
+        report.panicOnBuild(
+          `[${fileName}] The page component must export a React component for it to be valid`
+        )
+      }
+    }
+
+    fileOkCache[internalPage.component] = true
+  }
+
+  const oldPage: Page = store.getState().pages.get(internalPage.path)
+  const contextModified =
+    !!oldPage && !_.isEqual(oldPage.context, internalPage.context)
+
+  return {
+    ...actionOptions,
+    type: `CREATE_PAGE`,
+    contextModified,
+    plugin,
+    payload: internalPage,
+  }
+}
+
+/**
+ * Delete a node
+ * @param {object} $0
+ * @param {object} $0.node the node object
+ * @example
+ * deleteNode({node: node})
+ */
+actions.deleteNode = (options: any, plugin: Plugin, args: any) => {
+  let id
+
+  // Check if using old method signature. Warn about incorrect usage but get
+  // node from nodeID anyway.
+  if (typeof options === `string`) {
+    let msg =
+      `Calling "deleteNode" with a nodeId is deprecated. Please pass an ` +
+      `object containing a full node instead: deleteNode({ node }).`
+    if (args && args.name) {
+      // `plugin` used to be the third argument
+      plugin = args
+      msg = msg + ` "deleteNode" was called by ${plugin.name}`
+    }
+    report.warn(msg)
+
+    id = options
+  } else {
+    id = options && options.node && options.node.id
+  }
+
+  // Always get node from the store, as the node we get as an arg
+  // might already have been deleted.
+  const node = getNode(id)
+
+  const createDeleteAction = node => {
+    return {
+      type: `DELETE_NODE`,
+      plugin,
+      payload: node,
+    }
+  }
+
+  const deleteAction = createDeleteAction(node)
+
+  // It's possible the file node was never created as sometimes tools will
+  // write and then immediately delete temporary files to the file system.
+  const deleteDescendantsActions =
+    node &&
+    findChildrenRecursively(node.children)
+      .map(getNode)
+      .map(createDeleteAction)
+
+  if (deleteDescendantsActions && deleteDescendantsActions.length) {
+    return [...deleteDescendantsActions, deleteAction]
+  } else {
+    return deleteAction
+  }
+}
+
+/**
+ * Batch delete nodes
+ * @param {Array} nodes an array of node ids
+ * @example
+ * deleteNodes([`node1`, `node2`])
+ */
+actions.deleteNodes = (nodes: any[], plugin: Plugin) => {
+  let msg =
+    `The "deleteNodes" action is now deprecated and will be removed in ` +
+    `Gatsby v3. Please use "deleteNode" instead.`
+  if (plugin && plugin.name) {
+    msg = msg + ` "deleteNodes" was called by ${plugin.name}`
+  }
+  report.warn(msg)
+
+  // Also delete any nodes transformed from these.
+  const descendantNodes = _.flatten(
+    nodes.map(n => findChildrenRecursively(getNode(n).children))
+  )
+
+  const deleteNodesAction = {
+    type: `DELETE_NODES`,
+    plugin,
+    payload: [...nodes, ...descendantNodes],
+  }
+  return deleteNodesAction
+}
+
+const typeOwners = {}
+/**
+ * Create a new node.
+ * @param {Object} node a node object
+ * @param {string} node.id The node's ID. Must be globally unique.
+ * @param {string} node.parent The ID of the parent's node. If the node is
+ * derived from another node, set that node as the parent. Otherwise it can
+ * just be `null`.
+ * @param {Array} node.children An array of children node IDs. If you're
+ * creating the children nodes while creating the parent node, add the
+ * children node IDs here directly. If you're adding a child node to a
+ * parent node created by a plugin, you can't mutate this value directly
+ * to add your node id, instead use the action creator `createParentChildLink`.
+ * @param {Object} node.internal node fields that aren't generally
+ * interesting to consumers of node data but are very useful for plugin writers
+ * and Gatsby core.
+ * @param {string} node.internal.mediaType An optional field to indicate to
+ * transformer plugins that your node has raw content they can transform.
+ * Use either an official media type (we use mime-db as our source
+ * (https://www.npmjs.com/package/mime-db) or a made-up one if your data
+ * doesn't fit in any existing bucket. Transformer plugins use node media types
+ * for deciding if they should transform a node into a new one. E.g.
+ * markdown transformers look for media types of
+ * `text/markdown`.
+ * @param {string} node.internal.type An arbitrary globally unique type
+ * choosen by the plugin creating the node. Should be descriptive of the
+ * node as the type is used in forming GraphQL types so users will query
+ * for nodes based on the type choosen here. Nodes of a given type can
+ * only be created by one plugin.
+ * @param {string} node.internal.content An optional field. This is rarely
+ * used. It is used when a source plugin sources data it doesn't know how
+ * to transform e.g. a markdown string pulled from an API. The source plugin
+ * can defer the transformation to a specialized transformer plugin like
+ * gatsby-transformer-remark. This `content` field holds the raw content
+ * (so for the markdown case, the markdown string).
+ *
+ * Data that's already structured should be added to the top-level of the node
+ * object and _not_ added here. You should not `JSON.stringify` your node's
+ * data here.
+ *
+ * If the content is very large and can be lazy-loaded, e.g. a file on disk,
+ * you can define a `loadNodeContent` function for this node and the node
+ * content will be lazy loaded when it's needed.
+ * @param {string} node.internal.contentDigest the digest for the content
+ * of this node. Helps Gatsby avoid doing extra work on data that hasn't
+ * changed.
+ * @param {string} node.internal.description An optional field. Human
+ * readable description of what this node represent / its source. It will
+ * be displayed when type conflicts are found, making it easier to find
+ * and correct type conflicts.
+ * @example
+ * createNode({
+ *   // Data for the node.
+ *   field1: `a string`,
+ *   field2: 10,
+ *   field3: true,
+ *   ...arbitraryOtherData,
+ *
+ *   // Required fields.
+ *   id: `a-node-id`,
+ *   parent: `the-id-of-the-parent-node`, // or null if it's a source node without a parent
+ *   children: [],
+ *   internal: {
+ *     type: `CoolServiceMarkdownField`,
+ *     contentDigest: crypto
+ *       .createHash(`md5`)
+ *       .update(JSON.stringify(fieldData))
+ *       .digest(`hex`),
+ *     mediaType: `text/markdown`, // optional
+ *     content: JSON.stringify(fieldData), // optional
+ *     description: `Cool Service: "Title of entry"`, // optional
+ *   }
+ * })
+ */
+actions.createNode = (
+  node: any,
+  plugin?: Plugin,
+  actionOptions?: ActionOptions = {}
+) => {
+  if (!_.isObject(node)) {
+    return console.log(
+      chalk.bold.red(
+        `The node passed to the "createNode" action creator must be an object`
+      )
+    )
+  }
+
+  // Ensure the new node has an internals object.
+  if (!node.internal) {
+    node.internal = {}
+  }
+
+  // Ensure the new node has a children array.
+  if (!node.array && !_.isArray(node.children)) {
+    node.children = []
+  }
+
+  // Ensure the new node has a parent field
+  if (!node.parent) {
+    node.parent = null
+  }
+
+  // Tell user not to set the owner name themself.
+  if (node.internal.owner) {
+    report.error(JSON.stringify(node, null, 4))
+    report.panic(
+      chalk.bold.red(
+        `The node internal.owner field is set automatically by Gatsby and not by plugins`
+      )
+    )
+  }
+
+  // Add the plugin name to the internal object.
+  if (plugin) {
+    node.internal.owner = plugin.name
+  }
+
+  const result = Joi.validate(node, joiSchemas.nodeSchema)
+  if (result.error) {
+    console.log(chalk.bold.red(`The new node didn't pass validation`))
+    console.log(chalk.bold.red(result.error))
+    console.log(node)
+    return { type: `VALIDATION_ERROR`, error: true }
+  }
+
+  // Ensure node isn't directly setting fields.
+  if (node.fields) {
+    throw new Error(
+      stripIndent`
+      Plugins creating nodes can not set data on the reserved field "fields"
+      as this is reserved for plugins which wish to extend your nodes.
+
+      If your plugin didn't add "fields" you're probably seeing this
+      error because you're reusing an old node object.
+
+      Node:
+
+      ${JSON.stringify(node, null, 4)}
+
+      Plugin that created the node:
+
+      ${JSON.stringify(plugin, null, 4)}
+    `
+    )
+  }
+
+  trackInlineObjectsInRootNode(node)
+
+  const oldNode = getNode(node.id)
+
+  // Ensure the plugin isn't creating a node type owned by another
+  // plugin. Type "ownership" is first come first served.
+  if (plugin) {
+    let pluginName = plugin.name
+
+    if (!typeOwners[node.internal.type])
+      typeOwners[node.internal.type] = pluginName
+    else if (typeOwners[node.internal.type] !== pluginName)
+      throw new Error(stripIndent`
+        The plugin "${pluginName}" created a node of a type owned by another plugin.
+
+        The node type "${node.internal.type}" is owned by "${
+        typeOwners[node.internal.type]
+      }".
+
+        If you copy and pasted code from elsewhere, you'll need to pick a new type name
+        for your new node(s).
+
+        The node object passed to "createNode":
+
+        ${JSON.stringify(node, null, 4)}
+
+        The plugin creating the node:
+
+        ${JSON.stringify(plugin, null, 4)}
+      `)
+
+    // If the node has been created in the past, check that
+    // the current plugin is the same as the previous.
+    if (oldNode && oldNode.internal.owner !== pluginName) {
+      throw new Error(
+        stripIndent`
+        Nodes can only be updated by their owner. Node "${node.id}" is
+        owned by "${oldNode.internal.owner}" and another plugin "${pluginName}"
+        tried to update it.
+
+        `
+      )
+    }
+  }
+
+  if (actionOptions.parentSpan) {
+    actionOptions.parentSpan.setTag(`nodeId`, node.id)
+    actionOptions.parentSpan.setTag(`nodeType`, node.id)
+  }
+
+  let deleteActions
+  let updateNodeAction
+  // Check if the node has already been processed.
+  if (oldNode && !hasNodeChanged(node.id, node.internal.contentDigest)) {
+    updateNodeAction = {
+      type: `TOUCH_NODE`,
+      plugin,
+      ...actionOptions,
+      payload: node.id,
+    }
+  } else {
+    // Remove any previously created descendant nodes as they're all due
+    // to be recreated.
+    if (oldNode) {
+      const createDeleteAction = node => {
+        return {
+          type: `DELETE_NODE`,
+          plugin,
+          ...actionOptions,
+          payload: node,
+        }
+      }
+      deleteActions = findChildrenRecursively(oldNode.children)
+        .map(getNode)
+        .map(createDeleteAction)
+    }
+
+    updateNodeAction = {
+      type: `CREATE_NODE`,
+      plugin,
+      oldNode,
+      ...actionOptions,
+      payload: node,
+    }
+  }
+
+  if (deleteActions && deleteActions.length) {
+    return [...deleteActions, updateNodeAction]
+  } else {
+    return updateNodeAction
+  }
+}
+
+/**
+ * "Touch" a node. Tells Gatsby a node still exists and shouldn't
+ * be garbage collected. Primarily useful for source plugins fetching
+ * nodes from a remote system that can return only nodes that have
+ * updated. The source plugin then touches all the nodes that haven't
+ * updated but still exist so Gatsby knows to keep them.
+ * @param {Object} $0
+ * @param {string} $0.nodeId The id of a node
+ * @example
+ * touchNode({ nodeId: `a-node-id` })
+ */
+actions.touchNode = (options: any, plugin?: Plugin) => {
+  let nodeId = _.get(options, `nodeId`)
+
+  // Check if using old method signature. Warn about incorrect usage
+  if (typeof options === `string`) {
+    console.warn(
+      `Calling "touchNode" with a nodeId is deprecated. Please pass an object containing a nodeId instead: touchNode({ nodeId: 'a-node-id' })`
+    )
+
+    if (plugin && plugin.name) {
+      console.log(`"touchNode" was called by ${plugin.name}`)
+    }
+
+    nodeId = options
+  }
+
+  return {
+    type: `TOUCH_NODE`,
+    plugin,
+    payload: nodeId,
+  }
+}
+
+type CreateNodeInput = {
+  node: Object,
+  fieldName?: string,
+  fieldValue?: string,
+  name?: string,
+  value: any,
+}
+/**
+ * Extend another node. The new node field is placed under the `fields`
+ * key on the extended node object.
+ *
+ * Once a plugin has claimed a field name the field name can't be used by
+ * other plugins.  Also since nodes are immutable, you can't mutate the node
+ * directly. So to extend another node, use this.
+ * @param {Object} $0
+ * @param {Object} $0.node the target node object
+ * @param {string} $0.fieldName [deprecated] the name for the field
+ * @param {string} $0.fieldValue [deprecated] the value for the field
+ * @param {string} $0.name the name for the field
+ * @param {string} $0.value the value for the field
+ * @example
+ * createNodeField({
+ *   node,
+ *   name: `happiness`,
+ *   value: `is sweet graphql queries`
+ * })
+ *
+ * // The field value is now accessible at node.fields.happiness
+ */
+actions.createNodeField = (
+  { node, name, value, fieldName, fieldValue }: CreateNodeInput,
+  plugin: Plugin,
+  actionOptions?: ActionOptions
+) => {
+  if (fieldName) {
+    console.warn(
+      `Calling "createNodeField" with "fieldName" is deprecated. Use "name" instead`
+    )
+    if (!name) {
+      name = fieldName
+    }
+  }
+  if (fieldValue) {
+    console.warn(
+      `Calling "createNodeField" with "fieldValue" is deprecated. Use "value" instead`
+    )
+    if (!value) {
+      value = fieldValue
+    }
+  }
+  // Ensure required fields are set.
+  if (!node.internal.fieldOwners) {
+    node.internal.fieldOwners = {}
+  }
+  if (!node.fields) {
+    node.fields = {}
+  }
+
+  /**
+   * Normalized name of the field that will be used in schema
+   */
+  const schemaFieldName = _.includes(name, `___NODE`)
+    ? name.split(`___`)[0]
+    : name
+
+  // Check that this field isn't owned by another plugin.
+  const fieldOwner = node.internal.fieldOwners[schemaFieldName]
+  if (fieldOwner && fieldOwner !== plugin.name) {
+    throw new Error(
+      stripIndent`
+      A plugin tried to update a node field that it doesn't own:
+
+      Node id: ${node.id}
+      Plugin: ${plugin.name}
+      name: ${name}
+      value: ${value}
+      `
+    )
+  }
+
+  // Update node
+  node.fields[name] = value
+  node.internal.fieldOwners[schemaFieldName] = plugin.name
+
+  return {
+    type: `ADD_FIELD_TO_NODE`,
+    plugin,
+    ...actionOptions,
+    payload: node,
+  }
+}
+
+/**
+ * Creates a link between a parent and child node. This is used when you
+ * transform content from a node creating a new child node. You need to add
+ * this new child node to the `children` array of the parent but since you
+ * don't have direct access to the immutable parent node, use this action
+ * instead.
+ * @param {Object} $0
+ * @param {Object} $0.parent the parent node object
+ * @param {Object} $0.child the child node object
+ * @example
+ * createParentChildLink({ parent: parentNode, child: childNode })
+ */
+actions.createParentChildLink = (
+  { parent, child }: { parent: any, child: any },
+  plugin?: Plugin
+) => {
+  // Update parent
+  parent.children.push(child.id)
+  parent.children = _.uniq(parent.children)
+
+  return {
+    type: `ADD_CHILD_NODE_TO_PARENT_NODE`,
+    plugin,
+    payload: parent,
+  }
+}
+
+/**
+ * Create a dependency between a page and data. Probably for
+ * internal use only.
+ * @param {Object} $0
+ * @param {string} $0.path the path to the page
+ * @param {string} $0.nodeId A node ID
+ * @param {string} $0.connection A connection type
+ * @private
+ */
+actions.createPageDependency = (
+  {
+    path,
+    nodeId,
+    connection,
+  }: { path: string, nodeId: string, connection: string },
+  plugin: string = ``
+) => {
+  return {
+    type: `CREATE_COMPONENT_DEPENDENCY`,
+    plugin,
+    payload: {
+      path,
+      nodeId,
+      connection,
+    },
+  }
+}
+
+/**
+ * Delete dependencies between an array of pages and data. Probably for
+ * internal use only. Used when deleting pages.
+ * @param {Array} paths the paths to delete.
+ * @private
+ */
+actions.deleteComponentsDependencies = (paths: string[]) => {
+  return {
+    type: `DELETE_COMPONENTS_DEPENDENCIES`,
+    payload: {
+      paths,
+    },
+  }
+}
+
+/**
+ * When the query watcher extracts a GraphQL query, it calls
+ * this to store the query with its component.
+ * @private
+ */
+actions.replaceComponentQuery = ({
+  query,
+  componentPath,
+}: {
+  query: string,
+  componentPath: string,
+}) => {
+  return {
+    type: `REPLACE_COMPONENT_QUERY`,
+    payload: {
+      query,
+      componentPath,
+    },
+  }
+}
+
+/**
+ * When the query watcher extracts a "static" GraphQL query from <StaticQuery>
+ * components, it calls this to store the query with its component.
+ * @private
+ */
+actions.replaceStaticQuery = (args: any, plugin?: ?Plugin = null) => {
+  return {
+    type: `REPLACE_STATIC_QUERY`,
+    plugin,
+    payload: args,
+  }
+}
+
+/**
+ * Merge additional configuration into the current webpack config. A few
+ * configurations options will be ignored if set, in order to try prevent accidental breakage.
+ * Specifically, any change to `entry`, `output`, `target`, or `resolveLoaders` will be ignored.
+ *
+ * For full control over the webpack config, use `replaceWebpackConfig()`.
+ *
+ * @param {Object} config partial webpack config, to be merged into the current one
+ */
+actions.setWebpackConfig = (config: Object, plugin?: ?Plugin = null) => {
+  return {
+    type: `SET_WEBPACK_CONFIG`,
+    plugin,
+    payload: config,
+  }
+}
+
+/**
+ * Completely replace the webpack config for the current stage. This can be
+ * dangerous and break Gatsby if certain configuration options are changed.
+ *
+ * Generally only useful for cases where you need to handle config merging logic
+ * yourself, in which case consider using `webpack-merge`.
+ *
+ * @param {Object} config complete webpack config
+ */
+actions.replaceWebpackConfig = (config: Object, plugin?: ?Plugin = null) => {
+  return {
+    type: `REPLACE_WEBPACK_CONFIG`,
+    plugin,
+    payload: config,
+  }
+}
+
+/**
+ * Set top-level Babel options. Plugins and presets will be ignored. Use
+ * setBabelPlugin and setBabelPreset for this.
+ * @param {Object} config An options object in the shape of a normal babelrc JavaScript object
+ * @example
+ * setBabelOptions({
+ *   options: {
+ *     sourceMaps: `inline`,
+ *   }
+ * })
+ */
+actions.setBabelOptions = (options: Object, plugin?: ?Plugin = null) => {
+  // Validate
+  let name = `The plugin "${plugin.name}"`
+  if (plugin.name === `default-site-plugin`) {
+    name = `Your site's "gatsby-node.js"`
+  }
+  if (!_.isObject(options)) {
+    console.log(`${name} must pass an object to "setBabelOptions"`)
+    console.log(JSON.stringify(options, null, 4))
+    if (process.env.NODE_ENV !== `test`) {
+      process.exit(1)
+    }
+  }
+
+  if (!_.isObject(options.options)) {
+    console.log(`${name} must pass options to "setBabelOptions"`)
+    console.log(JSON.stringify(options, null, 4))
+    if (process.env.NODE_ENV !== `test`) {
+      process.exit(1)
+    }
+  }
+
+  return {
+    type: `SET_BABEL_OPTIONS`,
+    plugin,
+    payload: options,
+  }
+}
+
+/**
+ * Add new plugins or merge options into existing Babel plugins.
+ * @param {Object} config A config object describing the Babel plugin to be added.
+ * @param {string} config.name The name of the Babel plugin
+ * @param {Object} config.options Options to pass to the Babel plugin.
+ * @example
+ * setBabelPlugin({
+ *   name:  `babel-plugin-emotion`,
+ *   options: {
+ *     sourceMap: true,
+ *   },
+ * })
+ */
+actions.setBabelPlugin = (config: Object, plugin?: ?Plugin = null) => {
+  // Validate
+  let name = `The plugin "${plugin.name}"`
+  if (plugin.name === `default-site-plugin`) {
+    name = `Your site's "gatsby-node.js"`
+  }
+  if (!config.name) {
+    console.log(`${name} must set the name of the Babel plugin`)
+    console.log(JSON.stringify(config, null, 4))
+    if (process.env.NODE_ENV !== `test`) {
+      process.exit(1)
+    }
+  }
+  if (!config.options) {
+    config.options = {}
+  }
+  return {
+    type: `SET_BABEL_PLUGIN`,
+    plugin,
+    payload: config,
+  }
+}
+
+/**
+ * Add new presets or merge options into existing Babel presets.
+ * @param {Object} config A config object describing the Babel plugin to be added.
+ * @param {string} config.name The name of the Babel preset.
+ * @param {Object} config.options Options to pass to the Babel preset.
+ * @example
+ * setBabelPreset({
+ *   name: `@babel/preset-react`,
+ *   options: {
+ *     pragma: `Glamor.createElement`,
+ *   },
+ * })
+ */
+actions.setBabelPreset = (config: Object, plugin?: ?Plugin = null) => {
+  // Validate
+  let name = `The plugin "${plugin.name}"`
+  if (plugin.name === `default-site-plugin`) {
+    name = `Your site's "gatsby-node.js"`
+  }
+  if (!config.name) {
+    console.log(`${name} must set the name of the Babel preset`)
+    console.log(JSON.stringify(config, null, 4))
+    if (process.env.NODE_ENV !== `test`) {
+      process.exit(1)
+    }
+  }
+  if (!config.options) {
+    config.options = {}
+  }
+  return {
+    type: `SET_BABEL_PRESET`,
+    plugin,
+    payload: config,
+  }
+}
+
+/**
+ * Create a "job". This is a long-running process that are generally
+ * started as side-effects to GraphQL queries.
+ * [`gatsby-plugin-sharp`](/packages/gatsby-plugin-sharp/) uses this for
+ * example.
+ *
+ * Gatsby doesn't finish its bootstrap until all jobs are ended.
+ * @param {Object} job A job object with at least an id set
+ * @param {id} job.id The id of the job
+ * @example
+ * createJob({ id: `write file id: 123`, fileName: `something.jpeg` })
+ */
+actions.createJob = (job: Job, plugin?: ?Plugin = null) => {
+  return {
+    type: `CREATE_JOB`,
+    plugin,
+    payload: job,
+  }
+}
+
+/**
+ * Set (update) a "job". Sometimes on really long running jobs you want
+ * to update the job as it continues.
+ *
+ * @param {Object} job A job object with at least an id set
+ * @param {id} job.id The id of the job
+ * @example
+ * setJob({ id: `write file id: 123`, progress: 50 })
+ */
+actions.setJob = (job: Job, plugin?: ?Plugin = null) => {
+  return {
+    type: `SET_JOB`,
+    plugin,
+    payload: job,
+  }
+}
+
+/**
+ * End a "job".
+ *
+ * Gatsby doesn't finish its bootstrap until all jobs are ended.
+ * @param {Object} job  A job object with at least an id set
+ * @param {id} job.id The id of the job
+ * @example
+ * endJob({ id: `write file id: 123` })
+ */
+actions.endJob = (job: Job, plugin?: ?Plugin = null) => {
+  return {
+    type: `END_JOB`,
+    plugin,
+    payload: job,
+  }
+}
+
+/**
+ * Set plugin status. A plugin can use this to save status keys e.g. the last
+ * it fetched something. These values are persisted between runs of Gatsby.
+ *
+ * @param {Object} status  An object with arbitrary values set
+ * @example
+ * setPluginStatus({ lastFetched: Date.now() })
+ */
+actions.setPluginStatus = (
+  status: { [key: string]: mixed },
+  plugin: Plugin
+) => {
+  return {
+    type: `SET_PLUGIN_STATUS`,
+    plugin,
+    payload: status,
+  }
+}
+
+/**
+ * Check if path is absolute and add pathPrefix in front if it's not
+ */
+const maybeAddPathPrefix = (path, pathPrefix) => {
+  const parsed = url.parse(path)
+  const isRelativeProtocol = path.startsWith(`//`)
+  return `${
+    parsed.protocol != null || isRelativeProtocol ? `` : pathPrefix
+  }${path}`
+}
+
+/**
+ * Create a redirect from one page to another. Server redirects don't work out
+ * of the box. You must have a plugin setup to integrate the redirect data with
+ * your hosting technology e.g. the [Netlify
+ * plugin](/packages/gatsby-plugin-netlify/), or the [Amazon S3
+ * plugin](/packages/gatsby-plugin-s3/).
+ *
+ * @param {Object} redirect Redirect data
+ * @param {string} redirect.fromPath Any valid URL. Must start with a forward slash
+ * @param {boolean} redirect.isPermanent This is a permanent redirect; defaults to temporary
+ * @param {string} redirect.toPath URL of a created page (see `createPage`)
+ * @param {boolean} redirect.redirectInBrowser Redirects are generally for redirecting legacy URLs to their new configuration. If you can't update your UI for some reason, set `redirectInBrowser` to true and Gatsby will handle redirecting in the client as well.
+ * @param {boolean} redirect.force (Plugin-specific) Will trigger the redirect even if the `fromPath` matches a piece of content. This is not part of the Gatsby API, but implemented by (some) plugins that configure hosting provider redirects
+ * @param {number} redirect.statusCode (Plugin-specific) Manually set the HTTP status code. This allows you to create a rewrite (status code 200) or custom error page (status code 404). Note that this will override the `isPermanent` option which also sets the status code. This is not part of the Gatsby API, but implemented by (some) plugins that configure hosting provider redirects
+ * @example
+ * createRedirect({ fromPath: '/old-url', toPath: '/new-url', isPermanent: true })
+ * createRedirect({ fromPath: '/url', toPath: '/zn-CH/url', Language: 'zn' })
+ * createRedirect({ fromPath: '/not_so-pretty_url', toPath: '/pretty/url', statusCode: 200 })
+ */
+actions.createRedirect = ({
+  fromPath,
+  isPermanent = false,
+  redirectInBrowser = false,
+  toPath,
+  ...rest
+}) => {
+  let pathPrefix = ``
+  if (store.getState().program.prefixPaths) {
+    pathPrefix = store.getState().config.pathPrefix
+  }
+
+  return {
+    type: `CREATE_REDIRECT`,
+    payload: {
+      fromPath: maybeAddPathPrefix(fromPath, pathPrefix),
+      isPermanent,
+      redirectInBrowser,
+      toPath: maybeAddPathPrefix(toPath, pathPrefix),
+      ...rest,
+    },
+  }
+}
+
+/**
+ * Add a third-party schema to be merged into main schema. Schema has to be a
+ * graphql-js GraphQLSchema object.
+ *
+ * This schema is going to be merged as-is. This can easily break the main
+ * Gatsby schema, so it's user's responsibility to make sure it doesn't happen
+ * (by eg namespacing the schema).
+ *
+ * @param {Object} $0
+ * @param {GraphQLSchema} $0.schema GraphQL schema to add
+ */
+actions.addThirdPartySchema = (
+  { schema }: { schema: GraphQLSchema },
+  plugin: Plugin,
+  traceId?: string
+) => {
+  return {
+    type: `ADD_THIRD_PARTY_SCHEMA`,
+    plugin,
+    traceId,
+    payload: schema,
+  }
+}
+
+import type GatsbyGraphQLType from "../schema/types/type-builders"
+/**
+ * Add type definitions to the GraphQL schema.
+ *
+ * @param {string | GraphQLOutputType | GatsbyGraphQLType | string[] | GraphQLOutputType[] | GatsbyGraphQLType[]} types Type definitions
+ *
+ * Type definitions can be provided either as
+ * [`graphql-js` types](https://graphql.org/graphql-js/), in
+ * [GraphQL schema definition language (SDL)](https://graphql.org/learn/)
+ * or using Gatsby Type Builders available on the `schema` API argument.
+ *
+ * Things to note:
+ * * needs to be called *before* schema generation. It is recommended to use
+ *   `createTypes` in the `sourceNodes` API.
+ * * type definitions targeting node types, i.e. `MarkdownRemark` and others
+ *   added in `sourceNodes` or `onCreateNode` APIs, need to implement the
+ *   `Node` interface. Interface fields will be added automatically, but it
+ *   is mandatory to label those types with `implements Node`.
+ * * by default, explicit type definitions from `createTypes` will be merged
+ *   with inferred field types, and default field resolvers for `Date` (which
+ *   adds formatting options) and `File` (which resolves the field value as
+ *   a `relativePath` foreign-key field) are added. This behavior can be
+ *   customised with `@infer` and `@dontInfer` directives, and their
+ *   `noDefaultResolvers` argument.
+ *
+ * @example
+ * exports.sourceNodes = ({ actions }) => {
+ *   const { createTypes } = actions
+ *   const typeDefs = `
+ *     """
+ *     Markdown Node
+ *     """
+ *     type MarkdownRemark implements Node {
+ *       frontmatter: Frontmatter!
+ *     }
+ *
+ *     """
+ *     Markdown Frontmatter
+ *     """
+ *     type Frontmatter {
+ *       title: String!
+ *       author: AuthorJson!
+ *       date: Date!
+ *       published: Boolean!
+ *       tags: [String!]!
+ *     }
+ *
+ *     """
+ *     Author information
+ *     """
+ *     # Does not include automatically inferred fields
+ *     type AuthorJson implements Node @dontInfer(noFieldResolvers: true) {
+ *       name: String!
+ *       birthday: Date! # no default resolvers for Date formatting added
+ *     }
+ *   `
+ *   createTypes(typeDefs)
+ * }
+ *
+ * // using Gatsby Type Builder API
+ * exports.sourceNodes = ({ actions, schema }) => {
+ *   const { createTypes } = actions
+ *   const typeDefs = [
+ *     schema.buildObjectType({
+ *       name: 'MarkdownRemark',
+ *       fields: {
+ *         frontmatter: 'Frontmatter!'
+ *       },
+ *       interfaces: ['Node'],
+ *     }),
+ *     schema.buildObjectType({
+ *       name: 'Frontmatter',
+ *       fields: {
+ *         title: {
+ *           type: 'String!',
+ *           resolve(parent) {
+ *             return parent.title || '(Untitled)'
+ *           }
+ *         },
+ *         author: 'AuthorJson!',
+ *         date: 'Date!',
+ *         published: 'Boolean!',
+ *         tags: '[String!]!',
+ *       }
+ *     })
+ *   ]
+ *   createTypes(typeDefs)
+ * }
+ */
+actions.createTypes = (
+  types:
+    | string
+    | GraphQLOutputType
+    | GatsbyGraphQLType
+    | Array<string | GraphQLOutputType | GatsbyGraphQLType>,
+  plugin: Plugin,
+  traceId?: string
+) => {
+  return {
+    type: `CREATE_TYPES`,
+    plugin,
+    traceId,
+    payload: types,
+  }
+}
+
+/**
+ *
+ * Report that a query has been extracted from a component. Used by
+ * query-compilier.js.
+ *
+ * @param {Object} $0
+ * @param {componentPath} $0.componentPath The path to the component that just had
+ * its query read.
+ * @param {query} $0.query The GraphQL query that was extracted from the component.
+ * @private
+ */
+actions.queryExtracted = (
+  { componentPath, query },
+  plugin: Plugin,
+  traceId?: string
+) => {
+  return {
+    type: `QUERY_EXTRACTED`,
+    plugin,
+    traceId,
+    payload: { componentPath, query },
+  }
+}
+
+/**
+ *
+ * Report that the Relay Compilier found a graphql error when attempting to extract a query
+ *
+ * @param {Object} $0
+ * @param {componentPath} $0.componentPath The path to the component that just had
+ * its query read.
+ * @param {error} $0.error The GraphQL query that was extracted from the component.
+ * @private
+ */
+actions.queryExtractionGraphQLError = (
+  { componentPath, error },
+  plugin: Plugin,
+  traceId?: string
+) => {
+  return {
+    type: `QUERY_EXTRACTION_GRAPHQL_ERROR`,
+    plugin,
+    traceId,
+    payload: { componentPath, error },
+  }
+}
+
+/**
+ *
+ * Report that babel was able to extract the graphql query.
+ * Indicates that the file is free of JS errors.
+ *
+ * @param {Object} $0
+ * @param {componentPath} $0.componentPath The path to the component that just had
+ * its query read.
+ * @private
+ */
+actions.queryExtractedBabelSuccess = (
+  { componentPath },
+  plugin: Plugin,
+  traceId?: string
+) => {
+  return {
+    type: `QUERY_EXTRACTION_BABEL_SUCCESS`,
+    plugin,
+    traceId,
+    payload: { componentPath },
+  }
+}
+
+/**
+ *
+ * Report that the Relay Compilier found a babel error when attempting to extract a query
+ *
+ * @param {Object} $0
+ * @param {componentPath} $0.componentPath The path to the component that just had
+ * its query read.
+ * @param {error} $0.error The Babel error object
+ * @private
+ */
+actions.queryExtractionBabelError = (
+  { componentPath, error },
+  plugin: Plugin,
+  traceId?: string
+) => {
+  return {
+    type: `QUERY_EXTRACTION_BABEL_ERROR`,
+    plugin,
+    traceId,
+    payload: { componentPath, error },
+  }
+}
+
+/**
+ * Set overall program status e.g. `BOOTSTRAPING` or `BOOTSTRAP_FINISHED`.
+ *
+ * @param {string} Program status
+ * @private
+ */
+actions.setProgramStatus = (status, plugin: Plugin, traceId?: string) => {
+  return {
+    type: `SET_PROGRAM_STATUS`,
+    plugin,
+    traceId,
+    payload: status,
+  }
+}
+
+/**
+ * Broadcast that a page's query was run.
+ *
+ * @param {string} Path to the page component that changed.
+ * @private
+ */
+actions.pageQueryRun = (
+  { path, componentPath, isPage },
+  plugin: Plugin,
+  traceId?: string
+) => {
+  return {
+    type: `PAGE_QUERY_RUN`,
+    plugin,
+    traceId,
+    payload: { path, componentPath, isPage },
+  }
+}
+
+/**
+ * All action creators wrapped with a dispatch.
+ */
+exports.actions = actions
+
+/**
+ * All action creators wrapped with a dispatch. - *DEPRECATED*
+ */
+exports.boundActionCreators = bindActionCreators(actions, store.dispatch)
diff --git a/node_modules/gatsby/src/redux/actions/add-page-dependency.js b/node_modules/gatsby/src/redux/actions/add-page-dependency.js
new file mode 100644
index 0000000..89d7245
--- /dev/null
+++ b/node_modules/gatsby/src/redux/actions/add-page-dependency.js
@@ -0,0 +1,40 @@
+const _ = require(`lodash`)
+
+const { store } = require(`../`)
+const { actions } = require(`../actions.js`)
+
+function createPageDependency({ path, nodeId, connection }) {
+  const state = store.getState()
+
+  // Check that the dependencies aren't already recorded so we
+  // can avoid creating lots of very noisy actions.
+  let nodeDependencyExists = false
+  let connectionDependencyExists = false
+  if (!nodeId) {
+    nodeDependencyExists = true
+  }
+  if (
+    nodeId &&
+    _.includes(state.componentDataDependencies.nodes[nodeId], path)
+  ) {
+    nodeDependencyExists = true
+  }
+  if (!connection) {
+    connectionDependencyExists = true
+  }
+  if (
+    connection &&
+    _.includes(state.componentDataDependencies.connections, connection)
+  ) {
+    connectionDependencyExists = true
+  }
+  if (nodeDependencyExists && connectionDependencyExists) {
+    return
+  }
+
+  // It's new, let's dispatch it
+  const action = actions.createPageDependency({ path, nodeId, connection })
+  store.dispatch(action)
+}
+
+module.exports = createPageDependency
diff --git a/node_modules/gatsby/src/redux/index.js b/node_modules/gatsby/src/redux/index.js
new file mode 100644
index 0000000..d0b02fb
--- /dev/null
+++ b/node_modules/gatsby/src/redux/index.js
@@ -0,0 +1,106 @@
+const Redux = require(`redux`)
+const _ = require(`lodash`)
+const fs = require(`fs-extra`)
+const mitt = require(`mitt`)
+const stringify = require(`json-stringify-safe`)
+
+// Create event emitter for actions
+const emitter = mitt()
+
+// Reducers
+const reducers = require(`./reducers`)
+
+const objectToMap = obj => {
+  let map = new Map()
+  Object.keys(obj).forEach(key => {
+    map.set(key, obj[key])
+  })
+  return map
+}
+
+const mapToObject = map => {
+  const obj = {}
+  for (let [key, value] of map) {
+    obj[key] = value
+  }
+  return obj
+}
+
+// Read from cache the old node data.
+let initialState = {}
+try {
+  const file = fs.readFileSync(`${process.cwd()}/.cache/redux-state.json`)
+  // Apparently the file mocking in node-tracking-test.js
+  // can override the file reading replacing the mocked string with
+  // an already parsed object.
+  if (Buffer.isBuffer(file) || typeof file === `string`) {
+    initialState = JSON.parse(file)
+  }
+  if (initialState.staticQueryComponents) {
+    initialState.staticQueryComponents = objectToMap(
+      initialState.staticQueryComponents
+    )
+  }
+  if (initialState.components) {
+    initialState.components = objectToMap(initialState.components)
+  }
+  if (initialState.nodes) {
+    initialState.nodes = objectToMap(initialState.nodes)
+
+    initialState.nodesByType = new Map()
+    initialState.nodes.forEach(node => {
+      const { type } = node.internal
+      if (!initialState.nodesByType.has(type)) {
+        initialState.nodesByType.set(type, new Map())
+      }
+      initialState.nodesByType.get(type).set(node.id, node)
+    })
+  }
+} catch (e) {
+  // ignore errors.
+}
+
+const store = Redux.createStore(
+  Redux.combineReducers({ ...reducers }),
+  initialState,
+  Redux.applyMiddleware(function multi({ dispatch }) {
+    return next => action =>
+      Array.isArray(action)
+        ? action.filter(Boolean).map(dispatch)
+        : next(action)
+  })
+)
+
+// Persist state.
+function saveState() {
+  const state = store.getState()
+  const pickedState = _.pick(state, [
+    `nodes`,
+    `status`,
+    `componentDataDependencies`,
+    `components`,
+    `staticQueryComponents`,
+    `webpackCompilationHash`,
+  ])
+
+  pickedState.staticQueryComponents = mapToObject(
+    pickedState.staticQueryComponents
+  )
+  pickedState.components = mapToObject(pickedState.components)
+  pickedState.nodes = pickedState.nodes ? mapToObject(pickedState.nodes) : []
+  const stringified = stringify(pickedState, null, 2)
+  return fs.writeFile(`${process.cwd()}/.cache/redux-state.json`, stringified)
+}
+
+exports.saveState = saveState
+
+store.subscribe(() => {
+  const lastAction = store.getState().lastAction
+  emitter.emit(lastAction.type, lastAction)
+})
+
+/** Event emitter */
+exports.emitter = emitter
+
+/** Redux store */
+exports.store = store
diff --git a/node_modules/gatsby/src/redux/machines/__tests__/page-component.js b/node_modules/gatsby/src/redux/machines/__tests__/page-component.js
new file mode 100644
index 0000000..ee826c1
--- /dev/null
+++ b/node_modules/gatsby/src/redux/machines/__tests__/page-component.js
@@ -0,0 +1,70 @@
+const { interpret } = require(`xstate`)
+const machine = require(`../page-component`)
+
+jest.mock(`../../../query/query-watcher`)
+const { runQueryForPage } = require(`../../../query/query-watcher`)
+
+const getService = (args = {}) =>
+  interpret(
+    machine.withContext({
+      componentPath: `/a/path.js`,
+      query: ``,
+      pages: [`/`],
+      isInBootstrap: true,
+      ...args,
+    })
+  ).start()
+
+const sleep = (delay = 50) => new Promise(resolve => setTimeout(resolve, delay))
+
+describe(`bootstrap`, () => {
+  beforeEach(() => {
+    runQueryForPage.mockClear()
+  })
+
+  it(`handles not running queries during bootstrap`, () => {
+    const service = getService()
+    // Initial state
+    expect(service.state.value).toEqual(`inactiveWhileBootstrapping`)
+
+    // Query extracted
+    service.send({ type: `QUERY_CHANGED`, query: `yo` })
+    expect(service.state.value).toEqual(`runningPageQueries`)
+    expect(service.state.context.query).toEqual(`yo`)
+
+    // Queries complete
+    service.send(`QUERIES_COMPLETE`)
+    expect(service.state.value).toEqual(`idle`)
+
+    // Bootstrapped finished
+    service.send(`BOOTSTRAP_FINISHED`)
+    expect(service.state.value).toEqual(`idle`)
+    expect(service.state.context.isInBootstrap).toEqual(false)
+  })
+
+  it(`won't run queries if the page component has a JS error`, () => {
+    const service = getService({ isInBootstrap: false })
+
+    service.send(`QUERY_EXTRACTION_BABEL_ERROR`)
+    expect(service.state.value).toEqual(`queryExtractionBabelError`)
+    service.send(`QUERY_CHANGED`)
+    expect(service.state.value).toEqual(`queryExtractionBabelError`)
+  })
+
+  it(`won't queue extra query when page if new page is created in bootstrap`, async () => {
+    const service = getService()
+    service.send({ type: `NEW_PAGE_CREATED`, path: `/test` })
+    // there is setTimeout in action handler for `NEW_PAGE_CREATED`
+    await sleep()
+    expect(runQueryForPage).not.toBeCalled()
+  })
+
+  it(`will queue query when page if new page is created after bootstrap`, async () => {
+    const service = getService({ isInBootstrap: false })
+    const path = `/test`
+    service.send({ type: `NEW_PAGE_CREATED`, path })
+    // there is setTimeout in action handler for `NEW_PAGE_CREATED`
+    await sleep()
+    expect(runQueryForPage).toBeCalledWith(path)
+  })
+})
diff --git a/node_modules/gatsby/src/redux/machines/page-component.js b/node_modules/gatsby/src/redux/machines/page-component.js
new file mode 100644
index 0000000..6e00b36
--- /dev/null
+++ b/node_modules/gatsby/src/redux/machines/page-component.js
@@ -0,0 +1,124 @@
+const {
+  Machine,
+  actions: { assign },
+} = require(`xstate`)
+
+module.exports = Machine(
+  {
+    id: `pageComponents`,
+    initial: `inactive`,
+    context: {
+      isInBootstrap: true,
+      componentPath: ``,
+      query: ``,
+    },
+    on: {
+      BOOTSTRAP_FINISHED: {
+        actions: `setBootstrapFinished`,
+      },
+      DELETE_PAGE: {
+        actions: `deletePage`,
+      },
+      NEW_PAGE_CREATED: {
+        actions: `setPage`,
+      },
+      QUERY_EXTRACTION_GRAPHQL_ERROR: `queryExtractionGraphQLError`,
+      QUERY_EXTRACTION_BABEL_ERROR: `queryExtractionBabelError`,
+    },
+    states: {
+      inactive: {
+        on: {
+          // Transient transition
+          // Will transition to either 'inactiveWhileBootstrapping' or idle
+          // immediately upon entering 'inactive' state if the condition is met.
+          "": [
+            { target: `inactiveWhileBootstrapping`, cond: `isBootstrapping` },
+            { target: `idle`, cond: `isNotBootstrapping` },
+          ],
+        },
+      },
+      inactiveWhileBootstrapping: {
+        on: {
+          BOOTSTRAP_FINISHED: {
+            target: `idle`,
+            actions: `setBootstrapFinished`,
+          },
+          QUERY_CHANGED: `runningPageQueries`,
+        },
+      },
+      queryExtractionGraphQLError: {
+        on: {
+          QUERY_DID_NOT_CHANGE: `idle`,
+          QUERY_CHANGED: `runningPageQueries`,
+        },
+      },
+      queryExtractionBabelError: {
+        on: {
+          QUERY_EXTRACTION_BABEL_SUCCESS: `idle`,
+        },
+      },
+      runningPageQueries: {
+        onEntry: [`setQuery`, `runPageComponentQueries`],
+        on: {
+          QUERIES_COMPLETE: `idle`,
+        },
+      },
+      idle: {
+        on: {
+          QUERY_CHANGED: `runningPageQueries`,
+        },
+      },
+    },
+  },
+  {
+    guards: {
+      isBootstrapping: context => context.isInBootstrap,
+      isNotBootstrapping: context => !context.isInBootstrap,
+    },
+    actions: {
+      runPageComponentQueries: (context, event) => {
+        const {
+          queueQueriesForPageComponent,
+        } = require(`../../query/query-watcher`)
+        // Wait a bit as calling this function immediately triggers
+        // an Action call which Redux squawks about.
+        setTimeout(() => {
+          queueQueriesForPageComponent(context.componentPath)
+        }, 0)
+      },
+      setQuery: assign({
+        query: (ctx, event) => {
+          if (typeof event.query !== `undefined` || event.query !== null) {
+            return event.query
+          } else {
+            return ctx.query
+          }
+        },
+      }),
+      setPage: assign({
+        pages: (ctx, event) => {
+          if (event.path) {
+            const { runQueryForPage } = require(`../../query/query-watcher`)
+            // Wait a bit as calling this function immediately triggers
+            // an Action call which Redux squawks about.
+            setTimeout(() => {
+              if (!ctx.isInBootstrap) {
+                runQueryForPage(event.path)
+              }
+            }, 0)
+
+            return ctx.pages.concat(event.path)
+          } else {
+            return ctx.pages
+          }
+        },
+      }),
+      deletePage: assign({
+        pages: (ctx, event) => ctx.pages.filter(p => p !== event.page.path),
+      }),
+      setBootstrapFinished: assign({
+        isInBootstrap: false,
+      }),
+    },
+  }
+)
diff --git a/node_modules/gatsby/src/redux/nodes.js b/node_modules/gatsby/src/redux/nodes.js
new file mode 100644
index 0000000..e53da40
--- /dev/null
+++ b/node_modules/gatsby/src/redux/nodes.js
@@ -0,0 +1,84 @@
+/* @flow */
+
+const { store } = require(`./index`)
+
+/**
+ * Get all nodes from redux store.
+ *
+ * @returns {Array}
+ */
+const getNodes = () => {
+  const nodes = store.getState().nodes
+  if (nodes) {
+    return Array.from(nodes.values())
+  } else {
+    return []
+  }
+}
+
+exports.getNodes = getNodes
+
+/** Get node by id from store.
+ *
+ * @param {string} id
+ * @returns {Object}
+ */
+const getNode = id => store.getState().nodes.get(id)
+
+exports.getNode = getNode
+
+/**
+ * Get all nodes of type from redux store.
+ *
+ * @param {string} type
+ * @returns {Array}
+ */
+const getNodesByType = type => {
+  const nodes = store.getState().nodesByType.get(type)
+  if (nodes) {
+    return Array.from(nodes.values())
+  } else {
+    return []
+  }
+}
+
+exports.getNodesByType = getNodesByType
+
+/**
+ * Get all type names from redux store.
+ *
+ * @returns {Array}
+ */
+const getTypes = () => Array.from(store.getState().nodesByType.keys())
+
+exports.getTypes = getTypes
+
+/**
+ * Determine if node has changed.
+ *
+ * @param {string} id
+ * @param {string} digest
+ * @returns {boolean}
+ */
+exports.hasNodeChanged = (id, digest) => {
+  const node = store.getState().nodes.get(id)
+  if (!node) {
+    return true
+  } else {
+    return node.internal.contentDigest !== digest
+  }
+}
+
+/**
+ * Get node and save path dependency.
+ *
+ * @param {string} id
+ * @param {string} path
+ * @returns {Object} node
+ */
+exports.getNodeAndSavePathDependency = (id, path) => {
+  const createPageDependency = require(`./actions/add-page-dependency`)
+  const node = getNode(id)
+  createPageDependency({ path, nodeId: id })
+  return node
+}
diff --git a/node_modules/gatsby/src/redux/plugin-runner.js b/node_modules/gatsby/src/redux/plugin-runner.js
new file mode 100644
index 0000000..fb19f43
--- /dev/null
+++ b/node_modules/gatsby/src/redux/plugin-runner.js
@@ -0,0 +1,25 @@
+// Invoke plugins for certain actions.
+
+const { emitter } = require(`./index`)
+const { getNode } = require(`../db/nodes`)
+const apiRunnerNode = require(`../utils/api-runner-node`)
+
+emitter.on(`CREATE_NODE`, action => {
+  const node = getNode(action.payload.id)
+  const traceTags = { nodeId: node.id, nodeType: node.internal.type }
+  apiRunnerNode(`onCreateNode`, {
+    node,
+    traceId: action.traceId,
+    parentSpan: action.parentSpan,
+    traceTags,
+  })
+})
+
+emitter.on(`CREATE_PAGE`, action => {
+  const page = action.payload
+  apiRunnerNode(
+    `onCreatePage`,
+    { page, traceId: action.traceId, parentSpan: action.parentSpan },
+    action.plugin.name
+  )
+})
diff --git a/node_modules/gatsby/src/redux/prepare-nodes.js b/node_modules/gatsby/src/redux/prepare-nodes.js
new file mode 100644
index 0000000..81451c2
--- /dev/null
+++ b/node_modules/gatsby/src/redux/prepare-nodes.js
@@ -0,0 +1,129 @@
+const _ = require(`lodash`)
+const { trackInlineObjectsInRootNode } = require(`../db/node-tracking`)
+const { store } = require(`../redux`)
+const { getNullableType, getNamedType } = require(`graphql`)
+const withResolverContext = require(`../schema/context`)
+
+const enhancedNodeCache = new Map()
+const enhancedNodePromiseCache = new Map()
+const enhancedNodeCacheId = ({ node, args }) =>
+  node && node.internal && node.internal.contentDigest
+    ? JSON.stringify({
+        nodeid: node.id,
+        digest: node.internal.contentDigest,
+        ...args,
+      })
+    : null
+
+/////////////////////////////////////////////////////////////////////
+// Resolve nodes
+/////////////////////////////////////////////////////////////////////
+
+function awaitSiftField(fields, node, k) {
+  const field = fields[k]
+  if (field.resolve) {
+    const { schema } = store.getState()
+    return field.resolve(node, {}, withResolverContext({}, schema), {
+      fieldName: k,
+      schema,
+      returnType: field.type,
+    })
+  } else if (node[k] !== undefined) {
+    return node[k]
+  }
+
+  return undefined
+}
+
+// Resolves every field used in the node.
+function resolveRecursive(node, siftFieldsObj, gqFields) {
+  return Promise.all(
+    _.keys(siftFieldsObj).map(k =>
+      Promise.resolve(awaitSiftField(gqFields, node, k))
+        .then(v => {
+          const innerSift = siftFieldsObj[k]
+          const innerGqConfig = gqFields[k]
+
+          const innerType = getNullableType(innerGqConfig.type)
+          const innerListType = getNamedType(innerType)
+          if (_.isObject(innerSift) && v != null && innerType) {
+            if (_.isFunction(innerType.getFields)) {
+              // this is single object
+              return resolveRecursive(v, innerSift, innerType.getFields())
+            } else if (_.isArray(v) && _.isFunction(innerListType.getFields)) {
+              // this is array
+              return Promise.all(
+                v.map(item =>
+                  resolveRecursive(item, innerSift, innerListType.getFields())
+                )
+              )
+            }
+          }
+
+          return v
+        })
+        .then(v => [k, v])
+    )
+  ).then(resolvedFields => {
+    const myNode = {
+      ...node,
+    }
+    resolvedFields.forEach(([k, v]) => (myNode[k] = v))
+    return myNode
+  })
+}
+
+function resolveNodes(nodes, typeName, firstOnly, fieldsToSift, gqlFields) {
+  const { resolvedNodesCache } = store.getState()
+  const nodesCacheKey = JSON.stringify({
+    // typeName + count being the same is a pretty good
+    // indication that the nodes are the same.
+    typeName,
+    firstOnly,
+    nodesLength: nodes.length,
+    ...fieldsToSift,
+  })
+  if (resolvedNodesCache.has(nodesCacheKey)) {
+    return Promise.resolve(resolvedNodesCache.get(nodesCacheKey))
+  } else {
+    return Promise.all(
+      nodes.map(node => {
+        const cacheKey = enhancedNodeCacheId({
+          node,
+          args: fieldsToSift,
+        })
+        if (cacheKey && enhancedNodeCache.has(cacheKey)) {
+          return Promise.resolve(enhancedNodeCache.get(cacheKey))
+        } else if (cacheKey && enhancedNodePromiseCache.has(cacheKey)) {
+          return enhancedNodePromiseCache.get(cacheKey)
+        }
+
+        const enhancedNodeGenerationPromise = new Promise(resolve => {
+          resolveRecursive(node, fieldsToSift, gqlFields).then(resolvedNode => {
+            trackInlineObjectsInRootNode(resolvedNode)
+            if (cacheKey) {
+              enhancedNodeCache.set(cacheKey, resolvedNode)
+            }
+            resolve(resolvedNode)
+          })
+        })
+        enhancedNodePromiseCache.set(cacheKey, enhancedNodeGenerationPromise)
+        return enhancedNodeGenerationPromise
+      })
+    ).then(resolvedNodes => {
+      store.dispatch({
+        type: `SET_RESOLVED_NODES`,
+        payload: {
+          key: nodesCacheKey,
+          nodes: resolvedNodes,
+        },
+      })
+      return resolvedNodes
+    })
+  }
+}
+
+module.exports = {
+  resolveNodes,
+  resolveRecursive,
+}
diff --git a/node_modules/gatsby/src/redux/reducers/__tests__/__snapshots__/config.js.snap b/node_modules/gatsby/src/redux/reducers/__tests__/__snapshots__/config.js.snap
new file mode 100644
index 0000000..ab1611e
--- /dev/null
+++ b/node_modules/gatsby/src/redux/reducers/__tests__/__snapshots__/config.js.snap
@@ -0,0 +1,20 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`config reducer Validates configs with unsupported options 1`] = `"The site's gatsby-config.js failed validation"`;
+
+exports[`config reducer handles empty configs 1`] = `
+Object {
+  "pathPrefix": "",
+  "polyfill": true,
+}
+`;
+
+exports[`config reducer let's you add a config 1`] = `
+Object {
+  "pathPrefix": "",
+  "polyfill": true,
+  "siteMetadata": Object {
+    "hi": true,
+  },
+}
+`;
diff --git a/node_modules/gatsby/src/redux/reducers/__tests__/__snapshots__/page-data-dependencies.js.snap b/node_modules/gatsby/src/redux/reducers/__tests__/__snapshots__/page-data-dependencies.js.snap
new file mode 100644
index 0000000..8697108
--- /dev/null
+++ b/node_modules/gatsby/src/redux/reducers/__tests__/__snapshots__/page-data-dependencies.js.snap
@@ -0,0 +1,16 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`add page data dependency lets you add both a node and connection in one action 1`] = `
+Object {
+  "connections": Object {
+    "MarkdownRemark": Array [
+      "/hi/",
+    ],
+  },
+  "nodes": Object {
+    "SuperCoolNode": Array [
+      "/hi/",
+    ],
+  },
+}
+`;
diff --git a/node_modules/gatsby/src/redux/reducers/__tests__/config.js b/node_modules/gatsby/src/redux/reducers/__tests__/config.js
new file mode 100644
index 0000000..f192648
--- /dev/null
+++ b/node_modules/gatsby/src/redux/reducers/__tests__/config.js
@@ -0,0 +1,77 @@
+const reducer = require(`../config`)
+
+describe(`config reducer`, () => {
+  it(`let's you add a config`, () => {
+    const action = {
+      type: `SET_SITE_CONFIG`,
+      payload: {
+        siteMetadata: {
+          hi: true,
+        },
+      },
+    }
+    expect(reducer(undefined, action)).toMatchSnapshot()
+  })
+
+  it(`handles empty configs`, () => {
+    const action = {
+      type: `SET_SITE_CONFIG`,
+    }
+    expect(reducer(undefined, action)).toMatchSnapshot()
+  })
+
+  it(`Validates configs with unsupported options`, () => {
+    const config = {
+      someRandomThing: `hi people`,
+      plugins: [],
+    }
+    function runReducer() {
+      return reducer(
+        {},
+        {
+          type: `SET_SITE_CONFIG`,
+          payload: config,
+        }
+      )
+    }
+    expect(runReducer).toThrowErrorMatchingSnapshot()
+  })
+
+  it(`It corrects pathPrefixes without a forward slash at beginning`, () => {
+    const action = {
+      type: `SET_SITE_CONFIG`,
+      payload: {
+        pathPrefix: `prefix`,
+      },
+    }
+    expect(reducer(undefined, action).pathPrefix).toBe(`/prefix`)
+  })
+
+  it(`It removes trailing forward slash`, () => {
+    const action = {
+      type: `SET_SITE_CONFIG`,
+      payload: {
+        pathPrefix: `/prefix/`,
+      },
+    }
+    expect(reducer(undefined, action).pathPrefix).toBe(`/prefix`)
+  })
+
+  it(`It removes pathPrefixes that are a single forward slash`, () => {
+    const action = {
+      type: `SET_SITE_CONFIG`,
+      payload: {
+        pathPrefix: `/`,
+      },
+    }
+    expect(reducer(undefined, action).pathPrefix).toBe(``)
+  })
+
+  it(`It sets the pathPrefix to an empty string if it's not set`, () => {
+    const action = {
+      type: `SET_SITE_CONFIG`,
+      payload: {},
+    }
+    expect(reducer(undefined, action).pathPrefix).toBe(``)
+  })
+})
diff --git a/node_modules/gatsby/src/redux/reducers/__tests__/page-data-dependencies.js b/node_modules/gatsby/src/redux/reducers/__tests__/page-data-dependencies.js
new file mode 100644
index 0000000..858324b
--- /dev/null
+++ b/node_modules/gatsby/src/redux/reducers/__tests__/page-data-dependencies.js
@@ -0,0 +1,175 @@
+const reducer = require(`../component-data-dependencies`)
+
+describe(`add page data dependency`, () => {
+  it(`lets you add a node dependency`, () => {
+    const action = {
+      type: `CREATE_COMPONENT_DEPENDENCY`,
+      payload: {
+        path: `/hi/`,
+        nodeId: `123`,
+      },
+    }
+
+    expect(reducer(undefined, action)).toEqual({
+      connections: {},
+      nodes: {
+        "123": [`/hi/`],
+      },
+    })
+  })
+  it(`lets you add a node dependency to multiple paths`, () => {
+    const action = {
+      type: `CREATE_COMPONENT_DEPENDENCY`,
+      payload: {
+        path: `/hi/`,
+        nodeId: `1.2.3`,
+      },
+    }
+    const action2 = {
+      type: `CREATE_COMPONENT_DEPENDENCY`,
+      payload: {
+        path: `/hi2/`,
+        nodeId: `1.2.3`,
+      },
+    }
+    const action3 = {
+      type: `CREATE_COMPONENT_DEPENDENCY`,
+      payload: {
+        path: `/blog/`,
+        nodeId: `1.2.3`,
+      },
+    }
+
+    let state = reducer(undefined, action)
+    state = reducer(state, action2)
+    state = reducer(state, action3)
+
+    expect(state).toEqual({
+      connections: {},
+      nodes: {
+        "1.2.3": [`/hi/`, `/hi2/`, `/blog/`],
+      },
+    })
+  })
+  it(`lets you add a connection dependency`, () => {
+    const action = {
+      type: `CREATE_COMPONENT_DEPENDENCY`,
+      payload: {
+        path: `/hi/`,
+        connection: `Markdown.Remark`,
+      },
+    }
+    const action2 = {
+      type: `CREATE_COMPONENT_DEPENDENCY`,
+      payload: {
+        path: `/hi2/`,
+        connection: `Markdown.Remark`,
+      },
+    }
+
+    let state = reducer(undefined, action)
+    state = reducer(state, action2)
+
+    expect(state).toEqual({
+      connections: {
+        "Markdown.Remark": [`/hi/`, `/hi2/`],
+      },
+      nodes: {},
+    })
+  })
+  it(`removes duplicate paths`, () => {
+    const action = {
+      type: `CREATE_COMPONENT_DEPENDENCY`,
+      payload: {
+        path: `/hi/`,
+        nodeId: 1,
+        connection: `MarkdownRemark`,
+      },
+    }
+    const action2 = {
+      type: `CREATE_COMPONENT_DEPENDENCY`,
+      payload: {
+        path: `/hi2/`,
+        nodeId: 1,
+        connection: `MarkdownRemark`,
+      },
+    }
+
+    let state = reducer(undefined, action)
+    // Do it again
+    state = reducer(state, action)
+    // Add different action
+    state = reducer(state, action2)
+
+    expect(state.connections[`MarkdownRemark`].length).toEqual(2)
+    expect(state.nodes[1].length).toEqual(2)
+  })
+  it(`lets you add both a node and connection in one action`, () => {
+    const action = {
+      type: `CREATE_COMPONENT_DEPENDENCY`,
+      payload: {
+        path: `/hi/`,
+        connection: `MarkdownRemark`,
+        nodeId: `SuperCoolNode`,
+      },
+    }
+
+    let state = reducer(undefined, action)
+
+    expect(state).toMatchSnapshot()
+  })
+  // it(`removes node/page connections when the node is deleted`, () => {
+  // const action = {
+  // type: `CREATE_COMPONENT_DEPENDENCY`,
+  // payload: {
+  // path: `/hi/`,
+  // nodeId: `123`,
+  // },
+  // }
+
+  // let state = reducer(undefined, action)
+
+  // const deleteNodeAction = {
+  // type: `DELETE_NODE`,
+  // payload: 123,
+  // }
+
+  // state = reducer(state, deleteNodeAction)
+
+  // expect(state).toEqual({
+  // connections: {},
+  // nodes: {},
+  // })
+  // })
+  // it(`removes node/page connections when multiple nodes are deleted`, () => {
+  // const action = {
+  // type: `CREATE_COMPONENT_DEPENDENCY`,
+  // payload: {
+  // path: `/hi/`,
+  // nodeId: `123`,
+  // },
+  // }
+  // const action2 = {
+  // type: `CREATE_COMPONENT_DEPENDENCY`,
+  // payload: {
+  // path: `/hi2/`,
+  // nodeId: `1234`,
+  // },
+  // }
+
+  // let state = reducer(undefined, action)
+  // state = reducer(state, action2)
+
+  // const deleteNodeAction = {
+  // type: `DELETE_NODES`,
+  // payload: [123, 1234],
+  // }
+
+  // state = reducer(state, deleteNodeAction)
+
+  // expect(state).toEqual({
+  // connections: {},
+  // nodes: {},
+  // })
+  // })
+})
diff --git a/node_modules/gatsby/src/redux/reducers/__tests__/redirects.js b/node_modules/gatsby/src/redux/reducers/__tests__/redirects.js
new file mode 100644
index 0000000..0c6e05a
--- /dev/null
+++ b/node_modules/gatsby/src/redux/reducers/__tests__/redirects.js
@@ -0,0 +1,69 @@
+const reducer = require(`../redirects`)
+
+describe(`redirects`, () => {
+  it(`lets you redirect to an internal url`, () => {
+    const action = {
+      type: `CREATE_REDIRECT`,
+      payload: {
+        fromPath: `/page1`,
+        toPath: `/page1/`,
+      },
+    }
+
+    let state = reducer(undefined, action)
+
+    expect(state).toEqual([
+      {
+        fromPath: `/page1`,
+        toPath: `/page1/`,
+      },
+    ])
+  })
+
+  it(`lets you redirect to an external url`, () => {
+    const action = {
+      type: `CREATE_REDIRECT`,
+      payload: {
+        fromPath: `/page1`,
+        toPath: `https://example.com`,
+      },
+    }
+
+    let state = reducer(undefined, action)
+
+    expect(state).toEqual([
+      {
+        fromPath: `/page1`,
+        toPath: `https://example.com`,
+      },
+    ])
+  })
+
+  const protocolArr = [
+    [`https`, `https://example.com`],
+    [`http`, `http://example.com`],
+    [`//`, `//example.com`],
+    [`ftp`, `ftp://example.com`],
+    [`mailto`, `mailto:example@email.com`],
+  ]
+
+  protocolArr.forEach(([protocol, toPath], index) => {
+    it(`lets you redirect using ${protocol}`, () => {
+      const fromPath = `/page${index}`
+      const action = {
+        type: `CREATE_REDIRECT`,
+        payload: {
+          fromPath,
+          toPath,
+        },
+      }
+
+      expect(reducer(undefined, action)).toEqual([
+        {
+          fromPath,
+          toPath,
+        },
+      ])
+    })
+  })
+})
diff --git a/node_modules/gatsby/src/redux/reducers/babelrc.js b/node_modules/gatsby/src/redux/reducers/babelrc.js
new file mode 100644
index 0000000..2f83cf1
--- /dev/null
+++ b/node_modules/gatsby/src/redux/reducers/babelrc.js
@@ -0,0 +1,114 @@
+const _ = require(`lodash`)
+
+module.exports = (
+  state = {
+    stages: {
+      develop: {
+        plugins: [],
+        presets: [],
+        options: {
+          cacheDirectory: true,
+          sourceType: `unambiguous`,
+        },
+      },
+      "develop-html": {
+        plugins: [],
+        presets: [],
+        options: {
+          cacheDirectory: true,
+          sourceType: `unambiguous`,
+        },
+      },
+      "build-html": {
+        plugins: [],
+        presets: [],
+        options: {
+          cacheDirectory: true,
+          sourceType: `unambiguous`,
+        },
+      },
+      "build-javascript": {
+        plugins: [],
+        presets: [],
+        options: {
+          cacheDirectory: true,
+          sourceType: `unambiguous`,
+        },
+      },
+    },
+  },
+  action
+) => {
+  switch (action.type) {
+    case `SET_BABEL_PLUGIN`: {
+      Object.keys(state.stages).forEach(stage => {
+        if (action.payload.stage && action.payload.stage !== stage) {
+          return
+        }
+
+        const index = _.findIndex(
+          state.stages[stage].plugins,
+          p => p.name === action.payload.name
+        )
+        // If the plugin already exists, merge the options.
+        // Otherwise, add it to the end.
+        if (index !== -1) {
+          const plugin = state.stages[stage].plugins[index]
+          state.stages[stage].plugins[index] = {
+            name: plugin.name,
+            options: _.merge(plugin.options, action.payload.options),
+          }
+        } else {
+          state.stages[stage].plugins = [
+            ...state.stages[stage].plugins,
+            action.payload,
+          ]
+        }
+      })
+
+      return state
+    }
+    case `SET_BABEL_PRESET`: {
+      Object.keys(state.stages).forEach(stage => {
+        if (action.payload.stage && action.payload.stage !== stage) {
+          return
+        }
+
+        const index = _.findIndex(
+          state.stages[stage].presets,
+          p => p.name === action.payload.name
+        )
+        // If the plugin already exists, merge the options.
+        // Otherwise, add it to the end.
+        if (index !== -1) {
+          const plugin = state.stages[stage].presets[index]
+          state.stages[stage].presets[index] = {
+            name: plugin.name,
+            options: _.merge(plugin.options, action.payload.options),
+          }
+        } else {
+          state.stages[stage].presets = [
+            ...state.stages[stage].presets,
+            action.payload,
+          ]
+        }
+      })
+      return state
+    }
+    case `SET_BABEL_OPTIONS`: {
+      Object.keys(state.stages).forEach(stage => {
+        if (action.payload.stage && action.payload.stage !== stage) {
+          return
+        }
+
+        state.stages[stage].options = {
+          ...state.stages[stage].options,
+          ...action.payload.options,
+        }
+      })
+      return state
+    }
+  }
+
+  return state
+}
diff --git a/node_modules/gatsby/src/redux/reducers/component-data-dependencies.js b/node_modules/gatsby/src/redux/reducers/component-data-dependencies.js
new file mode 100644
index 0000000..b11b979
--- /dev/null
+++ b/node_modules/gatsby/src/redux/reducers/component-data-dependencies.js
@@ -0,0 +1,60 @@
+const _ = require(`lodash`)
+
+module.exports = (state = { nodes: {}, connections: {} }, action) => {
+  switch (action.type) {
+    case `DELETE_CACHE`:
+      return { nodes: {}, connections: {} }
+    case `CREATE_COMPONENT_DEPENDENCY`:
+      if (action.payload.path === ``) {
+        return state
+      }
+
+      // If this nodeId not set yet.
+      if (action.payload.nodeId) {
+        let existingPaths = []
+        if (state.nodes[action.payload.nodeId]) {
+          existingPaths = state.nodes[action.payload.nodeId]
+        }
+        const newPaths = _.uniq(
+          existingPaths.concat(action.payload.path || action.payload.id)
+        )
+        state.nodes[action.payload.nodeId] = newPaths
+      }
+
+      // If this connection not set yet.
+      if (action.payload.connection) {
+        let existingPaths = []
+        if (state.connections[action.payload.connection]) {
+          existingPaths = state.connections[action.payload.connection]
+        }
+        const newPaths = _.uniq(
+          existingPaths.concat(action.payload.path || action.payload.id)
+        )
+        state.connections[action.payload.connection] = newPaths
+      }
+
+      return state
+    case `DELETE_COMPONENTS_DEPENDENCIES`:
+      state.nodes = _.mapValues(state.nodes, paths =>
+        _.difference(paths, action.payload.paths)
+      )
+      state.connections = _.mapValues(state.connections, paths =>
+        _.difference(paths, action.payload.paths)
+      )
+
+      return state
+    // Don't delete data dependencies as we're now deleting transformed nodes
+    // when their parent is changed. WIth the code below as stands, this
+    // would delete the connection between the page and the transformed
+    // node which will be recreated after its deleted meaning the query
+    // won't be re-run.
+    // case `DELETE_NODE`:
+    // delete state.nodes[action.payload]
+    // return state
+    // case `DELETE_NODES`:
+    // action.payload.forEach(n => delete state.nodes[n])
+    // return state
+    default:
+      return state
+  }
+}
diff --git a/node_modules/gatsby/src/redux/reducers/components.js b/node_modules/gatsby/src/redux/reducers/components.js
new file mode 100644
index 0000000..fbbccc3
--- /dev/null
+++ b/node_modules/gatsby/src/redux/reducers/components.js
@@ -0,0 +1,124 @@
+const normalize = require(`normalize-path`)
+const { interpret } = require(`xstate`)
+
+const componentMachine = require(`../machines/page-component`)
+
+const services = new Map()
+let programStatus = `BOOTSTRAPPING`
+
+module.exports = (state = new Map(), action) => {
+  switch (action.type) {
+    case `DELETE_CACHE`:
+      return new Map()
+    case `SET_PROGRAM_STATUS`:
+      programStatus = action.payload
+      if (programStatus === `BOOTSTRAP_QUERY_RUNNING_FINISHED`) {
+        services.forEach(s => s.send(`BOOTSTRAP_FINISHED`))
+      }
+      return state
+    case `CREATE_PAGE`: {
+      action.payload.componentPath = normalize(action.payload.component)
+      // Create XState service.
+      let service
+      if (!services.has(action.payload.componentPath)) {
+        const machine = componentMachine.withContext({
+          componentPath: action.payload.componentPath,
+          query: state.get(action.payload.componentPath)?.query || ``,
+          pages: [action.payload.path],
+          isInBootstrap: programStatus === `BOOTSTRAPPING`,
+        })
+        service = interpret(machine).start()
+        // .onTransition(nextState => {
+        // console.log(
+        // `component machine value`,
+        // _.pick(nextState, [`value`, `context`, `event`])
+        // )
+        // })
+        // .start()
+        services.set(action.payload.componentPath, service)
+      } else {
+        service = services.get(action.payload.componentPath)
+        if (!service.state.context.pages.includes(action.payload.path)) {
+          service.send({ type: `NEW_PAGE_CREATED`, path: action.payload.path })
+        }
+      }
+
+      state.set(
+        action.payload.componentPath,
+        Object.assign(
+          {
+            query: ``,
+          },
+          service.state.context
+        )
+      )
+      return state
+    }
+    case `QUERY_EXTRACTED`: {
+      action.payload.componentPath = normalize(action.payload.componentPath)
+      const service = services.get(action.payload.componentPath)
+
+      if (service.state.value === `queryExtractionBabelError`) {
+        // Do nothing until the babel error is fixed.
+        return state
+      }
+
+      // Check if the query has changed or not.
+      if (service.state.context.query === action.payload.query) {
+        service.send(`QUERY_DID_NOT_CHANGE`)
+      } else {
+        service.send({
+          type: `QUERY_CHANGED`,
+          query: action.payload.query,
+        })
+      }
+
+      state.set(action.payload.componentPath, {
+        ...service.state.context,
+      })
+      return state
+    }
+    case `QUERY_EXTRACTION_BABEL_SUCCESS`:
+    case `QUERY_EXTRACTION_BABEL_ERROR`:
+    case `QUERY_EXTRACTION_GRAPHQL_ERROR`: {
+      action.payload.componentPath = normalize(action.payload.componentPath)
+      const service = services.get(action.payload.componentPath)
+      if (service) {
+        service.send({
+          type: action.type,
+          ...action.payload,
+        })
+      }
+      return state
+    }
+    case `PAGE_QUERY_RUN`: {
+      if (action.payload.isPage) {
+        action.payload.componentPath = normalize(action.payload.componentPath)
+        const service = services.get(action.payload.componentPath)
+        // TODO we want to keep track of whether there's any outstanding queries still
+        // running as this will mark queries as complete immediately even though
+        // a page component could have thousands of pages will processing.
+        // This can be done once we start modeling Pages as well.
+        service.send({
+          type: `QUERIES_COMPLETE`,
+        })
+      }
+      return state
+    }
+    case `REMOVE_TEMPLATE_COMPONENT`: {
+      action.payload.componentPath = normalize(action.payload.componentPath)
+      state.delete(action.payload.componentPath)
+      return state
+    }
+    case `DELETE_PAGE`: {
+      const service = services.get(normalize(action.payload.component))
+      service.send({
+        type: `DELETE_PAGE`,
+        page: action.payload,
+      })
+      return state
+    }
+  }
+
+  return state
+}
diff --git a/node_modules/gatsby/src/redux/reducers/config.js b/node_modules/gatsby/src/redux/reducers/config.js
new file mode 100644
index 0000000..58b065b
--- /dev/null
+++ b/node_modules/gatsby/src/redux/reducers/config.js
@@ -0,0 +1,55 @@
+const Joi = require(`joi`)
+const chalk = require(`chalk`)
+const _ = require(`lodash`)
+
+const { gatsbyConfigSchema } = require(`../../joi-schemas/joi`)
+
+module.exports = (state = {}, action) => {
+  switch (action.type) {
+    case `SET_SITE_CONFIG`: {
+      // Validate the config.
+      const result = Joi.validate(action.payload, gatsbyConfigSchema)
+      // TODO use Redux for capturing errors from different
+      // parts of Gatsby so a) can capture richer errors and b) be
+      // more flexible how to display them.
+      if (result.error) {
+        console.log(
+          chalk.blue.bgYellow(`The site's gatsby-config.js failed validation`)
+        )
+        console.log(chalk.bold.red(result.error))
+        if (action.payload.linkPrefix) {
+          console.log(`"linkPrefix" should be changed to "pathPrefix"`)
+        }
+        throw new Error(`The site's gatsby-config.js failed validation`)
+      }
+
+      // Ensure that the pathPrefix (if set) starts with a forward slash
+      // and doesn't end with a slash.
+      if (action.payload && action.payload.pathPrefix) {
+        if (!_.startsWith(action.payload.pathPrefix, `/`)) {
+          action.payload.pathPrefix = `/${action.payload.pathPrefix}`
+        }
+        if (_.endsWith(action.payload.pathPrefix, `/`)) {
+          action.payload.pathPrefix = action.payload.pathPrefix.slice(0, -1)
+        }
+      }
+
+      // If pathPrefix isn't set, set it to an empty string
+      // to avoid it showing up as undefined elsewhere.
+      if (!_.has(action, [`payload`, `pathPrefix`])) {
+        action = _.set(action, [`payload`, `pathPrefix`], ``)
+      }
+
+      // Default polyfill to true.
+      if (!_.has(action, [`payload`, `polyfill`])) {
+        action = _.set(action, [`payload`, `polyfill`], true)
+      }
+
+      return {
+        ...action.payload,
+      }
+    }
+    default:
+      return state
+  }
+}
diff --git a/node_modules/gatsby/src/redux/reducers/flattened-plugins.js b/node_modules/gatsby/src/redux/reducers/flattened-plugins.js
new file mode 100644
index 0000000..7667988
--- /dev/null
+++ b/node_modules/gatsby/src/redux/reducers/flattened-plugins.js
@@ -0,0 +1,8 @@
+module.exports = (state = [], action) => {
+  switch (action.type) {
+    case `SET_SITE_FLATTENED_PLUGINS`:
+      return [...action.payload]
+    default:
+      return state
+  }
+}
diff --git a/node_modules/gatsby/src/redux/reducers/index.js b/node_modules/gatsby/src/redux/reducers/index.js
new file mode 100644
index 0000000..93a4f21
--- /dev/null
+++ b/node_modules/gatsby/src/redux/reducers/index.js
@@ -0,0 +1,46 @@
+const reduxNodes = require(`./nodes`)
+const lokiNodes = require(`../../db/loki/nodes`).reducer
+
+const backend = process.env.GATSBY_DB_NODES || `redux`
+
+function getNodesReducer() {
+  let nodesReducer
+  switch (backend) {
+    case `redux`:
+      nodesReducer = reduxNodes
+      break
+    case `loki`:
+      nodesReducer = lokiNodes
+      break
+    default:
+      throw new Error(
+        `Unsupported DB nodes backend (value of env var GATSBY_DB_NODES)`
+      )
+  }
+  return nodesReducer
+}
+
+module.exports = {
+  program: require(`./program`),
+  nodes: getNodesReducer(),
+  nodesByType: require(`./nodes-by-type`),
+  resolvedNodesCache: require(`./resolved-nodes`),
+  nodesTouched: require(`./nodes-touched`),
+  lastAction: require(`./last-action`),
+  flattenedPlugins: require(`./flattened-plugins`),
+  config: require(`./config`),
+  pages: require(`./pages`),
+  matchPaths: require(`./match-paths`),
+  schema: require(`./schema`),
+  status: require(`./status`),
+  componentDataDependencies: require(`./component-data-dependencies`),
+  components: require(`./components`),
+  staticQueryComponents: require(`./static-query-components`),
+  jobs: require(`./jobs`),
+  webpack: require(`./webpack`),
+  webpackCompilationHash: require(`./webpack-compilation-hash`),
+  redirects: require(`./redirects`),
+  babelrc: require(`./babelrc`),
+  schemaCustomization: require(`./schema-customization`),
+  themes: require(`./themes`),
+}
diff --git a/node_modules/gatsby/src/redux/reducers/jobs.js b/node_modules/gatsby/src/redux/reducers/jobs.js
new file mode 100644
index 0000000..0066c79
--- /dev/null
+++ b/node_modules/gatsby/src/redux/reducers/jobs.js
@@ -0,0 +1,68 @@
+const _ = require(`lodash`)
+const { oneLine } = require(`common-tags`)
+const moment = require(`moment`)
+
+module.exports = (state = { active: [], done: [] }, action) => {
+  switch (action.type) {
+    case `CREATE_JOB`:
+    case `SET_JOB`: {
+      if (!action.payload.id) {
+        throw new Error(`An ID must be provided when creating or setting job`)
+      }
+      const index = _.findIndex(state.active, j => j.id === action.payload.id)
+      const mergedJob = _.merge(state.active[index], {
+        ...action.payload,
+        createdAt: Date.now(),
+        plugin: action.plugin,
+      })
+      if (index !== -1) {
+        return {
+          done: state.done,
+          active: [
+            ...state.active
+              .slice(0, index)
+              .concat([mergedJob])
+              .concat(state.active.slice(index + 1)),
+          ],
+        }
+      } else {
+        return {
+          done: state.done,
+          active: state.active.concat([
+            {
+              ...action.payload,
+              createdAt: Date.now(),
+              plugin: action.plugin,
+            },
+          ]),
+        }
+      }
+    }
+    case `END_JOB`: {
+      if (!action.payload.id) {
+        throw new Error(`An ID must be provided when ending a job`)
+      }
+      const completedAt = Date.now()
+      const job = state.active.find(j => j.id === action.payload.id)
+      if (!job) {
+        throw new Error(oneLine`
+          The plugin "${_.get(action, `plugin.name`, `anonymous`)}"
+          tried to end a job with the id "${action.payload.id}"
+          that either hasn't yet been created or has already been ended`)
+      }
+
+      return {
+        done: state.done.concat([
+          {
+            ...job,
+            completedAt,
+            runTime: moment(completedAt).diff(moment(job.createdAt)),
+          },
+        ]),
+        active: state.active.filter(j => j.id !== action.payload.id),
+      }
+    }
+  }
+
+  return state
+}
diff --git a/node_modules/gatsby/src/redux/reducers/last-action.js b/node_modules/gatsby/src/redux/reducers/last-action.js
new file mode 100644
index 0000000..7f6a486
--- /dev/null
+++ b/node_modules/gatsby/src/redux/reducers/last-action.js
@@ -0,0 +1 @@
+module.exports = (state = null, action) => action
diff --git a/node_modules/gatsby/src/redux/reducers/match-paths.js b/node_modules/gatsby/src/redux/reducers/match-paths.js
new file mode 100644
index 0000000..c82a51d
--- /dev/null
+++ b/node_modules/gatsby/src/redux/reducers/match-paths.js
@@ -0,0 +1,32 @@
+const _ = require(`lodash`)
+
+module.exports = (state = {}, action) => {
+  switch (action.type) {
+    case `DELETE_CACHE`:
+      return {}
+    case `CREATE_PAGE`: {
+      const page = action.payload
+      if (page.matchPath) {
+        const { oldPage } = action
+        const newState = { ...state }
+        if (oldPage && oldPage.matchPath !== page.matchPath) {
+          delete newState.matchMaths[oldPage.matchPath]
+        }
+        newState[page.matchPath] = page.path
+        return newState
+      } else {
+        return state
+      }
+    }
+    case `DELETE_PAGE`: {
+      const page = action.payload
+      if (page.matchPath) {
+        return _.omit(state, [page.matchPath])
+      } else {
+        return state
+      }
+    }
+    default:
+      return state
+  }
+}
diff --git a/node_modules/gatsby/src/redux/reducers/nodes-by-type.js b/node_modules/gatsby/src/redux/reducers/nodes-by-type.js
new file mode 100644
index 0000000..15e9fd8
--- /dev/null
+++ b/node_modules/gatsby/src/redux/reducers/nodes-by-type.js
@@ -0,0 +1,61 @@
+const getNodesOfType = (node, state) => {
+  const { type } = node.internal
+  if (!state.has(type)) {
+    state.set(type, new Map())
+  }
+  return state.get(type)
+}
+
+module.exports = (state = new Map(), action) => {
+  switch (action.type) {
+    case `DELETE_CACHE`:
+      return new Map()
+
+    case `CREATE_NODE`: {
+      const node = action.payload
+      const nodesOfType = getNodesOfType(node, state)
+      nodesOfType.set(node.id, node)
+      return state
+    }
+
+    case `ADD_FIELD_TO_NODE`:
+    case `ADD_CHILD_NODE_TO_PARENT_NODE`: {
+      const node = action.payload
+      const nodesOfType = getNodesOfType(node, state)
+      nodesOfType.set(node.id, node)
+      return state
+    }
+
+    case `DELETE_NODE`: {
+      const node = action.payload
+      if (!node) return state
+      const nodesOfType = getNodesOfType(node, state)
+      nodesOfType.delete(node.id)
+      if (!nodesOfType.size) {
+        state.delete(node.internal.type)
+      }
+      return state
+    }
+
+    // Deprecated, will be removed in Gatsby v3.
+    case `DELETE_NODES`: {
+      const ids = action.payload
+      ids.forEach(id => {
+        Array.from(state).some(([type, nodes]) => {
+          if (nodes.has(id)) {
+            nodes.delete(id)
+            if (!nodes.size) {
+              state.delete(type)
+            }
+            return true
+          }
+          return false
+        })
+      })
+      return state
+    }
+
+    default:
+      return state
+  }
+}
diff --git a/node_modules/gatsby/src/redux/reducers/nodes-touched.js b/node_modules/gatsby/src/redux/reducers/nodes-touched.js
new file mode 100644
index 0000000..ee9a4a7
--- /dev/null
+++ b/node_modules/gatsby/src/redux/reducers/nodes-touched.js
@@ -0,0 +1,14 @@
+module.exports = (state = {}, action) => {
+  switch (action.type) {
+    case `CREATE_NODE`:
+      state[action.payload.id] = true
+      return state
+
+    case `TOUCH_NODE`:
+      state[action.payload] = true
+      return state
+
+    default:
+      return state
+  }
+}
diff --git a/node_modules/gatsby/src/redux/reducers/nodes.js b/node_modules/gatsby/src/redux/reducers/nodes.js
new file mode 100644
index 0000000..2e37dd3
--- /dev/null
+++ b/node_modules/gatsby/src/redux/reducers/nodes.js
@@ -0,0 +1,30 @@
+module.exports = (state = new Map(), action) => {
+  switch (action.type) {
+    case `DELETE_CACHE`:
+      return new Map()
+    case `CREATE_NODE`: {
+      state.set(action.payload.id, action.payload)
+      return state
+    }
+
+    case `ADD_FIELD_TO_NODE`:
+    case `ADD_CHILD_NODE_TO_PARENT_NODE`:
+      state.set(action.payload.id, action.payload)
+      return state
+
+    case `DELETE_NODE`: {
+      if (action.payload) {
+        state.delete(action.payload.id)
+      }
+      return state
+    }
+
+    case `DELETE_NODES`: {
+      action.payload.forEach(id => state.delete(id))
+      return state
+    }
+
+    default:
+      return state
+  }
+}
diff --git a/node_modules/gatsby/src/redux/reducers/pages.js b/node_modules/gatsby/src/redux/reducers/pages.js
new file mode 100644
index 0000000..6788e45
--- /dev/null
+++ b/node_modules/gatsby/src/redux/reducers/pages.js
@@ -0,0 +1,32 @@
+const normalize = require(`normalize-path`)
+
+module.exports = (state = new Map(), action) => {
+  switch (action.type) {
+    case `DELETE_CACHE`:
+      return new Map()
+    case `CREATE_PAGE`: {
+      action.payload.component = normalize(action.payload.component)
+      if (!action.plugin && !action.plugin.name) {
+        console.log(``)
+        console.error(JSON.stringify(action, null, 4))
+        console.log(``)
+        throw new Error(
+          `Pages can only be created by plugins. There wasn't a plugin set
+        when creating this page.`
+        )
+      }
+      // Link page to its plugin.
+      action.payload.pluginCreator___NODE = action.plugin.id
+      action.payload.pluginCreatorId = action.plugin.id
+
+      state.set(action.payload.path, action.payload)
+      return state
+    }
+    case `DELETE_PAGE`: {
+      state.delete(action.payload.path)
+      return state
+    }
+    default:
+      return state
+  }
+}
diff --git a/node_modules/gatsby/src/redux/reducers/program.js b/node_modules/gatsby/src/redux/reducers/program.js
new file mode 100644
index 0000000..94ab0e6
--- /dev/null
+++ b/node_modules/gatsby/src/redux/reducers/program.js
@@ -0,0 +1,26 @@
+module.exports = (
+  state = { directory: `/`, state: `BOOTSTRAPPING` },
+  action
+) => {
+  switch (action.type) {
+    case `SET_PROGRAM`:
+      return {
+        ...action.payload,
+      }
+
+    case `SET_PROGRAM_EXTENSIONS`:
+      return {
+        ...state,
+        extensions: action.payload,
+      }
+
+    case `SET_PROGRAM_STATUS`:
+      return {
+        ...state,
+        status: `BOOTSTRAP_FINISHED`,
+      }
+
+    default:
+      return state
+  }
+}
diff --git a/node_modules/gatsby/src/redux/reducers/redirects.js b/node_modules/gatsby/src/redux/reducers/redirects.js
new file mode 100644
index 0000000..9cdd8ea
--- /dev/null
+++ b/node_modules/gatsby/src/redux/reducers/redirects.js
@@ -0,0 +1,16 @@
+const _ = require(`lodash`)
+
+module.exports = (state = [], action) => {
+  switch (action.type) {
+    case `CREATE_REDIRECT`: {
+      if (!state.some(redirect => _.isEqual(redirect, action.payload))) {
+        // Add redirect only if it wasn't yet added to prevent duplicates
+        return [...state, action.payload]
+      }
+      return state
+    }
+
+    default:
+      return state
+  }
+}
diff --git a/node_modules/gatsby/src/redux/reducers/resolved-nodes.js b/node_modules/gatsby/src/redux/reducers/resolved-nodes.js
new file mode 100644
index 0000000..3c45034
--- /dev/null
+++ b/node_modules/gatsby/src/redux/reducers/resolved-nodes.js
@@ -0,0 +1,18 @@
+module.exports = (state = new Map(), action) => {
+  switch (action.type) {
+    case `DELETE_CACHE`:
+    case `CREATE_NODE`:
+    case `DELETE_NODE`:
+    case `DELETE_NODES`:
+      return new Map()
+
+    case `SET_RESOLVED_NODES`: {
+      const { key, nodes } = action.payload
+      state.set(key, nodes)
+      return state
+    }
+
+    default:
+      return state
+  }
+}
diff --git a/node_modules/gatsby/src/redux/reducers/schema-composer.js b/node_modules/gatsby/src/redux/reducers/schema-composer.js
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/gatsby/src/redux/reducers/schema-customization.js b/node_modules/gatsby/src/redux/reducers/schema-customization.js
new file mode 100644
index 0000000..80dac07
--- /dev/null
+++ b/node_modules/gatsby/src/redux/reducers/schema-customization.js
@@ -0,0 +1,53 @@
+const _ = require(`lodash`)
+module.exports = (
+  state = {
+    composer: null,
+    thirdPartySchemas: [],
+    types: [],
+  },
+  action
+) => {
+  switch (action.type) {
+    case `ADD_THIRD_PARTY_SCHEMA`:
+      return {
+        ...state,
+        thirdPartySchemas: [...state.thirdPartySchemas, action.payload],
+      }
+    case `SET_SCHEMA_COMPOSER`:
+      return {
+        ...state,
+        composer: action.payload,
+      }
+    case `CREATE_TYPES`: {
+      let types
+      if (_.isArray(action.payload)) {
+        types = [
+          ...state.types,
+          ...action.payload.map(typeOrTypeDef => {
+            return {
+              typeOrTypeDef,
+              plugin: action.plugin,
+            }
+          }),
+        ]
+      } else {
+        types = [
+          ...state.types,
+          { typeOrTypeDef: action.payload, plugin: action.plugin },
+        ]
+      }
+      return {
+        ...state,
+        types,
+      }
+    }
+    case `DELETE_CACHE`:
+      return {
+        composer: null,
+        thirdPartySchemas: [],
+        types: [],
+      }
+    default:
+      return state
+  }
+}
diff --git a/node_modules/gatsby/src/redux/reducers/schema.js b/node_modules/gatsby/src/redux/reducers/schema.js
new file mode 100644
index 0000000..01fbacb
--- /dev/null
+++ b/node_modules/gatsby/src/redux/reducers/schema.js
@@ -0,0 +1,8 @@
+module.exports = (state = {}, action) => {
+  switch (action.type) {
+    case `SET_SCHEMA`:
+      return action.payload
+    default:
+      return state
+  }
+}
diff --git a/node_modules/gatsby/src/redux/reducers/static-query-components.js b/node_modules/gatsby/src/redux/reducers/static-query-components.js
new file mode 100644
index 0000000..b6cbac2
--- /dev/null
+++ b/node_modules/gatsby/src/redux/reducers/static-query-components.js
@@ -0,0 +1,13 @@
+module.exports = (state = new Map(), action) => {
+  switch (action.type) {
+    case `DELETE_CACHE`:
+      return new Map()
+    case `REPLACE_STATIC_QUERY`:
+      return state.set(action.payload.id, action.payload)
+    case `REMOVE_STATIC_QUERY`:
+      state.delete(action.payload)
+      return state
+  }
+
+  return state
+}
diff --git a/node_modules/gatsby/src/redux/reducers/status.js b/node_modules/gatsby/src/redux/reducers/status.js
new file mode 100644
index 0000000..9f99905
--- /dev/null
+++ b/node_modules/gatsby/src/redux/reducers/status.js
@@ -0,0 +1,39 @@
+const _ = require(`lodash`)
+
+module.exports = (state = { plugins: {} }, action) => {
+  switch (action.type) {
+    case `DELETE_CACHE`:
+      return { plugins: {} }
+    case `UPDATE_PLUGINS_HASH`:
+      return {
+        ...state,
+        PLUGINS_HASH: action.payload,
+      }
+    case `SET_PLUGIN_STATUS`:
+      if (!action.plugin && !action.plugin.name) {
+        throw new Error(`You can't set plugin status without a plugin`)
+      }
+      if (!_.isObject(action.payload)) {
+        throw new Error(
+          `You must pass an object into setPluginStatus. What was passed in was ${JSON.stringify(
+            action.payload,
+            null,
+            4
+          )}`
+        )
+      }
+      return {
+        ...state,
+        plugins: {
+          ...state.plugins,
+          [action.plugin.name]: _.merge(
+            {},
+            state.plugins[action.plugin.name],
+            action.payload
+          ),
+        },
+      }
+    default:
+      return state
+  }
+}
diff --git a/node_modules/gatsby/src/redux/reducers/themes.js b/node_modules/gatsby/src/redux/reducers/themes.js
new file mode 100644
index 0000000..4f6e52a
--- /dev/null
+++ b/node_modules/gatsby/src/redux/reducers/themes.js
@@ -0,0 +1,12 @@
+module.exports = (state = {}, action) => {
+  switch (action.type) {
+    case `SET_RESOLVED_THEMES`:
+      return {
+        ...state,
+        themes: action.payload,
+      }
+
+    default:
+      return state
+  }
+}
diff --git a/node_modules/gatsby/src/redux/reducers/webpack-compilation-hash.js b/node_modules/gatsby/src/redux/reducers/webpack-compilation-hash.js
new file mode 100644
index 0000000..595b480
--- /dev/null
+++ b/node_modules/gatsby/src/redux/reducers/webpack-compilation-hash.js
@@ -0,0 +1,8 @@
+module.exports = (state = ``, action) => {
+  switch (action.type) {
+    case `SET_WEBPACK_COMPILATION_HASH`:
+      return action.payload
+    default:
+      return state
+  }
+}
diff --git a/node_modules/gatsby/src/redux/reducers/webpack.js b/node_modules/gatsby/src/redux/reducers/webpack.js
new file mode 100644
index 0000000..bd1f55c
--- /dev/null
+++ b/node_modules/gatsby/src/redux/reducers/webpack.js
@@ -0,0 +1,20 @@
+const merge = require(`webpack-merge`)
+
+module.exports = (state = {}, action) => {
+  switch (action.type) {
+    case `SET_WEBPACK_CONFIG`: {
+      let nextConfig = action.payload
+      delete nextConfig.entry
+      delete nextConfig.output
+      delete nextConfig.target
+      delete nextConfig.resolveLoaders
+
+      return merge(state, nextConfig)
+    }
+    case `REPLACE_WEBPACK_CONFIG`:
+      return { ...action.payload }
+
+    default:
+      return state
+  }
+}
diff --git a/node_modules/gatsby/src/redux/run-sift.js b/node_modules/gatsby/src/redux/run-sift.js
new file mode 100644
index 0000000..8fd4923
--- /dev/null
+++ b/node_modules/gatsby/src/redux/run-sift.js
@@ -0,0 +1,180 @@
+// @flow
+const sift = require(`sift`)
+const _ = require(`lodash`)
+const prepareRegex = require(`../utils/prepare-regex`)
+const { resolveNodes, resolveRecursive } = require(`./prepare-nodes`)
+
+/////////////////////////////////////////////////////////////////////
+// Parse filter
+/////////////////////////////////////////////////////////////////////
+
+function siftifyArgs(object) {
+  const newObject = {}
+  _.each(object, (v, k) => {
+    if (_.isPlainObject(v)) {
+      if (k === `elemMatch`) {
+        k = `$elemMatch`
+      }
+      newObject[k] = siftifyArgs(v)
+    } else {
+      // Compile regex first.
+      if (k === `regex`) {
+        newObject[`$regex`] = prepareRegex(v)
+      } else if (k === `glob`) {
+        const Minimatch = require(`minimatch`).Minimatch
+        const mm = new Minimatch(v)
+        newObject[`$regex`] = mm.makeRe()
+      } else {
+        newObject[`$${k}`] = v
+      }
+    }
+  })
+  return newObject
+}
+
+// Build an object that excludes the innermost leafs,
+// this avoids including { eq: x } when resolving fields.
+const extractFieldsToSift = filter =>
+  Object.keys(filter).reduce((acc, key) => {
+    let value = filter[key]
+    let k = Object.keys(value)[0]
+    let v = value[k]
+    if (_.isPlainObject(value) && _.isPlainObject(v)) {
+      acc[key] =
+        k === `elemMatch` ? extractFieldsToSift(v) : extractFieldsToSift(value)
+    } else {
+      acc[key] = true
+    }
+    return acc
+  }, {})
+
+/**
+ * Parse filter and returns an object with two fields:
+ * - siftArgs: the filter in a format that sift understands
+ * - fieldsToSift: filter with operate leaves (e.g { eq: 3 })
+ *   removed. Used later to resolve all filter fields
+ */
+function parseFilter(filter) {
+  const siftArgs = []
+  let fieldsToSift = {}
+  if (filter) {
+    _.each(filter, (v, k) => {
+      siftArgs.push(
+        siftifyArgs({
+          [k]: v,
+        })
+      )
+    })
+    fieldsToSift = extractFieldsToSift(filter)
+  }
+  return { siftArgs, fieldsToSift }
+}
+
+/////////////////////////////////////////////////////////////////////
+// Run Sift
+/////////////////////////////////////////////////////////////////////
+
+function isEqId(firstOnly, fieldsToSift, siftArgs) {
+  return (
+    firstOnly &&
+    Object.keys(fieldsToSift).length === 1 &&
+    Object.keys(fieldsToSift)[0] === `id` &&
+    Object.keys(siftArgs[0].id).length === 1 &&
+    Object.keys(siftArgs[0].id)[0] === `$eq`
+  )
+}
+
+function handleFirst(siftArgs, nodes) {
+  const index = _.isEmpty(siftArgs)
+    ? 0
+    : sift.indexOf(
+        {
+          $and: siftArgs,
+        },
+        nodes
+      )
+
+  if (index !== -1) {
+    return [nodes[index]]
+  } else {
+    return []
+  }
+}
+
+function handleMany(siftArgs, nodes, sort) {
+  let result = _.isEmpty(siftArgs)
+    ? nodes
+    : sift(
+        {
+          $and: siftArgs,
+        },
+        nodes
+      )
+
+  if (!result || !result.length) return null
+
+  // Sort results.
+  if (sort) {
+    // create functions that return the item to compare on
+    // uses _.get so nested fields can be retrieved
+    const sortFields = sort.fields.map(field => v => _.get(v, field))
+    const sortOrder = sort.order.map(order => order.toLowerCase())
+
+    result = _.orderBy(result, sortFields, sortOrder)
+  }
+  return result
+}
+
+/**
+ * Filters a list of nodes using mongodb-like syntax.
+ *
+ * @param args raw graphql query filter as an object
+ * @param nodes The nodes array to run sift over (Optional
+ *   will load itself if not present)
+ * @param type gqlType. Created in build-node-types
+ * @param firstOnly true if you want to return only the first result
+ *   found. This will return a collection of size 1. Not a single
+ *   element
+ * @returns Collection of results. Collection will be limited to size
+ *   if `firstOnly` is true
+ */
+module.exports = (args: Object) => {
+  const { getNode, getNodesByType } = require(`../db/nodes`)
+
+  const { queryArgs, gqlType, firstOnly = false } = args
+
+  // If nodes weren't provided, then load them from the DB
+  const nodes = args.nodes || getNodesByType(gqlType.name)
+
+  const { siftArgs, fieldsToSift } = parseFilter(queryArgs.filter)
+  // FIXME: fieldsToSift must include `sort.fields` as well as the
+  // `field` arg on `group` and `distinct`
+
+  // If the the query for single node only has a filter for an "id"
+  // using "eq" operator, then we'll just grab that ID and return it.
+  if (isEqId(firstOnly, fieldsToSift, siftArgs)) {
+    const node = getNode(siftArgs[0].id[`$eq`])
+
+    if (!node || (node.internal && node.internal.type !== gqlType.name)) {
+      return []
+    }
+
+    return resolveRecursive(node, fieldsToSift, gqlType.getFields()).then(
+      node => (node ? [node] : [])
+    )
+  }
+
+  return resolveNodes(
+    nodes,
+    gqlType.name,
+    firstOnly,
+    fieldsToSift,
+    gqlType.getFields()
+  ).then(resolvedNodes => {
+    if (firstOnly) {
+      return handleFirst(siftArgs, resolvedNodes)
+    } else {
+      return handleMany(siftArgs, resolvedNodes, queryArgs.sort)
+    }
+  })
+}
diff --git a/node_modules/gatsby/src/schema/__tests__/__snapshots__/connection-input-fields.js.snap b/node_modules/gatsby/src/schema/__tests__/__snapshots__/connection-input-fields.js.snap
new file mode 100644
index 0000000..436d81e
--- /dev/null
+++ b/node_modules/gatsby/src/schema/__tests__/__snapshots__/connection-input-fields.js.snap
@@ -0,0 +1,38 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`connection input fields can query object arrays 1`] = `
+Object {
+  "data": Object {
+    "allTest": Object {
+      "edges": Array [
+        Object {
+          "node": Object {
+            "anObjectArray": Array [
+              Object {
+                "aBoolean": true,
+                "aNumber": 2,
+                "aString": "some string",
+              },
+              Object {
+                "aBoolean": null,
+                "aNumber": 2,
+                "aString": "some string",
+              },
+            ],
+          },
+        },
+        Object {
+          "node": Object {
+            "anObjectArray": null,
+          },
+        },
+        Object {
+          "node": Object {
+            "anObjectArray": null,
+          },
+        },
+      ],
+    },
+  },
+}
+`;
diff --git a/node_modules/gatsby/src/schema/__tests__/__snapshots__/kitchen-sink.js.snap b/node_modules/gatsby/src/schema/__tests__/__snapshots__/kitchen-sink.js.snap
new file mode 100644
index 0000000..b59190f
--- /dev/null
+++ b/node_modules/gatsby/src/schema/__tests__/__snapshots__/kitchen-sink.js.snap
@@ -0,0 +1,89 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`Kichen sink schema test passes kitchen sink query 1`] = `
+Object {
+  "data": Object {
+    "addResolvers": Array [
+      Object {
+        "code": "BdiU-TTFP4h",
+        "id": "1685001452849004065",
+        "likes": 33,
+      },
+      Object {
+        "code": "BdIpEzalAJx",
+        "id": "1677771511187112561",
+        "likes": 29,
+      },
+    ],
+    "filter": Object {
+      "edges": Array [
+        Object {
+          "node": Object {
+            "comment": 1,
+            "id": "1270677182602272387",
+          },
+        },
+        Object {
+          "node": Object {
+            "comment": 0,
+            "id": "1256134251849702933",
+          },
+        },
+      ],
+    },
+    "resolveFilter": Object {
+      "id": "1601601194425654597",
+      "idWithDecoration": "decoration-1601601194425654597",
+      "likes": 9,
+    },
+    "sort": Object {
+      "edges": Array [
+        Object {
+          "node": Object {
+            "_3invalidKey": null,
+            "code": "BShF_8qhtEv",
+            "comment": 0,
+            "id": "1486495736706552111",
+            "idWithDecoration": "decoration-1486495736706552111",
+            "image": Object {
+              "childImageSharp": Object {
+                "id": "f5f0e564-899f-5bbc-92de-a2325b69cb75",
+              },
+            },
+            "likes": 8,
+            "time": "05.04.2017",
+          },
+        },
+        Object {
+          "node": Object {
+            "_3invalidKey": null,
+            "code": "BY6B8z5lR1F",
+            "comment": 0,
+            "id": "1601601194425654597",
+            "idWithDecoration": "decoration-1601601194425654597",
+            "image": Object {
+              "childImageSharp": Object {
+                "id": "6ba97198-5331-53d6-a0e0-c9c063c5094e",
+              },
+            },
+            "likes": 9,
+            "time": "11.09.2017",
+          },
+        },
+      ],
+    },
+    "thirdPartyInterface": Object {
+      "text": "Hello third-party schema!",
+    },
+    "thirdPartyStuff": Object {
+      "child": Object {
+        "text": "Hello from children!",
+      },
+      "text": "Hello third-party schema!",
+    },
+    "thirdPartyUnion": Object {
+      "text": "Hello third-party schema!",
+    },
+  },
+}
+`;
diff --git a/node_modules/gatsby/src/schema/__tests__/build-node-connections.js b/node_modules/gatsby/src/schema/__tests__/build-node-connections.js
new file mode 100644
index 0000000..762bb5a
--- /dev/null
+++ b/node_modules/gatsby/src/schema/__tests__/build-node-connections.js
@@ -0,0 +1,199 @@
+const { graphql } = require(`graphql`)
+const { createSchemaComposer } = require(`../schema-composer`)
+const { buildSchema } = require(`../schema`)
+const { LocalNodeModel } = require(`../node-model`)
+const nodeStore = require(`../../db/nodes`)
+const { store } = require(`../../redux`)
+
+jest.mock(`../../redux/actions/add-page-dependency`)
+const createPageDependency = require(`../../redux/actions/add-page-dependency`)
+
+require(`../../db/__tests__/fixtures/ensure-loki`)()
+
+const makeNodes = () => [
+  {
+    id: `p1`,
+    internal: { type: `Parent` },
+    hair: `red`,
+    children: [`c1`, `c2`, `r1`],
+  },
+  {
+    id: `r1`,
+    internal: { type: `Relative` },
+    hair: `black`,
+    children: [],
+    parent: `p1`,
+  },
+  {
+    id: `c1`,
+    internal: { type: `Child` },
+    hair: `brown`,
+    children: [],
+    parent: `p1`,
+  },
+  {
+    id: `c2`,
+    internal: { type: `Child` },
+    hair: `blonde`,
+    children: [],
+    parent: `p1`,
+  },
+]
+
+describe(`build-node-connections`, () => {
+  async function runQuery(query, nodes = makeNodes()) {
+    store.dispatch({ type: `DELETE_CACHE` })
+    nodes.forEach(node =>
+      store.dispatch({ type: `CREATE_NODE`, payload: node })
+    )
+
+    const schemaComposer = createSchemaComposer()
+    const schema = await buildSchema({
+      schemaComposer,
+      nodeStore,
+      types: [],
+      thirdPartySchemas: [],
+    })
+    store.dispatch({ type: `SET_SCHEMA`, payload: schema })
+
+    let context = { path: `foo` }
+    let { data, errors } = await graphql(schema, query, undefined, {
+      ...context,
+      nodeModel: new LocalNodeModel({
+        schema,
+        nodeStore,
+        createPageDependency,
+      }),
+    })
+    expect(errors).not.toBeDefined()
+    return data
+  }
+
+  afterEach(() => {
+    createPageDependency.mockClear()
+  })
+
+  it(`should result in a valid queryable schema`, async () => {
+    let { allParent, allChild, allRelative } = await runQuery(
+      `
+      {
+        allParent(filter: { id: { eq: "p1" } }) {
+          edges {
+            node {
+              hair
+            }
+          }
+        }
+        allChild(filter: { id: { eq: "c1" } }) {
+          edges {
+            node {
+              hair
+            }
+          }
+        }
+        allRelative(filter: { id: { eq: "r1" } }) {
+          edges {
+            node {
+              hair
+            }
+          }
+        }
+      }
+    `
+    )
+    expect(allParent.edges[0].node.hair).toEqual(`red`)
+    expect(allChild.edges[0].node.hair).toEqual(`brown`)
+    expect(allRelative.edges[0].node.hair).toEqual(`black`)
+  })
+
+  it(`should link children automatically`, async () => {
+    let { allParent } = await runQuery(
+      `
+      {
+        allParent(filter: { id: { eq: "p1" } }) {
+          edges {
+            node {
+              children {
+                id
+              }
+            }
+          }
+        }
+      }
+    `
+    )
+    expect(allParent.edges[0].node.children).toBeDefined()
+    expect(allParent.edges[0].node.children.map(c => c.id)).toEqual([
+      `c1`,
+      `c2`,
+      `r1`,
+    ])
+  })
+
+  it(`should create typed children fields`, async () => {
+    let { allParent } = await runQuery(
+      `
+      {
+        allParent(filter: { id: { eq: "p1" } }) {
+          edges {
+            node {
+              childrenChild { # lol
+                id
+              }
+            }
+          }
+        }
+      }
+    `
+    )
+    expect(allParent.edges[0].node.childrenChild).toBeDefined()
+    expect(allParent.edges[0].node.childrenChild.map(c => c.id)).toEqual([
+      `c1`,
+      `c2`,
+    ])
+  })
+
+  it(`should create typed child field for singular children`, async () => {
+    let { allParent } = await runQuery(
+      `
+      {
+        allParent(filter: { id: { eq: "p1" } }) {
+          edges {
+            node {
+              childRelative { # lol
+                id
+              }
+            }
+          }
+        }
+      }
+    `
+    )
+
+    expect(allParent.edges[0].node.childRelative).toBeDefined()
+    expect(allParent.edges[0].node.childRelative.id).toEqual(`r1`)
+  })
+
+  it(`should create page dependency`, async () => {
+    await runQuery(
+      `
+      {
+        allParent(filter: { id: { eq: "p1" } }) {
+          edges {
+            node {
+              childRelative { # lol
+                id
+              }
+            }
+          }
+        }
+      }
+    `
+    )
+
+    expect(createPageDependency).toHaveBeenCalledWith({
+      path: `foo`,
+      connection: `Parent`,
+    })
+  })
+})
diff --git a/node_modules/gatsby/src/schema/__tests__/build-node-types.js b/node_modules/gatsby/src/schema/__tests__/build-node-types.js
new file mode 100644
index 0000000..05071b4
--- /dev/null
+++ b/node_modules/gatsby/src/schema/__tests__/build-node-types.js
@@ -0,0 +1,287 @@
+const { graphql, GraphQLString } = require(`graphql`)
+require(`../../db/__tests__/fixtures/ensure-loki`)()
+
+const { createSchemaComposer } = require(`../schema-composer`)
+const { buildSchema } = require(`../schema`)
+const { LocalNodeModel } = require(`../node-model`)
+const nodeStore = require(`../../db/nodes`)
+const { store } = require(`../../redux`)
+
+jest.mock(`../../utils/api-runner-node`)
+const apiRunnerNode = require(`../../utils/api-runner-node`)
+
+jest.mock(`../../redux/actions/add-page-dependency`)
+const createPageDependency = require(`../../redux/actions/add-page-dependency`)
+
+const { TypeConflictReporter } = require(`../infer/type-conflict-reporter`)
+const typeConflictReporter = new TypeConflictReporter()
+const addConflictSpy = jest.spyOn(typeConflictReporter, `addConflict`)
+
+const makeNodes = () => [
+  {
+    id: `p1`,
+    internal: { type: `Parent` },
+    hair: `red`,
+    children: [`c1`, `c2`, `r1`],
+  },
+  {
+    id: `r1`,
+    internal: { type: `Relative` },
+    hair: `black`,
+    children: [],
+    parent: `p1`,
+  },
+  {
+    id: `c1`,
+    internal: { type: `Child` },
+    hair: `brown`,
+    children: [],
+    parent: `p1`,
+    pluginField: `string`,
+  },
+  {
+    id: `c2`,
+    internal: { type: `Child` },
+    hair: `blonde`,
+    children: [],
+    parent: `p1`,
+    pluginField: 5,
+  },
+]
+
+describe(`build-node-types`, () => {
+  async function runQuery(query, nodes = makeNodes()) {
+    store.dispatch({ type: `DELETE_CACHE` })
+    nodes.forEach(node =>
+      store.dispatch({ type: `CREATE_NODE`, payload: node })
+    )
+
+    const schemaComposer = createSchemaComposer()
+    const schema = await buildSchema({
+      schemaComposer,
+      nodeStore,
+      types: [],
+      typeConflictReporter,
+      thirdPartySchemas: [],
+    })
+    store.dispatch({ type: `SET_SCHEMA`, payload: schema })
+
+    let context = { path: `foo` }
+    let { data, errors } = await graphql(schema, query, undefined, {
+      ...context,
+      nodeModel: new LocalNodeModel({
+        schema,
+        nodeStore,
+        createPageDependency,
+      }),
+    })
+    expect(errors).not.toBeDefined()
+    return data
+  }
+
+  beforeEach(async () => {
+    createPageDependency.mockClear()
+    addConflictSpy.mockClear()
+    const apiRunnerResponse = [
+      {
+        pluginField: {
+          type: GraphQLString,
+          description: `test description`,
+          resolve: () => `pluginFieldValue`,
+        },
+      },
+    ]
+    apiRunnerNode.mockImplementation(() => apiRunnerResponse)
+  })
+
+  it(`should result in a valid queryable schema`, async () => {
+    let { parent, child, relative } = await runQuery(
+      `
+      {
+        parent(id: { eq: "p1" }) {
+          hair
+        }
+        child(id: { eq: "c1" }) {
+          hair
+        }
+        relative(id: { eq: "r1" }) {
+          hair
+        }
+      }
+    `
+    )
+    expect(parent.hair).toEqual(`red`)
+    expect(child.hair).toEqual(`brown`)
+    expect(relative.hair).toEqual(`black`)
+  })
+
+  it(`should link children automatically`, async () => {
+    let { parent } = await runQuery(
+      `
+      {
+        parent(id: { eq: "p1" }) {
+          children {
+            id
+          }
+        }
+      }
+    `
+    )
+    expect(parent.children).toBeDefined()
+    expect(parent.children.map(c => c.id)).toEqual([`c1`, `c2`, `r1`])
+  })
+
+  it(`should create typed children fields`, async () => {
+    let { parent } = await runQuery(
+      `
+      {
+        parent(id: { eq: "p1" }) {
+          childrenChild { # lol
+            id
+          }
+        }
+      }
+    `
+    )
+    expect(parent.childrenChild).toBeDefined()
+    expect(parent.childrenChild.map(c => c.id)).toEqual([`c1`, `c2`])
+  })
+
+  it(`should create typed child field for singular children`, async () => {
+    let { parent } = await runQuery(
+      `
+      {
+        parent(id: { eq: "p1" }) {
+          childRelative { # lol
+            id
+          }
+        }
+      }
+    `
+    )
+
+    expect(parent.childRelative).toBeDefined()
+    expect(parent.childRelative.id).toEqual(`r1`)
+  })
+
+  it(`should handle plugin fields`, async () => {
+    const result = await runQuery(
+      `
+      {
+        parent(id: { eq: "p1" }) {
+          pluginField
+        }
+      }
+    `
+    )
+    expect(result.parent.pluginField).toEqual(`pluginFieldValue`)
+  })
+
+  it(`should allow filtering on plugin fields`, async () => {
+    const result = await runQuery(
+      `
+      {
+        parent(pluginField: { eq: "pluginFieldValue"}) {
+          pluginField
+        }
+      }
+    `
+    )
+    expect(result.parent.pluginField).toEqual(`pluginFieldValue`)
+  })
+
+  it(`should create root query type page dependency`, async () => {
+    await runQuery(` { parent(id: { eq: "p1" }) { id } } `)
+
+    expect(createPageDependency).toHaveBeenCalledWith({
+      path: `foo`,
+      nodeId: `p1`,
+    })
+  })
+
+  it(`should create children page dependency`, async () => {
+    await runQuery(
+      `
+        {
+          parent {
+            children { id }
+          }
+        }
+      `
+    )
+    expect(createPageDependency).toHaveBeenCalledWith({
+      path: `foo`,
+      nodeId: `c1`,
+    })
+    expect(createPageDependency).toHaveBeenCalledWith({
+      path: `foo`,
+      nodeId: `c2`,
+    })
+    expect(createPageDependency).toHaveBeenCalledWith({
+      path: `foo`,
+      nodeId: `r1`,
+    })
+  })
+
+  it(`should create parent page dependency`, async () => {
+    await runQuery(
+      `
+        {
+          child(id: { eq: "c1" }) {
+            parent { id }
+          }
+        }
+      `
+    )
+    expect(createPageDependency).toHaveBeenCalledWith({
+      path: `foo`,
+      nodeId: `p1`,
+    })
+  })
+
+  it(`should create childX page dependency`, async () => {
+    await runQuery(
+      `
+      {
+        parent(id: { eq: "p1" }) {
+          childRelative { # lol
+            id
+          }
+        }
+      }
+    `
+    )
+
+    expect(createPageDependency).toHaveBeenCalledWith({
+      path: `foo`,
+      nodeId: `r1`,
+    })
+  })
+
+  it(`should create childrenX page dependency`, async () => {
+    await runQuery(
+      `
+      {
+        parent(id: { eq: "p1" }) {
+          childrenChild { # lol
+            id
+          }
+        }
+      }
+    `
+    )
+
+    expect(createPageDependency).toHaveBeenCalledWith({
+      path: `foo`,
+      nodeId: `c1`,
+    })
+    expect(createPageDependency).toHaveBeenCalledWith({
+      path: `foo`,
+      nodeId: `c2`,
+    })
+  })
+
+  it(`should not report conflicts on plugin fields`, () => {
+    expect(typeConflictReporter.addConflict).not.toBeCalled()
+  })
+})
diff --git a/node_modules/gatsby/src/schema/__tests__/build-schema.js b/node_modules/gatsby/src/schema/__tests__/build-schema.js
new file mode 100644
index 0000000..ac0cc0a
--- /dev/null
+++ b/node_modules/gatsby/src/schema/__tests__/build-schema.js
@@ -0,0 +1,761 @@
+const {
+  GraphQLObjectType,
+  GraphQLNonNull,
+  GraphQLString,
+  GraphQLInterfaceType,
+  GraphQLUnionType,
+  GraphQLBoolean,
+} = require(`graphql`)
+const { SchemaComposer } = require(`graphql-compose`)
+jest.mock(`../../utils/api-runner-node`)
+const { store } = require(`../../redux`)
+const { build } = require(`..`)
+const {
+  buildObjectType,
+  buildUnionType,
+  buildInterfaceType,
+} = require(`../types/type-builders`)
+require(`../../db/__tests__/fixtures/ensure-loki`)()
+
+const nodes = require(`./fixtures/node-model`)
+
+describe(`Build schema`, () => {
+  beforeAll(() => {
+    addDefaultApiRunnerMock()
+  })
+
+  beforeEach(async () => {
+    store.dispatch({ type: `DELETE_CACHE` })
+    nodes.forEach(node =>
+      store.dispatch({ type: `CREATE_NODE`, payload: { ...node } })
+    )
+  })
+
+  afterEach(() => {
+    addDefaultApiRunnerMock()
+  })
+
+  describe(`createTypes`, () => {
+    it(`allows adding graphql-js types`, async () => {
+      createTypes(
+        new GraphQLObjectType({
+          name: `Foo`,
+          fields: {
+            text: {
+              type: GraphQLString,
+            },
+          },
+        })
+      )
+      const schema = await buildSchema()
+      const fooType = schema.getType(`Foo`)
+      expect(fooType).toBeInstanceOf(GraphQLObjectType)
+      const fields = fooType.getFields()
+      expect(fields[`text`]).toBeDefined()
+      expect(fields[`text`].type).toBe(GraphQLString)
+    })
+
+    it(`allows adding type in SDL`, async () => {
+      createTypes(`type Foo implements Node { text: String! }`)
+      const schema = await buildSchema()
+      const fooType = schema.getType(`Foo`)
+      expect(fooType).toBeInstanceOf(GraphQLObjectType)
+      expect(fooType.getInterfaces()).toEqual([schema.getType(`Node`)])
+      const fields = fooType.getFields()
+      expect(fields[`text`]).toBeDefined()
+      expect(fields[`text`].type).toBeInstanceOf(GraphQLNonNull)
+      expect(fields[`text`].type.ofType).toBe(GraphQLString)
+    })
+
+    it(`allows adding type in gatsby type def language`, async () => {
+      createTypes(
+        buildObjectType({
+          name: `Foo`,
+          fields: {
+            text: `String!`,
+            withArgs: {
+              type: `Boolean`,
+              args: {
+                what: {
+                  type: `Boolean`,
+                },
+              },
+              resolve(parent, args) {
+                return Boolean(args.what)
+              },
+            },
+          },
+          interfaces: [`Node`],
+        })
+      )
+      const schema = await buildSchema()
+      const fooType = schema.getType(`Foo`)
+      expect(fooType).toBeInstanceOf(GraphQLObjectType)
+      expect(fooType.getInterfaces()).toEqual([schema.getType(`Node`)])
+      const fields = fooType.getFields()
+      expect(fields[`text`]).toBeDefined()
+      expect(fields[`text`].type).toBeInstanceOf(GraphQLNonNull)
+      expect(fields[`text`].type.ofType).toBe(GraphQLString)
+      expect(fields[`withArgs`]).toBeDefined()
+      expect(fields[`withArgs`].type).toBe(GraphQLBoolean)
+      expect(fields[`withArgs`].args[0]).toBeDefined()
+      expect(fields[`withArgs`].args[0].name).toEqual(`what`)
+      expect(fields[`withArgs`].args[0].type).toBe(GraphQLBoolean)
+      expect(fields[`withArgs`].resolve({}, { what: true })).toBe(true)
+    })
+
+    it(`allows adding array of types`, async () => {
+      createTypes([
+        new GraphQLObjectType({
+          name: `Foo`,
+          fields: {
+            text: {
+              type: GraphQLString,
+            },
+          },
+        }),
+        new GraphQLObjectType({
+          name: `Bar`,
+          fields: {
+            text: {
+              type: GraphQLString,
+            },
+          },
+        }),
+        `type Baz implements Node { text: String }`,
+        `type Author implements Node { text: String }`,
+      ])
+      const schema = await buildSchema()
+
+      ;[(`Foo`, `Bar`, `Baz`, `Author`)].forEach(typeName => {
+        const type = schema.getType(typeName)
+        expect(type).toBeInstanceOf(GraphQLObjectType)
+        const fields = type.getFields()
+        expect(fields[`text`]).toBeDefined()
+        expect(fields[`text`].type).toBe(GraphQLString)
+      })
+    })
+
+    it(`adds node interface fields`, async () => {
+      createTypes(`
+        type Foo implements Node { text: String! }
+
+        type Bar implements Node {
+          id: ID!
+          parent: Node
+          children: [Node!]!
+          internal: Internal!
+        }
+      `)
+
+      const schema = await buildSchema()
+      ;[(`Foo`, `Bar`)].forEach(typeName => {
+        const type = schema.getType(typeName)
+        expect(type).toBeInstanceOf(GraphQLObjectType)
+        expect(type.getInterfaces()).toEqual([schema.getType(`Node`)])
+        const fields = type.getFields()
+        expect(fields[`id`]).toBeDefined()
+        expect(fields[`id`].type.toString()).toEqual(`ID!`)
+        expect(fields[`parent`]).toBeDefined()
+        expect(fields[`parent`].type.toString()).toEqual(`Node`)
+        expect(fields[`children`]).toBeDefined()
+        expect(fields[`children`].type.toString()).toEqual(`[Node!]!`)
+        expect(fields[`internal`]).toBeDefined()
+        expect(fields[`internal`].type.toString()).toEqual(`Internal!`)
+      })
+    })
+
+    it(`allows adding abstract types in SDL`, async () => {
+      createTypes(`
+        interface FooBar {
+          text: String!
+        }
+
+        type Foo implements Node & FooBar {
+          text: String!
+        }
+
+        type Bar implements Node & FooBar {
+          text: String!
+        }
+
+        type Author implements Node & FooBar {
+          text: String!
+        }
+
+        union UFooBar = Foo | Bar | Author
+      `)
+
+      const schema = await buildSchema()
+
+      const interfaceType = schema.getType(`FooBar`)
+      expect(interfaceType).toBeInstanceOf(GraphQLInterfaceType)
+      const unionType = schema.getType(`UFooBar`)
+      expect(unionType).toBeInstanceOf(GraphQLUnionType)
+      ;[(`Foo`, `Bar`, `Author`)].forEach(typeName => {
+        const type = schema.getType(typeName)
+        const typeSample = { internal: { type: typeName } }
+        expect(interfaceType.resolveType(typeSample)).toBe(typeName)
+        expect(unionType.resolveType(typeSample)).toBe(typeName)
+        expect(new Set(type.getInterfaces())).toEqual(
+          new Set([schema.getType(`Node`), schema.getType(`FooBar`)])
+        )
+      })
+    })
+
+    it(`allows adding abstract types in gatsby type def language`, async () => {
+      createTypes([
+        buildInterfaceType({
+          name: `FooBar`,
+          fields: {
+            text: `String!`,
+          },
+        }),
+        buildObjectType({
+          name: `Foo`,
+          fields: {
+            text: `String!`,
+          },
+          interfaces: [`Node`, `FooBar`],
+        }),
+        buildObjectType({
+          name: `Bar`,
+          fields: {
+            text: `String!`,
+          },
+          interfaces: [`Node`, `FooBar`],
+        }),
+        buildObjectType({
+          name: `Author`,
+          fields: {
+            text: `String!`,
+          },
+          interfaces: [`Node`, `FooBar`],
+        }),
+        buildUnionType({
+          name: `UFooBar`,
+          types: [`Foo`, `Bar`, `Author`],
+        }),
+      ])
+
+      const schema = await buildSchema()
+
+      const interfaceType = schema.getType(`FooBar`)
+      expect(interfaceType).toBeInstanceOf(GraphQLInterfaceType)
+      const unionType = schema.getType(`UFooBar`)
+      expect(unionType).toBeInstanceOf(GraphQLUnionType)
+      expect(unionType.getTypes().length).toBe(3)
+      ;[(`Foo`, `Bar`, `Author`)].forEach(typeName => {
+        const type = schema.getType(typeName)
+        const typeSample = { internal: { type: typeName } }
+        expect(interfaceType.resolveType(typeSample)).toBe(typeName)
+        expect(unionType.resolveType(typeSample)).toBe(typeName)
+        expect(new Set(type.getInterfaces())).toEqual(
+          new Set([schema.getType(`Node`), schema.getType(`FooBar`)])
+        )
+      })
+    })
+
+    it(`adds args to field`, async () => {
+      createTypes(`
+        type Author implements Node {
+          name(withHello: Boolean = false): String!
+        }
+      `)
+      const schema = await buildSchema()
+      const type = schema.getType(`Author`)
+      const fields = type.getFields()
+      const arg = fields[`name`].args.find(arg => arg.name === `withHello`)
+      expect(arg).toBeDefined()
+      expect(arg.type.toString()).toEqual(`Boolean`)
+      expect(arg.defaultValue).toEqual(false)
+    })
+
+    // TODO: Define what "handles being called multiple times mean"
+    it.todo(`handles being called multiple times`)
+
+    it(`displays error message for reserved Node interface`, () => {
+      const typeDefs = [
+        `interface Node { foo: Boolean }`,
+        `type Node { foo: Boolean }`,
+        new GraphQLInterfaceType({ name: `Node`, fields: {} }),
+        buildInterfaceType({ name: `Node`, fields: {} }),
+      ]
+      return Promise.all(
+        typeDefs.map(def => {
+          store.dispatch({ type: `DELETE_CACHE` })
+          createTypes(def)
+          return expect(buildSchema()).rejects.toThrow(
+            `The GraphQL type \`Node\` is reserved for internal use.`
+          )
+        })
+      )
+    })
+
+    it(`displays error message for reserved type names`, () => {
+      const typeDefs = [
+        [`TestSortInput`, `type TestSortInput { foo: Boolean }`],
+        [
+          `TestFilterInput`,
+          `type TestFilterInput implements Node { foo: Boolean }`,
+        ],
+        [
+          `TestSortInput`,
+          new GraphQLObjectType({ name: `TestSortInput`, fields: {} }),
+        ],
+        [
+          `TestFilterInput`,
+          buildObjectType({ name: `TestFilterInput`, fields: {} }),
+        ],
+      ]
+      return Promise.all(
+        typeDefs.map(([name, def]) => {
+          store.dispatch({ type: `DELETE_CACHE` })
+          createTypes(def)
+          return expect(buildSchema()).rejects.toThrow(
+            `GraphQL type names ending with "FilterInput" or "SortInput" are ` +
+              `reserved for internal use. Please rename \`${name}\`.`
+          )
+        })
+      )
+    })
+
+    it(`displays error message for reserved type names`, () => {
+      const typeDefs = [
+        [`JSON`, `type JSON { foo: Boolean }`],
+        [`Date`, new GraphQLObjectType({ name: `Date`, fields: {} })],
+        [`Float`, buildObjectType({ name: `Float`, fields: {} })],
+      ]
+      return Promise.all(
+        typeDefs.map(([name, def]) => {
+          store.dispatch({ type: `DELETE_CACHE` })
+          createTypes(def)
+          return expect(buildSchema()).rejects.toThrow(
+            `The GraphQL type \`${name}\` is reserved for internal use by ` +
+              `built-in scalar types.`
+          )
+        })
+      )
+    })
+
+    it(`allows modifying nested types`, async () => {
+      createTypes(`
+        type PostFrontmatter {
+          published: Boolean!
+          newField: String
+        }
+
+        type Post implements Node {
+          frontmatter: PostFrontmatter
+        }
+      `)
+
+      const schema = await buildSchema()
+
+      const type = schema.getType(`Post`)
+      const fields = type.getFields()
+      expect(fields[`frontmatter`].type.toString()).toEqual(`PostFrontmatter`)
+      const nestedType = schema.getType(`PostFrontmatter`)
+      const nestedFields = nestedType.getFields()
+      expect(nestedFields[`authors`].type.toString()).toEqual(`[String]`)
+      expect(nestedFields[`reviewers`].type.toString()).toEqual(`[String]`)
+      expect(nestedFields[`published`].type.toString()).toEqual(`Boolean!`)
+      expect(nestedFields[`date`].type.toString()).toEqual(`Date`)
+      expect(nestedFields[`newField`].type.toString()).toEqual(`String`)
+    })
+  })
+
+  describe(`createResolvers`, () => {
+    it(`allows adding resolver to field`, async () => {
+      createTypes(`
+        type Author implements Node {
+          name(withHello: Boolean = false): String!
+        }
+      `)
+      createCreateResolversMock({
+        Author: {
+          name: {
+            resolve(parent, args, context, info) {
+              if (args.withHello) {
+                return `Hello ${parent.name}`
+              } else {
+                return info.originalResolver(parent, args, context, info)
+              }
+            },
+          },
+        },
+      })
+      const schema = await buildSchema()
+      const type = schema.getType(`Author`)
+      const fields = type.getFields()
+      expect(fields[`name`].resolve).toBeDefined()
+      expect(
+        fields[`name`].resolve(
+          { name: `Mikhail` },
+          { withHello: true },
+          {},
+          {
+            fieldName: `name`,
+          }
+        )
+      ).toEqual(`Hello Mikhail`)
+      expect(
+        fields[`name`].resolve(
+          { name: `Mikhail` },
+          { withHello: false },
+          {},
+          {
+            fieldName: `name`,
+          }
+        )
+      ).toEqual(`Mikhail`)
+    })
+
+    it(`allows adding args to field`, async () => {
+      createCreateResolversMock({
+        Author: {
+          name: {
+            args: {
+              withHello: {
+                type: `Boolean`,
+                defaultValue: false,
+              },
+            },
+            resolve(parent, args, context, info) {
+              if (args.withHello) {
+                return `Hello ${parent.name}`
+              } else {
+                return info.originalResolver(parent, args, context, info)
+              }
+            },
+          },
+        },
+      })
+      const schema = await buildSchema()
+      const type = schema.getType(`Author`)
+      const fields = type.getFields()
+      expect(fields[`name`].resolve).toBeDefined()
+      expect(
+        fields[`name`].resolve(
+          { name: `Mikhail` },
+          { withHello: true },
+          {},
+          {
+            fieldName: `name`,
+          }
+        )
+      ).toEqual(`Hello Mikhail`)
+      expect(
+        fields[`name`].resolve(
+          { name: `Mikhail` },
+          { withHello: false },
+          {},
+          {
+            fieldName: `name`,
+          }
+        )
+      ).toEqual(`Mikhail`)
+    })
+
+    it(`disallows overriding field type on field`, async () => {
+      createCreateResolversMock({
+        Author: {
+          name: {
+            type: `Boolean`,
+          },
+        },
+      })
+      const schema = await buildSchema()
+      const type = schema.getType(`Author`)
+      const fields = type.getFields()
+      expect(fields[`name`].type).toEqual(GraphQLString)
+    })
+
+    it(`allows setting field type nullability on field`, async () => {
+      createTypes(`
+        type Post implements Node {
+          tags: [String!]!
+          categories: [String]
+        }
+      `)
+      createCreateResolversMock({
+        Post: {
+          tags: {
+            type: `[String]`,
+            resolve() {
+              return [`All good`]
+            },
+          },
+          categories: {
+            type: `[String!]!`,
+            resolve() {
+              return [`Even better`]
+            },
+          },
+        },
+      })
+      const schema = await buildSchema()
+      const type = schema.getType(`Post`)
+      const fields = type.getFields()
+      expect(fields[`tags`].type.toString()).toBe(`[String]`)
+      expect(fields[`tags`].resolve).toBeDefined()
+      expect(fields[`categories`].type.toString()).toBe(`[String!]!`)
+      expect(fields[`categories`].resolve).toBeDefined()
+    })
+
+    it(`allows overriding field type on field on third-party type`, async () => {
+      addThirdPartySchema(`
+        type ThirdPartyFoo {
+          text: String
+        }
+
+        type Query {
+          foo: ThirdPartyFoo
+        }
+      `)
+      createCreateResolversMock({
+        ThirdPartyFoo: {
+          text: {
+            type: `Boolean`,
+          },
+        },
+      })
+
+      const schema = await buildSchema()
+      const type = schema.getType(`ThirdPartyFoo`)
+      const fields = type.getFields()
+      expect(fields[`text`].type).toEqual(GraphQLBoolean)
+    })
+
+    it(`allows adding new field`, async () => {
+      createCreateResolversMock({
+        Author: {
+          newField: {
+            type: `String`,
+          },
+        },
+      })
+
+      const schema = await buildSchema()
+      const type = schema.getType(`Author`)
+      const fields = type.getFields()
+      expect(fields[`newField`]).toBeDefined()
+      expect(fields[`newField`].type).toEqual(GraphQLString)
+    })
+
+    it(`disallows adding if type does not exist`, async () => {
+      createCreateResolversMock({
+        FakeType: {
+          newField: {
+            type: `String`,
+          },
+        },
+      })
+      const schema = await buildSchema()
+      const type = schema.getType(`FakeType`)
+      expect(type).not.toBeDefined()
+    })
+
+    it(`makes original field resolver available on info`, async () => {
+      createCreateResolversMock({
+        PostFrontmatter: {
+          date: {
+            resolve(parent, args, context, info) {
+              if (parent.date.getFullYear() < 2018) {
+                return info.originalResolver(
+                  {
+                    ...parent,
+                    date: new Date(2018, 10, 10),
+                  },
+                  args,
+                  context,
+                  info
+                )
+              } else {
+                return info.originalResolver(parent, args, context, info)
+              }
+            },
+          },
+        },
+      })
+      const schema = await buildSchema()
+      const type = schema.getType(`PostFrontmatter`)
+      const fields = type.getFields()
+      expect(
+        fields[`date`].resolve(
+          { date: new Date(2019, 10, 10) },
+          { formatString: `YYYY` },
+          {},
+          {
+            fieldName: `date`,
+          }
+        )
+      ).toEqual(`2019`)
+      expect(
+        fields[`date`].resolve(
+          { date: new Date(2010, 10, 10) },
+          { formatString: `YYYY` },
+          {},
+          {
+            fieldName: `date`,
+          }
+        )
+      ).toEqual(`2018`)
+    })
+
+    // TODO: Define what "handles being called multiple times mean"
+    it.todo(`handles being called multiple times`)
+  })
+
+  describe(`addThirdPartySchemas`, () => {
+    it(`makes third-party schema available on root Query type`, async () => {
+      addThirdPartySchema(`
+        type ThirdPartyFoo {
+          text: String
+        }
+
+        type Query {
+          foo: ThirdPartyFoo
+          foos: [ThirdPartyFoo]
+          query: Query
+          relay: [Query!]!
+        }
+      `)
+      createCreateResolversMock({
+        ThirdPartyFoo: {
+          text: {
+            type: `Boolean`,
+          },
+        },
+      })
+
+      const schema = await buildSchema()
+      const type = schema.getType(`Query`)
+      const fields = type.getFields()
+      expect(fields[`foo`].type.toString()).toEqual(`ThirdPartyFoo`)
+      expect(fields[`foos`].type.toString()).toEqual(`[ThirdPartyFoo]`)
+      expect(fields[`query`].type.toString()).toEqual(`Query`)
+      expect(fields[`relay`].type.toString()).toEqual(`[Query!]!`)
+    })
+
+    it(`adds third-party types to schema`, async () => {
+      addThirdPartySchema(`
+        type ThirdPartyFoo {
+          text: String
+        }
+
+        type ThirdPartyBar {
+          baz: String
+        }
+
+        union ThirdPartyUnion = ThirdPartyFoo | ThirdPartyBar
+
+        type Query {
+          union: ThirdPartyUnion
+        }
+      `)
+
+      const schema = await buildSchema()
+      ;[`ThirdPartyFoo`, `ThirdPartyBar`, `ThirdPartyUnion`].forEach(
+        typeName => {
+          const type = schema.getType(typeName)
+          expect(type).toBeDefined()
+        }
+      )
+    })
+  })
+
+  describe(`setFieldsOnGraphQLNodeType`, () => {
+    it(`allows adding fields`, async () => {
+      createSetFieldsOnNodeTypeMock(({ type: { name } }) => {
+        if (name === `Author`) {
+          return [
+            {
+              newField: {
+                type: GraphQLString,
+              },
+            },
+          ]
+        } else {
+          return []
+        }
+      })
+
+      const schema = await buildSchema()
+      const type = schema.getType(`Author`)
+      const fields = type.getFields()
+      expect(fields[`newField`]).toBeDefined()
+      expect(fields[`newField`].type).toBe(GraphQLString)
+    })
+
+    it(`allows adding nested fields`, async () => {
+      createSetFieldsOnNodeTypeMock(({ type: { name } }) => {
+        if (name === `Post`) {
+          return [
+            {
+              newField: {
+                type: GraphQLString,
+              },
+              "frontmatter.newField": {
+                type: GraphQLString,
+              },
+            },
+          ]
+        } else {
+          return []
+        }
+      })
+
+      const schema = await buildSchema()
+      const type = schema.getType(`Post`)
+      const fields = type.getFields()
+      expect(fields[`newField`]).toBeDefined()
+      expect(fields[`newField`].type).toBe(GraphQLString)
+      const frontmatterType = fields[`frontmatter`].type
+      const frontmatterFields = frontmatterType.getFields()
+      expect(frontmatterFields[`newField`]).toBeDefined()
+      expect(frontmatterFields[`newField`].type).toBe(GraphQLString)
+    })
+  })
+})
+
+const createTypes = types => {
+  store.dispatch({ type: `CREATE_TYPES`, payload: types })
+}
+
+const createCreateResolversMock = resolvers => {
+  const apiRunnerNode = require(`../../utils/api-runner-node`)
+  apiRunnerNode.mockImplementation((api, { createResolvers }) => {
+    if (api === `createResolvers`) {
+      return createResolvers(resolvers)
+    }
+    return []
+  })
+}
+
+const createSetFieldsOnNodeTypeMock = mock => {
+  const apiRunnerNode = require(`../../utils/api-runner-node`)
+  apiRunnerNode.mockImplementation((api, ...args) => {
+    if (api === `setFieldsOnGraphQLNodeType`) {
+      return mock(...args)
+    }
+    return []
+  })
+}
+
+const addDefaultApiRunnerMock = () => {
+  const apiRunnerNode = require(`../../utils/api-runner-node`)
+  apiRunnerNode.mockImplementation(() => [])
+}
+
+const buildSchema = async () => {
+  await build({})
+  return store.getState().schema
+}
+
+const addThirdPartySchema = async typeDefs => {
+  const schemaComposer = new SchemaComposer()
+  schemaComposer.addTypeDefs(typeDefs)
+  const schema = schemaComposer.buildSchema()
+  store.dispatch({ type: `ADD_THIRD_PARTY_SCHEMA`, payload: schema })
+}
diff --git a/node_modules/gatsby/src/schema/__tests__/connection-filter-on-linked-nodes.js b/node_modules/gatsby/src/schema/__tests__/connection-filter-on-linked-nodes.js
new file mode 100644
index 0000000..ee603bb
--- /dev/null
+++ b/node_modules/gatsby/src/schema/__tests__/connection-filter-on-linked-nodes.js
@@ -0,0 +1,259 @@
+const { graphql } = require(`graphql`)
+const { createSchemaComposer } = require(`../schema-composer`)
+const { buildSchema } = require(`../schema`)
+const { LocalNodeModel } = require(`../node-model`)
+const nodeStore = require(`../../db/nodes`)
+const { store } = require(`../../redux`)
+require(`../../db/__tests__/fixtures/ensure-loki`)()
+
+function makeNodes() {
+  return [
+    { id: `child_1`, internal: { type: `Child` }, hair: `brown`, children: [] },
+    {
+      id: `child_2`,
+      internal: { type: `Child` },
+      children: [],
+      hair: `blonde`,
+      height: 101,
+    },
+    {
+      id: `linked_A`,
+      internal: { type: `Linked_A` },
+      children: [],
+      array: [{ linked___NODE: `linked_B` }],
+      single: { linked___NODE: `linked_B` },
+    },
+    { id: `linked_B`, internal: { type: `Linked_B` }, children: [] },
+  ]
+}
+
+async function queryResult(nodes, query) {
+  store.dispatch({ type: `DELETE_CACHE` })
+  nodes.forEach(node => store.dispatch({ type: `CREATE_NODE`, payload: node }))
+
+  const schemaComposer = createSchemaComposer()
+  const schema = await buildSchema({
+    schemaComposer,
+    nodeStore,
+    types: [],
+    thirdPartySchemas: [],
+  })
+  store.dispatch({ type: `SET_SCHEMA`, payload: schema })
+
+  let context = { path: `foo` }
+  return graphql(schema, query, undefined, {
+    ...context,
+    nodeModel: new LocalNodeModel({
+      schema,
+      nodeStore,
+      createPageDependency: jest.fn(),
+    }),
+  })
+}
+
+describe(`filtering on linked nodes`, () => {
+  it(`filters on linked nodes via id`, async () => {
+    let result = await queryResult(
+      makeNodes().concat([
+        {
+          id: `child_2_link`,
+          internal: { type: `Test` },
+          children: [],
+          linked___NODE: `child_2`,
+          foo: `bar`,
+        },
+        {
+          id: `child_1_linked`,
+          internal: { type: `Test` },
+          children: [],
+          linked___NODE: `child_1`,
+          foo: `baz`,
+        },
+      ]),
+      `
+        {
+          allTest(filter: { linked: { hair: { eq: "blonde" } } }) {
+            edges { node { linked { hair, height }, foo } }
+          }
+        }
+      `
+    )
+    expect(result.data.allTest.edges.length).toEqual(1)
+    expect(result.data.allTest.edges[0].node.linked.hair).toEqual(`blonde`)
+    expect(result.data.allTest.edges[0].node.linked.height).toEqual(101)
+    expect(result.data.allTest.edges[0].node.foo).toEqual(`bar`)
+  })
+
+  it(`returns nested linked fields`, async () => {
+    let result = await queryResult(
+      [
+        {
+          id: `child_2`,
+          internal: { type: `Child` },
+          children: [],
+          hair: `blonde`,
+          height: 101,
+        },
+        {
+          id: `child_1_link`,
+          internal: { type: `Test` },
+          children: [],
+          nested: {
+            linked___NODE: `child_2`,
+          },
+          foo: `bar`,
+        },
+      ],
+      `
+        {
+          allTest(filter: { nested: { linked: { hair: { eq: "blonde" } } } }) {
+            edges { node { nested { linked { hair, height } }, foo } }
+          }
+        }
+      `
+    )
+    expect(result.data.allTest.edges[0].node.nested.linked.hair).toEqual(
+      `blonde`
+    )
+    expect(result.data.allTest.edges[0].node.nested.linked.height).toEqual(101)
+    expect(result.data.allTest.edges[0].node.foo).toEqual(`bar`)
+  })
+
+  it(`returns all matching linked nodes`, async () => {
+    let result = await queryResult(
+      makeNodes().concat([
+        {
+          id: `child_2_link`,
+          internal: { type: `Test` },
+          children: [],
+          linked___NODE: `child_2`,
+          foo: `bar`,
+        },
+        {
+          id: `child_2_link2`,
+          internal: { type: `Test` },
+          children: [],
+          linked___NODE: `child_2`,
+          foo: `baz`,
+        },
+      ]),
+      `
+        {
+          allTest(filter: { linked: { hair: { eq: "blonde" } } }) {
+            edges { node { linked { hair, height }, foo } }
+          }
+        }
+      `
+    )
+    expect(result.data.allTest.edges[0].node.linked.hair).toEqual(`blonde`)
+    expect(result.data.allTest.edges[0].node.linked.height).toEqual(101)
+    expect(result.data.allTest.edges[0].node.foo).toEqual(`bar`)
+    expect(result.data.allTest.edges[1].node.foo).toEqual(`baz`)
+  })
+
+  it(`handles elemMatch operator`, async () => {
+    let result = await queryResult(
+      makeNodes().concat([
+        {
+          id: `1`,
+          internal: { type: `Test` },
+          children: [],
+          linked___NODE: [`child_1`, `child_2`],
+          foo: `bar`,
+        },
+        {
+          id: `2`,
+          internal: { type: `Test` },
+          children: [],
+          linked___NODE: [`child_1`],
+          foo: `baz`,
+        },
+        {
+          id: `3`,
+          internal: { type: `Test` },
+          children: [],
+          linked___NODE: [`child_2`],
+          foo: `foo`,
+        },
+        {
+          id: `4`,
+          internal: { type: `Test` },
+          children: [],
+          array: [{ linked___NODE: [`child_1`, `child_2`] }],
+          foo: `lorem`,
+        },
+        {
+          id: `5`,
+          internal: { type: `Test` },
+          children: [],
+          array: [
+            { linked___NODE: [`child_1`] },
+            { linked___NODE: [`child_2`] },
+          ],
+          foo: `ipsum`,
+        },
+        {
+          id: `6`,
+          internal: { type: `Test` },
+          children: [],
+          array: [{ linked___NODE: [`child_1`] }],
+          foo: `sit`,
+        },
+        {
+          id: `7`,
+          internal: { type: `Test` },
+          children: [],
+          array: [{ linked___NODE: [`child_2`] }],
+          foo: `dolor`,
+        },
+        {
+          id: `8`,
+          internal: { type: `Test` },
+          children: [],
+          foo: `ipsum`,
+        },
+      ]),
+      `
+        {
+          eq:allTest(filter: { linked: { elemMatch: { hair: { eq: "brown" } } } }) {
+            edges { node { foo } }
+          }
+          in:allTest(filter: { linked: { elemMatch: { hair: { in: ["brown", "blonde"] } } } }) {
+            edges { node { foo } }
+          }
+          insideInlineArrayEq:allTest(filter: { array: { elemMatch: { linked: { elemMatch: { hair: { eq: "brown" } } } } } }) {
+            edges { node { foo } }
+          }
+          insideInlineArrayIn:allTest(filter: { array: { elemMatch: { linked: { elemMatch: { hair: { in: ["brown", "blonde"] } } } } } }) {
+            edges { node { foo } }
+          }
+        }
+      `
+    )
+
+    const itemToEdge = item => {
+      return {
+        node: {
+          foo: item,
+        },
+      }
+    }
+
+    expect(result.data.eq.edges).toEqual([`bar`, `baz`].map(itemToEdge))
+    expect(result.data.in.edges).toEqual([`bar`, `baz`, `foo`].map(itemToEdge))
+    expect(result.data.insideInlineArrayEq.edges).toEqual(
+      [`lorem`, `ipsum`, `sit`].map(itemToEdge)
+    )
+    expect(result.data.insideInlineArrayIn.edges).toEqual(
+      [`lorem`, `ipsum`, `sit`, `dolor`].map(itemToEdge)
+    )
+  })
+
+  it.skip(`doesn't mutate node object`, async () => {
+    // We now infer the InputObjectType from the ObjectType, not from exampleValue
+  })
+
+  it.skip(`skips fields with missing nodes`, async () => {
+    // We now infer the InputObjectType from the ObjectType, not from exampleValue
+  })
+})
diff --git a/node_modules/gatsby/src/schema/__tests__/connection-input-fields.js b/node_modules/gatsby/src/schema/__tests__/connection-input-fields.js
new file mode 100644
index 0000000..d693053
--- /dev/null
+++ b/node_modules/gatsby/src/schema/__tests__/connection-input-fields.js
@@ -0,0 +1,278 @@
+const { graphql } = require(`graphql`)
+const { createSchemaComposer } = require(`../schema-composer`)
+const { buildSchema } = require(`../schema`)
+const { LocalNodeModel } = require(`../node-model`)
+const nodeStore = require(`../../db/nodes`)
+const { store } = require(`../../redux`)
+require(`../../db/__tests__/fixtures/ensure-loki`)()
+
+function makeNodes() {
+  return [
+    {
+      id: `0`,
+      internal: { type: `Test` },
+      children: [],
+      index: 0,
+      name: `The Mad Max`,
+      string: `a`,
+      float: 1.5,
+      hair: 1,
+      date: `2006-07-22T22:39:53.000Z`,
+      anArray: [1, 2, 3, 4],
+      key: {
+        withEmptyArray: [],
+      },
+      anotherKey: {
+        withANested: {
+          nestedKey: `foo`,
+          emptyArray: [],
+          anotherEmptyArray: [],
+        },
+      },
+      frontmatter: {
+        date: `2006-07-22T22:39:53.000Z`,
+        title: `The world of dash and adventure`,
+        blue: 100,
+      },
+      anObjectArray: [
+        { aString: `some string`, aNumber: 2, aBoolean: true },
+        { aString: `some string`, aNumber: 2, anArray: [1, 2] },
+      ],
+      boolean: true,
+    },
+    {
+      id: `1`,
+      internal: { type: `Test` },
+      children: [],
+      index: 1,
+      name: `The Mad Wax`,
+      string: `b`,
+      float: 2.5,
+      hair: 2,
+      anArray: [1, 2, 5, 4],
+      anotherKey: {
+        withANested: {
+          nestedKey: `foo`,
+        },
+      },
+      frontmatter: {
+        date: `2006-07-22T22:39:53.000Z`,
+        title: `The world of slash and adventure`,
+        blue: 10010,
+        circle: `happy`,
+      },
+      boolean: false,
+      data: {
+        tags: [
+          {
+            tag: {
+              document: [
+                {
+                  data: {
+                    tag: `Design System`,
+                  },
+                  number: 3,
+                },
+              ],
+            },
+          },
+        ],
+      },
+    },
+    {
+      id: `2`,
+      internal: { type: `Test` },
+      children: [],
+      index: 2,
+      name: `The Mad Wax`,
+      string: `c`,
+      float: 3.5,
+      hair: 0,
+      date: `2006-07-29T22:39:53.000Z`,
+      anotherKey: {
+        withANested: {
+          nestedKey: `bar`,
+        },
+      },
+      frontmatter: {
+        date: `2006-07-22T22:39:53.000Z`,
+        title: `The world of shave and adventure`,
+        blue: 10010,
+        circle: `happy`,
+      },
+      data: {
+        tags: [
+          {
+            tag: {
+              document: [
+                {
+                  data: {
+                    tag: `Gatsby`,
+                  },
+                },
+              ],
+            },
+          },
+          {
+            tag: {
+              document: [
+                {
+                  data: {
+                    tag: `Design System`,
+                  },
+                  number: 5,
+                },
+              ],
+            },
+          },
+        ],
+      },
+    },
+  ]
+}
+
+async function queryResult(nodes, query) {
+  store.dispatch({ type: `DELETE_CACHE` })
+  nodes.forEach(node => store.dispatch({ type: `CREATE_NODE`, payload: node }))
+
+  const schemaComposer = createSchemaComposer()
+  const schema = await buildSchema({
+    schemaComposer,
+    nodeStore,
+    types: [],
+    thirdPartySchemas: [],
+  })
+  store.dispatch({ type: `SET_SCHEMA`, payload: schema })
+
+  let context = { path: `foo` }
+  return graphql(schema, query, undefined, {
+    ...context,
+    nodeModel: new LocalNodeModel({
+      schema,
+      nodeStore,
+      createPageDependency: jest.fn(),
+    }),
+  })
+}
+
+describe(`connection input fields`, () => {
+  it(`returns list of distinct values in a field`, async () => {
+    let result = await queryResult(
+      makeNodes(),
+      `
+        {
+          allTest {
+            totalCount
+            names: distinct(field: name)
+            array: distinct(field: anArray)
+            blue: distinct(field: frontmatter___blue)
+            # Only one node has this field
+            circle: distinct(field: frontmatter___circle)
+            nestedField: distinct(field: anotherKey___withANested___nestedKey)
+          }
+        }
+      `
+    )
+
+    expect(result.errors).not.toBeDefined()
+
+    expect(result.data.allTest.names.length).toEqual(2)
+    expect(result.data.allTest.names[0]).toEqual(`The Mad Max`)
+
+    expect(result.data.allTest.array.length).toEqual(5)
+    expect(result.data.allTest.array[0]).toEqual(`1`)
+
+    expect(result.data.allTest.blue.length).toEqual(2)
+    expect(result.data.allTest.blue[0]).toEqual(`100`)
+
+    expect(result.data.allTest.circle.length).toEqual(1)
+    expect(result.data.allTest.circle[0]).toEqual(`happy`)
+
+    expect(result.data.allTest.nestedField.length).toEqual(2)
+    expect(result.data.allTest.nestedField[0]).toEqual(`bar`)
+    expect(result.data.allTest.nestedField[1]).toEqual(`foo`)
+  })
+
+  it(`handles the group connection field`, async () => {
+    let result = await queryResult(
+      makeNodes(),
+      ` {
+        allTest {
+          blue: group(field: frontmatter___blue) {
+            field
+            fieldValue
+            totalCount
+          }
+          anArray: group(field: anArray) {
+            field
+            fieldValue
+            totalCount
+          }
+        }
+      }`
+    )
+    expect(result.errors).not.toBeDefined()
+
+    expect(result.data.allTest.blue).toHaveLength(2)
+    expect(result.data.allTest.blue[0].fieldValue).toEqual(`100`)
+    expect(result.data.allTest.blue[0].field).toEqual(`frontmatter.blue`)
+    expect(result.data.allTest.blue[0].totalCount).toEqual(1)
+
+    expect(result.data.allTest.anArray).toHaveLength(5)
+    expect(result.data.allTest.anArray[0].fieldValue).toEqual(`1`)
+    expect(result.data.allTest.anArray[0].field).toEqual(`anArray`)
+    expect(result.data.allTest.anArray[0].totalCount).toEqual(2)
+  })
+
+  it(`handles the nested group connection field`, async () => {
+    let result = await queryResult(
+      makeNodes(),
+      ` {
+        allTest {
+          nestedKey: group(field: anotherKey___withANested___nestedKey) {
+            field
+            fieldValue
+            totalCount
+          }
+        }
+      }`
+    )
+
+    expect(result.errors).not.toBeDefined()
+    expect(result.data.allTest.nestedKey).toHaveLength(2)
+    expect(result.data.allTest.nestedKey[0].fieldValue).toEqual(`bar`)
+    expect(result.data.allTest.nestedKey[0].field).toEqual(
+      `anotherKey.withANested.nestedKey`
+    )
+    expect(result.data.allTest.nestedKey[0].totalCount).toEqual(1)
+    expect(result.data.allTest.nestedKey[1].fieldValue).toEqual(`foo`)
+    expect(result.data.allTest.nestedKey[1].field).toEqual(
+      `anotherKey.withANested.nestedKey`
+    )
+    expect(result.data.allTest.nestedKey[1].totalCount).toEqual(2)
+  })
+
+  it(`can query object arrays`, async () => {
+    let result = await queryResult(
+      makeNodes(),
+      `
+        {
+          allTest {
+            edges {
+              node {
+                anObjectArray {
+                  aString
+                  aNumber
+                  aBoolean
+                }
+              }
+            }
+          }
+        }
+      `
+    )
+    expect(result.errors).not.toBeDefined()
+
+    expect(result).toMatchSnapshot()
+  })
+})
diff --git a/node_modules/gatsby/src/schema/__tests__/fixtures/kitchen-sink.json b/node_modules/gatsby/src/schema/__tests__/fixtures/kitchen-sink.json
new file mode 100644
index 0000000..c9ac2f7
--- /dev/null
+++ b/node_modules/gatsby/src/schema/__tests__/fixtures/kitchen-sink.json
@@ -0,0 +1,11257 @@
+[
+  {
+    "jsonName": "dev-404-page-5f9",
+    "internalComponentName": "ComponentDev404Page",
+    "path": "/dev-404-page/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/.cache/dev-404-page.js",
+    "componentChunkName": "component---cache-dev-404-page-js",
+    "context": {},
+    "pluginCreator___NODE": "d48d1c52-fe48-53cb-8f08-aa4b47dde5a5",
+    "pluginCreatorId": "d48d1c52-fe48-53cb-8f08-aa4b47dde5a5",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/.cache/dev-404-page.js",
+    "id": "SitePage /dev-404-page/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "42a24b67a94307f5e21997eb6cfc9cc5",
+      "description": "d48d1c52-fe48-53cb-8f08-aa4b47dde5a5",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "resolve": "<PROJECT_ROOT>/examples/gatsbygram/node_modules/gatsby/dist/internal-plugins/dev-404-page",
+    "id": "d48d1c52-fe48-53cb-8f08-aa4b47dde5a5",
+    "name": "dev-404-page",
+    "version": "1.0.0",
+    "pluginOptions": {
+      "plugins": []
+    },
+    "nodeAPIs": [
+      "createPagesStatefully"
+    ],
+    "browserAPIs": [],
+    "ssrAPIs": [],
+    "pluginFilepath": "<PROJECT_ROOT>/examples/gatsbygram/node_modules/gatsby/dist/internal-plugins/dev-404-page",
+    "packageJson": {
+      "name": "dev-404-page",
+      "description": "Internal plugin to add a 404 page in development with helpful information",
+      "version": "1.0.0",
+      "main": "index.js",
+      "author": "Kyle Mathews <mathews.kyle@gmail.com>",
+      "license": "MIT",
+      "dependencies": [],
+      "devDependencies": [],
+      "peerDependencies": [],
+      "optionalDependecies": [],
+      "bundledDependecies": []
+    },
+    "parent": null,
+    "children": [],
+    "internal": {
+      "contentDigest": "2b5b4bced853926de0d5335ae5f9a5d3",
+      "type": "SitePlugin",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "resolve": "<PROJECT_ROOT>/examples/gatsbygram/node_modules/gatsby/dist/internal-plugins/load-babel-config",
+    "id": "1fc32581-893a-55e8-8927-bcd667e2b700",
+    "name": "load-babel-config",
+    "version": "1.0.0",
+    "pluginOptions": {
+      "plugins": []
+    },
+    "nodeAPIs": [
+      "onPreBootstrap"
+    ],
+    "browserAPIs": [],
+    "ssrAPIs": [],
+    "pluginFilepath": "<PROJECT_ROOT>/examples/gatsbygram/node_modules/gatsby/dist/internal-plugins/load-babel-config",
+    "packageJson": {
+      "name": "load-babel-config",
+      "description": "Internal plugin that handles loading Babel configs",
+      "version": "1.0.0",
+      "main": "index.js",
+      "author": "Kyle Mathews <mathews.kyle@gmail.com>",
+      "license": "MIT",
+      "dependencies": [],
+      "devDependencies": [],
+      "peerDependencies": [],
+      "optionalDependecies": [],
+      "bundledDependecies": []
+    },
+    "parent": null,
+    "children": [],
+    "internal": {
+      "contentDigest": "50184920d40e80f70b8bc61a8def475f",
+      "type": "SitePlugin",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "resolve": "<PROJECT_ROOT>/examples/gatsbygram/node_modules/gatsby/dist/internal-plugins/internal-data-bridge",
+    "id": "a5079d69-ba80-53dc-82f9-0f440bd5448c",
+    "name": "internal-data-bridge",
+    "version": "1.0.0",
+    "pluginOptions": {
+      "plugins": []
+    },
+    "nodeAPIs": [
+      "sourceNodes",
+      "onCreatePage"
+    ],
+    "browserAPIs": [],
+    "ssrAPIs": [],
+    "pluginFilepath": "<PROJECT_ROOT>/examples/gatsbygram/node_modules/gatsby/dist/internal-plugins/internal-data-bridge",
+    "packageJson": {
+      "name": "internal-data-bridge",
+      "description": "An internal Gatsby plugin which creates data nodes from internal data",
+      "version": "1.0.0",
+      "main": "index.js",
+      "author": "Kyle Mathews <mathews.kyle@gmail.com>",
+      "license": "MIT",
+      "dependencies": [],
+      "devDependencies": [],
+      "peerDependencies": [],
+      "optionalDependecies": [],
+      "bundledDependecies": []
+    },
+    "parent": null,
+    "children": [],
+    "internal": {
+      "contentDigest": "85bcc671b6e460a752264931c2cec1b6",
+      "type": "SitePlugin",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "resolve": "<PROJECT_ROOT>/examples/gatsbygram/node_modules/gatsby/dist/internal-plugins/prod-404",
+    "id": "f795702c-a3b8-5a88-88ee-5d06019d44fa",
+    "name": "prod-404",
+    "version": "1.0.0",
+    "pluginOptions": {
+      "plugins": []
+    },
+    "nodeAPIs": [
+      "onCreatePage"
+    ],
+    "browserAPIs": [],
+    "ssrAPIs": [],
+    "pluginFilepath": "<PROJECT_ROOT>/examples/gatsbygram/node_modules/gatsby/dist/internal-plugins/prod-404",
+    "packageJson": {
+      "name": "prod-404",
+      "description": "Internal plugin to detect various flavors of 404 pages and ensure there's a 404.html path created as well to ensure compatability with static hosts",
+      "version": "1.0.0",
+      "main": "index.js",
+      "author": "Kyle Mathews <mathews.kyle@gmail.com>",
+      "license": "MIT",
+      "dependencies": [],
+      "devDependencies": [],
+      "peerDependencies": [],
+      "optionalDependecies": [],
+      "bundledDependecies": []
+    },
+    "parent": null,
+    "children": [],
+    "internal": {
+      "contentDigest": "a4f893432f792cfe311d087d4d920c74",
+      "type": "SitePlugin",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "resolve": "<PROJECT_ROOT>/examples/gatsbygram/node_modules/gatsby/dist/internal-plugins/query-runner",
+    "id": "84dad27f-1d44-51fc-ac56-4db2e5222995",
+    "name": "query-runner",
+    "version": "1.0.0",
+    "pluginOptions": {
+      "plugins": []
+    },
+    "nodeAPIs": [
+      "onCreatePage"
+    ],
+    "browserAPIs": [],
+    "ssrAPIs": [],
+    "pluginFilepath": "<PROJECT_ROOT>/examples/gatsbygram/node_modules/gatsby/dist/internal-plugins/query-runner",
+    "packageJson": {
+      "name": "query-runner",
+      "description": "Internal plugin for running queries",
+      "version": "1.0.0",
+      "main": "index.js",
+      "author": "",
+      "license": "MIT",
+      "dependencies": [],
+      "devDependencies": [],
+      "peerDependencies": [],
+      "optionalDependecies": [],
+      "bundledDependecies": []
+    },
+    "parent": null,
+    "children": [],
+    "internal": {
+      "contentDigest": "85803f60a930a1147b86ff8022857e5f",
+      "type": "SitePlugin",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "resolve": "<PROJECT_ROOT>/examples/gatsbygram/node_modules/gatsby/dist/internal-plugins/webpack-theme-component-shadowing",
+    "id": "6f4b2fa9-66b5-5205-a03f-140005a2cfe5",
+    "name": "webpack-theme-component-shadowing",
+    "version": "1.0.0",
+    "pluginOptions": {
+      "plugins": []
+    },
+    "nodeAPIs": [
+      "onCreateWebpackConfig"
+    ],
+    "browserAPIs": [],
+    "ssrAPIs": [],
+    "pluginFilepath": "<PROJECT_ROOT>/examples/gatsbygram/node_modules/gatsby/dist/internal-plugins/webpack-theme-component-shadowing",
+    "packageJson": {
+      "name": "webpack-theme-component-shadowing",
+      "description": "An internal Gatsby plugin which handles configuring webpack to ensure theme components fall back from the user's site to theme modules.",
+      "version": "1.0.0",
+      "main": "index.js",
+      "author": "Chris Biscardi <chris@christopherbiscardi.com>",
+      "license": "MIT",
+      "dependencies": [],
+      "devDependencies": [],
+      "peerDependencies": [],
+      "optionalDependecies": [],
+      "bundledDependecies": []
+    },
+    "parent": null,
+    "children": [],
+    "internal": {
+      "contentDigest": "4dfb9738a5f82d68075b870cdd6346eb",
+      "type": "SitePlugin",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "resolve": "<PROJECT_ROOT>/examples/gatsbygram/node_modules/gatsby-source-filesystem",
+    "id": "9855a692-fe04-5c80-9f07-de8fe989d990",
+    "name": "gatsby-source-filesystem",
+    "version": "2.0.17",
+    "pluginOptions": {
+      "plugins": [],
+      "name": "data",
+      "path": "<PROJECT_ROOT>/examples/gatsbygram/data"
+    },
+    "nodeAPIs": [
+      "sourceNodes",
+      "setFieldsOnGraphQLNodeType"
+    ],
+    "browserAPIs": [],
+    "ssrAPIs": [],
+    "pluginFilepath": "<PROJECT_ROOT>/examples/gatsbygram/node_modules/gatsby-source-filesystem",
+    "packageJson": {
+      "name": "gatsby-source-filesystem",
+      "description": "Gatsby plugin which parses files within a directory for further parsing by other plugins",
+      "version": "2.0.17",
+      "keywords": [
+        "gatsby",
+        "gatsby-plugin"
+      ],
+      "author": "Kyle Mathews <mathews.kyle@gmail.com>",
+      "license": "MIT",
+      "dependencies": [
+        {
+          "name": "@babel/runtime",
+          "version": "^7.0.0"
+        },
+        {
+          "name": "better-queue",
+          "version": "^3.8.7"
+        },
+        {
+          "name": "bluebird",
+          "version": "^3.5.0"
+        },
+        {
+          "name": "chokidar",
+          "version": "^1.7.0"
+        },
+        {
+          "name": "file-type",
+          "version": "^10.2.0"
+        },
+        {
+          "name": "fs-extra",
+          "version": "^5.0.0"
+        },
+        {
+          "name": "got",
+          "version": "^7.1.0"
+        },
+        {
+          "name": "md5-file",
+          "version": "^3.1.1"
+        },
+        {
+          "name": "mime",
+          "version": "^2.2.0"
+        },
+        {
+          "name": "pretty-bytes",
+          "version": "^4.0.2"
+        },
+        {
+          "name": "progress",
+          "version": "^1.1.8"
+        },
+        {
+          "name": "read-chunk",
+          "version": "^3.0.0"
+        },
+        {
+          "name": "slash",
+          "version": "^1.0.0"
+        },
+        {
+          "name": "valid-url",
+          "version": "^1.0.9"
+        },
+        {
+          "name": "xstate",
+          "version": "^3.1.0"
+        }
+      ],
+      "devDependencies": [
+        {
+          "name": "@babel/cli",
+          "version": "^7.0.0"
+        },
+        {
+          "name": "@babel/core",
+          "version": "^7.0.0"
+        },
+        {
+          "name": "babel-preset-gatsby-package",
+          "version": "^0.1.3"
+        },
+        {
+          "name": "cross-env",
+          "version": "^5.1.4"
+        }
+      ],
+      "peerDependencies": [
+        {
+          "name": "gatsby",
+          "version": ">2.0.0-alpha"
+        }
+      ],
+      "optionalDependecies": [],
+      "bundledDependecies": []
+    },
+    "parent": null,
+    "children": [],
+    "internal": {
+      "contentDigest": "b989561eb4aee8115abfb92098ce322b",
+      "type": "SitePlugin",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "resolve": "<PROJECT_ROOT>/examples/gatsbygram/node_modules/gatsby-plugin-sharp",
+    "id": "84d6154d-4241-556c-a679-cc8339cac100",
+    "name": "gatsby-plugin-sharp",
+    "version": "2.0.18",
+    "pluginOptions": {
+      "plugins": []
+    },
+    "nodeAPIs": [
+      "onPreInit"
+    ],
+    "browserAPIs": [],
+    "ssrAPIs": [],
+    "pluginFilepath": "<PROJECT_ROOT>/examples/gatsbygram/node_modules/gatsby-plugin-sharp",
+    "packageJson": {
+      "name": "gatsby-plugin-sharp",
+      "description": "Wrapper of the Sharp image manipulation library for Gatsby plugins",
+      "version": "2.0.18",
+      "main": "index.js",
+      "keywords": [
+        "gatsby",
+        "gatsby-plugin",
+        "image",
+        "sharp"
+      ],
+      "author": "Kyle Mathews <mathews.kyle@gmail.com>",
+      "license": "MIT",
+      "dependencies": [
+        {
+          "name": "@babel/runtime",
+          "version": "^7.0.0"
+        },
+        {
+          "name": "async",
+          "version": "^2.1.2"
+        },
+        {
+          "name": "bluebird",
+          "version": "^3.5.0"
+        },
+        {
+          "name": "fs-exists-cached",
+          "version": "^1.0.0"
+        },
+        {
+          "name": "fs-extra",
+          "version": "^7.0.0"
+        },
+        {
+          "name": "imagemin",
+          "version": "^6.0.0"
+        },
+        {
+          "name": "imagemin-mozjpeg",
+          "version": "^8.0.0"
+        },
+        {
+          "name": "imagemin-pngquant",
+          "version": "^6.0.0"
+        },
+        {
+          "name": "imagemin-webp",
+          "version": "^5.0.0"
+        },
+        {
+          "name": "lodash",
+          "version": "^4.17.10"
+        },
+        {
+          "name": "mini-svg-data-uri",
+          "version": "^1.0.0"
+        },
+        {
+          "name": "potrace",
+          "version": "^2.1.1"
+        },
+        {
+          "name": "probe-image-size",
+          "version": "^4.0.0"
+        },
+        {
+          "name": "progress",
+          "version": "^1.1.8"
+        },
+        {
+          "name": "sharp",
+          "version": "^0.21.0"
+        },
+        {
+          "name": "svgo",
+          "version": "^0.7.2"
+        }
+      ],
+      "devDependencies": [
+        {
+          "name": "@babel/cli",
+          "version": "^7.0.0"
+        },
+        {
+          "name": "@babel/core",
+          "version": "^7.0.0"
+        },
+        {
+          "name": "babel-preset-gatsby-package",
+          "version": "^0.1.3"
+        },
+        {
+          "name": "cross-env",
+          "version": "^5.1.4"
+        }
+      ],
+      "peerDependencies": [
+        {
+          "name": "gatsby",
+          "version": ">2.0.0-alpha"
+        }
+      ],
+      "optionalDependecies": [],
+      "bundledDependecies": []
+    },
+    "parent": null,
+    "children": [],
+    "internal": {
+      "contentDigest": "8add3038ea3427eb78b761b82dcb7666",
+      "type": "SitePlugin",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "resolve": "<PROJECT_ROOT>/examples/gatsbygram/node_modules/gatsby-transformer-sharp",
+    "id": "da3d06eb-685e-5c77-ae1d-750eb6a2e4a9",
+    "name": "gatsby-transformer-sharp",
+    "version": "2.1.12",
+    "pluginOptions": {
+      "plugins": []
+    },
+    "nodeAPIs": [
+      "onCreateNode",
+      "setFieldsOnGraphQLNodeType",
+      "onPreExtractQueries"
+    ],
+    "browserAPIs": [],
+    "ssrAPIs": [],
+    "pluginFilepath": "<PROJECT_ROOT>/examples/gatsbygram/node_modules/gatsby-transformer-sharp",
+    "packageJson": {
+      "name": "gatsby-transformer-sharp",
+      "description": "Gatsby transformer plugin for images using Sharp",
+      "version": "2.1.12",
+      "keywords": [
+        "gatsby",
+        "gatsby-plugin",
+        "image",
+        "sharp"
+      ],
+      "author": "Kyle Mathews <mathews.kyle@gmail.com>",
+      "license": "MIT",
+      "dependencies": [
+        {
+          "name": "@babel/runtime",
+          "version": "^7.0.0"
+        },
+        {
+          "name": "bluebird",
+          "version": "^3.5.0"
+        },
+        {
+          "name": "fs-extra",
+          "version": "^4.0.2"
+        },
+        {
+          "name": "potrace",
+          "version": "^2.1.1"
+        },
+        {
+          "name": "probe-image-size",
+          "version": "^4.0.0"
+        },
+        {
+          "name": "sharp",
+          "version": "^0.21.0"
+        }
+      ],
+      "devDependencies": [
+        {
+          "name": "@babel/cli",
+          "version": "^7.0.0"
+        },
+        {
+          "name": "@babel/core",
+          "version": "^7.0.0"
+        },
+        {
+          "name": "babel-preset-gatsby-package",
+          "version": "^0.1.3"
+        },
+        {
+          "name": "cross-env",
+          "version": "^5.1.4"
+        }
+      ],
+      "peerDependencies": [
+        {
+          "name": "gatsby",
+          "version": "^2.0.33"
+        },
+        {
+          "name": "gatsby-plugin-sharp",
+          "version": "^2.0.0-beta.3"
+        }
+      ],
+      "optionalDependecies": [],
+      "bundledDependecies": []
+    },
+    "parent": null,
+    "children": [],
+    "internal": {
+      "contentDigest": "a590bcac2abc9aa140121a41d81e80eb",
+      "type": "SitePlugin",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "resolve": "<PROJECT_ROOT>/examples/gatsbygram/node_modules/gatsby-transformer-json",
+    "id": "6aa321d5-19bf-5a36-99ac-3b6091585e24",
+    "name": "gatsby-transformer-json",
+    "version": "2.1.7",
+    "pluginOptions": {
+      "plugins": []
+    },
+    "nodeAPIs": [
+      "onCreateNode"
+    ],
+    "browserAPIs": [],
+    "ssrAPIs": [],
+    "pluginFilepath": "<PROJECT_ROOT>/examples/gatsbygram/node_modules/gatsby-transformer-json",
+    "packageJson": {
+      "name": "gatsby-transformer-json",
+      "description": "Gatsby transformer plugin for JSON files",
+      "version": "2.1.7",
+      "keywords": [
+        "gatsby",
+        "gatsby-plugin",
+        "json"
+      ],
+      "author": "Kyle Mathews <mathews.kyle@gmail.com>",
+      "license": "MIT",
+      "dependencies": [
+        {
+          "name": "@babel/runtime",
+          "version": "^7.0.0"
+        },
+        {
+          "name": "bluebird",
+          "version": "^3.5.0"
+        }
+      ],
+      "devDependencies": [
+        {
+          "name": "@babel/cli",
+          "version": "^7.0.0"
+        },
+        {
+          "name": "@babel/core",
+          "version": "^7.0.0"
+        },
+        {
+          "name": "babel-preset-gatsby-package",
+          "version": "^0.1.3"
+        },
+        {
+          "name": "cross-env",
+          "version": "^5.1.4"
+        }
+      ],
+      "peerDependencies": [
+        {
+          "name": "gatsby",
+          "version": ">=2.0.15"
+        }
+      ],
+      "optionalDependecies": [],
+      "bundledDependecies": []
+    },
+    "parent": null,
+    "children": [],
+    "internal": {
+      "contentDigest": "d57cc1b24d600a05fce36573de3cc390",
+      "type": "SitePlugin",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "resolve": "<PROJECT_ROOT>/examples/gatsbygram/node_modules/gatsby-plugin-glamor",
+    "id": "35060b81-dece-5ee0-8b77-8e505cbed3a6",
+    "name": "gatsby-plugin-glamor",
+    "version": "2.0.7",
+    "pluginOptions": {
+      "plugins": []
+    },
+    "nodeAPIs": [
+      "onCreateWebpackConfig",
+      "onCreateBabelConfig"
+    ],
+    "browserAPIs": [
+      "onClientEntry"
+    ],
+    "ssrAPIs": [
+      "replaceRenderer"
+    ],
+    "pluginFilepath": "<PROJECT_ROOT>/examples/gatsbygram/node_modules/gatsby-plugin-glamor",
+    "packageJson": {
+      "name": "gatsby-plugin-glamor",
+      "description": "Gatsby plugin to add support for Glamor",
+      "version": "2.0.7",
+      "main": "index.js",
+      "keywords": [
+        "gatsby",
+        "gatsby-plugin",
+        "glamor"
+      ],
+      "author": "Kyle Mathews <mathews.kyle@gmail.com>",
+      "license": "MIT",
+      "dependencies": [
+        {
+          "name": "@babel/runtime",
+          "version": "^7.0.0"
+        }
+      ],
+      "devDependencies": [
+        {
+          "name": "@babel/cli",
+          "version": "^7.0.0"
+        },
+        {
+          "name": "@babel/core",
+          "version": "^7.0.0"
+        },
+        {
+          "name": "babel-preset-gatsby-package",
+          "version": "^0.1.3"
+        },
+        {
+          "name": "cross-env",
+          "version": "^5.1.4"
+        }
+      ],
+      "peerDependencies": [
+        {
+          "name": "gatsby",
+          "version": ">2.0.0-alpha"
+        },
+        {
+          "name": "glamor",
+          "version": "^2.20.29"
+        }
+      ],
+      "optionalDependecies": [],
+      "bundledDependecies": []
+    },
+    "parent": null,
+    "children": [],
+    "internal": {
+      "contentDigest": "07fe11bf009b042d7610d6584a6a82f0",
+      "type": "SitePlugin",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "resolve": "<PROJECT_ROOT>/examples/gatsbygram/node_modules/gatsby-plugin-manifest",
+    "id": "354c933d-4995-53d9-833e-04b2604718cf",
+    "name": "gatsby-plugin-manifest",
+    "version": "2.0.13",
+    "pluginOptions": {
+      "plugins": [],
+      "name": "Gatsbygram",
+      "short_name": "Gatsbygram",
+      "start_url": "/",
+      "background_color": "#f7f7f7",
+      "theme_color": "#191919",
+      "display": "minimal-ui"
+    },
+    "nodeAPIs": [
+      "onPostBootstrap"
+    ],
+    "browserAPIs": [],
+    "ssrAPIs": [
+      "onRenderBody"
+    ],
+    "pluginFilepath": "<PROJECT_ROOT>/examples/gatsbygram/node_modules/gatsby-plugin-manifest",
+    "packageJson": {
+      "name": "gatsby-plugin-manifest",
+      "description": "Gatsby plugin which adds a manifest.webmanifest to make sites progressive web apps",
+      "version": "2.0.13",
+      "main": "index.js",
+      "keywords": [
+        "gatsby",
+        "gatsby-plugin",
+        "favicon",
+        "icons",
+        "manifest.webmanifest",
+        "progressive-web-app",
+        "pwa"
+      ],
+      "author": "Kyle Mathews <mathews.kyle@gmail.com>",
+      "license": "MIT",
+      "dependencies": [
+        {
+          "name": "@babel/runtime",
+          "version": "^7.0.0"
+        },
+        {
+          "name": "bluebird",
+          "version": "^3.5.0"
+        },
+        {
+          "name": "sharp",
+          "version": "^0.21.0"
+        }
+      ],
+      "devDependencies": [
+        {
+          "name": "@babel/cli",
+          "version": "^7.0.0"
+        },
+        {
+          "name": "@babel/core",
+          "version": "^7.0.0"
+        },
+        {
+          "name": "babel-preset-gatsby-package",
+          "version": "^0.1.3"
+        },
+        {
+          "name": "cross-env",
+          "version": "^5.1.4"
+        }
+      ],
+      "peerDependencies": [
+        {
+          "name": "gatsby",
+          "version": ">2.0.0-alpha"
+        }
+      ],
+      "optionalDependecies": [],
+      "bundledDependecies": []
+    },
+    "parent": null,
+    "children": [],
+    "internal": {
+      "contentDigest": "2a1e638a5fb60ec5262cbc8ed62e5cc6",
+      "type": "SitePlugin",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "resolve": "<PROJECT_ROOT>/examples/gatsbygram/node_modules/gatsby-plugin-offline",
+    "id": "63e5f7ff-e5f1-58f7-8e2c-55872ac42281",
+    "name": "gatsby-plugin-offline",
+    "version": "2.0.21",
+    "pluginOptions": {
+      "plugins": []
+    },
+    "nodeAPIs": [
+      "createPages",
+      "onPostBuild"
+    ],
+    "browserAPIs": [
+      "registerServiceWorker",
+      "onServiceWorkerActive",
+      "onPostPrefetchPathname"
+    ],
+    "ssrAPIs": [],
+    "pluginFilepath": "<PROJECT_ROOT>/examples/gatsbygram/node_modules/gatsby-plugin-offline",
+    "packageJson": {
+      "name": "gatsby-plugin-offline",
+      "description": "Gatsby plugin which sets up a site to be able to run offline",
+      "version": "2.0.21",
+      "main": "index.js",
+      "keywords": [
+        "gatsby",
+        "gatsby-plugin",
+        "offline",
+        "precache",
+        "service-worker"
+      ],
+      "author": "Kyle Mathews <mathews.kyle@gmail.com>",
+      "license": "MIT",
+      "dependencies": [
+        {
+          "name": "@babel/runtime",
+          "version": "^7.0.0"
+        },
+        {
+          "name": "cheerio",
+          "version": "^1.0.0-rc.2"
+        },
+        {
+          "name": "idb-keyval",
+          "version": "^3.1.0"
+        },
+        {
+          "name": "lodash",
+          "version": "^4.17.10"
+        },
+        {
+          "name": "workbox-build",
+          "version": "^3.6.3"
+        }
+      ],
+      "devDependencies": [
+        {
+          "name": "@babel/cli",
+          "version": "^7.0.0"
+        },
+        {
+          "name": "@babel/core",
+          "version": "^7.0.0"
+        },
+        {
+          "name": "babel-preset-gatsby-package",
+          "version": "^0.1.3"
+        },
+        {
+          "name": "cross-env",
+          "version": "^5.1.4"
+        }
+      ],
+      "peerDependencies": [
+        {
+          "name": "gatsby",
+          "version": ">=2.0.53"
+        }
+      ],
+      "optionalDependecies": [],
+      "bundledDependecies": []
+    },
+    "parent": null,
+    "children": [],
+    "internal": {
+      "contentDigest": "9ffbbc3953e1390fee5266216806594e",
+      "type": "SitePlugin",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "resolve": "<PROJECT_ROOT>/examples/gatsbygram/node_modules/gatsby-plugin-google-analytics",
+    "id": "9abf9609-8fa7-52f9-89e6-affec700ccb8",
+    "name": "gatsby-plugin-google-analytics",
+    "version": "2.0.10",
+    "pluginOptions": {
+      "plugins": [],
+      "trackingId": "UA-91652198-1"
+    },
+    "nodeAPIs": [],
+    "browserAPIs": [
+      "onRouteUpdate"
+    ],
+    "ssrAPIs": [
+      "onRenderBody"
+    ],
+    "pluginFilepath": "<PROJECT_ROOT>/examples/gatsbygram/node_modules/gatsby-plugin-google-analytics",
+    "packageJson": {
+      "name": "gatsby-plugin-google-analytics",
+      "description": "Gatsby plugin to add google analytics onto a site",
+      "version": "2.0.10",
+      "main": "index.js",
+      "keywords": [
+        "gatsby",
+        "gatsby-plugin",
+        "google analytics"
+      ],
+      "author": "Kyle Mathews <mathews.kyle@gmail.com>",
+      "license": "MIT",
+      "dependencies": [
+        {
+          "name": "@babel/runtime",
+          "version": "^7.0.0"
+        }
+      ],
+      "devDependencies": [
+        {
+          "name": "@babel/cli",
+          "version": "^7.0.0"
+        },
+        {
+          "name": "@babel/core",
+          "version": "^7.0.0"
+        },
+        {
+          "name": "babel-preset-gatsby-package",
+          "version": "^0.1.3"
+        },
+        {
+          "name": "cross-env",
+          "version": "^5.1.4"
+        }
+      ],
+      "peerDependencies": [
+        {
+          "name": "gatsby",
+          "version": ">2.0.0-alpha"
+        }
+      ],
+      "optionalDependecies": [],
+      "bundledDependecies": []
+    },
+    "parent": null,
+    "children": [],
+    "internal": {
+      "contentDigest": "d6337969d7a1d54a73b0003fb2fe099b",
+      "type": "SitePlugin",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "resolve": "<PROJECT_ROOT>/examples/gatsbygram/node_modules/gatsby-plugin-typography",
+    "id": "64059fc2-eafe-53ab-a542-ad6d70a5c7ff",
+    "name": "gatsby-plugin-typography",
+    "version": "2.2.5",
+    "pluginOptions": {
+      "plugins": [],
+      "pathToConfigModule": "src/utils/typography"
+    },
+    "nodeAPIs": [
+      "onPreBootstrap"
+    ],
+    "browserAPIs": [
+      "onClientEntry"
+    ],
+    "ssrAPIs": [
+      "onRenderBody"
+    ],
+    "pluginFilepath": "<PROJECT_ROOT>/examples/gatsbygram/node_modules/gatsby-plugin-typography",
+    "packageJson": {
+      "name": "gatsby-plugin-typography",
+      "description": "Gatsby plugin to setup server rendering of Typography.js' CSS",
+      "version": "2.2.5",
+      "main": "index.js",
+      "keywords": [
+        "gatsby",
+        "gatsby-plugin",
+        "typography",
+        "typography.js"
+      ],
+      "author": "Kyle Mathews <mathews.kyle@gmail.com>",
+      "license": "MIT",
+      "dependencies": [
+        {
+          "name": "@babel/runtime",
+          "version": "^7.0.0"
+        }
+      ],
+      "devDependencies": [
+        {
+          "name": "@babel/cli",
+          "version": "^7.0.0"
+        },
+        {
+          "name": "@babel/core",
+          "version": "^7.0.0"
+        },
+        {
+          "name": "babel-preset-gatsby-package",
+          "version": "^0.1.3"
+        },
+        {
+          "name": "cross-env",
+          "version": "^5.1.4"
+        }
+      ],
+      "peerDependencies": [
+        {
+          "name": "gatsby",
+          "version": ">2.0.0-alpha"
+        },
+        {
+          "name": "react-typography",
+          "version": "^0.16.1 || ^1.0.0-alpha.0"
+        },
+        {
+          "name": "typography",
+          "version": "^0.16.0 || ^1.0.0-alpha.0"
+        }
+      ],
+      "optionalDependecies": [],
+      "bundledDependecies": []
+    },
+    "parent": null,
+    "children": [],
+    "internal": {
+      "contentDigest": "81344244d96b1e3dca196f0e0116e4c2",
+      "type": "SitePlugin",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "resolve": "<PROJECT_ROOT>/examples/gatsbygram",
+    "id": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "name": "default-site-plugin",
+    "version": "c903a11cb8a9951bb996b03d186e2f0d",
+    "pluginOptions": {
+      "plugins": []
+    },
+    "nodeAPIs": [
+      "createPages",
+      "sourceNodes",
+      "addResolvers"
+    ],
+    "browserAPIs": [
+      "shouldUpdateScroll",
+      "onInitialClientRender"
+    ],
+    "ssrAPIs": [],
+    "pluginFilepath": "<PROJECT_ROOT>/examples/gatsbygram",
+    "packageJson": {
+      "name": "gatsby-example-image-gallery",
+      "description": "Gatsby example site: image gallery",
+      "version": "1.0.0",
+      "main": "n/a",
+      "keywords": [
+        "gatsby"
+      ],
+      "author": "Kyle Mathews <mathews.kyle@gmail.com>",
+      "license": "MIT",
+      "dependencies": [
+        {
+          "name": "core-js",
+          "version": "^2.5.5"
+        },
+        {
+          "name": "gatsby",
+          "version": "2.0.110"
+        },
+        {
+          "name": "gatsby-image",
+          "version": "^2.0.5"
+        },
+        {
+          "name": "gatsby-plugin-glamor",
+          "version": "^2.0.5"
+        },
+        {
+          "name": "gatsby-plugin-google-analytics",
+          "version": "^2.0.5"
+        },
+        {
+          "name": "gatsby-plugin-manifest",
+          "version": "^2.0.2"
+        },
+        {
+          "name": "gatsby-plugin-offline",
+          "version": "^2.0.5"
+        },
+        {
+          "name": "gatsby-plugin-sharp",
+          "version": "^2.0.5"
+        },
+        {
+          "name": "gatsby-plugin-typography",
+          "version": "^2.2.0"
+        },
+        {
+          "name": "gatsby-source-filesystem",
+          "version": "^2.0.1"
+        },
+        {
+          "name": "gatsby-transformer-json",
+          "version": "^2.1.1"
+        },
+        {
+          "name": "gatsby-transformer-sharp",
+          "version": "^2.1.1"
+        },
+        {
+          "name": "glamor",
+          "version": "^2.20.40"
+        },
+        {
+          "name": "graphql-compose",
+          "version": "^5.10.1"
+        },
+        {
+          "name": "graphql",
+          "version": "^14.1.1"
+        },
+        {
+          "name": "instagram-screen-scrape",
+          "version": "^2.0.0"
+        },
+        {
+          "name": "lodash",
+          "version": "^4.17.10"
+        },
+        {
+          "name": "mkdirp",
+          "version": "^0.5.1"
+        },
+        {
+          "name": "mousetrap",
+          "version": "^1.6.0"
+        },
+        {
+          "name": "progress",
+          "version": "^2.0.0"
+        },
+        {
+          "name": "prop-types",
+          "version": "^15.5.8"
+        },
+        {
+          "name": "react",
+          "version": "^16.3.2"
+        },
+        {
+          "name": "react-dom",
+          "version": "^16.3.2"
+        },
+        {
+          "name": "react-gravatar",
+          "version": "^2.6.1"
+        },
+        {
+          "name": "react-icons",
+          "version": "^2.2.7"
+        },
+        {
+          "name": "react-modal",
+          "version": "^3.4.2"
+        },
+        {
+          "name": "react-typography",
+          "version": "^0.16.13"
+        },
+        {
+          "name": "request",
+          "version": "^2.79.0"
+        },
+        {
+          "name": "slug",
+          "version": "^0.9.1"
+        },
+        {
+          "name": "typeface-space-mono",
+          "version": "0.0.54"
+        },
+        {
+          "name": "typography",
+          "version": "^0.16.6"
+        }
+      ],
+      "devDependencies": [
+        {
+          "name": "cypress",
+          "version": "^3.1.0"
+        },
+        {
+          "name": "start-server-and-test",
+          "version": "^1.1.4"
+        }
+      ],
+      "peerDependencies": [],
+      "optionalDependecies": [],
+      "bundledDependecies": []
+    },
+    "parent": null,
+    "children": [],
+    "internal": {
+      "contentDigest": "ba80e871b6f1f077cc01118f4075271d",
+      "type": "SitePlugin",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "resolve": "<PROJECT_ROOT>/examples/gatsbygram/node_modules/gatsby-plugin-page-creator",
+    "id": "52fe8a30-9176-50f6-aaf9-4ba1a44e0ffa",
+    "name": "gatsby-plugin-page-creator",
+    "version": "2.0.6",
+    "pluginOptions": {
+      "plugins": [],
+      "path": "<PROJECT_ROOT>/examples/gatsbygram/src/pages",
+      "pathCheck": false
+    },
+    "nodeAPIs": [
+      "createPagesStatefully"
+    ],
+    "browserAPIs": [],
+    "ssrAPIs": [],
+    "pluginFilepath": "<PROJECT_ROOT>/examples/gatsbygram/node_modules/gatsby-plugin-page-creator",
+    "packageJson": {
+      "name": "gatsby-plugin-page-creator",
+      "description": "Gatsby plugin that automatically creates pages from React components in specified directories",
+      "version": "2.0.6",
+      "main": "index.js",
+      "keywords": [
+        "gatsby",
+        "gatsby-plugin"
+      ],
+      "author": "Kyle Mathews <mathews.kyle@gmail.com>",
+      "license": "MIT",
+      "dependencies": [
+        {
+          "name": "@babel/runtime",
+          "version": "^7.0.0"
+        },
+        {
+          "name": "bluebird",
+          "version": "^3.5.0"
+        },
+        {
+          "name": "chokidar",
+          "version": "^1.7.0"
+        },
+        {
+          "name": "fs-exists-cached",
+          "version": "^1.0.0"
+        },
+        {
+          "name": "glob",
+          "version": "^7.1.1"
+        },
+        {
+          "name": "lodash",
+          "version": "^4.17.10"
+        },
+        {
+          "name": "micromatch",
+          "version": "^3.1.10"
+        },
+        {
+          "name": "parse-filepath",
+          "version": "^1.0.1"
+        },
+        {
+          "name": "slash",
+          "version": "^1.0.0"
+        }
+      ],
+      "devDependencies": [
+        {
+          "name": "@babel/cli",
+          "version": "^7.0.0"
+        },
+        {
+          "name": "@babel/core",
+          "version": "^7.0.0"
+        },
+        {
+          "name": "babel-preset-gatsby-package",
+          "version": "^0.1.3"
+        },
+        {
+          "name": "cross-env",
+          "version": "^5.0.5"
+        }
+      ],
+      "peerDependencies": [
+        {
+          "name": "gatsby",
+          "version": "^2.0.0"
+        }
+      ],
+      "optionalDependecies": [],
+      "bundledDependecies": []
+    },
+    "parent": null,
+    "children": [],
+    "internal": {
+      "contentDigest": "a5b91bd941c5cd288ffd494d6287e2e8",
+      "type": "SitePlugin",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "siteMetadata": {
+      "title": "Gatsbygram"
+    },
+    "port": "8000",
+    "host": "localhost",
+    "pathPrefix": "",
+    "polyfill": true,
+    "buildTime": "2019-02-14T09:17:58.369Z",
+    "id": "Site",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "contentDigest": "70bb763c0bc449768affd27a058600c4",
+      "type": "Site",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "id": "61d88d2c-01e8-5539-9bda-2f6c3e50f26f",
+    "children": [],
+    "parent": null,
+    "internal": {
+      "contentDigest": "7c287a06a2b98e74381a857d58c42d87",
+      "type": "Directory",
+      "description": "Directory \"data\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data",
+    "relativePath": "",
+    "extension": "",
+    "size": 4096,
+    "prettySize": "4.1 kB",
+    "modifiedTime": "2019-02-14T08:37:54.870Z",
+    "accessTime": "2019-01-25T13:36:16.858Z",
+    "changeTime": "2019-02-14T08:37:54.870Z",
+    "birthTime": "2019-02-14T08:37:54.870Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram",
+    "base": "data",
+    "ext": "",
+    "name": "data",
+    "relativeDirectory": "..",
+    "dev": 65024,
+    "mode": 16877,
+    "nlink": 3,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17465654,
+    "blocks": 8,
+    "atimeMs": 1548423376858.1704,
+    "mtimeMs": 1550133474870.4333,
+    "ctimeMs": 1550133474870.4333,
+    "birthtimeMs": 1550133474870.4333,
+    "atime": "2019-01-25T13:36:16.858Z",
+    "mtime": "2019-02-14T08:37:54.870Z",
+    "ctime": "2019-02-14T08:37:54.870Z",
+    "birthtime": "2019-02-14T08:37:54.870Z"
+  },
+  {
+    "id": "99b099fc-c5b9-5b71-8d78-415bd969cd9d",
+    "children": [],
+    "parent": null,
+    "internal": {
+      "contentDigest": "2391d2ba19bc435c9dbe78d320cac52a",
+      "type": "Directory",
+      "description": "Directory \"data/images\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "relativePath": "images",
+    "extension": "",
+    "size": 4096,
+    "prettySize": "4.1 kB",
+    "modifiedTime": "2019-02-08T08:55:07.965Z",
+    "accessTime": "2019-01-25T13:36:16.858Z",
+    "changeTime": "2019-02-08T08:55:07.965Z",
+    "birthTime": "2019-02-08T08:55:07.965Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data",
+    "base": "images",
+    "ext": "",
+    "name": "images",
+    "relativeDirectory": "",
+    "dev": 65024,
+    "mode": 16877,
+    "nlink": 2,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17465655,
+    "blocks": 8,
+    "atimeMs": 1548423376858.1704,
+    "mtimeMs": 1549616107964.5935,
+    "ctimeMs": 1549616107964.5935,
+    "birthtimeMs": 1549616107964.5935,
+    "atime": "2019-01-25T13:36:16.858Z",
+    "mtime": "2019-02-08T08:55:07.965Z",
+    "ctime": "2019-02-08T08:55:07.965Z",
+    "birthtime": "2019-02-08T08:55:07.965Z"
+  },
+  {
+    "id": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "children": [
+      "1685001452849004065",
+      "1677771511187112561",
+      "1632234281433883850",
+      "1601601194425654597",
+      "1601530617317009166",
+      "1565766376903475329",
+      "1515268510112420213",
+      "1486495736706552111",
+      "1483463111452464830",
+      "1478435327902728655",
+      "1360516742464695325",
+      "1346779149175505545",
+      "1270677182602272387",
+      "1256134251849702933",
+      "1232199266021400176",
+      "1192421294565743753",
+      "1179335444856560759",
+      "1093024552502680593",
+      "1082958063116475674",
+      "1072104297123274725",
+      "1050382401524719413",
+      "1047380412691897508",
+      "1019954573251698010",
+      "1011212316101041196",
+      "1001206739996237060",
+      "996585130438155443",
+      "976313048697659257",
+      "973323047219223582",
+      "811160600493415566",
+      "811160112838466685",
+      "800034649663593593",
+      "783599315140730647",
+      "734060454761192929",
+      "734060430375509472",
+      "734060413657013727",
+      "732757276941868346",
+      "732747494080109637",
+      "732734464004972239",
+      "732606339090734326",
+      "732532731974770038",
+      "732520051645864977",
+      "732518754003705841",
+      "723243022496816380",
+      "722040340713037050",
+      "709713470394982233",
+      "707264656279068376",
+      "695949453427990223",
+      "695178098877128227",
+      "682173039289556382",
+      "680440398655774583",
+      "679681270014532918",
+      "673465739406204031",
+      "673461065357712415",
+      "673457707733475299",
+      "665350447119457524",
+      "650011560209800782",
+      "640022460883001336",
+      "636409258827833279",
+      "635682624046882725",
+      "633544903908122621",
+      "633500736435772673",
+      "632772965954739789",
+      "620418901388549762",
+      "617411858855616370",
+      "613426420792942449",
+      "611758039731788991",
+      "607214368319594481",
+      "603923376229310167",
+      "602898508977266473",
+      "599599505648902132",
+      "597507196258082479",
+      "596440361295142025",
+      "587804514970754664",
+      "584320489442499989",
+      "529876495778438153",
+      "529863260585057945",
+      "528199217793195914",
+      "528198485736152948",
+      "528197163355987780",
+      "523176638502133365",
+      "515988147267690192",
+      "514154189823401179",
+      "493743881078431577",
+      "491519698525216526",
+      "474753551234752325",
+      "465165262878137499",
+      "463285372889325235",
+      "463283463063330440",
+      "433258973868842114",
+      "432671828728864094",
+      "432671016199904582",
+      "432595958039305297",
+      "402249729178853273",
+      "396657460300210097",
+      "394910241079418429",
+      "389212604606962827",
+      "388739099008425940",
+      "358263540721901467",
+      "358258295744749374",
+      "354333585801731194"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "f32cd3d16b306b4c62bd0f7f6404c945",
+      "type": "File",
+      "mediaType": "application/json",
+      "description": "File \"data/posts.json\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/posts.json",
+    "relativePath": "posts.json",
+    "extension": "json",
+    "size": 41712,
+    "prettySize": "41.7 kB",
+    "modifiedTime": "2019-02-11T12:36:25.701Z",
+    "accessTime": "2019-02-11T12:36:25.701Z",
+    "changeTime": "2019-02-11T12:36:25.701Z",
+    "birthTime": "2019-02-11T12:36:25.701Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data",
+    "base": "posts.json",
+    "ext": ".json",
+    "name": "posts",
+    "relativeDirectory": "",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453936,
+    "blocks": 88,
+    "atimeMs": 1549888585701.1294,
+    "mtimeMs": 1549888585701.1294,
+    "ctimeMs": 1549888585701.1294,
+    "birthtimeMs": 1549888585701.1294,
+    "atime": "2019-02-11T12:36:25.701Z",
+    "mtime": "2019-02-11T12:36:25.701Z",
+    "ctime": "2019-02-11T12:36:25.701Z",
+    "birthtime": "2019-02-11T12:36:25.701Z"
+  },
+  {
+    "id": "632c83c7-e76d-5478-8863-fc5a593f7119",
+    "children": [
+      "8d8852d5-d464-5153-b1fe-afc94b70d0a1"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "e6879945b14d6234875718df657b8beb",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/2B8CeRM9we.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/2B8CeRM9we.jpg",
+    "relativePath": "images/2B8CeRM9we.jpg",
+    "extension": "jpg",
+    "size": 110182,
+    "prettySize": "110 kB",
+    "modifiedTime": "2019-02-08T08:55:07.921Z",
+    "accessTime": "2019-02-08T08:55:07.921Z",
+    "changeTime": "2019-02-08T08:55:07.921Z",
+    "birthTime": "2019-02-08T08:55:07.921Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "2B8CeRM9we.jpg",
+    "ext": ".jpg",
+    "name": "2B8CeRM9we",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453836,
+    "blocks": 216,
+    "atimeMs": 1549616107921.2603,
+    "mtimeMs": 1549616107921.2603,
+    "ctimeMs": 1549616107921.2603,
+    "birthtimeMs": 1549616107921.2603,
+    "atime": "2019-02-08T08:55:07.921Z",
+    "mtime": "2019-02-08T08:55:07.921Z",
+    "ctime": "2019-02-08T08:55:07.921Z",
+    "birthtime": "2019-02-08T08:55:07.921Z"
+  },
+  {
+    "id": "cfedef16-1f17-5489-aea7-61529e33d160",
+    "children": [
+      "39d3bdcd-5adf-5f04-83b5-40c4e7dc60d5"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "5c7a76710cb2f7e4d3f2f2ebe64f628d",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/2Mj4uJM995.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/2Mj4uJM995.jpg",
+    "relativePath": "images/2Mj4uJM995.jpg",
+    "extension": "jpg",
+    "size": 83530,
+    "prettySize": "83.5 kB",
+    "modifiedTime": "2019-02-08T08:55:07.921Z",
+    "accessTime": "2019-02-08T08:55:07.921Z",
+    "changeTime": "2019-02-08T08:55:07.921Z",
+    "birthTime": "2019-02-08T08:55:07.921Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "2Mj4uJM995.jpg",
+    "ext": ".jpg",
+    "name": "2Mj4uJM995",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453837,
+    "blocks": 168,
+    "atimeMs": 1549616107921.2603,
+    "mtimeMs": 1549616107921.2603,
+    "ctimeMs": 1549616107921.2603,
+    "birthtimeMs": 1549616107921.2603,
+    "atime": "2019-02-08T08:55:07.921Z",
+    "mtime": "2019-02-08T08:55:07.921Z",
+    "ctime": "2019-02-08T08:55:07.921Z",
+    "birthtime": "2019-02-08T08:55:07.921Z"
+  },
+  {
+    "id": "a03bf39a-da09-5c14-9cf6-103c439f3472",
+    "children": [
+      "9fdf7ff2-9e51-5c2c-90cf-4c3a4af4e6b4"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "30c7fb1607938caece1719e539c54154",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/4IjD5ts9ws.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/4IjD5ts9ws.jpg",
+    "relativePath": "images/4IjD5ts9ws.jpg",
+    "extension": "jpg",
+    "size": 87898,
+    "prettySize": "87.9 kB",
+    "modifiedTime": "2019-02-08T08:55:07.921Z",
+    "accessTime": "2019-02-08T08:55:07.921Z",
+    "changeTime": "2019-02-08T08:55:07.921Z",
+    "birthTime": "2019-02-08T08:55:07.921Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "4IjD5ts9ws.jpg",
+    "ext": ".jpg",
+    "name": "4IjD5ts9ws",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453840,
+    "blocks": 176,
+    "atimeMs": 1549616107921.2603,
+    "mtimeMs": 1549616107921.2603,
+    "ctimeMs": 1549616107921.2603,
+    "birthtimeMs": 1549616107921.2603,
+    "atime": "2019-02-08T08:55:07.921Z",
+    "mtime": "2019-02-08T08:55:07.921Z",
+    "ctime": "2019-02-08T08:55:07.921Z",
+    "birthtime": "2019-02-08T08:55:07.921Z"
+  },
+  {
+    "id": "5fb18353-ad2b-55d6-8f8b-365ab131d348",
+    "children": [
+      "0b06bdfe-f253-5859-8321-b42b5d737195"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "d41e8de7afad8820915adf302f4bce27",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/3lADm0M90E.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/3lADm0M90E.jpg",
+    "relativePath": "images/3lADm0M90E.jpg",
+    "extension": "jpg",
+    "size": 73520,
+    "prettySize": "73.5 kB",
+    "modifiedTime": "2019-02-08T08:55:07.921Z",
+    "accessTime": "2019-02-08T08:55:07.921Z",
+    "changeTime": "2019-02-08T08:55:07.921Z",
+    "birthTime": "2019-02-08T08:55:07.921Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "3lADm0M90E.jpg",
+    "ext": ".jpg",
+    "name": "3lADm0M90E",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453839,
+    "blocks": 144,
+    "atimeMs": 1549616107921.2603,
+    "mtimeMs": 1549616107921.2603,
+    "ctimeMs": 1549616107921.2603,
+    "birthtimeMs": 1549616107921.2603,
+    "atime": "2019-02-08T08:55:07.921Z",
+    "mtime": "2019-02-08T08:55:07.921Z",
+    "ctime": "2019-02-08T08:55:07.921Z",
+    "birthtime": "2019-02-08T08:55:07.921Z"
+  },
+  {
+    "id": "eadfe4c4-6636-55b1-95ee-b24faa4d46f3",
+    "children": [
+      "4abaade8-8f68-5bbb-9e81-798fa66a160d"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "b648f5c6b4dd19a1e20f59eab97dcccb",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/4nm0fJs91a.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/4nm0fJs91a.jpg",
+    "relativePath": "images/4nm0fJs91a.jpg",
+    "extension": "jpg",
+    "size": 68049,
+    "prettySize": "68 kB",
+    "modifiedTime": "2019-02-08T08:55:07.925Z",
+    "accessTime": "2019-02-08T08:55:07.921Z",
+    "changeTime": "2019-02-08T08:55:07.925Z",
+    "birthTime": "2019-02-08T08:55:07.925Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "4nm0fJs91a.jpg",
+    "ext": ".jpg",
+    "name": "4nm0fJs91a",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453841,
+    "blocks": 136,
+    "atimeMs": 1549616107921.2603,
+    "mtimeMs": 1549616107924.5935,
+    "ctimeMs": 1549616107924.5935,
+    "birthtimeMs": 1549616107924.5935,
+    "atime": "2019-02-08T08:55:07.921Z",
+    "mtime": "2019-02-08T08:55:07.925Z",
+    "ctime": "2019-02-08T08:55:07.925Z",
+    "birthtime": "2019-02-08T08:55:07.925Z"
+  },
+  {
+    "id": "e882dc2b-8f14-576e-8f17-a491cd037251",
+    "children": [
+      "e6681fae-b509-5472-a7e4-077f9038072f"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "9af0ebae8944fcbeb03e57571babe823",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/6JCu-jM9yk.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/6JCu-jM9yk.jpg",
+    "relativePath": "images/6JCu-jM9yk.jpg",
+    "extension": "jpg",
+    "size": 101649,
+    "prettySize": "102 kB",
+    "modifiedTime": "2019-02-08T08:55:07.925Z",
+    "accessTime": "2019-02-08T08:55:07.925Z",
+    "changeTime": "2019-02-08T08:55:07.925Z",
+    "birthTime": "2019-02-08T08:55:07.925Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "6JCu-jM9yk.jpg",
+    "ext": ".jpg",
+    "name": "6JCu-jM9yk",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453842,
+    "blocks": 200,
+    "atimeMs": 1549616107924.5935,
+    "mtimeMs": 1549616107924.5935,
+    "ctimeMs": 1549616107924.5935,
+    "birthtimeMs": 1549616107924.5935,
+    "atime": "2019-02-08T08:55:07.925Z",
+    "mtime": "2019-02-08T08:55:07.925Z",
+    "ctime": "2019-02-08T08:55:07.925Z",
+    "birthtime": "2019-02-08T08:55:07.925Z"
+  },
+  {
+    "id": "5bc47ad3-c074-5e02-be9b-0150d6322b2c",
+    "children": [
+      "e3621331-a649-549c-bee4-a9d9bd112e47"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "c99a72470ab736db7b1546334122f456",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/6TtTqhM981.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/6TtTqhM981.jpg",
+    "relativePath": "images/6TtTqhM981.jpg",
+    "extension": "jpg",
+    "size": 110964,
+    "prettySize": "111 kB",
+    "modifiedTime": "2019-02-08T08:55:07.925Z",
+    "accessTime": "2019-02-08T08:55:07.925Z",
+    "changeTime": "2019-02-08T08:55:07.925Z",
+    "birthTime": "2019-02-08T08:55:07.925Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "6TtTqhM981.jpg",
+    "ext": ".jpg",
+    "name": "6TtTqhM981",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453843,
+    "blocks": 224,
+    "atimeMs": 1549616107924.5935,
+    "mtimeMs": 1549616107924.5935,
+    "ctimeMs": 1549616107924.5935,
+    "birthtimeMs": 1549616107924.5935,
+    "atime": "2019-02-08T08:55:07.925Z",
+    "mtime": "2019-02-08T08:55:07.925Z",
+    "ctime": "2019-02-08T08:55:07.925Z",
+    "birthtime": "2019-02-08T08:55:07.925Z"
+  },
+  {
+    "id": "28c84528-48f8-59b0-ba66-3da2c17fd0a7",
+    "children": [
+      "09df17a3-2377-5cb1-ae72-a42c552bc588"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "b6bb6cf1090c42d50f02d7c66669c898",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/7g4S2QM9_l.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/7g4S2QM9_l.jpg",
+    "relativePath": "images/7g4S2QM9_l.jpg",
+    "extension": "jpg",
+    "size": 129607,
+    "prettySize": "130 kB",
+    "modifiedTime": "2019-02-08T08:55:07.925Z",
+    "accessTime": "2019-02-08T08:55:07.925Z",
+    "changeTime": "2019-02-08T08:55:07.925Z",
+    "birthTime": "2019-02-08T08:55:07.925Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "7g4S2QM9_l.jpg",
+    "ext": ".jpg",
+    "name": "7g4S2QM9_l",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453844,
+    "blocks": 256,
+    "atimeMs": 1549616107924.5935,
+    "mtimeMs": 1549616107924.5935,
+    "ctimeMs": 1549616107924.5935,
+    "birthtimeMs": 1549616107924.5935,
+    "atime": "2019-02-08T08:55:07.925Z",
+    "mtime": "2019-02-08T08:55:07.925Z",
+    "ctime": "2019-02-08T08:55:07.925Z",
+    "birthtime": "2019-02-08T08:55:07.925Z"
+  },
+  {
+    "id": "7d697ee3-2e66-51f6-a386-b1e5d8cf5dba",
+    "children": [
+      "98324bbd-3257-5c70-a3be-e713965f5fa6"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "ad40145e18355345c530559aa46945ad",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/8HcJ7is90a.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/8HcJ7is90a.jpg",
+    "relativePath": "images/8HcJ7is90a.jpg",
+    "extension": "jpg",
+    "size": 104076,
+    "prettySize": "104 kB",
+    "modifiedTime": "2019-02-08T08:55:07.925Z",
+    "accessTime": "2019-02-08T08:55:07.925Z",
+    "changeTime": "2019-02-08T08:55:07.925Z",
+    "birthTime": "2019-02-08T08:55:07.925Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "8HcJ7is90a.jpg",
+    "ext": ".jpg",
+    "name": "8HcJ7is90a",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453845,
+    "blocks": 208,
+    "atimeMs": 1549616107924.5935,
+    "mtimeMs": 1549616107924.5935,
+    "ctimeMs": 1549616107924.5935,
+    "birthtimeMs": 1549616107924.5935,
+    "atime": "2019-02-08T08:55:07.925Z",
+    "mtime": "2019-02-08T08:55:07.925Z",
+    "ctime": "2019-02-08T08:55:07.925Z",
+    "birthtime": "2019-02-08T08:55:07.925Z"
+  },
+  {
+    "id": "83ac87f2-cea9-575a-82bd-51543c082415",
+    "children": [
+      "b6f4d1f7-ddf6-5994-92b4-7a0116275f71"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "830697857fd3bc129303d3068cad20dd",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/BCMVNmFM9yJ.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/BCMVNmFM9yJ.jpg",
+    "relativePath": "images/BCMVNmFM9yJ.jpg",
+    "extension": "jpg",
+    "size": 117148,
+    "prettySize": "117 kB",
+    "modifiedTime": "2019-02-08T08:55:07.928Z",
+    "accessTime": "2019-02-08T08:55:07.928Z",
+    "changeTime": "2019-02-08T08:55:07.928Z",
+    "birthTime": "2019-02-08T08:55:07.928Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "BCMVNmFM9yJ.jpg",
+    "ext": ".jpg",
+    "name": "BCMVNmFM9yJ",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453848,
+    "blocks": 232,
+    "atimeMs": 1549616107927.9268,
+    "mtimeMs": 1549616107927.9268,
+    "ctimeMs": 1549616107927.9268,
+    "birthtimeMs": 1549616107927.9268,
+    "atime": "2019-02-08T08:55:07.928Z",
+    "mtime": "2019-02-08T08:55:07.928Z",
+    "ctime": "2019-02-08T08:55:07.928Z",
+    "birthtime": "2019-02-08T08:55:07.928Z"
+  },
+  {
+    "id": "999e1cb6-9c25-564b-8fe4-e139a71b988c",
+    "children": [
+      "a47b1fe4-1b94-5cf8-9a0f-1a72f48d3c98"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "f783590e0d9d9478f6ce8d6d126a2104",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/BEZprQ3s95w.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/BEZprQ3s95w.jpg",
+    "relativePath": "images/BEZprQ3s95w.jpg",
+    "extension": "jpg",
+    "size": 122754,
+    "prettySize": "123 kB",
+    "modifiedTime": "2019-02-08T08:55:07.928Z",
+    "accessTime": "2019-02-08T08:55:07.928Z",
+    "changeTime": "2019-02-08T08:55:07.928Z",
+    "birthTime": "2019-02-08T08:55:07.928Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "BEZprQ3s95w.jpg",
+    "ext": ".jpg",
+    "name": "BEZprQ3s95w",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453849,
+    "blocks": 240,
+    "atimeMs": 1549616107927.9268,
+    "mtimeMs": 1549616107927.9268,
+    "ctimeMs": 1549616107927.9268,
+    "birthtimeMs": 1549616107927.9268,
+    "atime": "2019-02-08T08:55:07.928Z",
+    "mtime": "2019-02-08T08:55:07.928Z",
+    "ctime": "2019-02-08T08:55:07.928Z",
+    "birthtime": "2019-02-08T08:55:07.928Z"
+  },
+  {
+    "id": "dbee0e06-cc3e-5d80-8099-182acbf084d2",
+    "children": [
+      "af0788ba-9b32-5ca7-9080-bad0a49b22c6"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "6661c542bb747a61d808f6745f64716e",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/BKwuIApgkKJ.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/BKwuIApgkKJ.jpg",
+    "relativePath": "images/BKwuIApgkKJ.jpg",
+    "extension": "jpg",
+    "size": 83747,
+    "prettySize": "83.7 kB",
+    "modifiedTime": "2019-02-08T08:55:07.931Z",
+    "accessTime": "2019-02-08T08:55:07.931Z",
+    "changeTime": "2019-02-08T08:55:07.931Z",
+    "birthTime": "2019-02-08T08:55:07.931Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "BKwuIApgkKJ.jpg",
+    "ext": ".jpg",
+    "name": "BKwuIApgkKJ",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453852,
+    "blocks": 168,
+    "atimeMs": 1549616107931.2603,
+    "mtimeMs": 1549616107931.2603,
+    "ctimeMs": 1549616107931.2603,
+    "birthtimeMs": 1549616107931.2603,
+    "atime": "2019-02-08T08:55:07.931Z",
+    "mtime": "2019-02-08T08:55:07.931Z",
+    "ctime": "2019-02-08T08:55:07.931Z",
+    "birthtime": "2019-02-08T08:55:07.931Z"
+  },
+  {
+    "id": "7c1a6eea-05e7-5024-9926-36b68de7aa11",
+    "children": [
+      "f5f0e564-899f-5bbc-92de-a2325b69cb75"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "787ec91c0900453445c1777845387089",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/BShF_8qhtEv.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/BShF_8qhtEv.jpg",
+    "relativePath": "images/BShF_8qhtEv.jpg",
+    "extension": "jpg",
+    "size": 122085,
+    "prettySize": "122 kB",
+    "modifiedTime": "2019-02-08T08:55:07.935Z",
+    "accessTime": "2019-02-08T08:55:07.931Z",
+    "changeTime": "2019-02-08T08:55:07.935Z",
+    "birthTime": "2019-02-08T08:55:07.935Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "BShF_8qhtEv.jpg",
+    "ext": ".jpg",
+    "name": "BShF_8qhtEv",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453856,
+    "blocks": 240,
+    "atimeMs": 1549616107931.2603,
+    "mtimeMs": 1549616107934.5935,
+    "ctimeMs": 1549616107934.5935,
+    "birthtimeMs": 1549616107934.5935,
+    "atime": "2019-02-08T08:55:07.931Z",
+    "mtime": "2019-02-08T08:55:07.935Z",
+    "ctime": "2019-02-08T08:55:07.935Z",
+    "birthtime": "2019-02-08T08:55:07.935Z"
+  },
+  {
+    "id": "67493e72-7ae8-572d-8cf1-5b6fb600dd8b",
+    "children": [
+      "630d597e-cb8d-5eb2-9858-ff9cd89de40f"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "53d1a945465e41017425f1b19ae140f3",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/BUHUK6ElhF1.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/BUHUK6ElhF1.jpg",
+    "relativePath": "images/BUHUK6ElhF1.jpg",
+    "extension": "jpg",
+    "size": 100374,
+    "prettySize": "100 kB",
+    "modifiedTime": "2019-02-08T08:55:07.935Z",
+    "accessTime": "2019-02-08T08:55:07.935Z",
+    "changeTime": "2019-02-08T08:55:07.935Z",
+    "birthTime": "2019-02-08T08:55:07.935Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "BUHUK6ElhF1.jpg",
+    "ext": ".jpg",
+    "name": "BUHUK6ElhF1",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453857,
+    "blocks": 200,
+    "atimeMs": 1549616107934.5935,
+    "mtimeMs": 1549616107934.5935,
+    "ctimeMs": 1549616107934.5935,
+    "birthtimeMs": 1549616107934.5935,
+    "atime": "2019-02-08T08:55:07.935Z",
+    "mtime": "2019-02-08T08:55:07.935Z",
+    "ctime": "2019-02-08T08:55:07.935Z",
+    "birthtime": "2019-02-08T08:55:07.935Z"
+  },
+  {
+    "id": "090efc09-4260-50c7-a541-ecebe1d1aa6e",
+    "children": [
+      "6ba97198-5331-53d6-a0e0-c9c063c5094e"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "77d150d429e4a17804959337a1b7aa79",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/BY6B8z5lR1F.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/BY6B8z5lR1F.jpg",
+    "relativePath": "images/BY6B8z5lR1F.jpg",
+    "extension": "jpg",
+    "size": 80980,
+    "prettySize": "81 kB",
+    "modifiedTime": "2019-02-08T08:55:07.935Z",
+    "accessTime": "2019-02-08T08:55:07.935Z",
+    "changeTime": "2019-02-08T08:55:07.935Z",
+    "birthTime": "2019-02-08T08:55:07.935Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "BY6B8z5lR1F.jpg",
+    "ext": ".jpg",
+    "name": "BY6B8z5lR1F",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453860,
+    "blocks": 160,
+    "atimeMs": 1549616107934.5935,
+    "mtimeMs": 1549616107934.5935,
+    "ctimeMs": 1549616107934.5935,
+    "birthtimeMs": 1549616107934.5935,
+    "atime": "2019-02-08T08:55:07.935Z",
+    "mtime": "2019-02-08T08:55:07.935Z",
+    "ctime": "2019-02-08T08:55:07.935Z",
+    "birthtime": "2019-02-08T08:55:07.935Z"
+  },
+  {
+    "id": "3cba6722-5053-5298-b2fb-32a4a9cc44aa",
+    "children": [
+      "cdd5a1b7-b7d8-507e-8d66-6ebf484592fc"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "93f646b8ddec29b5f8d8e071f6381be7",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/T4ygWXs98-.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/T4ygWXs98-.jpg",
+    "relativePath": "images/T4ygWXs98-.jpg",
+    "extension": "jpg",
+    "size": 102293,
+    "prettySize": "102 kB",
+    "modifiedTime": "2019-02-08T08:55:07.938Z",
+    "accessTime": "2019-02-08T08:55:07.938Z",
+    "changeTime": "2019-02-08T08:55:07.938Z",
+    "birthTime": "2019-02-08T08:55:07.938Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "T4ygWXs98-.jpg",
+    "ext": ".jpg",
+    "name": "T4ygWXs98-",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453864,
+    "blocks": 200,
+    "atimeMs": 1549616107937.9268,
+    "mtimeMs": 1549616107937.9268,
+    "ctimeMs": 1549616107937.9268,
+    "birthtimeMs": 1549616107937.9268,
+    "atime": "2019-02-08T08:55:07.938Z",
+    "mtime": "2019-02-08T08:55:07.938Z",
+    "ctime": "2019-02-08T08:55:07.938Z",
+    "birthtime": "2019-02-08T08:55:07.938Z"
+  },
+  {
+    "id": "d49a67c2-a204-598d-908f-7a00b225745e",
+    "children": [
+      "b0d46bbe-d4b8-568e-9323-215b2bf6f4fd"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "245770f51f9bad853b90b8edaeab3c1e",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/T4zsrIs9-b.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/T4zsrIs9-b.jpg",
+    "relativePath": "images/T4zsrIs9-b.jpg",
+    "extension": "jpg",
+    "size": 95894,
+    "prettySize": "95.9 kB",
+    "modifiedTime": "2019-02-08T08:55:07.938Z",
+    "accessTime": "2019-02-08T08:55:07.938Z",
+    "changeTime": "2019-02-08T08:55:07.938Z",
+    "birthTime": "2019-02-08T08:55:07.938Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "T4zsrIs9-b.jpg",
+    "ext": ".jpg",
+    "name": "T4zsrIs9-b",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453865,
+    "blocks": 192,
+    "atimeMs": 1549616107937.9268,
+    "mtimeMs": 1549616107937.9268,
+    "ctimeMs": 1549616107937.9268,
+    "birthtimeMs": 1549616107937.9268,
+    "atime": "2019-02-08T08:55:07.938Z",
+    "mtime": "2019-02-08T08:55:07.938Z",
+    "ctime": "2019-02-08T08:55:07.938Z",
+    "birthtime": "2019-02-08T08:55:07.938Z"
+  },
+  {
+    "id": "07472021-5400-5e27-b461-4cdc44276afd",
+    "children": [
+      "da85ad45-2a90-5615-9cfa-007e5439f117"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "eda1d3a40ea2a822f776f57ccf5314a4",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/Tq2ITZs9x6.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/Tq2ITZs9x6.jpg",
+    "relativePath": "images/Tq2ITZs9x6.jpg",
+    "extension": "jpg",
+    "size": 126202,
+    "prettySize": "126 kB",
+    "modifiedTime": "2019-02-08T08:55:07.938Z",
+    "accessTime": "2019-02-08T08:55:07.938Z",
+    "changeTime": "2019-02-08T08:55:07.938Z",
+    "birthTime": "2019-02-08T08:55:07.938Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "Tq2ITZs9x6.jpg",
+    "ext": ".jpg",
+    "name": "Tq2ITZs9x6",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453866,
+    "blocks": 248,
+    "atimeMs": 1549616107937.9268,
+    "mtimeMs": 1549616107937.9268,
+    "ctimeMs": 1549616107937.9268,
+    "birthtimeMs": 1549616107937.9268,
+    "atime": "2019-02-08T08:55:07.938Z",
+    "mtime": "2019-02-08T08:55:07.938Z",
+    "ctime": "2019-02-08T08:55:07.938Z",
+    "birthtime": "2019-02-08T08:55:07.938Z"
+  },
+  {
+    "id": "456af405-df25-5607-bdaf-8f502011b101",
+    "children": [
+      "dafc0c89-ea55-502d-8a01-62798c6d6b54"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "57f55da8c14230ad75372ec4a6effcb7",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/VlFCais9_U.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/VlFCais9_U.jpg",
+    "relativePath": "images/VlFCais9_U.jpg",
+    "extension": "jpg",
+    "size": 79650,
+    "prettySize": "79.7 kB",
+    "modifiedTime": "2019-02-08T08:55:07.938Z",
+    "accessTime": "2019-02-08T08:55:07.938Z",
+    "changeTime": "2019-02-08T08:55:07.938Z",
+    "birthTime": "2019-02-08T08:55:07.938Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "VlFCais9_U.jpg",
+    "ext": ".jpg",
+    "name": "VlFCais9_U",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453868,
+    "blocks": 160,
+    "atimeMs": 1549616107937.9268,
+    "mtimeMs": 1549616107937.9268,
+    "ctimeMs": 1549616107937.9268,
+    "birthtimeMs": 1549616107937.9268,
+    "atime": "2019-02-08T08:55:07.938Z",
+    "mtime": "2019-02-08T08:55:07.938Z",
+    "ctime": "2019-02-08T08:55:07.938Z",
+    "birthtime": "2019-02-08T08:55:07.938Z"
+  },
+  {
+    "id": "9b7fd7a3-7a98-53e9-9ab6-1889b03203e6",
+    "children": [
+      "4e7c08cd-45c8-5648-a56e-3367f115082e"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "6577ed66bb1cd75d133b10dadeb07a06",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/WBNdvKs9-x.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/WBNdvKs9-x.jpg",
+    "relativePath": "images/WBNdvKs9-x.jpg",
+    "extension": "jpg",
+    "size": 104812,
+    "prettySize": "105 kB",
+    "modifiedTime": "2019-02-08T08:55:07.941Z",
+    "accessTime": "2019-02-08T08:55:07.941Z",
+    "changeTime": "2019-02-08T08:55:07.941Z",
+    "birthTime": "2019-02-08T08:55:07.941Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "WBNdvKs9-x.jpg",
+    "ext": ".jpg",
+    "name": "WBNdvKs9-x",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453870,
+    "blocks": 208,
+    "atimeMs": 1549616107941.2603,
+    "mtimeMs": 1549616107941.2603,
+    "ctimeMs": 1549616107941.2603,
+    "birthtimeMs": 1549616107941.2603,
+    "atime": "2019-02-08T08:55:07.941Z",
+    "mtime": "2019-02-08T08:55:07.941Z",
+    "ctime": "2019-02-08T08:55:07.941Z",
+    "birthtime": "2019-02-08T08:55:07.941Z"
+  },
+  {
+    "id": "7a5888c5-e8b7-5aae-86fa-8efab6abb379",
+    "children": [
+      "2ff71dde-ecb7-59ec-b168-dd9c55f7559f"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "893254689a3fbcff68226bfd83570a5a",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/WVE_9as9-Z.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/WVE_9as9-Z.jpg",
+    "relativePath": "images/WVE_9as9-Z.jpg",
+    "extension": "jpg",
+    "size": 123346,
+    "prettySize": "123 kB",
+    "modifiedTime": "2019-02-08T08:55:07.941Z",
+    "accessTime": "2019-02-08T08:55:07.941Z",
+    "changeTime": "2019-02-08T08:55:07.941Z",
+    "birthTime": "2019-02-08T08:55:07.941Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "WVE_9as9-Z.jpg",
+    "ext": ".jpg",
+    "name": "WVE_9as9-Z",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453871,
+    "blocks": 248,
+    "atimeMs": 1549616107941.2603,
+    "mtimeMs": 1549616107941.2603,
+    "ctimeMs": 1549616107941.2603,
+    "birthtimeMs": 1549616107941.2603,
+    "atime": "2019-02-08T08:55:07.941Z",
+    "mtime": "2019-02-08T08:55:07.941Z",
+    "ctime": "2019-02-08T08:55:07.941Z",
+    "birthtime": "2019-02-08T08:55:07.941Z"
+  },
+  {
+    "id": "905eb070-4deb-5d58-8481-35d2e15b5a79",
+    "children": [
+      "897bfc21-4f6a-5468-85ec-32290c1d0cd8"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "6d5b3dcd65cec1eddb1d1b8b692d6046",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/YDPr3BM9yC.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/YDPr3BM9yC.jpg",
+    "relativePath": "images/YDPr3BM9yC.jpg",
+    "extension": "jpg",
+    "size": 129018,
+    "prettySize": "129 kB",
+    "modifiedTime": "2019-02-08T08:55:07.941Z",
+    "accessTime": "2019-02-08T08:55:07.941Z",
+    "changeTime": "2019-02-08T08:55:07.941Z",
+    "birthTime": "2019-02-08T08:55:07.941Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "YDPr3BM9yC.jpg",
+    "ext": ".jpg",
+    "name": "YDPr3BM9yC",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453875,
+    "blocks": 256,
+    "atimeMs": 1549616107941.2603,
+    "mtimeMs": 1549616107941.2603,
+    "ctimeMs": 1549616107941.2603,
+    "birthtimeMs": 1549616107941.2603,
+    "atime": "2019-02-08T08:55:07.941Z",
+    "mtime": "2019-02-08T08:55:07.941Z",
+    "ctime": "2019-02-08T08:55:07.941Z",
+    "birthtime": "2019-02-08T08:55:07.941Z"
+  },
+  {
+    "id": "cfddc65a-4b9b-5019-ab64-0e2132cf3ec3",
+    "children": [
+      "2fd9b628-48a9-55fd-ad58-9d96fe093a77"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "4952f588e9d3a6bbc23aa89be0360a6e",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/Zt6drmM96I.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/Zt6drmM96I.jpg",
+    "relativePath": "images/Zt6drmM96I.jpg",
+    "extension": "jpg",
+    "size": 71363,
+    "prettySize": "71.4 kB",
+    "modifiedTime": "2019-02-08T08:55:07.945Z",
+    "accessTime": "2019-02-08T08:55:07.945Z",
+    "changeTime": "2019-02-08T08:55:07.945Z",
+    "birthTime": "2019-02-08T08:55:07.945Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "Zt6drmM96I.jpg",
+    "ext": ".jpg",
+    "name": "Zt6drmM96I",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453878,
+    "blocks": 144,
+    "atimeMs": 1549616107944.5935,
+    "mtimeMs": 1549616107944.5935,
+    "ctimeMs": 1549616107944.5935,
+    "birthtimeMs": 1549616107944.5935,
+    "atime": "2019-02-08T08:55:07.945Z",
+    "mtime": "2019-02-08T08:55:07.945Z",
+    "ctime": "2019-02-08T08:55:07.945Z",
+    "birthtime": "2019-02-08T08:55:07.945Z"
+  },
+  {
+    "id": "a95d071f-2ba7-5e05-8371-07afd027e5a8",
+    "children": [
+      "1d700556-4c15-52b4-96a1-80881c888aa6"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "9fd68751ddb126a1850940108cb6521a",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/Zt65eQs96z.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/Zt65eQs96z.jpg",
+    "relativePath": "images/Zt65eQs96z.jpg",
+    "extension": "jpg",
+    "size": 81626,
+    "prettySize": "81.6 kB",
+    "modifiedTime": "2019-02-08T08:55:07.945Z",
+    "accessTime": "2019-02-08T08:55:07.945Z",
+    "changeTime": "2019-02-08T08:55:07.945Z",
+    "birthTime": "2019-02-08T08:55:07.945Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "Zt65eQs96z.jpg",
+    "ext": ".jpg",
+    "name": "Zt65eQs96z",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453877,
+    "blocks": 160,
+    "atimeMs": 1549616107944.5935,
+    "mtimeMs": 1549616107944.5935,
+    "ctimeMs": 1549616107944.5935,
+    "birthtimeMs": 1549616107944.5935,
+    "atime": "2019-02-08T08:55:07.945Z",
+    "mtime": "2019-02-08T08:55:07.945Z",
+    "ctime": "2019-02-08T08:55:07.945Z",
+    "birthtime": "2019-02-08T08:55:07.945Z"
+  },
+  {
+    "id": "2e21897a-06bb-5271-81e1-62850e7937ac",
+    "children": [
+      "93ad2692-82e1-5c38-99f3-d388530ec676"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "c31dc82f9d0047241bbeb1d94f57754e",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/baIXGhs99Z.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/baIXGhs99Z.jpg",
+    "relativePath": "images/baIXGhs99Z.jpg",
+    "extension": "jpg",
+    "size": 130596,
+    "prettySize": "131 kB",
+    "modifiedTime": "2019-02-08T08:55:07.945Z",
+    "accessTime": "2019-02-08T08:55:07.945Z",
+    "changeTime": "2019-02-08T08:55:07.945Z",
+    "birthTime": "2019-02-08T08:55:07.945Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "baIXGhs99Z.jpg",
+    "ext": ".jpg",
+    "name": "baIXGhs99Z",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453881,
+    "blocks": 256,
+    "atimeMs": 1549616107944.5935,
+    "mtimeMs": 1549616107944.5935,
+    "ctimeMs": 1549616107944.5935,
+    "birthtimeMs": 1549616107944.5935,
+    "atime": "2019-02-08T08:55:07.945Z",
+    "mtime": "2019-02-08T08:55:07.945Z",
+    "ctime": "2019-02-08T08:55:07.945Z",
+    "birthtime": "2019-02-08T08:55:07.945Z"
+  },
+  {
+    "id": "b5aea16f-3162-5ea1-ab5a-e493b38043e8",
+    "children": [
+      "d7aa2b29-5e4a-5ae5-ab52-9defa7b95918"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "fd4bcbf421b4b2bd8087a6e01e042e45",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/cpKHxyM97Q.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/cpKHxyM97Q.jpg",
+    "relativePath": "images/cpKHxyM97Q.jpg",
+    "extension": "jpg",
+    "size": 122883,
+    "prettySize": "123 kB",
+    "modifiedTime": "2019-02-08T08:55:07.945Z",
+    "accessTime": "2019-02-08T08:55:07.945Z",
+    "changeTime": "2019-02-08T08:55:07.945Z",
+    "birthTime": "2019-02-08T08:55:07.945Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "cpKHxyM97Q.jpg",
+    "ext": ".jpg",
+    "name": "cpKHxyM97Q",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453883,
+    "blocks": 248,
+    "atimeMs": 1549616107944.5935,
+    "mtimeMs": 1549616107944.5935,
+    "ctimeMs": 1549616107944.5935,
+    "birthtimeMs": 1549616107944.5935,
+    "atime": "2019-02-08T08:55:07.945Z",
+    "mtime": "2019-02-08T08:55:07.945Z",
+    "ctime": "2019-02-08T08:55:07.945Z",
+    "birthtime": "2019-02-08T08:55:07.945Z"
+  },
+  {
+    "id": "c95ff874-a15f-5f6b-98b7-1566ac1e9bc6",
+    "children": [
+      "0e4486ff-f98f-5c92-a706-f69d1edcbe7c"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "25d4c3e99e97d8320700e1c29aab95d6",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/dUiIWFM99E.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/dUiIWFM99E.jpg",
+    "relativePath": "images/dUiIWFM99E.jpg",
+    "extension": "jpg",
+    "size": 97838,
+    "prettySize": "97.8 kB",
+    "modifiedTime": "2019-02-08T08:55:07.948Z",
+    "accessTime": "2019-02-08T08:55:07.948Z",
+    "changeTime": "2019-02-08T08:55:07.948Z",
+    "birthTime": "2019-02-08T08:55:07.948Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "dUiIWFM99E.jpg",
+    "ext": ".jpg",
+    "name": "dUiIWFM99E",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453885,
+    "blocks": 192,
+    "atimeMs": 1549616107947.9268,
+    "mtimeMs": 1549616107947.9268,
+    "ctimeMs": 1549616107947.9268,
+    "birthtimeMs": 1549616107947.9268,
+    "atime": "2019-02-08T08:55:07.948Z",
+    "mtime": "2019-02-08T08:55:07.948Z",
+    "ctime": "2019-02-08T08:55:07.948Z",
+    "birthtime": "2019-02-08T08:55:07.948Z"
+  },
+  {
+    "id": "6dab4fa2-e99b-5f01-954e-d8521cb12b6f",
+    "children": [
+      "33370589-de2f-55a7-8e5c-ea4f5ffd0cf0"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "779287fe3b4bc4db813afd7adb213e4f",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/dUiblpM990.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/dUiblpM990.jpg",
+    "relativePath": "images/dUiblpM990.jpg",
+    "extension": "jpg",
+    "size": 116202,
+    "prettySize": "116 kB",
+    "modifiedTime": "2019-02-08T08:55:07.948Z",
+    "accessTime": "2019-02-08T08:55:07.948Z",
+    "changeTime": "2019-02-08T08:55:07.948Z",
+    "birthTime": "2019-02-08T08:55:07.948Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "dUiblpM990.jpg",
+    "ext": ".jpg",
+    "name": "dUiblpM990",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453886,
+    "blocks": 232,
+    "atimeMs": 1549616107947.9268,
+    "mtimeMs": 1549616107947.9268,
+    "ctimeMs": 1549616107947.9268,
+    "birthtimeMs": 1549616107947.9268,
+    "atime": "2019-02-08T08:55:07.948Z",
+    "mtime": "2019-02-08T08:55:07.948Z",
+    "ctime": "2019-02-08T08:55:07.948Z",
+    "birthtime": "2019-02-08T08:55:07.948Z"
+  },
+  {
+    "id": "6f5ab75b-4ba7-50e4-ad4f-cc8357f6155e",
+    "children": [
+      "74b20d30-e241-58cf-8d3e-1d25e263f3ba"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "beabcb86762d72aaa391ca3d3bacf50f",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/dac9QCs96Z.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/dac9QCs96Z.jpg",
+    "relativePath": "images/dac9QCs96Z.jpg",
+    "extension": "jpg",
+    "size": 97984,
+    "prettySize": "98 kB",
+    "modifiedTime": "2019-02-08T08:55:07.948Z",
+    "accessTime": "2019-02-08T08:55:07.948Z",
+    "changeTime": "2019-02-08T08:55:07.948Z",
+    "birthTime": "2019-02-08T08:55:07.948Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "dac9QCs96Z.jpg",
+    "ext": ".jpg",
+    "name": "dac9QCs96Z",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453888,
+    "blocks": 192,
+    "atimeMs": 1549616107947.9268,
+    "mtimeMs": 1549616107947.9268,
+    "ctimeMs": 1549616107947.9268,
+    "birthtimeMs": 1549616107947.9268,
+    "atime": "2019-02-08T08:55:07.948Z",
+    "mtime": "2019-02-08T08:55:07.948Z",
+    "ctime": "2019-02-08T08:55:07.948Z",
+    "birthtime": "2019-02-08T08:55:07.948Z"
+  },
+  {
+    "id": "8d8852d5-d464-5153-b1fe-afc94b70d0a1",
+    "children": [],
+    "parent": "632c83c7-e76d-5478-8863-fc5a593f7119",
+    "internal": {
+      "contentDigest": "e6879945b14d6234875718df657b8beb",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "39d3bdcd-5adf-5f04-83b5-40c4e7dc60d5",
+    "children": [],
+    "parent": "cfedef16-1f17-5489-aea7-61529e33d160",
+    "internal": {
+      "contentDigest": "5c7a76710cb2f7e4d3f2f2ebe64f628d",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "9fdf7ff2-9e51-5c2c-90cf-4c3a4af4e6b4",
+    "children": [],
+    "parent": "a03bf39a-da09-5c14-9cf6-103c439f3472",
+    "internal": {
+      "contentDigest": "30c7fb1607938caece1719e539c54154",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "0b06bdfe-f253-5859-8321-b42b5d737195",
+    "children": [],
+    "parent": "5fb18353-ad2b-55d6-8f8b-365ab131d348",
+    "internal": {
+      "contentDigest": "d41e8de7afad8820915adf302f4bce27",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "4abaade8-8f68-5bbb-9e81-798fa66a160d",
+    "children": [],
+    "parent": "eadfe4c4-6636-55b1-95ee-b24faa4d46f3",
+    "internal": {
+      "contentDigest": "b648f5c6b4dd19a1e20f59eab97dcccb",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "e6681fae-b509-5472-a7e4-077f9038072f",
+    "children": [],
+    "parent": "e882dc2b-8f14-576e-8f17-a491cd037251",
+    "internal": {
+      "contentDigest": "9af0ebae8944fcbeb03e57571babe823",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "e3621331-a649-549c-bee4-a9d9bd112e47",
+    "children": [],
+    "parent": "5bc47ad3-c074-5e02-be9b-0150d6322b2c",
+    "internal": {
+      "contentDigest": "c99a72470ab736db7b1546334122f456",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "09df17a3-2377-5cb1-ae72-a42c552bc588",
+    "children": [],
+    "parent": "28c84528-48f8-59b0-ba66-3da2c17fd0a7",
+    "internal": {
+      "contentDigest": "b6bb6cf1090c42d50f02d7c66669c898",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "98324bbd-3257-5c70-a3be-e713965f5fa6",
+    "children": [],
+    "parent": "7d697ee3-2e66-51f6-a386-b1e5d8cf5dba",
+    "internal": {
+      "contentDigest": "ad40145e18355345c530559aa46945ad",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "b6f4d1f7-ddf6-5994-92b4-7a0116275f71",
+    "children": [],
+    "parent": "83ac87f2-cea9-575a-82bd-51543c082415",
+    "internal": {
+      "contentDigest": "830697857fd3bc129303d3068cad20dd",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "a47b1fe4-1b94-5cf8-9a0f-1a72f48d3c98",
+    "children": [],
+    "parent": "999e1cb6-9c25-564b-8fe4-e139a71b988c",
+    "internal": {
+      "contentDigest": "f783590e0d9d9478f6ce8d6d126a2104",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "af0788ba-9b32-5ca7-9080-bad0a49b22c6",
+    "children": [],
+    "parent": "dbee0e06-cc3e-5d80-8099-182acbf084d2",
+    "internal": {
+      "contentDigest": "6661c542bb747a61d808f6745f64716e",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "f5f0e564-899f-5bbc-92de-a2325b69cb75",
+    "children": [],
+    "parent": "7c1a6eea-05e7-5024-9926-36b68de7aa11",
+    "internal": {
+      "contentDigest": "787ec91c0900453445c1777845387089",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "630d597e-cb8d-5eb2-9858-ff9cd89de40f",
+    "children": [],
+    "parent": "67493e72-7ae8-572d-8cf1-5b6fb600dd8b",
+    "internal": {
+      "contentDigest": "53d1a945465e41017425f1b19ae140f3",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "6ba97198-5331-53d6-a0e0-c9c063c5094e",
+    "children": [],
+    "parent": "090efc09-4260-50c7-a541-ecebe1d1aa6e",
+    "internal": {
+      "contentDigest": "77d150d429e4a17804959337a1b7aa79",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "cdd5a1b7-b7d8-507e-8d66-6ebf484592fc",
+    "children": [],
+    "parent": "3cba6722-5053-5298-b2fb-32a4a9cc44aa",
+    "internal": {
+      "contentDigest": "93f646b8ddec29b5f8d8e071f6381be7",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "b0d46bbe-d4b8-568e-9323-215b2bf6f4fd",
+    "children": [],
+    "parent": "d49a67c2-a204-598d-908f-7a00b225745e",
+    "internal": {
+      "contentDigest": "245770f51f9bad853b90b8edaeab3c1e",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "da85ad45-2a90-5615-9cfa-007e5439f117",
+    "children": [],
+    "parent": "07472021-5400-5e27-b461-4cdc44276afd",
+    "internal": {
+      "contentDigest": "eda1d3a40ea2a822f776f57ccf5314a4",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "dafc0c89-ea55-502d-8a01-62798c6d6b54",
+    "children": [],
+    "parent": "456af405-df25-5607-bdaf-8f502011b101",
+    "internal": {
+      "contentDigest": "57f55da8c14230ad75372ec4a6effcb7",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "4e7c08cd-45c8-5648-a56e-3367f115082e",
+    "children": [],
+    "parent": "9b7fd7a3-7a98-53e9-9ab6-1889b03203e6",
+    "internal": {
+      "contentDigest": "6577ed66bb1cd75d133b10dadeb07a06",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "2ff71dde-ecb7-59ec-b168-dd9c55f7559f",
+    "children": [],
+    "parent": "7a5888c5-e8b7-5aae-86fa-8efab6abb379",
+    "internal": {
+      "contentDigest": "893254689a3fbcff68226bfd83570a5a",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "897bfc21-4f6a-5468-85ec-32290c1d0cd8",
+    "children": [],
+    "parent": "905eb070-4deb-5d58-8481-35d2e15b5a79",
+    "internal": {
+      "contentDigest": "6d5b3dcd65cec1eddb1d1b8b692d6046",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "2fd9b628-48a9-55fd-ad58-9d96fe093a77",
+    "children": [],
+    "parent": "cfddc65a-4b9b-5019-ab64-0e2132cf3ec3",
+    "internal": {
+      "contentDigest": "4952f588e9d3a6bbc23aa89be0360a6e",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "1d700556-4c15-52b4-96a1-80881c888aa6",
+    "children": [],
+    "parent": "a95d071f-2ba7-5e05-8371-07afd027e5a8",
+    "internal": {
+      "contentDigest": "9fd68751ddb126a1850940108cb6521a",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "93ad2692-82e1-5c38-99f3-d388530ec676",
+    "children": [],
+    "parent": "2e21897a-06bb-5271-81e1-62850e7937ac",
+    "internal": {
+      "contentDigest": "c31dc82f9d0047241bbeb1d94f57754e",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "d7aa2b29-5e4a-5ae5-ab52-9defa7b95918",
+    "children": [],
+    "parent": "b5aea16f-3162-5ea1-ab5a-e493b38043e8",
+    "internal": {
+      "contentDigest": "fd4bcbf421b4b2bd8087a6e01e042e45",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "0e4486ff-f98f-5c92-a706-f69d1edcbe7c",
+    "children": [],
+    "parent": "c95ff874-a15f-5f6b-98b7-1566ac1e9bc6",
+    "internal": {
+      "contentDigest": "25d4c3e99e97d8320700e1c29aab95d6",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "33370589-de2f-55a7-8e5c-ea4f5ffd0cf0",
+    "children": [],
+    "parent": "6dab4fa2-e99b-5f01-954e-d8521cb12b6f",
+    "internal": {
+      "contentDigest": "779287fe3b4bc4db813afd7adb213e4f",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "74b20d30-e241-58cf-8d3e-1d25e263f3ba",
+    "children": [],
+    "parent": "6f5ab75b-4ba7-50e4-ad4f-cc8357f6155e",
+    "internal": {
+      "contentDigest": "beabcb86762d72aaa391ca3d3bacf50f",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "25bfb17b-4867-52b0-b6b2-31141ffd66ea",
+    "children": [
+      "da2bca11-40c5-5629-8ac5-d4e80b3002e7"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "12d6834787247fa1fd603472dca4779b",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/daf92Rs9wJ.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/daf92Rs9wJ.jpg",
+    "relativePath": "images/daf92Rs9wJ.jpg",
+    "extension": "jpg",
+    "size": 91071,
+    "prettySize": "91.1 kB",
+    "modifiedTime": "2019-02-08T08:55:07.948Z",
+    "accessTime": "2019-02-08T08:55:07.948Z",
+    "changeTime": "2019-02-08T08:55:07.948Z",
+    "birthTime": "2019-02-08T08:55:07.948Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "daf92Rs9wJ.jpg",
+    "ext": ".jpg",
+    "name": "daf92Rs9wJ",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453889,
+    "blocks": 184,
+    "atimeMs": 1549616107947.9268,
+    "mtimeMs": 1549616107947.9268,
+    "ctimeMs": 1549616107947.9268,
+    "birthtimeMs": 1549616107947.9268,
+    "atime": "2019-02-08T08:55:07.948Z",
+    "mtime": "2019-02-08T08:55:07.948Z",
+    "ctime": "2019-02-08T08:55:07.948Z",
+    "birthtime": "2019-02-08T08:55:07.948Z"
+  },
+  {
+    "id": "b35cc487-b060-5849-a332-ae2b6214b30b",
+    "children": [
+      "c364338a-eb65-5925-a014-effd93849b40"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "113c46804bc8908ced0a7bd6c7d24f7b",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/goTReQM95o.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/goTReQM95o.jpg",
+    "relativePath": "images/goTReQM95o.jpg",
+    "extension": "jpg",
+    "size": 118621,
+    "prettySize": "119 kB",
+    "modifiedTime": "2019-02-08T08:55:07.948Z",
+    "accessTime": "2019-02-08T08:55:07.948Z",
+    "changeTime": "2019-02-08T08:55:07.948Z",
+    "birthTime": "2019-02-08T08:55:07.948Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "goTReQM95o.jpg",
+    "ext": ".jpg",
+    "name": "goTReQM95o",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453891,
+    "blocks": 232,
+    "atimeMs": 1549616107947.9268,
+    "mtimeMs": 1549616107947.9268,
+    "ctimeMs": 1549616107947.9268,
+    "birthtimeMs": 1549616107947.9268,
+    "atime": "2019-02-08T08:55:07.948Z",
+    "mtime": "2019-02-08T08:55:07.948Z",
+    "ctime": "2019-02-08T08:55:07.948Z",
+    "birthtime": "2019-02-08T08:55:07.948Z"
+  },
+  {
+    "id": "63209335-2764-5ec8-b050-ab0acf938a05",
+    "children": [
+      "4d9816a7-3885-5dd4-bbe6-85c655a48316"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "fce6b57d4f233faed53317605e60455e",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/h9ZrIms9y_.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/h9ZrIms9y_.jpg",
+    "relativePath": "images/h9ZrIms9y_.jpg",
+    "extension": "jpg",
+    "size": 79925,
+    "prettySize": "79.9 kB",
+    "modifiedTime": "2019-02-08T08:55:07.948Z",
+    "accessTime": "2019-02-08T08:55:07.948Z",
+    "changeTime": "2019-02-08T08:55:07.948Z",
+    "birthTime": "2019-02-08T08:55:07.948Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "h9ZrIms9y_.jpg",
+    "ext": ".jpg",
+    "name": "h9ZrIms9y_",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453892,
+    "blocks": 160,
+    "atimeMs": 1549616107947.9268,
+    "mtimeMs": 1549616107947.9268,
+    "ctimeMs": 1549616107947.9268,
+    "birthtimeMs": 1549616107947.9268,
+    "atime": "2019-02-08T08:55:07.948Z",
+    "mtime": "2019-02-08T08:55:07.948Z",
+    "ctime": "2019-02-08T08:55:07.948Z",
+    "birthtime": "2019-02-08T08:55:07.948Z"
+  },
+  {
+    "id": "91d496c3-3368-5810-811f-7523e45582dd",
+    "children": [
+      "442f41c4-bbf2-5124-8602-f242880c593f"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "a9f1eea7376c2d4c9f366f8750fc9623",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/hKxaEXs96v.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/hKxaEXs96v.jpg",
+    "relativePath": "images/hKxaEXs96v.jpg",
+    "extension": "jpg",
+    "size": 117417,
+    "prettySize": "117 kB",
+    "modifiedTime": "2019-02-08T08:55:07.951Z",
+    "accessTime": "2019-02-08T08:55:07.951Z",
+    "changeTime": "2019-02-08T08:55:07.951Z",
+    "birthTime": "2019-02-08T08:55:07.951Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "hKxaEXs96v.jpg",
+    "ext": ".jpg",
+    "name": "hKxaEXs96v",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453894,
+    "blocks": 232,
+    "atimeMs": 1549616107951.2603,
+    "mtimeMs": 1549616107951.2603,
+    "ctimeMs": 1549616107951.2603,
+    "birthtimeMs": 1549616107951.2603,
+    "atime": "2019-02-08T08:55:07.951Z",
+    "mtime": "2019-02-08T08:55:07.951Z",
+    "ctime": "2019-02-08T08:55:07.951Z",
+    "birthtime": "2019-02-08T08:55:07.951Z"
+  },
+  {
+    "id": "605ea709-2f6b-5c32-84dd-c01d1d764a55",
+    "children": [
+      "adb8e4b2-34ed-5f31-b6d7-60b144c100d3"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "a7680535f18d909cdf3f60908dedc9bb",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/hhkRxns97X.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/hhkRxns97X.jpg",
+    "relativePath": "images/hhkRxns97X.jpg",
+    "extension": "jpg",
+    "size": 81083,
+    "prettySize": "81.1 kB",
+    "modifiedTime": "2019-02-08T08:55:07.951Z",
+    "accessTime": "2019-02-08T08:55:07.951Z",
+    "changeTime": "2019-02-08T08:55:07.951Z",
+    "birthTime": "2019-02-08T08:55:07.951Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "hhkRxns97X.jpg",
+    "ext": ".jpg",
+    "name": "hhkRxns97X",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453897,
+    "blocks": 160,
+    "atimeMs": 1549616107951.2603,
+    "mtimeMs": 1549616107951.2603,
+    "ctimeMs": 1549616107951.2603,
+    "birthtimeMs": 1549616107951.2603,
+    "atime": "2019-02-08T08:55:07.951Z",
+    "mtime": "2019-02-08T08:55:07.951Z",
+    "ctime": "2019-02-08T08:55:07.951Z",
+    "birthtime": "2019-02-08T08:55:07.951Z"
+  },
+  {
+    "id": "c61e32c1-b74a-577d-bcc5-71e591546782",
+    "children": [
+      "fa1545ee-c421-566f-a062-5b3cc5ed86df"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "70db28f9118ddc122d2aad303021137c",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/cipIL0M9zb.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/cipIL0M9zb.jpg",
+    "relativePath": "images/cipIL0M9zb.jpg",
+    "extension": "jpg",
+    "size": 100735,
+    "prettySize": "101 kB",
+    "modifiedTime": "2019-02-08T08:55:07.945Z",
+    "accessTime": "2019-02-08T08:55:07.945Z",
+    "changeTime": "2019-02-08T08:55:07.945Z",
+    "birthTime": "2019-02-08T08:55:07.945Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "cipIL0M9zb.jpg",
+    "ext": ".jpg",
+    "name": "cipIL0M9zb",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453882,
+    "blocks": 200,
+    "atimeMs": 1549616107944.5935,
+    "mtimeMs": 1549616107944.5935,
+    "ctimeMs": 1549616107944.5935,
+    "birthtimeMs": 1549616107944.5935,
+    "atime": "2019-02-08T08:55:07.945Z",
+    "mtime": "2019-02-08T08:55:07.945Z",
+    "ctime": "2019-02-08T08:55:07.945Z",
+    "birthtime": "2019-02-08T08:55:07.945Z"
+  },
+  {
+    "id": "538f5859-d9a3-589e-8dde-3e731732b0ca",
+    "children": [
+      "3f06569d-ebc6-5848-a69d-5ff64a9d9b67"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "96cc7e05e1dd76339a0332b39dfc4640",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/htQkA2M9_x.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/htQkA2M9_x.jpg",
+    "relativePath": "images/htQkA2M9_x.jpg",
+    "extension": "jpg",
+    "size": 121047,
+    "prettySize": "121 kB",
+    "modifiedTime": "2019-02-08T08:55:07.951Z",
+    "accessTime": "2019-02-08T08:55:07.951Z",
+    "changeTime": "2019-02-08T08:55:07.951Z",
+    "birthTime": "2019-02-08T08:55:07.951Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "htQkA2M9_x.jpg",
+    "ext": ".jpg",
+    "name": "htQkA2M9_x",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453898,
+    "blocks": 240,
+    "atimeMs": 1549616107951.2603,
+    "mtimeMs": 1549616107951.2603,
+    "ctimeMs": 1549616107951.2603,
+    "birthtimeMs": 1549616107951.2603,
+    "atime": "2019-02-08T08:55:07.951Z",
+    "mtime": "2019-02-08T08:55:07.951Z",
+    "ctime": "2019-02-08T08:55:07.951Z",
+    "birthtime": "2019-02-08T08:55:07.951Z"
+  },
+  {
+    "id": "632d64a1-e24c-55fe-a3b3-a4a31997af39",
+    "children": [
+      "42244d78-fac3-5e3b-9f14-02a15c31b548"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "3a533f4c318f142c43c6aea513fde2ee",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/iRfNB_M99y.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/iRfNB_M99y.jpg",
+    "relativePath": "images/iRfNB_M99y.jpg",
+    "extension": "jpg",
+    "size": 116819,
+    "prettySize": "117 kB",
+    "modifiedTime": "2019-02-08T08:55:07.951Z",
+    "accessTime": "2019-02-08T08:55:07.951Z",
+    "changeTime": "2019-02-08T08:55:07.951Z",
+    "birthTime": "2019-02-08T08:55:07.951Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "iRfNB_M99y.jpg",
+    "ext": ".jpg",
+    "name": "iRfNB_M99y",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453900,
+    "blocks": 232,
+    "atimeMs": 1549616107951.2603,
+    "mtimeMs": 1549616107951.2603,
+    "ctimeMs": 1549616107951.2603,
+    "birthtimeMs": 1549616107951.2603,
+    "atime": "2019-02-08T08:55:07.951Z",
+    "mtime": "2019-02-08T08:55:07.951Z",
+    "ctime": "2019-02-08T08:55:07.951Z",
+    "birthtime": "2019-02-08T08:55:07.951Z"
+  },
+  {
+    "id": "922f795a-bf71-5370-bf64-e04720bd110e",
+    "children": [
+      "8a7742e1-6b5a-59f8-9d48-f0abf0ea86a9"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "9c8ce28260d2ae31eb2ed1b06bbd473e",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/iDVBRjM99x.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/iDVBRjM99x.jpg",
+    "relativePath": "images/iDVBRjM99x.jpg",
+    "extension": "jpg",
+    "size": 107987,
+    "prettySize": "108 kB",
+    "modifiedTime": "2019-02-08T08:55:07.951Z",
+    "accessTime": "2019-02-08T08:55:07.951Z",
+    "changeTime": "2019-02-08T08:55:07.951Z",
+    "birthTime": "2019-02-08T08:55:07.951Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "iDVBRjM99x.jpg",
+    "ext": ".jpg",
+    "name": "iDVBRjM99x",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453899,
+    "blocks": 216,
+    "atimeMs": 1549616107951.2603,
+    "mtimeMs": 1549616107951.2603,
+    "ctimeMs": 1549616107951.2603,
+    "birthtimeMs": 1549616107951.2603,
+    "atime": "2019-02-08T08:55:07.951Z",
+    "mtime": "2019-02-08T08:55:07.951Z",
+    "ctime": "2019-02-08T08:55:07.951Z",
+    "birthtime": "2019-02-08T08:55:07.951Z"
+  },
+  {
+    "id": "14d49c41-5571-57c5-b7f8-07e5d19e24fc",
+    "children": [
+      "2f9bc223-d0e2-57c4-9de2-0de4c32d6ec3"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "c687cf5f4977f346c919e3f0b10a5fd3",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/icK7QlM96C.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/icK7QlM96C.jpg",
+    "relativePath": "images/icK7QlM96C.jpg",
+    "extension": "jpg",
+    "size": 108678,
+    "prettySize": "109 kB",
+    "modifiedTime": "2019-02-08T08:55:07.951Z",
+    "accessTime": "2019-02-08T08:55:07.951Z",
+    "changeTime": "2019-02-08T08:55:07.951Z",
+    "birthTime": "2019-02-08T08:55:07.951Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "icK7QlM96C.jpg",
+    "ext": ".jpg",
+    "name": "icK7QlM96C",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453901,
+    "blocks": 216,
+    "atimeMs": 1549616107951.2603,
+    "mtimeMs": 1549616107951.2603,
+    "ctimeMs": 1549616107951.2603,
+    "birthtimeMs": 1549616107951.2603,
+    "atime": "2019-02-08T08:55:07.951Z",
+    "mtime": "2019-02-08T08:55:07.951Z",
+    "ctime": "2019-02-08T08:55:07.951Z",
+    "birthtime": "2019-02-08T08:55:07.951Z"
+  },
+  {
+    "id": "b8d1824e-97a7-58ad-8f6a-9eca8ffe31c5",
+    "children": [
+      "cdaeb064-5204-570a-b236-f8410c35fcff"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "96fad019fa39ab34f2ad3b09cc17a1e2",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/dCsmF8s951.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/dCsmF8s951.jpg",
+    "relativePath": "images/dCsmF8s951.jpg",
+    "extension": "jpg",
+    "size": 124650,
+    "prettySize": "125 kB",
+    "modifiedTime": "2019-02-08T08:55:07.948Z",
+    "accessTime": "2019-02-08T08:55:07.945Z",
+    "changeTime": "2019-02-08T08:55:07.948Z",
+    "birthTime": "2019-02-08T08:55:07.948Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "dCsmF8s951.jpg",
+    "ext": ".jpg",
+    "name": "dCsmF8s951",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453884,
+    "blocks": 248,
+    "atimeMs": 1549616107944.5935,
+    "mtimeMs": 1549616107947.9268,
+    "ctimeMs": 1549616107947.9268,
+    "birthtimeMs": 1549616107947.9268,
+    "atime": "2019-02-08T08:55:07.945Z",
+    "mtime": "2019-02-08T08:55:07.948Z",
+    "ctime": "2019-02-08T08:55:07.948Z",
+    "birthtime": "2019-02-08T08:55:07.948Z"
+  },
+  {
+    "id": "c52dd4e6-274f-556f-84af-21c118aa6cca",
+    "children": [
+      "eeac8d14-bf7c-5762-ab78-4d172dd5afe3"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "31ba31edc1bf4fdf281939ae690236de",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/jKpZA4M90B.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/jKpZA4M90B.jpg",
+    "relativePath": "images/jKpZA4M90B.jpg",
+    "extension": "jpg",
+    "size": 123145,
+    "prettySize": "123 kB",
+    "modifiedTime": "2019-02-08T08:55:07.955Z",
+    "accessTime": "2019-02-08T08:55:07.955Z",
+    "changeTime": "2019-02-08T08:55:07.955Z",
+    "birthTime": "2019-02-08T08:55:07.955Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "jKpZA4M90B.jpg",
+    "ext": ".jpg",
+    "name": "jKpZA4M90B",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453904,
+    "blocks": 248,
+    "atimeMs": 1549616107954.5935,
+    "mtimeMs": 1549616107954.5935,
+    "ctimeMs": 1549616107954.5935,
+    "birthtimeMs": 1549616107954.5935,
+    "atime": "2019-02-08T08:55:07.955Z",
+    "mtime": "2019-02-08T08:55:07.955Z",
+    "ctime": "2019-02-08T08:55:07.955Z",
+    "birthtime": "2019-02-08T08:55:07.955Z"
+  },
+  {
+    "id": "f64841a4-4d95-5112-9348-bc562961db4d",
+    "children": [
+      "a5c97fc5-c9f1-54c0-9233-210fe1f160b0"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "3f7ccb765115bdcdb775a7cecd5bce2d",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/jID6jzM95N.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/jID6jzM95N.jpg",
+    "relativePath": "images/jID6jzM95N.jpg",
+    "extension": "jpg",
+    "size": 85157,
+    "prettySize": "85.2 kB",
+    "modifiedTime": "2019-02-08T08:55:07.955Z",
+    "accessTime": "2019-02-08T08:55:07.951Z",
+    "changeTime": "2019-02-08T08:55:07.955Z",
+    "birthTime": "2019-02-08T08:55:07.955Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "jID6jzM95N.jpg",
+    "ext": ".jpg",
+    "name": "jID6jzM95N",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453903,
+    "blocks": 168,
+    "atimeMs": 1549616107951.2603,
+    "mtimeMs": 1549616107954.5935,
+    "ctimeMs": 1549616107954.5935,
+    "birthtimeMs": 1549616107954.5935,
+    "atime": "2019-02-08T08:55:07.951Z",
+    "mtime": "2019-02-08T08:55:07.955Z",
+    "ctime": "2019-02-08T08:55:07.955Z",
+    "birthtime": "2019-02-08T08:55:07.955Z"
+  },
+  {
+    "id": "b633e034-a20b-5d41-a9b0-11e9d621d983",
+    "children": [
+      "b0cedf3b-cd9b-5421-9d27-48a8f2da610f"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "1fd8c62f69302a0232f236888d945b75",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/jSZfqEM9-l.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/jSZfqEM9-l.jpg",
+    "relativePath": "images/jSZfqEM9-l.jpg",
+    "extension": "jpg",
+    "size": 128798,
+    "prettySize": "129 kB",
+    "modifiedTime": "2019-02-08T08:55:07.955Z",
+    "accessTime": "2019-02-08T08:55:07.955Z",
+    "changeTime": "2019-02-08T08:55:07.955Z",
+    "birthTime": "2019-02-08T08:55:07.955Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "jSZfqEM9-l.jpg",
+    "ext": ".jpg",
+    "name": "jSZfqEM9-l",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453902,
+    "blocks": 256,
+    "atimeMs": 1549616107954.5935,
+    "mtimeMs": 1549616107954.5935,
+    "ctimeMs": 1549616107954.5935,
+    "birthtimeMs": 1549616107954.5935,
+    "atime": "2019-02-08T08:55:07.955Z",
+    "mtime": "2019-02-08T08:55:07.955Z",
+    "ctime": "2019-02-08T08:55:07.955Z",
+    "birthtime": "2019-02-08T08:55:07.955Z"
+  },
+  {
+    "id": "dc8d98cd-9a4b-5c95-978c-72e5e003d3a9",
+    "children": [
+      "9034de88-ace8-585c-b0fe-acea09a60b4f"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "af544090b8d1f2150b5ebfab252dbf3e",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/jh0QmFM9_4.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/jh0QmFM9_4.jpg",
+    "relativePath": "images/jh0QmFM9_4.jpg",
+    "extension": "jpg",
+    "size": 107268,
+    "prettySize": "107 kB",
+    "modifiedTime": "2019-02-08T08:55:07.955Z",
+    "accessTime": "2019-02-08T08:55:07.955Z",
+    "changeTime": "2019-02-08T08:55:07.955Z",
+    "birthTime": "2019-02-08T08:55:07.955Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "jh0QmFM9_4.jpg",
+    "ext": ".jpg",
+    "name": "jh0QmFM9_4",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453907,
+    "blocks": 216,
+    "atimeMs": 1549616107954.5935,
+    "mtimeMs": 1549616107954.5935,
+    "ctimeMs": 1549616107954.5935,
+    "birthtimeMs": 1549616107954.5935,
+    "atime": "2019-02-08T08:55:07.955Z",
+    "mtime": "2019-02-08T08:55:07.955Z",
+    "ctime": "2019-02-08T08:55:07.955Z",
+    "birthtime": "2019-02-08T08:55:07.955Z"
+  },
+  {
+    "id": "c9a40590-98f2-560d-b091-34e10179dc1c",
+    "children": [
+      "f59e19cb-3173-5247-a277-76b3b8250b4b"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "ce267a020dec9362be41e06d8d586975",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/k7zLTbs9z0.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/k7zLTbs9z0.jpg",
+    "relativePath": "images/k7zLTbs9z0.jpg",
+    "extension": "jpg",
+    "size": 87182,
+    "prettySize": "87.2 kB",
+    "modifiedTime": "2019-02-08T08:55:07.955Z",
+    "accessTime": "2019-02-08T08:55:07.955Z",
+    "changeTime": "2019-02-08T08:55:07.955Z",
+    "birthTime": "2019-02-08T08:55:07.955Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "k7zLTbs9z0.jpg",
+    "ext": ".jpg",
+    "name": "k7zLTbs9z0",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453908,
+    "blocks": 176,
+    "atimeMs": 1549616107954.5935,
+    "mtimeMs": 1549616107954.5935,
+    "ctimeMs": 1549616107954.5935,
+    "birthtimeMs": 1549616107954.5935,
+    "atime": "2019-02-08T08:55:07.955Z",
+    "mtime": "2019-02-08T08:55:07.955Z",
+    "ctime": "2019-02-08T08:55:07.955Z",
+    "birthtime": "2019-02-08T08:55:07.955Z"
+  },
+  {
+    "id": "19f096ac-7d47-53e3-81df-5f6b6fd942b7",
+    "children": [
+      "da1377ca-7e8f-5196-a4fd-d0a4f3589a41"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "46bfd9fcfe5f42f54aafc1e4dd7b40d2",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/kFThHyM95O.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/kFThHyM95O.jpg",
+    "relativePath": "images/kFThHyM95O.jpg",
+    "extension": "jpg",
+    "size": 127219,
+    "prettySize": "127 kB",
+    "modifiedTime": "2019-02-08T08:55:07.955Z",
+    "accessTime": "2019-02-08T08:55:07.955Z",
+    "changeTime": "2019-02-08T08:55:07.955Z",
+    "birthTime": "2019-02-08T08:55:07.955Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "kFThHyM95O.jpg",
+    "ext": ".jpg",
+    "name": "kFThHyM95O",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453909,
+    "blocks": 256,
+    "atimeMs": 1549616107954.5935,
+    "mtimeMs": 1549616107954.5935,
+    "ctimeMs": 1549616107954.5935,
+    "birthtimeMs": 1549616107954.5935,
+    "atime": "2019-02-08T08:55:07.955Z",
+    "mtime": "2019-02-08T08:55:07.955Z",
+    "ctime": "2019-02-08T08:55:07.955Z",
+    "birthtime": "2019-02-08T08:55:07.955Z"
+  },
+  {
+    "id": "6bb783c1-92c8-5a66-8b1c-97aeb2f18647",
+    "children": [
+      "ad5bf0e8-78e6-5c06-8f36-18de7bfe675a"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "8e4fa5e7e3dae7c02bd280bb24e95c66",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/l3kMPSM92e.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/l3kMPSM92e.jpg",
+    "relativePath": "images/l3kMPSM92e.jpg",
+    "extension": "jpg",
+    "size": 94180,
+    "prettySize": "94.2 kB",
+    "modifiedTime": "2019-02-08T08:55:07.955Z",
+    "accessTime": "2019-02-08T08:55:07.955Z",
+    "changeTime": "2019-02-08T08:55:07.955Z",
+    "birthTime": "2019-02-08T08:55:07.955Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "l3kMPSM92e.jpg",
+    "ext": ".jpg",
+    "name": "l3kMPSM92e",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453910,
+    "blocks": 184,
+    "atimeMs": 1549616107954.5935,
+    "mtimeMs": 1549616107954.5935,
+    "ctimeMs": 1549616107954.5935,
+    "birthtimeMs": 1549616107954.5935,
+    "atime": "2019-02-08T08:55:07.955Z",
+    "mtime": "2019-02-08T08:55:07.955Z",
+    "ctime": "2019-02-08T08:55:07.955Z",
+    "birthtime": "2019-02-08T08:55:07.955Z"
+  },
+  {
+    "id": "ac3d890f-c2bd-5ccc-a584-ab773e2bb356",
+    "children": [
+      "4be4599e-5f28-5597-9b97-5d689b785dc3"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "0f3cf0fd60b391d081376a9912172984",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/lYmjeQs9_j.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/lYmjeQs9_j.jpg",
+    "relativePath": "images/lYmjeQs9_j.jpg",
+    "extension": "jpg",
+    "size": 118234,
+    "prettySize": "118 kB",
+    "modifiedTime": "2019-02-08T08:55:07.955Z",
+    "accessTime": "2019-02-08T08:55:07.955Z",
+    "changeTime": "2019-02-08T08:55:07.955Z",
+    "birthTime": "2019-02-08T08:55:07.955Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "lYmjeQs9_j.jpg",
+    "ext": ".jpg",
+    "name": "lYmjeQs9_j",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453911,
+    "blocks": 232,
+    "atimeMs": 1549616107954.5935,
+    "mtimeMs": 1549616107954.5935,
+    "ctimeMs": 1549616107954.5935,
+    "birthtimeMs": 1549616107954.5935,
+    "atime": "2019-02-08T08:55:07.955Z",
+    "mtime": "2019-02-08T08:55:07.955Z",
+    "ctime": "2019-02-08T08:55:07.955Z",
+    "birthtime": "2019-02-08T08:55:07.955Z"
+  },
+  {
+    "id": "19737ea3-cf41-5044-9262-cc8a00ba37a2",
+    "children": [
+      "cc003810-50ca-5300-921f-f45dc27bb000"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "4e0218a426f7ca098de8f79f19a9812a",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/lYnUVSs9wf.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/lYnUVSs9wf.jpg",
+    "relativePath": "images/lYnUVSs9wf.jpg",
+    "extension": "jpg",
+    "size": 119134,
+    "prettySize": "119 kB",
+    "modifiedTime": "2019-02-08T08:55:07.958Z",
+    "accessTime": "2019-02-08T08:55:07.955Z",
+    "changeTime": "2019-02-08T08:55:07.958Z",
+    "birthTime": "2019-02-08T08:55:07.958Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "lYnUVSs9wf.jpg",
+    "ext": ".jpg",
+    "name": "lYnUVSs9wf",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453912,
+    "blocks": 240,
+    "atimeMs": 1549616107954.5935,
+    "mtimeMs": 1549616107957.9268,
+    "ctimeMs": 1549616107957.9268,
+    "birthtimeMs": 1549616107957.9268,
+    "atime": "2019-02-08T08:55:07.955Z",
+    "mtime": "2019-02-08T08:55:07.958Z",
+    "ctime": "2019-02-08T08:55:07.958Z",
+    "birthtime": "2019-02-08T08:55:07.958Z"
+  },
+  {
+    "id": "eddf5a86-e422-5513-aace-a59d556fab11",
+    "children": [
+      "07adb971-0e2b-52a2-9851-73a0c0c2b841"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "288bf0943ae797b95a21705b79a45c26",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/lYoYWVs9x_.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/lYoYWVs9x_.jpg",
+    "relativePath": "images/lYoYWVs9x_.jpg",
+    "extension": "jpg",
+    "size": 76512,
+    "prettySize": "76.5 kB",
+    "modifiedTime": "2019-02-08T08:55:07.958Z",
+    "accessTime": "2019-02-08T08:55:07.958Z",
+    "changeTime": "2019-02-08T08:55:07.958Z",
+    "birthTime": "2019-02-08T08:55:07.958Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "lYoYWVs9x_.jpg",
+    "ext": ".jpg",
+    "name": "lYoYWVs9x_",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453913,
+    "blocks": 152,
+    "atimeMs": 1549616107957.9268,
+    "mtimeMs": 1549616107957.9268,
+    "ctimeMs": 1549616107957.9268,
+    "birthtimeMs": 1549616107957.9268,
+    "atime": "2019-02-08T08:55:07.958Z",
+    "mtime": "2019-02-08T08:55:07.958Z",
+    "ctime": "2019-02-08T08:55:07.958Z",
+    "birthtime": "2019-02-08T08:55:07.958Z"
+  },
+  {
+    "id": "b1b28a49-b910-5669-ad19-d2917aa1bfdf",
+    "children": [
+      "d53df682-65cb-509b-b179-88d7b95a97e2"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "82de37baa6823ff4a3ac419158d02ab3",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/lutoOTs902.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/lutoOTs902.jpg",
+    "relativePath": "images/lutoOTs902.jpg",
+    "extension": "jpg",
+    "size": 123968,
+    "prettySize": "124 kB",
+    "modifiedTime": "2019-02-08T08:55:07.958Z",
+    "accessTime": "2019-02-08T08:55:07.958Z",
+    "changeTime": "2019-02-08T08:55:07.958Z",
+    "birthTime": "2019-02-08T08:55:07.958Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "lutoOTs902.jpg",
+    "ext": ".jpg",
+    "name": "lutoOTs902",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453914,
+    "blocks": 248,
+    "atimeMs": 1549616107957.9268,
+    "mtimeMs": 1549616107957.9268,
+    "ctimeMs": 1549616107957.9268,
+    "birthtimeMs": 1549616107957.9268,
+    "atime": "2019-02-08T08:55:07.958Z",
+    "mtime": "2019-02-08T08:55:07.958Z",
+    "ctime": "2019-02-08T08:55:07.958Z",
+    "birthtime": "2019-02-08T08:55:07.958Z"
+  },
+  {
+    "id": "4f84a220-540e-5fdb-91c0-5f680c657eea",
+    "children": [
+      "4a42eab4-43b3-5d69-8a5b-37d744d78ead"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "4f455e646bcb5a9b3b2160f5997611e7",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/lxaO_8s993.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/lxaO_8s993.jpg",
+    "relativePath": "images/lxaO_8s993.jpg",
+    "extension": "jpg",
+    "size": 109951,
+    "prettySize": "110 kB",
+    "modifiedTime": "2019-02-08T08:55:07.958Z",
+    "accessTime": "2019-02-08T08:55:07.958Z",
+    "changeTime": "2019-02-08T08:55:07.958Z",
+    "birthTime": "2019-02-08T08:55:07.958Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "lxaO_8s993.jpg",
+    "ext": ".jpg",
+    "name": "lxaO_8s993",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453915,
+    "blocks": 216,
+    "atimeMs": 1549616107957.9268,
+    "mtimeMs": 1549616107957.9268,
+    "ctimeMs": 1549616107957.9268,
+    "birthtimeMs": 1549616107957.9268,
+    "atime": "2019-02-08T08:55:07.958Z",
+    "mtime": "2019-02-08T08:55:07.958Z",
+    "ctime": "2019-02-08T08:55:07.958Z",
+    "birthtime": "2019-02-08T08:55:07.958Z"
+  },
+  {
+    "id": "c3e4eeee-a771-5915-a1ea-5f8aa5496e2b",
+    "children": [
+      "8bb85c36-4986-5dca-a1ef-935fc216b78a"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "695a76d7cd1ff8a8fbe78ea9482bc4e7",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/mlxMw3M94j.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/mlxMw3M94j.jpg",
+    "relativePath": "images/mlxMw3M94j.jpg",
+    "extension": "jpg",
+    "size": 117540,
+    "prettySize": "118 kB",
+    "modifiedTime": "2019-02-08T08:55:07.958Z",
+    "accessTime": "2019-02-08T08:55:07.958Z",
+    "changeTime": "2019-02-08T08:55:07.958Z",
+    "birthTime": "2019-02-08T08:55:07.958Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "mlxMw3M94j.jpg",
+    "ext": ".jpg",
+    "name": "mlxMw3M94j",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453916,
+    "blocks": 232,
+    "atimeMs": 1549616107957.9268,
+    "mtimeMs": 1549616107957.9268,
+    "ctimeMs": 1549616107957.9268,
+    "birthtimeMs": 1549616107957.9268,
+    "atime": "2019-02-08T08:55:07.958Z",
+    "mtime": "2019-02-08T08:55:07.958Z",
+    "ctime": "2019-02-08T08:55:07.958Z",
+    "birthtime": "2019-02-08T08:55:07.958Z"
+  },
+  {
+    "id": "d4f6feaa-9001-5ca8-8f11-d5d01cd9d254",
+    "children": [
+      "9a6c566e-9b00-5135-a512-a7375437d91b"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "654eaeabf3232517b925392ff64244dd",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/moglcxM97P.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/moglcxM97P.jpg",
+    "relativePath": "images/moglcxM97P.jpg",
+    "extension": "jpg",
+    "size": 84281,
+    "prettySize": "84.3 kB",
+    "modifiedTime": "2019-02-08T08:55:07.958Z",
+    "accessTime": "2019-02-08T08:55:07.958Z",
+    "changeTime": "2019-02-08T08:55:07.958Z",
+    "birthTime": "2019-02-08T08:55:07.958Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "moglcxM97P.jpg",
+    "ext": ".jpg",
+    "name": "moglcxM97P",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453917,
+    "blocks": 168,
+    "atimeMs": 1549616107957.9268,
+    "mtimeMs": 1549616107957.9268,
+    "ctimeMs": 1549616107957.9268,
+    "birthtimeMs": 1549616107957.9268,
+    "atime": "2019-02-08T08:55:07.958Z",
+    "mtime": "2019-02-08T08:55:07.958Z",
+    "ctime": "2019-02-08T08:55:07.958Z",
+    "birthtime": "2019-02-08T08:55:07.958Z"
+  },
+  {
+    "id": "9b6b9a69-0c6e-5abe-986b-7b11cd1764e6",
+    "children": [
+      "5868eb13-70c3-5331-984c-7ceaa5c309ca"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "d110db904291dc24c26b5e2696e59338",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/nZaKQfM99Z.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/nZaKQfM99Z.jpg",
+    "relativePath": "images/nZaKQfM99Z.jpg",
+    "extension": "jpg",
+    "size": 101114,
+    "prettySize": "101 kB",
+    "modifiedTime": "2019-02-08T08:55:07.958Z",
+    "accessTime": "2019-02-08T08:55:07.958Z",
+    "changeTime": "2019-02-08T08:55:07.958Z",
+    "birthTime": "2019-02-08T08:55:07.958Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "nZaKQfM99Z.jpg",
+    "ext": ".jpg",
+    "name": "nZaKQfM99Z",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453919,
+    "blocks": 200,
+    "atimeMs": 1549616107957.9268,
+    "mtimeMs": 1549616107957.9268,
+    "ctimeMs": 1549616107957.9268,
+    "birthtimeMs": 1549616107957.9268,
+    "atime": "2019-02-08T08:55:07.958Z",
+    "mtime": "2019-02-08T08:55:07.958Z",
+    "ctime": "2019-02-08T08:55:07.958Z",
+    "birthtime": "2019-02-08T08:55:07.958Z"
+  },
+  {
+    "id": "fe6abbeb-14b1-52c4-916c-6498b0694452",
+    "children": [
+      "02673219-a18f-5c15-a63c-550dd5bf110d"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "fd95ba3ac4e3bbc7331025248432a239",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/oFM91Fs9z6.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/oFM91Fs9z6.jpg",
+    "relativePath": "images/oFM91Fs9z6.jpg",
+    "extension": "jpg",
+    "size": 78127,
+    "prettySize": "78.1 kB",
+    "modifiedTime": "2019-02-08T08:55:07.958Z",
+    "accessTime": "2019-02-08T08:55:07.958Z",
+    "changeTime": "2019-02-08T08:55:07.958Z",
+    "birthTime": "2019-02-08T08:55:07.958Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "oFM91Fs9z6.jpg",
+    "ext": ".jpg",
+    "name": "oFM91Fs9z6",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453920,
+    "blocks": 160,
+    "atimeMs": 1549616107957.9268,
+    "mtimeMs": 1549616107957.9268,
+    "ctimeMs": 1549616107957.9268,
+    "birthtimeMs": 1549616107957.9268,
+    "atime": "2019-02-08T08:55:07.958Z",
+    "mtime": "2019-02-08T08:55:07.958Z",
+    "ctime": "2019-02-08T08:55:07.958Z",
+    "birthtime": "2019-02-08T08:55:07.958Z"
+  },
+  {
+    "id": "7051dfff-7b4a-5d7f-947f-c85e2034b05e",
+    "children": [
+      "11b30767-49c7-594f-8d4d-760356e21321"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "a513d53f3a11403596639be3a1d3bedd",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/oJebJyM9z8.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/oJebJyM9z8.jpg",
+    "relativePath": "images/oJebJyM9z8.jpg",
+    "extension": "jpg",
+    "size": 78329,
+    "prettySize": "78.3 kB",
+    "modifiedTime": "2019-02-08T08:55:07.958Z",
+    "accessTime": "2019-02-08T08:55:07.958Z",
+    "changeTime": "2019-02-08T08:55:07.958Z",
+    "birthTime": "2019-02-08T08:55:07.958Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "oJebJyM9z8.jpg",
+    "ext": ".jpg",
+    "name": "oJebJyM9z8",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453921,
+    "blocks": 160,
+    "atimeMs": 1549616107957.9268,
+    "mtimeMs": 1549616107957.9268,
+    "ctimeMs": 1549616107957.9268,
+    "birthtimeMs": 1549616107957.9268,
+    "atime": "2019-02-08T08:55:07.958Z",
+    "mtime": "2019-02-08T08:55:07.958Z",
+    "ctime": "2019-02-08T08:55:07.958Z",
+    "birthtime": "2019-02-08T08:55:07.958Z"
+  },
+  {
+    "id": "de0199a4-a8f3-5fee-a01e-3637d7424778",
+    "children": [
+      "1da41841-fb71-52b0-9bac-b9abefcfe47a"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "32fcef3d89b53f53148ffb0a61feb53a",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/oqbez7s9_x.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/oqbez7s9_x.jpg",
+    "relativePath": "images/oqbez7s9_x.jpg",
+    "extension": "jpg",
+    "size": 78913,
+    "prettySize": "78.9 kB",
+    "modifiedTime": "2019-02-08T08:55:07.958Z",
+    "accessTime": "2019-02-08T08:55:07.958Z",
+    "changeTime": "2019-02-08T08:55:07.958Z",
+    "birthTime": "2019-02-08T08:55:07.958Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "oqbez7s9_x.jpg",
+    "ext": ".jpg",
+    "name": "oqbez7s9_x",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453922,
+    "blocks": 160,
+    "atimeMs": 1549616107957.9268,
+    "mtimeMs": 1549616107957.9268,
+    "ctimeMs": 1549616107957.9268,
+    "birthtimeMs": 1549616107957.9268,
+    "atime": "2019-02-08T08:55:07.958Z",
+    "mtime": "2019-02-08T08:55:07.958Z",
+    "ctime": "2019-02-08T08:55:07.958Z",
+    "birthtime": "2019-02-08T08:55:07.958Z"
+  },
+  {
+    "id": "4957ed17-f7ed-5ef1-8ea1-0ce081bb357c",
+    "children": [
+      "b7587480-754e-5318-bfd4-5b73acc41548"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "d3a2dca69116b045287f258388a60718",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/oqvZV5s9z2.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/oqvZV5s9z2.jpg",
+    "relativePath": "images/oqvZV5s9z2.jpg",
+    "extension": "jpg",
+    "size": 116141,
+    "prettySize": "116 kB",
+    "modifiedTime": "2019-02-08T08:55:07.961Z",
+    "accessTime": "2019-02-08T08:55:07.961Z",
+    "changeTime": "2019-02-08T08:55:07.961Z",
+    "birthTime": "2019-02-08T08:55:07.961Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "oqvZV5s9z2.jpg",
+    "ext": ".jpg",
+    "name": "oqvZV5s9z2",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453925,
+    "blocks": 232,
+    "atimeMs": 1549616107961.26,
+    "mtimeMs": 1549616107961.26,
+    "ctimeMs": 1549616107961.26,
+    "birthtimeMs": 1549616107961.26,
+    "atime": "2019-02-08T08:55:07.961Z",
+    "mtime": "2019-02-08T08:55:07.961Z",
+    "ctime": "2019-02-08T08:55:07.961Z",
+    "birthtime": "2019-02-08T08:55:07.961Z"
+  },
+  {
+    "id": "5dfa0a18-5fd7-5bc8-b763-61e8a0aa110d",
+    "children": [
+      "2d3de8d8-437a-5ca5-9ba2-181af73e42d7"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "c229673b43857230fa2c7b3969eaab42",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/oqeqN7s912.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/oqeqN7s912.jpg",
+    "relativePath": "images/oqeqN7s912.jpg",
+    "extension": "jpg",
+    "size": 98068,
+    "prettySize": "98.1 kB",
+    "modifiedTime": "2019-02-08T08:55:07.961Z",
+    "accessTime": "2019-02-08T08:55:07.961Z",
+    "changeTime": "2019-02-08T08:55:07.961Z",
+    "birthTime": "2019-02-08T08:55:07.961Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "oqeqN7s912.jpg",
+    "ext": ".jpg",
+    "name": "oqeqN7s912",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453924,
+    "blocks": 192,
+    "atimeMs": 1549616107961.26,
+    "mtimeMs": 1549616107961.26,
+    "ctimeMs": 1549616107961.26,
+    "birthtimeMs": 1549616107961.26,
+    "atime": "2019-02-08T08:55:07.961Z",
+    "mtime": "2019-02-08T08:55:07.961Z",
+    "ctime": "2019-02-08T08:55:07.961Z",
+    "birthtime": "2019-02-08T08:55:07.961Z"
+  },
+  {
+    "id": "41f4e7be-c697-5c50-be60-9ca3828603c7",
+    "children": [
+      "dea320e4-3a3c-520c-ba44-6336e369315f"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "92b29ea9b9b5d01a2e00ae8a5e8f73aa",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/orMhzhs97P.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/orMhzhs97P.jpg",
+    "relativePath": "images/orMhzhs97P.jpg",
+    "extension": "jpg",
+    "size": 113368,
+    "prettySize": "113 kB",
+    "modifiedTime": "2019-02-08T08:55:07.961Z",
+    "accessTime": "2019-02-08T08:55:07.961Z",
+    "changeTime": "2019-02-08T08:55:07.961Z",
+    "birthTime": "2019-02-08T08:55:07.961Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "orMhzhs97P.jpg",
+    "ext": ".jpg",
+    "name": "orMhzhs97P",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453926,
+    "blocks": 224,
+    "atimeMs": 1549616107961.26,
+    "mtimeMs": 1549616107961.26,
+    "ctimeMs": 1549616107961.26,
+    "birthtimeMs": 1549616107961.26,
+    "atime": "2019-02-08T08:55:07.961Z",
+    "mtime": "2019-02-08T08:55:07.961Z",
+    "ctime": "2019-02-08T08:55:07.961Z",
+    "birthtime": "2019-02-08T08:55:07.961Z"
+  },
+  {
+    "id": "0229ab2d-e417-59b4-b2a5-22a7714092df",
+    "children": [
+      "2d54e667-4d48-5698-8510-2a5e463e939a"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "ee0bb483ba82477ad08c43d9a463dd48",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/oqbxsdM9wR.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/oqbxsdM9wR.jpg",
+    "relativePath": "images/oqbxsdM9wR.jpg",
+    "extension": "jpg",
+    "size": 86259,
+    "prettySize": "86.3 kB",
+    "modifiedTime": "2019-02-08T08:55:07.961Z",
+    "accessTime": "2019-02-08T08:55:07.961Z",
+    "changeTime": "2019-02-08T08:55:07.961Z",
+    "birthTime": "2019-02-08T08:55:07.961Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "oqbxsdM9wR.jpg",
+    "ext": ".jpg",
+    "name": "oqbxsdM9wR",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453923,
+    "blocks": 176,
+    "atimeMs": 1549616107961.26,
+    "mtimeMs": 1549616107961.26,
+    "ctimeMs": 1549616107961.26,
+    "birthtimeMs": 1549616107961.26,
+    "atime": "2019-02-08T08:55:07.961Z",
+    "mtime": "2019-02-08T08:55:07.961Z",
+    "ctime": "2019-02-08T08:55:07.961Z",
+    "birthtime": "2019-02-08T08:55:07.961Z"
+  },
+  {
+    "id": "f87566b3-c14c-5cac-b9db-190fdf797a8b",
+    "children": [
+      "326f8570-2d93-5ce1-9896-111bc85486af"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "951de4497ed7365c199cf73d9a18b0c4",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/orPfaus9xF.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/orPfaus9xF.jpg",
+    "relativePath": "images/orPfaus9xF.jpg",
+    "extension": "jpg",
+    "size": 93560,
+    "prettySize": "93.6 kB",
+    "modifiedTime": "2019-02-08T08:55:07.961Z",
+    "accessTime": "2019-02-08T08:55:07.961Z",
+    "changeTime": "2019-02-08T08:55:07.961Z",
+    "birthTime": "2019-02-08T08:55:07.961Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "orPfaus9xF.jpg",
+    "ext": ".jpg",
+    "name": "orPfaus9xF",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453927,
+    "blocks": 184,
+    "atimeMs": 1549616107961.26,
+    "mtimeMs": 1549616107961.26,
+    "ctimeMs": 1549616107961.26,
+    "birthtimeMs": 1549616107961.26,
+    "atime": "2019-02-08T08:55:07.961Z",
+    "mtime": "2019-02-08T08:55:07.961Z",
+    "ctime": "2019-02-08T08:55:07.961Z",
+    "birthtime": "2019-02-08T08:55:07.961Z"
+  },
+  {
+    "id": "7908fb4d-98d9-5e13-b9f0-84b52012a546",
+    "children": [
+      "9815f23e-7bf8-5aba-b9c2-ee9ee31d0a6a"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "f7b42abd98737507194603523c20a00b",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/orRtxus906.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/orRtxus906.jpg",
+    "relativePath": "images/orRtxus906.jpg",
+    "extension": "jpg",
+    "size": 130938,
+    "prettySize": "131 kB",
+    "modifiedTime": "2019-02-08T08:55:07.961Z",
+    "accessTime": "2019-02-08T08:55:07.961Z",
+    "changeTime": "2019-02-08T08:55:07.961Z",
+    "birthTime": "2019-02-08T08:55:07.961Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "orRtxus906.jpg",
+    "ext": ".jpg",
+    "name": "orRtxus906",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453928,
+    "blocks": 256,
+    "atimeMs": 1549616107961.26,
+    "mtimeMs": 1549616107961.26,
+    "ctimeMs": 1549616107961.26,
+    "birthtimeMs": 1549616107961.26,
+    "atime": "2019-02-08T08:55:07.961Z",
+    "mtime": "2019-02-08T08:55:07.961Z",
+    "ctime": "2019-02-08T08:55:07.961Z",
+    "birthtime": "2019-02-08T08:55:07.961Z"
+  },
+  {
+    "id": "14fff379-a53f-5902-9d91-d3973b5fa952",
+    "children": [
+      "e0111747-3565-5d71-9c95-4339fb01006e"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "a005f461571fcc05eb8a9972e6b9c3fb",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/ov6BJ8M93g.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/ov6BJ8M93g.jpg",
+    "relativePath": "images/ov6BJ8M93g.jpg",
+    "extension": "jpg",
+    "size": 109921,
+    "prettySize": "110 kB",
+    "modifiedTime": "2019-02-08T08:55:07.961Z",
+    "accessTime": "2019-02-08T08:55:07.961Z",
+    "changeTime": "2019-02-08T08:55:07.961Z",
+    "birthTime": "2019-02-08T08:55:07.961Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "ov6BJ8M93g.jpg",
+    "ext": ".jpg",
+    "name": "ov6BJ8M93g",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453930,
+    "blocks": 216,
+    "atimeMs": 1549616107961.26,
+    "mtimeMs": 1549616107961.26,
+    "ctimeMs": 1549616107961.26,
+    "birthtimeMs": 1549616107961.26,
+    "atime": "2019-02-08T08:55:07.961Z",
+    "mtime": "2019-02-08T08:55:07.961Z",
+    "ctime": "2019-02-08T08:55:07.961Z",
+    "birthtime": "2019-02-08T08:55:07.961Z"
+  },
+  {
+    "id": "fb621d85-5a2c-59c1-afd2-243507d447b5",
+    "children": [
+      "bc663945-deb3-5070-9a5b-367df4a50400"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "36a057b15efdf7e657949dcaf2b5a5ca",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/tB0dMts9x9.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/tB0dMts9x9.jpg",
+    "relativePath": "images/tB0dMts9x9.jpg",
+    "extension": "jpg",
+    "size": 85281,
+    "prettySize": "85.3 kB",
+    "modifiedTime": "2019-02-08T08:55:07.965Z",
+    "accessTime": "2019-02-08T08:55:07.965Z",
+    "changeTime": "2019-02-08T08:55:07.965Z",
+    "birthTime": "2019-02-08T08:55:07.965Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "tB0dMts9x9.jpg",
+    "ext": ".jpg",
+    "name": "tB0dMts9x9",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453934,
+    "blocks": 168,
+    "atimeMs": 1549616107964.5935,
+    "mtimeMs": 1549616107964.5935,
+    "ctimeMs": 1549616107964.5935,
+    "birthtimeMs": 1549616107964.5935,
+    "atime": "2019-02-08T08:55:07.965Z",
+    "mtime": "2019-02-08T08:55:07.965Z",
+    "ctime": "2019-02-08T08:55:07.965Z",
+    "birthtime": "2019-02-08T08:55:07.965Z"
+  },
+  {
+    "id": "fd3c1dc8-5ed1-5194-891a-d6af0c3952c9",
+    "children": [
+      "4d53a1c1-4ade-5627-9297-1c8cb7642f0a"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "565cb37da59eeddeb6ddf0667e1f6aa7",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/tB0kS4M9yO.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/tB0kS4M9yO.jpg",
+    "relativePath": "images/tB0kS4M9yO.jpg",
+    "extension": "jpg",
+    "size": 119496,
+    "prettySize": "119 kB",
+    "modifiedTime": "2019-02-08T08:55:07.965Z",
+    "accessTime": "2019-02-08T08:55:07.965Z",
+    "changeTime": "2019-02-08T08:55:07.965Z",
+    "birthTime": "2019-02-08T08:55:07.965Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "tB0kS4M9yO.jpg",
+    "ext": ".jpg",
+    "name": "tB0kS4M9yO",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453935,
+    "blocks": 240,
+    "atimeMs": 1549616107964.5935,
+    "mtimeMs": 1549616107964.5935,
+    "ctimeMs": 1549616107964.5935,
+    "birthtimeMs": 1549616107964.5935,
+    "atime": "2019-02-08T08:55:07.965Z",
+    "mtime": "2019-02-08T08:55:07.965Z",
+    "ctime": "2019-02-08T08:55:07.965Z",
+    "birthtime": "2019-02-08T08:55:07.965Z"
+  },
+  {
+    "id": "03b29c0e-71da-5ebf-8a51-caa50706b0de",
+    "children": [
+      "02606998-d4ff-5676-a381-d9a587c42ffb"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "e473c8292e19bb448af74410a8f45edc",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/3UlOVgM9yz.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/3UlOVgM9yz.jpg",
+    "relativePath": "images/3UlOVgM9yz.jpg",
+    "extension": "jpg",
+    "size": 145800,
+    "prettySize": "146 kB",
+    "modifiedTime": "2019-02-08T08:55:07.921Z",
+    "accessTime": "2019-02-08T08:55:07.921Z",
+    "changeTime": "2019-02-08T08:55:07.921Z",
+    "birthTime": "2019-02-08T08:55:07.921Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "3UlOVgM9yz.jpg",
+    "ext": ".jpg",
+    "name": "3UlOVgM9yz",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453838,
+    "blocks": 288,
+    "atimeMs": 1549616107921.2603,
+    "mtimeMs": 1549616107921.2603,
+    "ctimeMs": 1549616107921.2603,
+    "birthtimeMs": 1549616107921.2603,
+    "atime": "2019-02-08T08:55:07.921Z",
+    "mtime": "2019-02-08T08:55:07.921Z",
+    "ctime": "2019-02-08T08:55:07.921Z",
+    "birthtime": "2019-02-08T08:55:07.921Z"
+  },
+  {
+    "id": "764b3942-c154-52a1-9a0a-cc422572a352",
+    "children": [
+      "6503cf4b-80bb-54f7-b7af-a759055c558d"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "a7b8c880534ac5c210f0da4c8b852700",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/8rNAoWs9wR.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/8rNAoWs9wR.jpg",
+    "relativePath": "images/8rNAoWs9wR.jpg",
+    "extension": "jpg",
+    "size": 162215,
+    "prettySize": "162 kB",
+    "modifiedTime": "2019-02-08T08:55:07.925Z",
+    "accessTime": "2019-02-08T08:55:07.925Z",
+    "changeTime": "2019-02-08T08:55:07.925Z",
+    "birthTime": "2019-02-08T08:55:07.925Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "8rNAoWs9wR.jpg",
+    "ext": ".jpg",
+    "name": "8rNAoWs9wR",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453846,
+    "blocks": 320,
+    "atimeMs": 1549616107924.5935,
+    "mtimeMs": 1549616107924.5935,
+    "ctimeMs": 1549616107924.5935,
+    "birthtimeMs": 1549616107924.5935,
+    "atime": "2019-02-08T08:55:07.925Z",
+    "mtime": "2019-02-08T08:55:07.925Z",
+    "ctime": "2019-02-08T08:55:07.925Z",
+    "birthtime": "2019-02-08T08:55:07.925Z"
+  },
+  {
+    "id": "f3f69364-b797-5e77-a7b7-a7cca6124124",
+    "children": [
+      "8347bef3-7615-5041-889e-9d1d0e21df7b"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "1949cbb78a54ccd7b7f6be80ce5bf22e",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/BLhhsTZlGwd.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/BLhhsTZlGwd.jpg",
+    "relativePath": "images/BLhhsTZlGwd.jpg",
+    "extension": "jpg",
+    "size": 150655,
+    "prettySize": "151 kB",
+    "modifiedTime": "2019-02-08T08:55:07.931Z",
+    "accessTime": "2019-02-08T08:55:07.931Z",
+    "changeTime": "2019-02-08T08:55:07.931Z",
+    "birthTime": "2019-02-08T08:55:07.931Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "BLhhsTZlGwd.jpg",
+    "ext": ".jpg",
+    "name": "BLhhsTZlGwd",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453853,
+    "blocks": 296,
+    "atimeMs": 1549616107931.2603,
+    "mtimeMs": 1549616107931.2603,
+    "ctimeMs": 1549616107931.2603,
+    "birthtimeMs": 1549616107931.2603,
+    "atime": "2019-02-08T08:55:07.931Z",
+    "mtime": "2019-02-08T08:55:07.931Z",
+    "ctime": "2019-02-08T08:55:07.931Z",
+    "birthtime": "2019-02-08T08:55:07.931Z"
+  },
+  {
+    "id": "d72ea313-fe13-56fd-b3e0-3b30f986abe3",
+    "children": [
+      "d8355763-6b57-5141-8af4-4fef9518f87f"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "6b4a90bb8a9df452816b73a921a077c5",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/BSEdRj_B8HP.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/BSEdRj_B8HP.jpg",
+    "relativePath": "images/BSEdRj_B8HP.jpg",
+    "extension": "jpg",
+    "size": 165688,
+    "prettySize": "166 kB",
+    "modifiedTime": "2019-02-08T08:55:07.931Z",
+    "accessTime": "2019-02-08T08:55:07.931Z",
+    "changeTime": "2019-02-08T08:55:07.931Z",
+    "birthTime": "2019-02-08T08:55:07.931Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "BSEdRj_B8HP.jpg",
+    "ext": ".jpg",
+    "name": "BSEdRj_B8HP",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453854,
+    "blocks": 328,
+    "atimeMs": 1549616107931.2603,
+    "mtimeMs": 1549616107931.2603,
+    "ctimeMs": 1549616107931.2603,
+    "birthtimeMs": 1549616107931.2603,
+    "atime": "2019-02-08T08:55:07.931Z",
+    "mtime": "2019-02-08T08:55:07.931Z",
+    "ctime": "2019-02-08T08:55:07.931Z",
+    "birthtime": "2019-02-08T08:55:07.931Z"
+  },
+  {
+    "id": "14085584-d2d6-505c-b15e-18366c538350",
+    "children": [
+      "4ea50907-055a-5080-97eb-430182a400f6"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "753e3daa82ea260cfec5a30b16cd27ef",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/BdIpEzalAJx.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/BdIpEzalAJx.jpg",
+    "relativePath": "images/BdIpEzalAJx.jpg",
+    "extension": "jpg",
+    "size": 142370,
+    "prettySize": "142 kB",
+    "modifiedTime": "2019-02-08T08:55:07.938Z",
+    "accessTime": "2019-02-08T08:55:07.938Z",
+    "changeTime": "2019-02-08T08:55:07.938Z",
+    "birthTime": "2019-02-08T08:55:07.938Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "BdIpEzalAJx.jpg",
+    "ext": ".jpg",
+    "name": "BdIpEzalAJx",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453862,
+    "blocks": 280,
+    "atimeMs": 1549616107937.9268,
+    "mtimeMs": 1549616107937.9268,
+    "ctimeMs": 1549616107937.9268,
+    "birthtimeMs": 1549616107937.9268,
+    "atime": "2019-02-08T08:55:07.938Z",
+    "mtime": "2019-02-08T08:55:07.938Z",
+    "ctime": "2019-02-08T08:55:07.938Z",
+    "birthtime": "2019-02-08T08:55:07.938Z"
+  },
+  {
+    "id": "933a84a9-75b4-5d1b-ab13-7fa6dc512635",
+    "children": [
+      "5e40ac10-3140-596a-a2f1-6f24cae9a73b"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "b0e8b99b4f33ff57a12ff7d3c99dd534",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/BdiU-TTFP4h.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/BdiU-TTFP4h.jpg",
+    "relativePath": "images/BdiU-TTFP4h.jpg",
+    "extension": "jpg",
+    "size": 163326,
+    "prettySize": "163 kB",
+    "modifiedTime": "2019-02-08T08:55:07.938Z",
+    "accessTime": "2019-02-08T08:55:07.938Z",
+    "changeTime": "2019-02-08T08:55:07.938Z",
+    "birthTime": "2019-02-08T08:55:07.938Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "BdiU-TTFP4h.jpg",
+    "ext": ".jpg",
+    "name": "BdiU-TTFP4h",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453863,
+    "blocks": 320,
+    "atimeMs": 1549616107937.9268,
+    "mtimeMs": 1549616107937.9268,
+    "ctimeMs": 1549616107937.9268,
+    "birthtimeMs": 1549616107937.9268,
+    "atime": "2019-02-08T08:55:07.938Z",
+    "mtime": "2019-02-08T08:55:07.938Z",
+    "ctime": "2019-02-08T08:55:07.938Z",
+    "birthtime": "2019-02-08T08:55:07.938Z"
+  },
+  {
+    "id": "4902ea03-096b-5af7-a274-7814546687ef",
+    "children": [
+      "349d04c8-368f-5b97-b838-2d4d988072e4"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "d00220e3e4b792741841b85af042983d",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/V7AMWds949.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/V7AMWds949.jpg",
+    "relativePath": "images/V7AMWds949.jpg",
+    "extension": "jpg",
+    "size": 142755,
+    "prettySize": "143 kB",
+    "modifiedTime": "2019-02-08T08:55:07.938Z",
+    "accessTime": "2019-02-08T08:55:07.938Z",
+    "changeTime": "2019-02-08T08:55:07.938Z",
+    "birthTime": "2019-02-08T08:55:07.938Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "V7AMWds949.jpg",
+    "ext": ".jpg",
+    "name": "V7AMWds949",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453867,
+    "blocks": 280,
+    "atimeMs": 1549616107937.9268,
+    "mtimeMs": 1549616107937.9268,
+    "ctimeMs": 1549616107937.9268,
+    "birthtimeMs": 1549616107937.9268,
+    "atime": "2019-02-08T08:55:07.938Z",
+    "mtime": "2019-02-08T08:55:07.938Z",
+    "ctime": "2019-02-08T08:55:07.938Z",
+    "birthtime": "2019-02-08T08:55:07.938Z"
+  },
+  {
+    "id": "76885354-e4ab-5649-b98f-8e5a75c0b7c6",
+    "children": [
+      "34152597-9a17-5250-8fab-074a17f83f99"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "17fbab6f315a13755c50133b2120d84e",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/Vmws0_s9yL.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/Vmws0_s9yL.jpg",
+    "relativePath": "images/Vmws0_s9yL.jpg",
+    "extension": "jpg",
+    "size": 153102,
+    "prettySize": "153 kB",
+    "modifiedTime": "2019-02-08T08:55:07.941Z",
+    "accessTime": "2019-02-08T08:55:07.938Z",
+    "changeTime": "2019-02-08T08:55:07.941Z",
+    "birthTime": "2019-02-08T08:55:07.941Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "Vmws0_s9yL.jpg",
+    "ext": ".jpg",
+    "name": "Vmws0_s9yL",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453869,
+    "blocks": 304,
+    "atimeMs": 1549616107937.9268,
+    "mtimeMs": 1549616107941.2603,
+    "ctimeMs": 1549616107941.2603,
+    "birthtimeMs": 1549616107941.2603,
+    "atime": "2019-02-08T08:55:07.938Z",
+    "mtime": "2019-02-08T08:55:07.941Z",
+    "ctime": "2019-02-08T08:55:07.941Z",
+    "birthtime": "2019-02-08T08:55:07.941Z"
+  },
+  {
+    "id": "1221d4f2-c8f5-5268-b0e7-fcd0aa12d598",
+    "children": [
+      "6582f45a-6f10-5656-9bcd-205b18f3578a"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "312d4c34b4bba4e8143c6f8bf9bfbea6",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/YBJ_8xM91G.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/YBJ_8xM91G.jpg",
+    "relativePath": "images/YBJ_8xM91G.jpg",
+    "extension": "jpg",
+    "size": 133831,
+    "prettySize": "134 kB",
+    "modifiedTime": "2019-02-08T08:55:07.941Z",
+    "accessTime": "2019-02-08T08:55:07.941Z",
+    "changeTime": "2019-02-08T08:55:07.941Z",
+    "birthTime": "2019-02-08T08:55:07.941Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "YBJ_8xM91G.jpg",
+    "ext": ".jpg",
+    "name": "YBJ_8xM91G",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453873,
+    "blocks": 264,
+    "atimeMs": 1549616107941.2603,
+    "mtimeMs": 1549616107941.2603,
+    "ctimeMs": 1549616107941.2603,
+    "birthtimeMs": 1549616107941.2603,
+    "atime": "2019-02-08T08:55:07.941Z",
+    "mtime": "2019-02-08T08:55:07.941Z",
+    "ctime": "2019-02-08T08:55:07.941Z",
+    "birthtime": "2019-02-08T08:55:07.941Z"
+  },
+  {
+    "id": "fe7f4316-fb22-5cc0-a414-48f12f2a41da",
+    "children": [
+      "e960cdfc-bc59-5b7d-aeb3-fbeb79d0cd8c"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "b5a6a1676f667a0444c7e9d4ba6472f3",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/YA47taM9xR.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/YA47taM9xR.jpg",
+    "relativePath": "images/YA47taM9xR.jpg",
+    "extension": "jpg",
+    "size": 160993,
+    "prettySize": "161 kB",
+    "modifiedTime": "2019-02-08T08:55:07.941Z",
+    "accessTime": "2019-02-08T08:55:07.941Z",
+    "changeTime": "2019-02-08T08:55:07.941Z",
+    "birthTime": "2019-02-08T08:55:07.941Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "YA47taM9xR.jpg",
+    "ext": ".jpg",
+    "name": "YA47taM9xR",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453872,
+    "blocks": 320,
+    "atimeMs": 1549616107941.2603,
+    "mtimeMs": 1549616107941.2603,
+    "ctimeMs": 1549616107941.2603,
+    "birthtimeMs": 1549616107941.2603,
+    "atime": "2019-02-08T08:55:07.941Z",
+    "mtime": "2019-02-08T08:55:07.941Z",
+    "ctime": "2019-02-08T08:55:07.941Z",
+    "birthtime": "2019-02-08T08:55:07.941Z"
+  },
+  {
+    "id": "4b976bd1-00ad-5bea-81d5-aa845f0081dc",
+    "children": [
+      "68b4838a-e6c7-5d36-a661-301b45843aeb"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "5918a7fcb8e8c9d1cfb7ed39e9391b32",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/YBKLxfs91e.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/YBKLxfs91e.jpg",
+    "relativePath": "images/YBKLxfs91e.jpg",
+    "extension": "jpg",
+    "size": 148404,
+    "prettySize": "148 kB",
+    "modifiedTime": "2019-02-08T08:55:07.941Z",
+    "accessTime": "2019-02-08T08:55:07.941Z",
+    "changeTime": "2019-02-08T08:55:07.941Z",
+    "birthTime": "2019-02-08T08:55:07.941Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "YBKLxfs91e.jpg",
+    "ext": ".jpg",
+    "name": "YBKLxfs91e",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453874,
+    "blocks": 296,
+    "atimeMs": 1549616107941.2603,
+    "mtimeMs": 1549616107941.2603,
+    "ctimeMs": 1549616107941.2603,
+    "birthtimeMs": 1549616107941.2603,
+    "atime": "2019-02-08T08:55:07.941Z",
+    "mtime": "2019-02-08T08:55:07.941Z",
+    "ctime": "2019-02-08T08:55:07.941Z",
+    "birthtime": "2019-02-08T08:55:07.941Z"
+  },
+  {
+    "id": "2a8de103-3662-541b-a0b9-a384e7ec141c",
+    "children": [
+      "c92a09ee-5025-556c-a536-7cd1182a1f75"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "ac148a522d9d29989de0380c2b416b09",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/aWqdbpM99F.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/aWqdbpM99F.jpg",
+    "relativePath": "images/aWqdbpM99F.jpg",
+    "extension": "jpg",
+    "size": 132315,
+    "prettySize": "132 kB",
+    "modifiedTime": "2019-02-08T08:55:07.945Z",
+    "accessTime": "2019-02-08T08:55:07.945Z",
+    "changeTime": "2019-02-08T08:55:07.945Z",
+    "birthTime": "2019-02-08T08:55:07.945Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "aWqdbpM99F.jpg",
+    "ext": ".jpg",
+    "name": "aWqdbpM99F",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453879,
+    "blocks": 264,
+    "atimeMs": 1549616107944.5935,
+    "mtimeMs": 1549616107944.5935,
+    "ctimeMs": 1549616107944.5935,
+    "birthtimeMs": 1549616107944.5935,
+    "atime": "2019-02-08T08:55:07.945Z",
+    "mtime": "2019-02-08T08:55:07.945Z",
+    "ctime": "2019-02-08T08:55:07.945Z",
+    "birthtime": "2019-02-08T08:55:07.945Z"
+  },
+  {
+    "id": "792f605d-6d45-50cc-b1fe-3d3852795915",
+    "children": [
+      "36877a4e-6f98-5bc5-acf4-71c6c70c1f10"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "9131efb20760a4549bc102032737eeb8",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/bSOo_Gs98O.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/bSOo_Gs98O.jpg",
+    "relativePath": "images/bSOo_Gs98O.jpg",
+    "extension": "jpg",
+    "size": 133888,
+    "prettySize": "134 kB",
+    "modifiedTime": "2019-02-08T08:55:07.945Z",
+    "accessTime": "2019-02-08T08:55:07.945Z",
+    "changeTime": "2019-02-08T08:55:07.945Z",
+    "birthTime": "2019-02-08T08:55:07.945Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "bSOo_Gs98O.jpg",
+    "ext": ".jpg",
+    "name": "bSOo_Gs98O",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453880,
+    "blocks": 264,
+    "atimeMs": 1549616107944.5935,
+    "mtimeMs": 1549616107944.5935,
+    "ctimeMs": 1549616107944.5935,
+    "birthtimeMs": 1549616107944.5935,
+    "atime": "2019-02-08T08:55:07.945Z",
+    "mtime": "2019-02-08T08:55:07.945Z",
+    "ctime": "2019-02-08T08:55:07.945Z",
+    "birthtime": "2019-02-08T08:55:07.945Z"
+  },
+  {
+    "id": "cd24a64f-32cb-5167-a6fe-783a46d7ca4b",
+    "children": [
+      "c6154f11-7111-5af9-bc65-e339d6e68db9"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "2bce315ca5a1d4f5236850a7b953e99b",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/dUimPbM9-K.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/dUimPbM9-K.jpg",
+    "relativePath": "images/dUimPbM9-K.jpg",
+    "extension": "jpg",
+    "size": 134095,
+    "prettySize": "134 kB",
+    "modifiedTime": "2019-02-08T08:55:07.948Z",
+    "accessTime": "2019-02-08T08:55:07.948Z",
+    "changeTime": "2019-02-08T08:55:07.948Z",
+    "birthTime": "2019-02-08T08:55:07.948Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "dUimPbM9-K.jpg",
+    "ext": ".jpg",
+    "name": "dUimPbM9-K",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453887,
+    "blocks": 264,
+    "atimeMs": 1549616107947.9268,
+    "mtimeMs": 1549616107947.9268,
+    "ctimeMs": 1549616107947.9268,
+    "birthtimeMs": 1549616107947.9268,
+    "atime": "2019-02-08T08:55:07.948Z",
+    "mtime": "2019-02-08T08:55:07.948Z",
+    "ctime": "2019-02-08T08:55:07.948Z",
+    "birthtime": "2019-02-08T08:55:07.948Z"
+  },
+  {
+    "id": "da2bca11-40c5-5629-8ac5-d4e80b3002e7",
+    "children": [],
+    "parent": "25bfb17b-4867-52b0-b6b2-31141ffd66ea",
+    "internal": {
+      "contentDigest": "12d6834787247fa1fd603472dca4779b",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "c364338a-eb65-5925-a014-effd93849b40",
+    "children": [],
+    "parent": "b35cc487-b060-5849-a332-ae2b6214b30b",
+    "internal": {
+      "contentDigest": "113c46804bc8908ced0a7bd6c7d24f7b",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "4d9816a7-3885-5dd4-bbe6-85c655a48316",
+    "children": [],
+    "parent": "63209335-2764-5ec8-b050-ab0acf938a05",
+    "internal": {
+      "contentDigest": "fce6b57d4f233faed53317605e60455e",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "442f41c4-bbf2-5124-8602-f242880c593f",
+    "children": [],
+    "parent": "91d496c3-3368-5810-811f-7523e45582dd",
+    "internal": {
+      "contentDigest": "a9f1eea7376c2d4c9f366f8750fc9623",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "adb8e4b2-34ed-5f31-b6d7-60b144c100d3",
+    "children": [],
+    "parent": "605ea709-2f6b-5c32-84dd-c01d1d764a55",
+    "internal": {
+      "contentDigest": "a7680535f18d909cdf3f60908dedc9bb",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "fa1545ee-c421-566f-a062-5b3cc5ed86df",
+    "children": [],
+    "parent": "c61e32c1-b74a-577d-bcc5-71e591546782",
+    "internal": {
+      "contentDigest": "70db28f9118ddc122d2aad303021137c",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "3f06569d-ebc6-5848-a69d-5ff64a9d9b67",
+    "children": [],
+    "parent": "538f5859-d9a3-589e-8dde-3e731732b0ca",
+    "internal": {
+      "contentDigest": "96cc7e05e1dd76339a0332b39dfc4640",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "42244d78-fac3-5e3b-9f14-02a15c31b548",
+    "children": [],
+    "parent": "632d64a1-e24c-55fe-a3b3-a4a31997af39",
+    "internal": {
+      "contentDigest": "3a533f4c318f142c43c6aea513fde2ee",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "8a7742e1-6b5a-59f8-9d48-f0abf0ea86a9",
+    "children": [],
+    "parent": "922f795a-bf71-5370-bf64-e04720bd110e",
+    "internal": {
+      "contentDigest": "9c8ce28260d2ae31eb2ed1b06bbd473e",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "2f9bc223-d0e2-57c4-9de2-0de4c32d6ec3",
+    "children": [],
+    "parent": "14d49c41-5571-57c5-b7f8-07e5d19e24fc",
+    "internal": {
+      "contentDigest": "c687cf5f4977f346c919e3f0b10a5fd3",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "cdaeb064-5204-570a-b236-f8410c35fcff",
+    "children": [],
+    "parent": "b8d1824e-97a7-58ad-8f6a-9eca8ffe31c5",
+    "internal": {
+      "contentDigest": "96fad019fa39ab34f2ad3b09cc17a1e2",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "eeac8d14-bf7c-5762-ab78-4d172dd5afe3",
+    "children": [],
+    "parent": "c52dd4e6-274f-556f-84af-21c118aa6cca",
+    "internal": {
+      "contentDigest": "31ba31edc1bf4fdf281939ae690236de",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "a5c97fc5-c9f1-54c0-9233-210fe1f160b0",
+    "children": [],
+    "parent": "f64841a4-4d95-5112-9348-bc562961db4d",
+    "internal": {
+      "contentDigest": "3f7ccb765115bdcdb775a7cecd5bce2d",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "b0cedf3b-cd9b-5421-9d27-48a8f2da610f",
+    "children": [],
+    "parent": "b633e034-a20b-5d41-a9b0-11e9d621d983",
+    "internal": {
+      "contentDigest": "1fd8c62f69302a0232f236888d945b75",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "9034de88-ace8-585c-b0fe-acea09a60b4f",
+    "children": [],
+    "parent": "dc8d98cd-9a4b-5c95-978c-72e5e003d3a9",
+    "internal": {
+      "contentDigest": "af544090b8d1f2150b5ebfab252dbf3e",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "f59e19cb-3173-5247-a277-76b3b8250b4b",
+    "children": [],
+    "parent": "c9a40590-98f2-560d-b091-34e10179dc1c",
+    "internal": {
+      "contentDigest": "ce267a020dec9362be41e06d8d586975",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "da1377ca-7e8f-5196-a4fd-d0a4f3589a41",
+    "children": [],
+    "parent": "19f096ac-7d47-53e3-81df-5f6b6fd942b7",
+    "internal": {
+      "contentDigest": "46bfd9fcfe5f42f54aafc1e4dd7b40d2",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "ad5bf0e8-78e6-5c06-8f36-18de7bfe675a",
+    "children": [],
+    "parent": "6bb783c1-92c8-5a66-8b1c-97aeb2f18647",
+    "internal": {
+      "contentDigest": "8e4fa5e7e3dae7c02bd280bb24e95c66",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "4be4599e-5f28-5597-9b97-5d689b785dc3",
+    "children": [],
+    "parent": "ac3d890f-c2bd-5ccc-a584-ab773e2bb356",
+    "internal": {
+      "contentDigest": "0f3cf0fd60b391d081376a9912172984",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "cc003810-50ca-5300-921f-f45dc27bb000",
+    "children": [],
+    "parent": "19737ea3-cf41-5044-9262-cc8a00ba37a2",
+    "internal": {
+      "contentDigest": "4e0218a426f7ca098de8f79f19a9812a",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "07adb971-0e2b-52a2-9851-73a0c0c2b841",
+    "children": [],
+    "parent": "eddf5a86-e422-5513-aace-a59d556fab11",
+    "internal": {
+      "contentDigest": "288bf0943ae797b95a21705b79a45c26",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "d53df682-65cb-509b-b179-88d7b95a97e2",
+    "children": [],
+    "parent": "b1b28a49-b910-5669-ad19-d2917aa1bfdf",
+    "internal": {
+      "contentDigest": "82de37baa6823ff4a3ac419158d02ab3",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "4a42eab4-43b3-5d69-8a5b-37d744d78ead",
+    "children": [],
+    "parent": "4f84a220-540e-5fdb-91c0-5f680c657eea",
+    "internal": {
+      "contentDigest": "4f455e646bcb5a9b3b2160f5997611e7",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "8bb85c36-4986-5dca-a1ef-935fc216b78a",
+    "children": [],
+    "parent": "c3e4eeee-a771-5915-a1ea-5f8aa5496e2b",
+    "internal": {
+      "contentDigest": "695a76d7cd1ff8a8fbe78ea9482bc4e7",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "9a6c566e-9b00-5135-a512-a7375437d91b",
+    "children": [],
+    "parent": "d4f6feaa-9001-5ca8-8f11-d5d01cd9d254",
+    "internal": {
+      "contentDigest": "654eaeabf3232517b925392ff64244dd",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "5868eb13-70c3-5331-984c-7ceaa5c309ca",
+    "children": [],
+    "parent": "9b6b9a69-0c6e-5abe-986b-7b11cd1764e6",
+    "internal": {
+      "contentDigest": "d110db904291dc24c26b5e2696e59338",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "02673219-a18f-5c15-a63c-550dd5bf110d",
+    "children": [],
+    "parent": "fe6abbeb-14b1-52c4-916c-6498b0694452",
+    "internal": {
+      "contentDigest": "fd95ba3ac4e3bbc7331025248432a239",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "11b30767-49c7-594f-8d4d-760356e21321",
+    "children": [],
+    "parent": "7051dfff-7b4a-5d7f-947f-c85e2034b05e",
+    "internal": {
+      "contentDigest": "a513d53f3a11403596639be3a1d3bedd",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "1da41841-fb71-52b0-9bac-b9abefcfe47a",
+    "children": [],
+    "parent": "de0199a4-a8f3-5fee-a01e-3637d7424778",
+    "internal": {
+      "contentDigest": "32fcef3d89b53f53148ffb0a61feb53a",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "b7587480-754e-5318-bfd4-5b73acc41548",
+    "children": [],
+    "parent": "4957ed17-f7ed-5ef1-8ea1-0ce081bb357c",
+    "internal": {
+      "contentDigest": "d3a2dca69116b045287f258388a60718",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "2d3de8d8-437a-5ca5-9ba2-181af73e42d7",
+    "children": [],
+    "parent": "5dfa0a18-5fd7-5bc8-b763-61e8a0aa110d",
+    "internal": {
+      "contentDigest": "c229673b43857230fa2c7b3969eaab42",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "dea320e4-3a3c-520c-ba44-6336e369315f",
+    "children": [],
+    "parent": "41f4e7be-c697-5c50-be60-9ca3828603c7",
+    "internal": {
+      "contentDigest": "92b29ea9b9b5d01a2e00ae8a5e8f73aa",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "2d54e667-4d48-5698-8510-2a5e463e939a",
+    "children": [],
+    "parent": "0229ab2d-e417-59b4-b2a5-22a7714092df",
+    "internal": {
+      "contentDigest": "ee0bb483ba82477ad08c43d9a463dd48",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "326f8570-2d93-5ce1-9896-111bc85486af",
+    "children": [],
+    "parent": "f87566b3-c14c-5cac-b9db-190fdf797a8b",
+    "internal": {
+      "contentDigest": "951de4497ed7365c199cf73d9a18b0c4",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "9815f23e-7bf8-5aba-b9c2-ee9ee31d0a6a",
+    "children": [],
+    "parent": "7908fb4d-98d9-5e13-b9f0-84b52012a546",
+    "internal": {
+      "contentDigest": "f7b42abd98737507194603523c20a00b",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "e0111747-3565-5d71-9c95-4339fb01006e",
+    "children": [],
+    "parent": "14fff379-a53f-5902-9d91-d3973b5fa952",
+    "internal": {
+      "contentDigest": "a005f461571fcc05eb8a9972e6b9c3fb",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "bc663945-deb3-5070-9a5b-367df4a50400",
+    "children": [],
+    "parent": "fb621d85-5a2c-59c1-afd2-243507d447b5",
+    "internal": {
+      "contentDigest": "36a057b15efdf7e657949dcaf2b5a5ca",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "4d53a1c1-4ade-5627-9297-1c8cb7642f0a",
+    "children": [],
+    "parent": "fd3c1dc8-5ed1-5194-891a-d6af0c3952c9",
+    "internal": {
+      "contentDigest": "565cb37da59eeddeb6ddf0667e1f6aa7",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "02606998-d4ff-5676-a381-d9a587c42ffb",
+    "children": [],
+    "parent": "03b29c0e-71da-5ebf-8a51-caa50706b0de",
+    "internal": {
+      "contentDigest": "e473c8292e19bb448af74410a8f45edc",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "6503cf4b-80bb-54f7-b7af-a759055c558d",
+    "children": [],
+    "parent": "764b3942-c154-52a1-9a0a-cc422572a352",
+    "internal": {
+      "contentDigest": "a7b8c880534ac5c210f0da4c8b852700",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "8347bef3-7615-5041-889e-9d1d0e21df7b",
+    "children": [],
+    "parent": "f3f69364-b797-5e77-a7b7-a7cca6124124",
+    "internal": {
+      "contentDigest": "1949cbb78a54ccd7b7f6be80ce5bf22e",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "d8355763-6b57-5141-8af4-4fef9518f87f",
+    "children": [],
+    "parent": "d72ea313-fe13-56fd-b3e0-3b30f986abe3",
+    "internal": {
+      "contentDigest": "6b4a90bb8a9df452816b73a921a077c5",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "4ea50907-055a-5080-97eb-430182a400f6",
+    "children": [],
+    "parent": "14085584-d2d6-505c-b15e-18366c538350",
+    "internal": {
+      "contentDigest": "753e3daa82ea260cfec5a30b16cd27ef",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "5e40ac10-3140-596a-a2f1-6f24cae9a73b",
+    "children": [],
+    "parent": "933a84a9-75b4-5d1b-ab13-7fa6dc512635",
+    "internal": {
+      "contentDigest": "b0e8b99b4f33ff57a12ff7d3c99dd534",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "349d04c8-368f-5b97-b838-2d4d988072e4",
+    "children": [],
+    "parent": "4902ea03-096b-5af7-a274-7814546687ef",
+    "internal": {
+      "contentDigest": "d00220e3e4b792741841b85af042983d",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "34152597-9a17-5250-8fab-074a17f83f99",
+    "children": [],
+    "parent": "76885354-e4ab-5649-b98f-8e5a75c0b7c6",
+    "internal": {
+      "contentDigest": "17fbab6f315a13755c50133b2120d84e",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "6582f45a-6f10-5656-9bcd-205b18f3578a",
+    "children": [],
+    "parent": "1221d4f2-c8f5-5268-b0e7-fcd0aa12d598",
+    "internal": {
+      "contentDigest": "312d4c34b4bba4e8143c6f8bf9bfbea6",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "e960cdfc-bc59-5b7d-aeb3-fbeb79d0cd8c",
+    "children": [],
+    "parent": "fe7f4316-fb22-5cc0-a414-48f12f2a41da",
+    "internal": {
+      "contentDigest": "b5a6a1676f667a0444c7e9d4ba6472f3",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "68b4838a-e6c7-5d36-a661-301b45843aeb",
+    "children": [],
+    "parent": "4b976bd1-00ad-5bea-81d5-aa845f0081dc",
+    "internal": {
+      "contentDigest": "5918a7fcb8e8c9d1cfb7ed39e9391b32",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "c92a09ee-5025-556c-a536-7cd1182a1f75",
+    "children": [],
+    "parent": "2a8de103-3662-541b-a0b9-a384e7ec141c",
+    "internal": {
+      "contentDigest": "ac148a522d9d29989de0380c2b416b09",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "36877a4e-6f98-5bc5-acf4-71c6c70c1f10",
+    "children": [],
+    "parent": "792f605d-6d45-50cc-b1fe-3d3852795915",
+    "internal": {
+      "contentDigest": "9131efb20760a4549bc102032737eeb8",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "c6154f11-7111-5af9-bc65-e339d6e68db9",
+    "children": [],
+    "parent": "cd24a64f-32cb-5167-a6fe-783a46d7ca4b",
+    "internal": {
+      "contentDigest": "2bce315ca5a1d4f5236850a7b953e99b",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "29f5369d-8108-5d6a-8328-d266944a63ce",
+    "children": [
+      "f6cf4e6b-590e-5515-a0f9-e164c5d36d5f"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "b92813a0608bc12340061e5882d93abb",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/gb7GOoM92V.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/gb7GOoM92V.jpg",
+    "relativePath": "images/gb7GOoM92V.jpg",
+    "extension": "jpg",
+    "size": 145057,
+    "prettySize": "145 kB",
+    "modifiedTime": "2019-02-08T08:55:07.948Z",
+    "accessTime": "2019-02-08T08:55:07.948Z",
+    "changeTime": "2019-02-08T08:55:07.948Z",
+    "birthTime": "2019-02-08T08:55:07.948Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "gb7GOoM92V.jpg",
+    "ext": ".jpg",
+    "name": "gb7GOoM92V",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453890,
+    "blocks": 288,
+    "atimeMs": 1549616107947.9268,
+    "mtimeMs": 1549616107947.9268,
+    "ctimeMs": 1549616107947.9268,
+    "birthtimeMs": 1549616107947.9268,
+    "atime": "2019-02-08T08:55:07.948Z",
+    "mtime": "2019-02-08T08:55:07.948Z",
+    "ctime": "2019-02-08T08:55:07.948Z",
+    "birthtime": "2019-02-08T08:55:07.948Z"
+  },
+  {
+    "id": "3ec85680-8562-56fe-9dd2-05278a92b5cc",
+    "children": [
+      "f4fb0237-4f43-5acc-8a65-c49d5f809b1f"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "47ef7dc01d0534f0719af9379714e732",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/hG-1k4s9yJ.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/hG-1k4s9yJ.jpg",
+    "relativePath": "images/hG-1k4s9yJ.jpg",
+    "extension": "jpg",
+    "size": 152267,
+    "prettySize": "152 kB",
+    "modifiedTime": "2019-02-08T08:55:07.951Z",
+    "accessTime": "2019-02-08T08:55:07.948Z",
+    "changeTime": "2019-02-08T08:55:07.951Z",
+    "birthTime": "2019-02-08T08:55:07.951Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "hG-1k4s9yJ.jpg",
+    "ext": ".jpg",
+    "name": "hG-1k4s9yJ",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453893,
+    "blocks": 304,
+    "atimeMs": 1549616107947.9268,
+    "mtimeMs": 1549616107951.2603,
+    "ctimeMs": 1549616107951.2603,
+    "birthtimeMs": 1549616107951.2603,
+    "atime": "2019-02-08T08:55:07.948Z",
+    "mtime": "2019-02-08T08:55:07.951Z",
+    "ctime": "2019-02-08T08:55:07.951Z",
+    "birthtime": "2019-02-08T08:55:07.951Z"
+  },
+  {
+    "id": "73ff79eb-7c36-52f8-8d0c-5ba294e09a27",
+    "children": [
+      "9980f111-9638-5121-b5de-51c4869685a0"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "8682e77e0894df0d6ee3e65d4781b418",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/hSNJLVs9_0.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/hSNJLVs9_0.jpg",
+    "relativePath": "images/hSNJLVs9_0.jpg",
+    "extension": "jpg",
+    "size": 163625,
+    "prettySize": "164 kB",
+    "modifiedTime": "2019-02-08T08:55:07.951Z",
+    "accessTime": "2019-02-08T08:55:07.951Z",
+    "changeTime": "2019-02-08T08:55:07.951Z",
+    "birthTime": "2019-02-08T08:55:07.951Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "hSNJLVs9_0.jpg",
+    "ext": ".jpg",
+    "name": "hSNJLVs9_0",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453896,
+    "blocks": 320,
+    "atimeMs": 1549616107951.2603,
+    "mtimeMs": 1549616107951.2603,
+    "ctimeMs": 1549616107951.2603,
+    "birthtimeMs": 1549616107951.2603,
+    "atime": "2019-02-08T08:55:07.951Z",
+    "mtime": "2019-02-08T08:55:07.951Z",
+    "ctime": "2019-02-08T08:55:07.951Z",
+    "birthtime": "2019-02-08T08:55:07.951Z"
+  },
+  {
+    "id": "e6c580e0-1f87-523f-bcd7-170a47ac88a3",
+    "children": [
+      "b36193d8-4a0b-5cef-b150-b121d2a1d559"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "3d2f982848b850a5a313efcaa3c46d76",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/hd7P_nM98p.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/hd7P_nM98p.jpg",
+    "relativePath": "images/hd7P_nM98p.jpg",
+    "extension": "jpg",
+    "size": 136739,
+    "prettySize": "137 kB",
+    "modifiedTime": "2019-02-08T08:55:07.951Z",
+    "accessTime": "2019-02-08T08:55:07.951Z",
+    "changeTime": "2019-02-08T08:55:07.951Z",
+    "birthTime": "2019-02-08T08:55:07.951Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "hd7P_nM98p.jpg",
+    "ext": ".jpg",
+    "name": "hd7P_nM98p",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453895,
+    "blocks": 272,
+    "atimeMs": 1549616107951.2603,
+    "mtimeMs": 1549616107951.2603,
+    "ctimeMs": 1549616107951.2603,
+    "birthtimeMs": 1549616107951.2603,
+    "atime": "2019-02-08T08:55:07.951Z",
+    "mtime": "2019-02-08T08:55:07.951Z",
+    "ctime": "2019-02-08T08:55:07.951Z",
+    "birthtime": "2019-02-08T08:55:07.951Z"
+  },
+  {
+    "id": "47fd50e1-52a2-5faf-896d-e493f98f9034",
+    "children": [
+      "8d3ac1fd-20ff-5914-b364-47d98d106d27"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "f78f68624655ffd1cbf779ee7803057a",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/jKzbvCs9_9.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/jKzbvCs9_9.jpg",
+    "relativePath": "images/jKzbvCs9_9.jpg",
+    "extension": "jpg",
+    "size": 143584,
+    "prettySize": "144 kB",
+    "modifiedTime": "2019-02-08T08:55:07.955Z",
+    "accessTime": "2019-02-08T08:55:07.955Z",
+    "changeTime": "2019-02-08T08:55:07.955Z",
+    "birthTime": "2019-02-08T08:55:07.955Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "jKzbvCs9_9.jpg",
+    "ext": ".jpg",
+    "name": "jKzbvCs9_9",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453905,
+    "blocks": 288,
+    "atimeMs": 1549616107954.5935,
+    "mtimeMs": 1549616107954.5935,
+    "ctimeMs": 1549616107954.5935,
+    "birthtimeMs": 1549616107954.5935,
+    "atime": "2019-02-08T08:55:07.955Z",
+    "mtime": "2019-02-08T08:55:07.955Z",
+    "ctime": "2019-02-08T08:55:07.955Z",
+    "birthtime": "2019-02-08T08:55:07.955Z"
+  },
+  {
+    "id": "e78659b1-96a0-591b-9eba-a9f4296191ed",
+    "children": [
+      "5f4f8277-f1a5-574c-80ae-a9cad81b24f0"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "2be93a5bd589a6e10b5ec9ff8d52e3cb",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/jU-tlcM9-_.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/jU-tlcM9-_.jpg",
+    "relativePath": "images/jU-tlcM9-_.jpg",
+    "extension": "jpg",
+    "size": 132657,
+    "prettySize": "133 kB",
+    "modifiedTime": "2019-02-08T08:55:07.955Z",
+    "accessTime": "2019-02-08T08:55:07.955Z",
+    "changeTime": "2019-02-08T08:55:07.955Z",
+    "birthTime": "2019-02-08T08:55:07.955Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "jU-tlcM9-_.jpg",
+    "ext": ".jpg",
+    "name": "jU-tlcM9-_",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453906,
+    "blocks": 264,
+    "atimeMs": 1549616107954.5935,
+    "mtimeMs": 1549616107954.5935,
+    "ctimeMs": 1549616107954.5935,
+    "birthtimeMs": 1549616107954.5935,
+    "atime": "2019-02-08T08:55:07.955Z",
+    "mtime": "2019-02-08T08:55:07.955Z",
+    "ctime": "2019-02-08T08:55:07.955Z",
+    "birthtime": "2019-02-08T08:55:07.955Z"
+  },
+  {
+    "id": "2dc47b1b-bb47-5353-857a-34632bb43351",
+    "children": [
+      "71a5e7e2-80e6-5b5e-b823-3d0e5940f58b"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "570a71489dec85b03f29a4e68654c4e9",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/nQtXUns97Y.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/nQtXUns97Y.jpg",
+    "relativePath": "images/nQtXUns97Y.jpg",
+    "extension": "jpg",
+    "size": 180316,
+    "prettySize": "180 kB",
+    "modifiedTime": "2019-02-08T08:55:07.958Z",
+    "accessTime": "2019-02-08T08:55:07.958Z",
+    "changeTime": "2019-02-08T08:55:07.958Z",
+    "birthTime": "2019-02-08T08:55:07.958Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "nQtXUns97Y.jpg",
+    "ext": ".jpg",
+    "name": "nQtXUns97Y",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453918,
+    "blocks": 360,
+    "atimeMs": 1549616107957.9268,
+    "mtimeMs": 1549616107957.9268,
+    "ctimeMs": 1549616107957.9268,
+    "birthtimeMs": 1549616107957.9268,
+    "atime": "2019-02-08T08:55:07.958Z",
+    "mtime": "2019-02-08T08:55:07.958Z",
+    "ctime": "2019-02-08T08:55:07.958Z",
+    "birthtime": "2019-02-08T08:55:07.958Z"
+  },
+  {
+    "id": "64fd4aea-27e4-5a24-87b2-4b025d4ab76a",
+    "children": [
+      "f5376bd2-b65a-5dc4-8150-fdc8a89eb1a8"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "0520f8a8807c390404a4d7f8d2cd512e",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/ov6A6Xs93f.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/ov6A6Xs93f.jpg",
+    "relativePath": "images/ov6A6Xs93f.jpg",
+    "extension": "jpg",
+    "size": 161456,
+    "prettySize": "161 kB",
+    "modifiedTime": "2019-02-08T08:55:07.961Z",
+    "accessTime": "2019-02-08T08:55:07.961Z",
+    "changeTime": "2019-02-08T08:55:07.961Z",
+    "birthTime": "2019-02-08T08:55:07.961Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "ov6A6Xs93f.jpg",
+    "ext": ".jpg",
+    "name": "ov6A6Xs93f",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453929,
+    "blocks": 320,
+    "atimeMs": 1549616107961.26,
+    "mtimeMs": 1549616107961.26,
+    "ctimeMs": 1549616107961.26,
+    "birthtimeMs": 1549616107961.26,
+    "atime": "2019-02-08T08:55:07.961Z",
+    "mtime": "2019-02-08T08:55:07.961Z",
+    "ctime": "2019-02-08T08:55:07.961Z",
+    "birthtime": "2019-02-08T08:55:07.961Z"
+  },
+  {
+    "id": "85ca8b03-3685-5a26-92c7-8076d158f8dd",
+    "children": [
+      "152364d9-6590-5dd1-88dd-042e251b33ef"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "9a121a607116f40f35013e58b1455229",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/saS0ZtM9x5.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/saS0ZtM9x5.jpg",
+    "relativePath": "images/saS0ZtM9x5.jpg",
+    "extension": "jpg",
+    "size": 175347,
+    "prettySize": "175 kB",
+    "modifiedTime": "2019-02-08T08:55:07.965Z",
+    "accessTime": "2019-02-08T08:55:07.965Z",
+    "changeTime": "2019-02-08T08:55:07.965Z",
+    "birthTime": "2019-02-08T08:55:07.965Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "saS0ZtM9x5.jpg",
+    "ext": ".jpg",
+    "name": "saS0ZtM9x5",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453933,
+    "blocks": 344,
+    "atimeMs": 1549616107964.5935,
+    "mtimeMs": 1549616107964.5935,
+    "ctimeMs": 1549616107964.5935,
+    "birthtimeMs": 1549616107964.5935,
+    "atime": "2019-02-08T08:55:07.965Z",
+    "mtime": "2019-02-08T08:55:07.965Z",
+    "ctime": "2019-02-08T08:55:07.965Z",
+    "birthtime": "2019-02-08T08:55:07.965Z"
+  },
+  {
+    "id": "1e621a1e-31fa-5bc6-87a0-c9f69386cf9e",
+    "children": [
+      "33bf67bd-d1b3-5915-a801-de7b2629c4a3"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "bfc29e26125f8afe0e281e612a6c28a0",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/rf52zpM98X.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/rf52zpM98X.jpg",
+    "relativePath": "images/rf52zpM98X.jpg",
+    "extension": "jpg",
+    "size": 141454,
+    "prettySize": "141 kB",
+    "modifiedTime": "2019-02-08T08:55:07.965Z",
+    "accessTime": "2019-02-08T08:55:07.961Z",
+    "changeTime": "2019-02-08T08:55:07.965Z",
+    "birthTime": "2019-02-08T08:55:07.965Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "rf52zpM98X.jpg",
+    "ext": ".jpg",
+    "name": "rf52zpM98X",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453932,
+    "blocks": 280,
+    "atimeMs": 1549616107961.26,
+    "mtimeMs": 1549616107964.5935,
+    "ctimeMs": 1549616107964.5935,
+    "birthtimeMs": 1549616107964.5935,
+    "atime": "2019-02-08T08:55:07.961Z",
+    "mtime": "2019-02-08T08:55:07.965Z",
+    "ctime": "2019-02-08T08:55:07.965Z",
+    "birthtime": "2019-02-08T08:55:07.965Z"
+  },
+  {
+    "id": "9cf24c02-5c23-584e-b42b-a2d315946f26",
+    "children": [
+      "ceb49dc8-381d-55e3-b9b0-05ea7ec1cba6"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "0184cf7d576a3626ce482e1156894f92",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/ov6Bgps93h.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/ov6Bgps93h.jpg",
+    "relativePath": "images/ov6Bgps93h.jpg",
+    "extension": "jpg",
+    "size": 138679,
+    "prettySize": "139 kB",
+    "modifiedTime": "2019-02-08T08:55:07.961Z",
+    "accessTime": "2019-02-08T08:55:07.961Z",
+    "changeTime": "2019-02-08T08:55:07.961Z",
+    "birthTime": "2019-02-08T08:55:07.961Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "ov6Bgps93h.jpg",
+    "ext": ".jpg",
+    "name": "ov6Bgps93h",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453931,
+    "blocks": 272,
+    "atimeMs": 1549616107961.26,
+    "mtimeMs": 1549616107961.26,
+    "ctimeMs": 1549616107961.26,
+    "birthtimeMs": 1549616107961.26,
+    "atime": "2019-02-08T08:55:07.961Z",
+    "mtime": "2019-02-08T08:55:07.961Z",
+    "ctime": "2019-02-08T08:55:07.961Z",
+    "birthtime": "2019-02-08T08:55:07.961Z"
+  },
+  {
+    "id": "61622fcc-aa74-5f23-9298-05621ac64f7d",
+    "children": [
+      "e16b83bd-4ff6-5a8b-b277-16291a0eefe3"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "3dcb61ad3e8b7a5ec8cc3f13bf31338e",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/BW6uDlYlQCB.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/BW6uDlYlQCB.jpg",
+    "relativePath": "images/BW6uDlYlQCB.jpg",
+    "extension": "jpg",
+    "size": 249737,
+    "prettySize": "250 kB",
+    "modifiedTime": "2019-02-08T08:55:07.935Z",
+    "accessTime": "2019-02-08T08:55:07.935Z",
+    "changeTime": "2019-02-08T08:55:07.935Z",
+    "birthTime": "2019-02-08T08:55:07.935Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "BW6uDlYlQCB.jpg",
+    "ext": ".jpg",
+    "name": "BW6uDlYlQCB",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453858,
+    "blocks": 488,
+    "atimeMs": 1549616107934.5935,
+    "mtimeMs": 1549616107934.5935,
+    "ctimeMs": 1549616107934.5935,
+    "birthtimeMs": 1549616107934.5935,
+    "atime": "2019-02-08T08:55:07.935Z",
+    "mtime": "2019-02-08T08:55:07.935Z",
+    "ctime": "2019-02-08T08:55:07.935Z",
+    "birthtime": "2019-02-08T08:55:07.935Z"
+  },
+  {
+    "id": "e21dc7e6-f2d5-50cc-a6bb-ad22f67c766b",
+    "children": [
+      "6b4df782-305f-575a-be3d-743723555f0b"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "0ac90a4f683192f4218f1fa8f15c75f0",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/Z0mVePs9yb.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/Z0mVePs9yb.jpg",
+    "relativePath": "images/Z0mVePs9yb.jpg",
+    "extension": "jpg",
+    "size": 216628,
+    "prettySize": "217 kB",
+    "modifiedTime": "2019-02-08T08:55:07.945Z",
+    "accessTime": "2019-02-08T08:55:07.941Z",
+    "changeTime": "2019-02-08T08:55:07.945Z",
+    "birthTime": "2019-02-08T08:55:07.945Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "Z0mVePs9yb.jpg",
+    "ext": ".jpg",
+    "name": "Z0mVePs9yb",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453876,
+    "blocks": 424,
+    "atimeMs": 1549616107941.2603,
+    "mtimeMs": 1549616107944.5935,
+    "ctimeMs": 1549616107944.5935,
+    "birthtimeMs": 1549616107944.5935,
+    "atime": "2019-02-08T08:55:07.941Z",
+    "mtime": "2019-02-08T08:55:07.945Z",
+    "ctime": "2019-02-08T08:55:07.945Z",
+    "birthtime": "2019-02-08T08:55:07.945Z"
+  },
+  {
+    "id": "f6cf4e6b-590e-5515-a0f9-e164c5d36d5f",
+    "children": [],
+    "parent": "29f5369d-8108-5d6a-8328-d266944a63ce",
+    "internal": {
+      "contentDigest": "b92813a0608bc12340061e5882d93abb",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "f4fb0237-4f43-5acc-8a65-c49d5f809b1f",
+    "children": [],
+    "parent": "3ec85680-8562-56fe-9dd2-05278a92b5cc",
+    "internal": {
+      "contentDigest": "47ef7dc01d0534f0719af9379714e732",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "9980f111-9638-5121-b5de-51c4869685a0",
+    "children": [],
+    "parent": "73ff79eb-7c36-52f8-8d0c-5ba294e09a27",
+    "internal": {
+      "contentDigest": "8682e77e0894df0d6ee3e65d4781b418",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "b36193d8-4a0b-5cef-b150-b121d2a1d559",
+    "children": [],
+    "parent": "e6c580e0-1f87-523f-bcd7-170a47ac88a3",
+    "internal": {
+      "contentDigest": "3d2f982848b850a5a313efcaa3c46d76",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "8d3ac1fd-20ff-5914-b364-47d98d106d27",
+    "children": [],
+    "parent": "47fd50e1-52a2-5faf-896d-e493f98f9034",
+    "internal": {
+      "contentDigest": "f78f68624655ffd1cbf779ee7803057a",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "5f4f8277-f1a5-574c-80ae-a9cad81b24f0",
+    "children": [],
+    "parent": "e78659b1-96a0-591b-9eba-a9f4296191ed",
+    "internal": {
+      "contentDigest": "2be93a5bd589a6e10b5ec9ff8d52e3cb",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "71a5e7e2-80e6-5b5e-b823-3d0e5940f58b",
+    "children": [],
+    "parent": "2dc47b1b-bb47-5353-857a-34632bb43351",
+    "internal": {
+      "contentDigest": "570a71489dec85b03f29a4e68654c4e9",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "f5376bd2-b65a-5dc4-8150-fdc8a89eb1a8",
+    "children": [],
+    "parent": "64fd4aea-27e4-5a24-87b2-4b025d4ab76a",
+    "internal": {
+      "contentDigest": "0520f8a8807c390404a4d7f8d2cd512e",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "152364d9-6590-5dd1-88dd-042e251b33ef",
+    "children": [],
+    "parent": "85ca8b03-3685-5a26-92c7-8076d158f8dd",
+    "internal": {
+      "contentDigest": "9a121a607116f40f35013e58b1455229",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "33bf67bd-d1b3-5915-a801-de7b2629c4a3",
+    "children": [],
+    "parent": "1e621a1e-31fa-5bc6-87a0-c9f69386cf9e",
+    "internal": {
+      "contentDigest": "bfc29e26125f8afe0e281e612a6c28a0",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "ceb49dc8-381d-55e3-b9b0-05ea7ec1cba6",
+    "children": [],
+    "parent": "9cf24c02-5c23-584e-b42b-a2d315946f26",
+    "internal": {
+      "contentDigest": "0184cf7d576a3626ce482e1156894f92",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "e16b83bd-4ff6-5a8b-b277-16291a0eefe3",
+    "children": [],
+    "parent": "61622fcc-aa74-5f23-9298-05621ac64f7d",
+    "internal": {
+      "contentDigest": "3dcb61ad3e8b7a5ec8cc3f13bf31338e",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "6b4df782-305f-575a-be3d-743723555f0b",
+    "children": [],
+    "parent": "e21dc7e6-f2d5-50cc-a6bb-ad22f67c766b",
+    "internal": {
+      "contentDigest": "0ac90a4f683192f4218f1fa8f15c75f0",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "26d7b901-1c70-5451-b268-d94be4b3f543",
+    "children": [
+      "5184f235-e650-5888-ba04-a30b2049d610"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "809fc4621686a9b2fa8f4da3f9ae0605",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/BBd11a1s9x3.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/BBd11a1s9x3.jpg",
+    "relativePath": "images/BBd11a1s9x3.jpg",
+    "extension": "jpg",
+    "size": 320662,
+    "prettySize": "321 kB",
+    "modifiedTime": "2019-02-08T08:55:07.928Z",
+    "accessTime": "2019-02-08T08:55:07.925Z",
+    "changeTime": "2019-02-08T08:55:07.928Z",
+    "birthTime": "2019-02-08T08:55:07.928Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "BBd11a1s9x3.jpg",
+    "ext": ".jpg",
+    "name": "BBd11a1s9x3",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453847,
+    "blocks": 632,
+    "atimeMs": 1549616107924.5935,
+    "mtimeMs": 1549616107927.9268,
+    "ctimeMs": 1549616107927.9268,
+    "birthtimeMs": 1549616107927.9268,
+    "atime": "2019-02-08T08:55:07.925Z",
+    "mtime": "2019-02-08T08:55:07.928Z",
+    "ctime": "2019-02-08T08:55:07.928Z",
+    "birthtime": "2019-02-08T08:55:07.928Z"
+  },
+  {
+    "id": "a224a97f-742a-5789-8652-67217dbc012d",
+    "children": [
+      "a0a75092-ed13-5117-a44b-7360940f99b5"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "74434c5f584ae7636a2a45ca4b84e218",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/BFur3Jfs94V.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/BFur3Jfs94V.jpg",
+    "relativePath": "images/BFur3Jfs94V.jpg",
+    "extension": "jpg",
+    "size": 264259,
+    "prettySize": "264 kB",
+    "modifiedTime": "2019-02-08T08:55:07.928Z",
+    "accessTime": "2019-02-08T08:55:07.928Z",
+    "changeTime": "2019-02-08T08:55:07.928Z",
+    "birthTime": "2019-02-08T08:55:07.928Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "BFur3Jfs94V.jpg",
+    "ext": ".jpg",
+    "name": "BFur3Jfs94V",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453850,
+    "blocks": 520,
+    "atimeMs": 1549616107927.9268,
+    "mtimeMs": 1549616107927.9268,
+    "ctimeMs": 1549616107927.9268,
+    "birthtimeMs": 1549616107927.9268,
+    "atime": "2019-02-08T08:55:07.928Z",
+    "mtime": "2019-02-08T08:55:07.928Z",
+    "ctime": "2019-02-08T08:55:07.928Z",
+    "birthtime": "2019-02-08T08:55:07.928Z"
+  },
+  {
+    "id": "1c0d84c8-44e6-56ba-9392-e99e475fb022",
+    "children": [
+      "081cbcc5-44ec-5f4e-ae7a-fc25e68ff615"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "9684a7ccd014d6cd467185c0f559780c",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/BGiWipNM96D.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/BGiWipNM96D.jpg",
+    "relativePath": "images/BGiWipNM96D.jpg",
+    "extension": "jpg",
+    "size": 302822,
+    "prettySize": "303 kB",
+    "modifiedTime": "2019-02-08T08:55:07.931Z",
+    "accessTime": "2019-02-08T08:55:07.928Z",
+    "changeTime": "2019-02-08T08:55:07.931Z",
+    "birthTime": "2019-02-08T08:55:07.931Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "BGiWipNM96D.jpg",
+    "ext": ".jpg",
+    "name": "BGiWipNM96D",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453851,
+    "blocks": 592,
+    "atimeMs": 1549616107927.9268,
+    "mtimeMs": 1549616107931.2603,
+    "ctimeMs": 1549616107931.2603,
+    "birthtimeMs": 1549616107931.2603,
+    "atime": "2019-02-08T08:55:07.928Z",
+    "mtime": "2019-02-08T08:55:07.931Z",
+    "ctime": "2019-02-08T08:55:07.931Z",
+    "birthtime": "2019-02-08T08:55:07.931Z"
+  },
+  {
+    "id": "45047932-b596-501d-9fe0-941e1fa73915",
+    "children": [
+      "0f645fa4-95ec-5b04-b5ad-1cf18a4632a3"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "9846d3913efc0249578435de07036d4d",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/BY5x5x2F6cO.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/BY5x5x2F6cO.jpg",
+    "relativePath": "images/BY5x5x2F6cO.jpg",
+    "extension": "jpg",
+    "size": 302401,
+    "prettySize": "302 kB",
+    "modifiedTime": "2019-02-08T08:55:07.935Z",
+    "accessTime": "2019-02-08T08:55:07.935Z",
+    "changeTime": "2019-02-08T08:55:07.935Z",
+    "birthTime": "2019-02-08T08:55:07.935Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "BY5x5x2F6cO.jpg",
+    "ext": ".jpg",
+    "name": "BY5x5x2F6cO",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453859,
+    "blocks": 592,
+    "atimeMs": 1549616107934.5935,
+    "mtimeMs": 1549616107934.5935,
+    "ctimeMs": 1549616107934.5935,
+    "birthtimeMs": 1549616107934.5935,
+    "atime": "2019-02-08T08:55:07.935Z",
+    "mtime": "2019-02-08T08:55:07.935Z",
+    "ctime": "2019-02-08T08:55:07.935Z",
+    "birthtime": "2019-02-08T08:55:07.935Z"
+  },
+  {
+    "id": "7a254b9d-ce89-52aa-b911-228e57fd57c0",
+    "children": [
+      "679982e7-5975-530f-a05d-e33a831b7036"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "b05972921c9f454ee18b2c871973dc11",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/Bam3G5XFOTK.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/Bam3G5XFOTK.jpg",
+    "relativePath": "images/Bam3G5XFOTK.jpg",
+    "extension": "jpg",
+    "size": 285623,
+    "prettySize": "286 kB",
+    "modifiedTime": "2019-02-08T08:55:07.938Z",
+    "accessTime": "2019-02-08T08:55:07.935Z",
+    "changeTime": "2019-02-08T08:55:07.938Z",
+    "birthTime": "2019-02-08T08:55:07.938Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "Bam3G5XFOTK.jpg",
+    "ext": ".jpg",
+    "name": "Bam3G5XFOTK",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453861,
+    "blocks": 560,
+    "atimeMs": 1549616107934.5935,
+    "mtimeMs": 1549616107937.9268,
+    "ctimeMs": 1549616107937.9268,
+    "birthtimeMs": 1549616107937.9268,
+    "atime": "2019-02-08T08:55:07.935Z",
+    "mtime": "2019-02-08T08:55:07.938Z",
+    "ctime": "2019-02-08T08:55:07.938Z",
+    "birthtime": "2019-02-08T08:55:07.938Z"
+  },
+  {
+    "id": "5184f235-e650-5888-ba04-a30b2049d610",
+    "children": [],
+    "parent": "26d7b901-1c70-5451-b268-d94be4b3f543",
+    "internal": {
+      "contentDigest": "809fc4621686a9b2fa8f4da3f9ae0605",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "a0a75092-ed13-5117-a44b-7360940f99b5",
+    "children": [],
+    "parent": "a224a97f-742a-5789-8652-67217dbc012d",
+    "internal": {
+      "contentDigest": "74434c5f584ae7636a2a45ca4b84e218",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "081cbcc5-44ec-5f4e-ae7a-fc25e68ff615",
+    "children": [],
+    "parent": "1c0d84c8-44e6-56ba-9392-e99e475fb022",
+    "internal": {
+      "contentDigest": "9684a7ccd014d6cd467185c0f559780c",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "0f645fa4-95ec-5b04-b5ad-1cf18a4632a3",
+    "children": [],
+    "parent": "45047932-b596-501d-9fe0-941e1fa73915",
+    "internal": {
+      "contentDigest": "9846d3913efc0249578435de07036d4d",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "679982e7-5975-530f-a05d-e33a831b7036",
+    "children": [],
+    "parent": "7a254b9d-ce89-52aa-b911-228e57fd57c0",
+    "internal": {
+      "contentDigest": "b05972921c9f454ee18b2c871973dc11",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "9265cfdf-9d3b-506a-96b8-f678bc1b67e4",
+    "children": [
+      "189352f2-8b11-5d26-8c4b-b6383e1bb8b6"
+    ],
+    "parent": null,
+    "internal": {
+      "contentDigest": "443f1ef1f921a5acb13ee6b1db7ab6cf",
+      "type": "File",
+      "mediaType": "image/jpeg",
+      "description": "File \"data/images/BSWUdcThRa-.jpg\"",
+      "owner": "gatsby-source-filesystem"
+    },
+    "sourceInstanceName": "data",
+    "absolutePath": "<PROJECT_ROOT>/examples/gatsbygram/data/images/BSWUdcThRa-.jpg",
+    "relativePath": "images/BSWUdcThRa-.jpg",
+    "extension": "jpg",
+    "size": 349871,
+    "prettySize": "350 kB",
+    "modifiedTime": "2019-02-08T08:55:07.931Z",
+    "accessTime": "2019-02-08T08:55:07.931Z",
+    "changeTime": "2019-02-08T08:55:07.931Z",
+    "birthTime": "2019-02-08T08:55:07.931Z",
+    "root": "/",
+    "dir": "<PROJECT_ROOT>/examples/gatsbygram/data/images",
+    "base": "BSWUdcThRa-.jpg",
+    "ext": ".jpg",
+    "name": "BSWUdcThRa-",
+    "relativeDirectory": "images",
+    "dev": 65024,
+    "mode": 33188,
+    "nlink": 1,
+    "uid": 1000,
+    "gid": 100,
+    "rdev": 0,
+    "blksize": 4096,
+    "ino": 17453855,
+    "blocks": 688,
+    "atimeMs": 1549616107931.2603,
+    "mtimeMs": 1549616107931.2603,
+    "ctimeMs": 1549616107931.2603,
+    "birthtimeMs": 1549616107931.2603,
+    "atime": "2019-02-08T08:55:07.931Z",
+    "mtime": "2019-02-08T08:55:07.931Z",
+    "ctime": "2019-02-08T08:55:07.931Z",
+    "birthtime": "2019-02-08T08:55:07.931Z"
+  },
+  {
+    "id": "189352f2-8b11-5d26-8c4b-b6383e1bb8b6",
+    "children": [],
+    "parent": "9265cfdf-9d3b-506a-96b8-f678bc1b67e4",
+    "internal": {
+      "contentDigest": "443f1ef1f921a5acb13ee6b1db7ab6cf",
+      "type": "ImageSharp",
+      "owner": "gatsby-transformer-sharp"
+    }
+  },
+  {
+    "id": "1685001452849004065",
+    "code": "BdiU-TTFP4h",
+    "time": "2018-01-04T17:44:07.000Z",
+    "type": "GraphImage",
+    "likes": 33,
+    "comment": 3,
+    "text": "Venice is 👌",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/83b838f14c7d14dfe6d135169269c5b4/5B5DA593/t51.2885-15/e35/25022535_184817402253496_8516666732012634112_n.jpg",
+    "image": "images/BdiU-TTFP4h.jpg",
+    "username": "kyle__mathews",
+    "avatar": "https://instagram.fslc1-1.fna.fbcdn.net/vp/246e4edea83e0f4a9d3684039f23c76b/5B6BE9DA/t51.2885-19/11373674_1480574918906897_270256414_a.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "3invalidKey": "invalidValue",
+    "internal": {
+      "contentDigest": "9cfa64653e932f581387919c1fe0d52c",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "1677771511187112561",
+    "code": "BdIpEzalAJx",
+    "time": "2017-12-25T18:19:31.000Z",
+    "type": "GraphImage",
+    "likes": 29,
+    "comment": 3,
+    "text": "Ethiopian food in London for Christmas with my little sister! Doing a little Christmas traveling.",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/2d017da97183c1b44af94f89a5c339a5/5B715B0A/t51.2885-15/e35/25023686_225296388010245_7735181992098004992_n.jpg",
+    "image": "images/BdIpEzalAJx.jpg",
+    "username": "kyle__mathews",
+    "avatar": "https://instagram.fslc1-1.fna.fbcdn.net/vp/246e4edea83e0f4a9d3684039f23c76b/5B6BE9DA/t51.2885-19/11373674_1480574918906897_270256414_a.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "da8dd583c8d4407907dc0363ba571345",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "1632234281433883850",
+    "code": "Bam3G5XFOTK",
+    "time": "2017-10-23T22:25:10.000Z",
+    "type": "GraphImage",
+    "likes": 30,
+    "comment": 4,
+    "text": "#chromedevelopersummit",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/9fe5e566f6a2f052e00d93f5946573f2/5B6CF364/t51.2885-15/s1080x1080/e15/fr/22639107_756415651233391_8439041434429947904_n.jpg",
+    "image": "images/Bam3G5XFOTK.jpg",
+    "username": "kyle__mathews",
+    "avatar": "https://instagram.fslc1-1.fna.fbcdn.net/vp/246e4edea83e0f4a9d3684039f23c76b/5B6BE9DA/t51.2885-19/11373674_1480574918906897_270256414_a.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "191827b71a99554aa6ccbfe83600fa86",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "1601601194425654597",
+    "code": "BY6B8z5lR1F",
+    "time": "2017-09-11T16:02:42.000Z",
+    "type": "GraphImage",
+    "likes": 9,
+    "comment": 0,
+    "text": "Jaffa, Israel",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/f8a655a6b9e098ef746f214e428519de/5B634421/t51.2885-15/e35/21576632_732996816885233_1499694509796098048_n.jpg",
+    "image": "images/BY6B8z5lR1F.jpg",
+    "username": "kyle__mathews",
+    "avatar": "https://instagram.fslc1-1.fna.fbcdn.net/vp/246e4edea83e0f4a9d3684039f23c76b/5B6BE9DA/t51.2885-19/11373674_1480574918906897_270256414_a.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "ad9af8f232a5bc845b9392d37d76fcd5",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "1601530617317009166",
+    "code": "BY5x5x2F6cO",
+    "time": "2017-09-11T13:42:28.000Z",
+    "type": "GraphImage",
+    "likes": 28,
+    "comment": 5,
+    "text": "A real life Willy Wonka",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/3bc6679049dad0943ec35fddeceded1c/5B5A3CC6/t51.2885-15/e35/21436024_558002044536606_410562662628327424_n.jpg",
+    "image": "images/BY5x5x2F6cO.jpg",
+    "username": "kyle__mathews",
+    "avatar": "https://instagram.fslc1-1.fna.fbcdn.net/vp/246e4edea83e0f4a9d3684039f23c76b/5B6BE9DA/t51.2885-19/11373674_1480574918906897_270256414_a.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "8076e2f5ba3d60eee116f9f63305e30a",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "1565766376903475329",
+    "code": "BW6uDlYlQCB",
+    "time": "2017-07-24T05:25:19.000Z",
+    "type": "GraphImage",
+    "likes": 27,
+    "comment": 4,
+    "text": "Be that one sandstone rock on the seashore amongst the 1000s of steel gray basalt rocks",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/f6a2224e3d487077d05236e18fc3f828/5B534A95/t51.2885-15/e35/20213921_501593333518668_2100867941279989760_n.jpg",
+    "image": "images/BW6uDlYlQCB.jpg",
+    "username": "kyle__mathews",
+    "avatar": "https://instagram.fslc1-1.fna.fbcdn.net/vp/246e4edea83e0f4a9d3684039f23c76b/5B6BE9DA/t51.2885-19/11373674_1480574918906897_270256414_a.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "09bb5897974cc7440fd72a9806d30004",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "1515268510112420213",
+    "code": "BUHUK6ElhF1",
+    "time": "2017-05-15T13:15:04.000Z",
+    "type": "GraphImage",
+    "likes": 25,
+    "comment": 3,
+    "text": "Stockholm might be my new favorite city",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/d18ce4068dfa63b549ac14094bb97fdb/5B5E1699/t51.2885-15/e35/18513840_1901390483461632_2937117302379773952_n.jpg",
+    "image": "images/BUHUK6ElhF1.jpg",
+    "username": "kyle__mathews",
+    "avatar": "https://instagram.fslc1-1.fna.fbcdn.net/vp/246e4edea83e0f4a9d3684039f23c76b/5B6BE9DA/t51.2885-19/11373674_1480574918906897_270256414_a.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "025aa9404eae8db92204f913ee2bfd77",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "1486495736706552111",
+    "code": "BShF_8qhtEv",
+    "time": "2017-04-05T20:28:42.000Z",
+    "type": "GraphImage",
+    "likes": 8,
+    "comment": 0,
+    "text": "\"EXTRODINARY fresh mustards\". This is where they're at folks",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/9ad5a7f1ebead61388662f1e6824067f/5B592AA0/t51.2885-15/e35/17663748_1153852971404500_7070241507587915776_n.jpg",
+    "image": "images/BShF_8qhtEv.jpg",
+    "username": "kyle__mathews",
+    "avatar": "https://instagram.fslc1-1.fna.fbcdn.net/vp/246e4edea83e0f4a9d3684039f23c76b/5B6BE9DA/t51.2885-19/11373674_1480574918906897_270256414_a.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "20a6cc1f628e4c5c2003a0931e314754",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "1483463111452464830",
+    "code": "BSWUdcThRa-",
+    "time": "2017-04-01T16:03:25.000Z",
+    "type": "GraphImage",
+    "likes": 23,
+    "comment": 2,
+    "text": "Third city on my east coast swing. First New Orleans, then DC, and now Philly.",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/407a3c9b5efdb77c0f77135cccb08612/5B69631A/t51.2885-15/e35/17662854_1280815928623035_937926441180332032_n.jpg",
+    "image": "images/BSWUdcThRa-.jpg",
+    "username": "kyle__mathews",
+    "avatar": "https://instagram.fslc1-1.fna.fbcdn.net/vp/246e4edea83e0f4a9d3684039f23c76b/5B6BE9DA/t51.2885-19/11373674_1480574918906897_270256414_a.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "e5f2b018f4cdadd71b22be7e705640c3",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "1478435327902728655",
+    "code": "BSEdRj_B8HP",
+    "time": "2017-03-25T17:34:06.000Z",
+    "type": "GraphImage",
+    "likes": 20,
+    "comment": 1,
+    "text": "Raining and almost 80 degrees in New Orleans French Quarter",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/4ed741dd0c523a7bebce11a760271b77/5B4EF4B9/t51.2885-15/e35/17494792_1133907666737199_1768011540662845440_n.jpg",
+    "image": "images/BSEdRj_B8HP.jpg",
+    "username": "kyle__mathews",
+    "avatar": "https://instagram.fslc1-1.fna.fbcdn.net/vp/246e4edea83e0f4a9d3684039f23c76b/5B6BE9DA/t51.2885-19/11373674_1480574918906897_270256414_a.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "5fdfa8f146d5fe7a11f0a3429746d9e2",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "1360516742464695325",
+    "code": "BLhhsTZlGwd",
+    "time": "2016-10-14T00:50:56.000Z",
+    "type": "GraphImage",
+    "likes": 15,
+    "comment": 0,
+    "text": "Hey San Francisco ❤️",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/987105bfff21fd4e32ae59cbbfc32ad7/5B69748B/t51.2885-15/e35/14693758_1766411793613440_7185291805863182336_n.jpg",
+    "image": "images/BLhhsTZlGwd.jpg",
+    "username": "kyle__mathews",
+    "avatar": "https://instagram.fslc1-1.fna.fbcdn.net/vp/246e4edea83e0f4a9d3684039f23c76b/5B6BE9DA/t51.2885-19/11373674_1480574918906897_270256414_a.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "272676b395e04493f3ec8ad0a5e8d5b4",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "1346779149175505545",
+    "code": "BKwuIApgkKJ",
+    "time": "2016-09-25T01:56:47.000Z",
+    "type": "GraphImage",
+    "likes": 19,
+    "comment": 1,
+    "text": "Timed my run nicely",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/7aac4ca6f8724c7f17d3750f2f91f76e/5B6D1AB8/t51.2885-15/e35/14360137_1696760950649699_2816603071264587776_n.jpg",
+    "image": "images/BKwuIApgkKJ.jpg",
+    "username": "kyle__mathews",
+    "avatar": "https://instagram.fslc1-1.fna.fbcdn.net/vp/246e4edea83e0f4a9d3684039f23c76b/5B6BE9DA/t51.2885-19/11373674_1480574918906897_270256414_a.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "74740253e344b25e58fd25ef0aa9842d",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "1270677182602272387",
+    "code": "BGiWipNM96D",
+    "time": "2016-06-12T01:55:45.000Z",
+    "type": "GraphImage",
+    "comment": 1,
+    "text": "Sitting in setting sun on bernal hill equals heaven",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/ea01ec98e75c750c70ef5c96000c7e3e/5B57DE7B/t51.2885-15/e35/13398891_954318571333512_2037518487_n.jpg",
+    "image": "images/BGiWipNM96D.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "2561937366e98c0b4c7bf37e3f14128f",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "1256134251849702933",
+    "code": "BFur3Jfs94V",
+    "time": "2016-05-23T00:21:33.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "I built this!",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/d9bf60c8145d9b2c5a3b3b6afc9c35a2/5B5B00DE/t51.2885-15/e35/13116581_508808719302533_932557327_n.jpg",
+    "image": "images/BFur3Jfs94V.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "a0e0dceda381c62d3375d71682307524",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "1232199266021400176",
+    "code": "BEZprQ3s95w",
+    "time": "2016-04-19T23:47:00.000Z",
+    "type": "GraphImage",
+    "comment": 1,
+    "text": "Hi Chicago",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/e17f2981cedb3deb2a9cc3b8949d007a/5B72F4CE/t51.2885-15/e35/12918518_1607204502935928_1750163314_n.jpg",
+    "image": "images/BEZprQ3s95w.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "fbb62afd2858a94ad08e9ab79caf348e",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "1192421294565743753",
+    "code": "BCMVNmFM9yJ",
+    "time": "2016-02-25T02:35:17.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "Fading embers",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/6dfc8f4a00e43e51031c0b4dbb176c48/5B500790/t51.2885-15/e35/12729578_238604273139219_1437358774_n.jpg",
+    "image": "images/BCMVNmFM9yJ.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "6aee8a0fbeedbbccc348225f7d9acf02",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "1179335444856560759",
+    "code": "BBd11a1s9x3",
+    "time": "2016-02-07T01:16:02.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "Mt. Sutro",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/06d71a2984f051924a0bfb2e17835929/5B6134AA/t51.2885-15/e35/12677693_186899455005435_855017645_n.jpg",
+    "image": "images/BBd11a1s9x3.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "0d33c243437095f6c64e03adb904cea6",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "1093024552502680593",
+    "code": "8rNAoWs9wR",
+    "time": "2015-10-10T23:11:42.000Z",
+    "type": "GraphImage",
+    "comment": 1,
+    "text": "Marina SF",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/3194fb38fa43f512a8944ebfb8fac2d0/5B6E4AE5/t51.2885-15/e35/12139643_879198768830916_1627002305_n.jpg",
+    "image": "images/8rNAoWs9wR.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "e2b25559150a12cd4a56f08e75a12ff1",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "1082958063116475674",
+    "code": "8HcJ7is90a",
+    "time": "2015-09-27T01:51:22.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "Twin Peaks SF",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/b1ef729363fde6aa1e080a8d185280bd/5B5455B3/t51.2885-15/e35/10576216_693388384130914_1470225115_n.jpg",
+    "image": "images/8HcJ7is90a.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "ce41a2dfa189ec7784009b62e08bfd64",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "1072104297123274725",
+    "code": "7g4S2QM9_l",
+    "time": "2015-09-12T02:26:53.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "Sunset SF Sunset",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/854e0392d412d89cea7d5c3d65dc673a/5B5EE46B/t51.2885-15/e35/11909961_477080385804619_1729162928_n.jpg",
+    "image": "images/7g4S2QM9_l.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "38dc51b6e95c67060f2cca56275e31de",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "1050382401524719413",
+    "code": "6TtTqhM981",
+    "time": "2015-08-13T03:09:21.000Z",
+    "type": "GraphImage",
+    "comment": 1,
+    "text": "San Francisco sure is lovely",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/9ccdd7eb4131f67cf38fd2a8e59edc52/5B4FD300/t51.2885-15/e35/11850254_1706767189554247_167276454_n.jpg",
+    "image": "images/6TtTqhM981.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "ca37dca38e8ca369591c409cf3a78340",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "1047380412691897508",
+    "code": "6JCu-jM9yk",
+    "time": "2015-08-08T23:44:56.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "Foggy hike",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/9ee75f370357be6e8ca622e5d2e745b8/5B6DF60D/t51.2885-15/e35/11356873_1471238179865005_292092201_n.jpg",
+    "image": "images/6JCu-jM9yk.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "6f35f32dfe404242a815c7777c88cb9f",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "1019954573251698010",
+    "code": "4nm0fJs91a",
+    "time": "2015-07-02T03:34:41.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "Foggy evening run",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/a05ebe1be1d5293f3d22f2dd46884b17/5B55F621/t51.2885-15/e35/11380117_1465341190444968_380349894_n.jpg",
+    "image": "images/4nm0fJs91a.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "c721f3644bbc90481ac360d831ab4045",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "1011212316101041196",
+    "code": "4IjD5ts9ws",
+    "time": "2015-06-20T02:05:23.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "A container food truck!",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/947b809c85196d898f1796f62791bda3/5B6E9A46/t51.2885-15/e15/11335072_1868600436697712_1490794057_n.jpg",
+    "image": "images/4IjD5ts9ws.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "6aae7d5976f825534e1a9f31ef27729a",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "1001206739996237060",
+    "code": "3lADm0M90E",
+    "time": "2015-06-06T06:46:05.000Z",
+    "type": "GraphImage",
+    "comment": 2,
+    "text": "National donut day @colonial donuts in Oakland",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/9b9e68af7bc4b6d33731369a5bc7505e/5B57666A/t51.2885-15/e15/11430188_100848140257178_1391253248_n.jpg",
+    "image": "images/3lADm0M90E.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "f560c3b9267aeecfb9d85ecbad6fe626",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "996585130438155443",
+    "code": "3UlOVgM9yz",
+    "time": "2015-05-30T21:43:47.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "Chilling on the bow",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/d45818c8846b97aded73117c4fb6f48a/5B60A518/t51.2885-15/e15/11381438_1617144825194647_1827846331_n.jpg",
+    "image": "images/3UlOVgM9yz.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "c9e8989a8b1483abf221f77c1d79c95b",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "976313048697659257",
+    "code": "2Mj4uJM995",
+    "time": "2015-05-02T22:26:46.000Z",
+    "type": "GraphImage",
+    "comment": 1,
+    "text": "Stumbled into a first row seat at the Giants game",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/08dcad15c511f057cb96ab98a715022c/5B6A8FDF/t51.2885-15/e15/11201673_643314849146572_717884664_n.jpg",
+    "image": "images/2Mj4uJM995.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "98e7f86d4d4305fd0f57f644833b0dbb",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "973323047219223582",
+    "code": "2B8CeRM9we",
+    "time": "2015-04-28T19:26:10.000Z",
+    "type": "GraphImage",
+    "comment": 3,
+    "text": "Home sweet home",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/0acf9f5c234f8da3ae634eda01a755cf/5B4F60C2/t51.2885-15/e15/11191126_1611820855722488_427066186_n.jpg",
+    "image": "images/2B8CeRM9we.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "e52c659446296f7021775debc56b7866",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "811160600493415566",
+    "code": "tB0kS4M9yO",
+    "time": "2014-09-17T01:38:20.000Z",
+    "type": "GraphImage",
+    "comment": 1,
+    "text": "@lindawatkins has a nice view it turns out",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/5e3321355aa71e6e7734a929e123bc5a/5B4EBF16/t51.2885-15/e15/923785_298030550384778_1748260542_n.jpg",
+    "image": "images/tB0kS4M9yO.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "a8e9a343cc87225a5c5ab58af3de5232",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "811160112838466685",
+    "code": "tB0dMts9x9",
+    "time": "2014-09-17T01:37:22.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "Post-nap grumpy face",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/1a4161bc53d36ce89f56a6f83287805a/5B5EA75E/t51.2885-15/e15/10706977_294380270767284_1824123800_n.jpg",
+    "image": "images/tB0dMts9x9.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "997d7778b565fd3d4fe71aea79050324",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "800034649663593593",
+    "code": "saS0ZtM9x5",
+    "time": "2014-09-01T17:13:03.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "Mesa Falls, Idaho",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/54d9ece83be631877aa7a85c3bb5d55d/5B59A1F7/t51.2885-15/e15/10666270_686048818144270_157152842_n.jpg",
+    "image": "images/saS0ZtM9x5.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "7669002b4311ddbbb70455cbceff36ff",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "783599315140730647",
+    "code": "rf52zpM98X",
+    "time": "2014-08-10T00:58:59.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "Marin headlands",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/55012667fb9bfe1f81f52dec7292369f/5B756974/t51.2885-15/e15/10607937_618465764934873_1365604485_n.jpg",
+    "image": "images/rf52zpM98X.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "5ba62bb3665376f3a13b014631274cd3",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "734060454761192929",
+    "code": "ov6Bgps93h",
+    "time": "2014-06-02T16:34:07.000Z",
+    "type": "GraphImage",
+    "comment": 1,
+    "text": "Packard plant",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/633f600222c3feefeeeaee56f29569d5/5B549AA2/t51.2885-15/e15/10369443_706391792754842_1488217259_n.jpg",
+    "image": "images/ov6Bgps93h.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "2558652b6f718313bacd8a2beadfa26d",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "734060430375509472",
+    "code": "ov6BJ8M93g",
+    "time": "2014-06-02T16:34:04.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "Hanging out in Detroit",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/ae72c5071ebb299c1b1f2b83b513b383/5B58069D/t51.2885-15/e15/926200_533478630112183_770870098_n.jpg",
+    "image": "images/ov6BJ8M93g.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "acfddcb9b456c0968074baab00a11918",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "734060413657013727",
+    "code": "ov6A6Xs93f",
+    "time": "2014-06-02T16:34:02.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "Heidelberg project",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/abff6cb7fb30029a20549619bf176d45/5B688B9F/t51.2885-15/e15/10431984_255514737968206_819303614_n.jpg",
+    "image": "images/ov6A6Xs93f.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "28adf6897bcd7f87291e6821b4a6047c",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "732757276941868346",
+    "code": "orRtxus906",
+    "time": "2014-05-31T21:24:56.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "#sammarrieslaura",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/d7d81bc5ca23e7d46c3748b13a84da84/5B6EAE49/t51.2885-15/e15/10349344_1494462330766381_2076888008_n.jpg",
+    "image": "images/orRtxus906.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "b888754aa2581e2801c65ee00780ef84",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "732747494080109637",
+    "code": "orPfaus9xF",
+    "time": "2014-05-31T21:05:29.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "#sammarrieslaura",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/3f2574e1f6879288ee4d0ba5f5bcbe38/5B62F747/t51.2885-15/e15/10401555_685955498137974_1036632050_n.jpg",
+    "image": "images/orPfaus9xF.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "74f4125fae29836fb1ed976f8dda3a1a",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "732734464004972239",
+    "code": "orMhzhs97P",
+    "time": "2014-05-31T20:39:36.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "#sammarrieslaura",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/6105c9a2f262e58b47639be213cc0a51/5B6058C1/t51.2885-15/e15/10362260_1492310504316697_181712081_n.jpg",
+    "image": "images/orMhzhs97P.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "337e1f8128f5ed02b8dc97f62d34da22",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "732606339090734326",
+    "code": "oqvZV5s9z2",
+    "time": "2014-05-31T16:25:02.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "#sammarrieslaura",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/46071011e9682d40e750bad67a04af21/5B739248/t51.2885-15/e15/10358344_658003337606852_1782453008_n.jpg",
+    "image": "images/oqvZV5s9z2.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "ae09ed151da184457ad4aea3de91b787",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "732532731974770038",
+    "code": "oqeqN7s912",
+    "time": "2014-05-31T13:58:48.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "#sammarrieslaura",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/d61f1d95fc48f17fd5d6dd873e6b8aba/5B681A06/t51.2885-15/e15/926760_1436717873249933_2076253966_n.jpg",
+    "image": "images/oqeqN7s912.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "400269b74c80c08bc7bf8aa2e6e56445",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "732520051645864977",
+    "code": "oqbxsdM9wR",
+    "time": "2014-05-31T13:33:36.000Z",
+    "type": "GraphImage",
+    "comment": 1,
+    "text": "#sammarrieslaura",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/e2d65068105688c985cc3659a64f8f20/5B5F182C/t51.2885-15/e15/10358298_398846293587168_846099988_n.jpg",
+    "image": "images/oqbxsdM9wR.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "dd5f37bb243b623e1464f7ed341c741c",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "732518754003705841",
+    "code": "oqbez7s9_x",
+    "time": "2014-05-31T13:31:01.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "#sammarrieslaura",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/57285e1a20bd61c1222c399f94b9444f/5B69B218/t51.2885-15/e15/923987_240684122793934_1971044527_n.jpg",
+    "image": "images/oqbez7s9_x.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "7eee294a8bba3adbd6c360244bde5f44",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "723243022496816380",
+    "code": "oJebJyM9z8",
+    "time": "2014-05-18T18:21:48.000Z",
+    "type": "GraphImage",
+    "comment": 2,
+    "text": "Church selfie",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/9d6b26b49cbd79a2043a2f29aa98d001/5B59736F/t51.2885-15/e15/10311024_1400448496908952_1429408879_n.jpg",
+    "image": "images/oJebJyM9z8.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "43db3fd7c3666d8abce3d86dad9fc19d",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "722040340713037050",
+    "code": "oFM91Fs9z6",
+    "time": "2014-05-17T02:32:17.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "Sun's goin' down",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/a8e5abccdf55b0d742d290579bef4193/5B60A2CE/t51.2885-15/e15/10349758_698597846853765_308306429_n.jpg",
+    "image": "images/oFM91Fs9z6.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "4e7f0dec517248d643f2ace2ba8160b8",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "709713470394982233",
+    "code": "nZaKQfM99Z",
+    "time": "2014-04-30T02:21:00.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "Walking home",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/ddb3ad773640fd1daafc97188bec700d/5B5235BF/t51.2885-15/e15/10311263_1500571720162241_488304399_n.jpg",
+    "image": "images/nZaKQfM99Z.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "227e618ffb655aa0a392d7ee4b000da8",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "707264656279068376",
+    "code": "nQtXUns97Y",
+    "time": "2014-04-26T17:15:38.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/54571cb935dc3ad768aa60bf3b04530a/5B65827F/t51.2885-15/e15/10311311_269172509930751_401381103_n.jpg",
+    "image": "images/nQtXUns97Y.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "d20e6be81dcf0f09274d4e8ada78e178",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "695949453427990223",
+    "code": "moglcxM97P",
+    "time": "2014-04-11T02:34:21.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "Sunset living up to its foggy reputation",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/35fe72f0a4b9c7f609577108a09e256f/5B5F2C05/t51.2885-15/e15/914285_232024907001450_989329933_n.jpg",
+    "image": "images/moglcxM97P.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "26a05ceafec3db7cc53010fb413cec12",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "695178098877128227",
+    "code": "mlxMw3M94j",
+    "time": "2014-04-10T01:01:48.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "Foggy day #sf #oceanbeach #sutroheights",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/8247a6445d997ba91a00ecd8001ac1ca/5B75A623/t51.2885-15/e15/10246211_524667710977688_1539466318_n.jpg",
+    "image": "images/mlxMw3M94j.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "0c50495b8b39e3849db211bb60058749",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "682173039289556382",
+    "code": "l3kMPSM92e",
+    "time": "2014-03-23T02:23:05.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "#sf #sunset",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/c1bd5a5fdf503ab32c50448420127bdd/5B607D73/t51.2885-15/e15/11356983_996659560368958_1802776196_n.jpg",
+    "image": "images/l3kMPSM92e.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "b55655ffb8e7d6791137eb210e0f3f5d",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "680440398655774583",
+    "code": "lxaO_8s993",
+    "time": "2014-03-20T17:00:38.000Z",
+    "type": "GraphImage",
+    "comment": 2,
+    "text": "Working @ Harvard Square",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/3b896841cf57425c5f93db5b070b4c4d/5B68259E/t51.2885-15/e15/11428164_1624154427831330_53333732_n.jpg",
+    "image": "images/lxaO_8s993.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "d279180ed8b01c0eb4dd0a35cdcfd256",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "679681270014532918",
+    "code": "lutoOTs902",
+    "time": "2014-03-19T15:52:23.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "At the zoo... or Antarctica",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/d1b89fdbd53df37cf8de44dddb5dd680/5B65CC41/t51.2885-15/e15/11326269_936340726413259_1952229238_n.jpg",
+    "image": "images/lutoOTs902.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "96598af110cd320a145f6a70aa9512b4",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "673465739406204031",
+    "code": "lYoYWVs9x_",
+    "time": "2014-03-11T02:03:14.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "Biking home part 3 #sunset #sf",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/079528f8619b9843e6c4a3ca67b91f31/5B6FCDE0/t51.2885-15/e15/11325187_848471188533323_2115425970_n.jpg",
+    "image": "images/lYoYWVs9x_.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "d6e242f3564cbcd39d15444333269897",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "673461065357712415",
+    "code": "lYnUVSs9wf",
+    "time": "2014-03-11T01:53:56.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "Biking home part 2 #sf",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/303ca7292440bdacc8b84142a878b586/5B5153C1/t51.2885-15/e15/11355064_705393262905534_598512475_n.jpg",
+    "image": "images/lYnUVSs9wf.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "67cea016551b2bee3587e4275cee2fd2",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "673457707733475299",
+    "code": "lYmjeQs9_j",
+    "time": "2014-03-11T01:47:16.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "Biking home #sf",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/f27efc0f6ccd091e8838d3a5345ca484/5B514318/t51.2885-15/e15/11334479_1440365799601549_1338616584_n.jpg",
+    "image": "images/lYmjeQs9_j.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "f3221e661229748d58f685188cf3f257",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "665350447119457524",
+    "code": "k7zLTbs9z0",
+    "time": "2014-02-27T21:19:35.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "Dental office #justacleaning #ihope",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/9816e1c6b263b0f7fb9e973bc03ad25d/5B5E59F5/t51.2885-15/e15/1740870_1440791909490171_933390768_n.jpg",
+    "image": "images/k7zLTbs9z0.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "6528d0561579af9828f10aaca6eb5078",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "650011560209800782",
+    "code": "kFThHyM95O",
+    "time": "2014-02-06T17:23:58.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "Rainy San Francisco",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/cf0b44c2e80195f089187f94cb629a12/5B6D4DAA/t51.2885-15/e15/1169989_1439666386267479_1805701176_n.jpg",
+    "image": "images/kFThHyM95O.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "249bc7df565c78c8910becb44ab2b9e5",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "640022460883001336",
+    "code": "jh0QmFM9_4",
+    "time": "2014-01-23T22:37:24.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "Pastrami sandwich",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/4eab26c9c3d87afa707e13bf16056941/5B5514C4/t51.2885-15/e15/1516553_267682393389152_1988116567_n.jpg",
+    "image": "images/jh0QmFM9_4.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "f3d302df76fb15ec23985a4bcd4b61bd",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "636409258827833279",
+    "code": "jU-tlcM9-_",
+    "time": "2014-01-18T22:58:37.000Z",
+    "type": "GraphImage",
+    "comment": 2,
+    "text": "Spring!",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/18dc590d1c612944d7c8f1bcb81883ff/5B75ECE7/t51.2885-15/e15/927542_1382940688632822_791314040_n.jpg",
+    "image": "images/jU-tlcM9-_.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "e8fe9001a2e9bc4a43c2ebb9d9018c81",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "635682624046882725",
+    "code": "jSZfqEM9-l",
+    "time": "2014-01-17T22:54:55.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "San Francisco Market Street",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/02934ed9118c8bd71c57d09fc974d2a0/5B6BA088/t51.2885-15/e15/1599918_671503232900660_321825947_n.jpg",
+    "image": "images/jSZfqEM9-l.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "b3228e7ac396a07c88a3adf2f1789e43",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "633544903908122621",
+    "code": "jKzbvCs9_9",
+    "time": "2014-01-15T00:07:39.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "Looking back at snowshoe prints. #latergram #lehi",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/0ffc689b7b7bba13a1df5f3ed881e6b7/5B5CDB2A/t51.2885-15/e15/1516230_1415533748685929_1687508360_n.jpg",
+    "image": "images/jKzbvCs9_9.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "657b4b0110875e90448c914bfcd6995b",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "633500736435772673",
+    "code": "jKpZA4M90B",
+    "time": "2014-01-14T22:39:54.000Z",
+    "type": "GraphImage",
+    "comment": 8,
+    "text": "Purple cauliflower for lunch",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/09cf42c92f01d27be93085d1f182744a/5B6A01F0/t51.2885-15/e15/1517107_1396777213909061_1781415780_n.jpg",
+    "image": "images/jKpZA4M90B.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "fee282f4d2c4f70d98f323b739a56ac5",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "632772965954739789",
+    "code": "jID6jzM95N",
+    "time": "2014-01-13T22:33:57.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "Startup in SF means lots of bikes. #pantheon",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/032fc0b5f49b8b60341f1db2d01b1136/5B5DB15A/t51.2885-15/e15/11352438_848263221895300_847311871_n.jpg",
+    "image": "images/jID6jzM95N.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "35e43c6b176dd89c086f40a99f77585a",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "620418901388549762",
+    "code": "icK7QlM96C",
+    "time": "2013-12-27T21:28:38.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "Big Cottonwood. Returning from sledding with the fam",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/b5302b1d3865748ea21785566d5ecaae/5B720094/t51.2885-15/e15/924517_609921485721994_568440563_n.jpg",
+    "image": "images/icK7QlM96C.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "0ae9805d17b8fe5b04dc8638697b19c1",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "617411858855616370",
+    "code": "iRfNB_M99y",
+    "time": "2013-12-23T17:54:10.000Z",
+    "type": "GraphImage",
+    "comment": 2,
+    "text": "Riding Amtrak to Utah for Xmas.",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/0670af47e2120b2175fad647f3ced146/5B5834D3/t51.2885-15/e15/1517156_429536667173077_325353637_n.jpg",
+    "image": "images/iRfNB_M99y.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "4887af8efd2f55c4813460c20073d0e1",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "613426420792942449",
+    "code": "iDVBRjM99x",
+    "time": "2013-12-18T05:55:49.000Z",
+    "type": "GraphImage",
+    "comment": 10,
+    "text": "Late night Caltrain",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/2d2c9cbf77e99f90fee61e203e4efa0b/5B6BCDDF/t51.2885-15/e15/1515130_468120576642411_769132317_n.jpg",
+    "image": "images/iDVBRjM99x.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "1ffaa19025a256220599c2470a8f2d28",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "611758039731788991",
+    "code": "h9ZrIms9y_",
+    "time": "2013-12-15T22:41:03.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "Had to do it once this season",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/989e9a5961dcbd0bc06fb6d15c9e32d5/5B75DE27/t51.2885-15/e15/1516240_571823206220538_1940906009_n.jpg",
+    "image": "images/h9ZrIms9y_.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "50b96df61e0acd989a102b83ee1bc02a",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "607214368319594481",
+    "code": "htQkA2M9_x",
+    "time": "2013-12-09T16:13:35.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "Chilly morning at the train station (29)",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/c0b08dccb507dd052b04bf67fa798b9e/5B521782/t51.2885-15/e15/1169200_564665890270989_1774286305_n.jpg",
+    "image": "images/htQkA2M9_x.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "f17c4535f057c37012ecce5bb5a08d4a",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "603923376229310167",
+    "code": "hhkRxns97X",
+    "time": "2013-12-05T03:14:58.000Z",
+    "type": "GraphImage",
+    "comment": 2,
+    "text": "The Sound of Music Sing-A-Long @ Castro Theater SF",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/e84f87c0d581c0eb95534175d401ba16/5B5BD42A/t51.2885-15/e15/1169082_237261336450291_650902315_n.jpg",
+    "image": "images/hhkRxns97X.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "17deaa1a920ab4f31600fbd5f86b7ddc",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "602898508977266473",
+    "code": "hd7P_nM98p",
+    "time": "2013-12-03T17:18:44.000Z",
+    "type": "GraphImage",
+    "comment": 4,
+    "text": "California \"winter\"",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/4fda47034918104d08269cbee1cf35b5/5B5EDC6C/t51.2885-15/e15/1169297_1429416893941620_574489476_n.jpg",
+    "image": "images/hd7P_nM98p.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "ed1290eac4e8c572abdbfc00376c7a1c",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "599599505648902132",
+    "code": "hSNJLVs9_0",
+    "time": "2013-11-29T04:04:12.000Z",
+    "type": "GraphImage",
+    "comment": 2,
+    "text": "South Provo Utah",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/0259fc516e0ed19f7c8d32b6438c462e/5B6AB9C1/t51.2885-15/e15/1171720_179135252280992_675162948_n.jpg",
+    "image": "images/hSNJLVs9_0.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "dbc43a19c8544b2a39965e63276f9127",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "597507196258082479",
+    "code": "hKxaEXs96v",
+    "time": "2013-11-26T06:47:10.000Z",
+    "type": "GraphImage",
+    "comment": 1,
+    "text": "Making cranapplesauce",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/5d0c1445c2cf0980f7b5726f43364af4/5B6574C4/t51.2885-15/e15/1389996_372744932872165_779748358_n.jpg",
+    "image": "images/hKxaEXs96v.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "9e090168b339dbbc587dd4dd35c0c0e4",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "596440361295142025",
+    "code": "hG-1k4s9yJ",
+    "time": "2013-11-24T19:27:33.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "Hiking above Orem Utah yesterday",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/3a6879c088d40987a250cc84c8d073ab/5B5C0B1F/t51.2885-15/e15/1169694_662818783763068_581767053_n.jpg",
+    "image": "images/hG-1k4s9yJ.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "d8a88d492b681d8f8903ab9ba5369375",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "587804514970754664",
+    "code": "goTReQM95o",
+    "time": "2013-11-12T21:29:40.000Z",
+    "type": "GraphImage",
+    "comment": 2,
+    "text": "1 Market St San Francisco",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/69fff87578918e05ed0f32717abab08f/5B53ADD6/t51.2885-15/e15/924793_180271615509067_1687415809_n.jpg",
+    "image": "images/goTReQM95o.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "69a4e15154bef984330afad1e38b59e4",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "584320489442499989",
+    "code": "gb7GOoM92V",
+    "time": "2013-11-08T02:07:32.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "Crazy crowded as normal on Caltrain",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/07c0f37106934883385d410b592a39f4/5B751BE4/t51.2885-15/e15/915632_1435901739962475_486322309_n.jpg",
+    "image": "images/gb7GOoM92V.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "1166bd7a5a08d5440da114f57611dec1",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "529876495778438153",
+    "code": "daf92Rs9wJ",
+    "time": "2013-08-24T23:17:02.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "Friend bought a durian shake. We had to \"quarantine\" it in the plastic bag as the smell was making us all feel nauseous.",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/4d30e0b9f6074aad98092823eaf2c23f/5B7605DE/t51.2885-15/e15/11378426_466336863534615_1547307167_n.jpg",
+    "image": "images/daf92Rs9wJ.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "154dc54f525faf7181ec3e1bafbb2180",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "529863260585057945",
+    "code": "dac9QCs96Z",
+    "time": "2013-08-24T22:50:44.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "Alien abduction. Or sunlit patch in a cave.",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/038572c2d4b53447658c681ce73debf7/5B54793D/t51.2885-15/e15/11313247_900827439960757_1617982516_n.jpg",
+    "image": "images/dac9QCs96Z.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "712394226d107aabc27946792348d7ca",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "528199217793195914",
+    "code": "dUimPbM9-K",
+    "time": "2013-08-22T15:44:35.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "The Swiss say happy cows are key to their delicious cheese and chocolate",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/46fdca6495bf36fb778ed0de95e7b073/5B6D4923/t51.2885-15/e15/11274412_962531207101572_1996053268_n.jpg",
+    "image": "images/dUimPbM9-K.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "71dcd4e24b4cead7bfb580201c8cf4ca",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "528198485736152948",
+    "code": "dUiblpM990",
+    "time": "2013-08-22T15:43:07.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "Lausanne Switzerland #latergram",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/3dd47ec65762b2f360e56a88f13a83b9/5B6CAA1E/t51.2885-15/e15/11380991_1604775013138554_1975699581_n.jpg",
+    "image": "images/dUiblpM990.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "da6eb1876ec725c65c49774a0b1cfeb4",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "528197163355987780",
+    "code": "dUiIWFM99E",
+    "time": "2013-08-22T15:40:30.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "Zurich #latergram",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/df69631309e8bf866ec2f3460154bc02/5B75F790/t51.2885-15/e15/11287787_659815724150301_2060472739_n.jpg",
+    "image": "images/dUiIWFM99E.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "bbc52f0f23f1405040168e466ff18764",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "523176638502133365",
+    "code": "dCsmF8s951",
+    "time": "2013-08-15T17:25:37.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "Salzburg the beautiful",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/577140fb44ffbec33cda743aecac9ef1/5B52D016/t51.2885-15/e15/11386498_833081943412682_1392111115_n.jpg",
+    "image": "images/dCsmF8s951.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "5faddd1d6677061bfa2462643cd3b08f",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "515988147267690192",
+    "code": "cpKHxyM97Q",
+    "time": "2013-08-05T19:23:22.000Z",
+    "type": "GraphImage",
+    "comment": 1,
+    "text": "That's THREE iconic London sites in one picture. I try to be efficient.",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/f0fd747eba27dc230579790e140ad26a/5B733898/t51.2885-15/e15/11353113_1607832536141844_2018928172_n.jpg",
+    "image": "images/cpKHxyM97Q.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "8949e52cbe51c71ce17bedc6314f6fe5",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "514154189823401179",
+    "code": "cipIL0M9zb",
+    "time": "2013-08-03T06:39:37.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "I guess I didn't look too sketchy",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/24f55f20e94da06a11a9df1de14481a9/5B627E24/t51.2885-15/e15/11311410_752535601559991_1024538760_n.jpg",
+    "image": "images/cipIL0M9zb.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "fc5b7b3d6fbb12041482a8b3432b3479",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "493743881078431577",
+    "code": "baIXGhs99Z",
+    "time": "2013-07-06T02:47:59.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "Baseballing",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/c1c60b0530a57543170893c3df50a3e5/5B52E33C/t51.2885-15/e15/11355159_1450771905223070_219338865_n.jpg",
+    "image": "images/baIXGhs99Z.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "314b1ca1294cfab8983331aca910f54c",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "491519698525216526",
+    "code": "bSOo_Gs98O",
+    "time": "2013-07-03T01:08:55.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "Trying on some Google Glasses",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/56d3da2d10e469e6d95d01345cea8923/5B6423E0/t51.2885-15/e15/11376229_382586481941409_228274495_n.jpg",
+    "image": "images/bSOo_Gs98O.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "7c02248b1aa7a3e6fb5fc1a31b5c3d2e",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "474753551234752325",
+    "code": "aWqdbpM99F",
+    "time": "2013-06-09T21:57:35.000Z",
+    "type": "GraphImage",
+    "comment": 1,
+    "text": "Listening to @lindawatkins and the Symphony Parnassus",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/58033eafe8b9a94bdfd2124c394cd8d2/5B62536D/t51.2885-15/e15/11381478_752996551464700_2020946164_n.jpg",
+    "image": "images/aWqdbpM99F.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "4833d20f75b3b0f8722db5c97a5be3f6",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "465165262878137499",
+    "code": "Z0mVePs9yb",
+    "time": "2013-05-27T16:27:22.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "Reminds me of a certain poem",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/de49eb83176e3fd8742a107ba91b48a7/5B5F6ED5/t51.2885-15/e15/11282186_1641815769384247_553838929_n.jpg",
+    "image": "images/Z0mVePs9yb.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "e0f7bfda405577f0ff2cfe45150657f2",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "463285372889325235",
+    "code": "Zt65eQs96z",
+    "time": "2013-05-25T02:12:21.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "Me and the sky",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/e20145472e816b01dc541c7ec9ff61fe/5B5B4482/t51.2885-15/e15/11312119_471864216296568_947475813_n.jpg",
+    "image": "images/Zt65eQs96z.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "76032d0d5fe7f4828eb23659f36663f6",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "463283463063330440",
+    "code": "Zt6drmM96I",
+    "time": "2013-05-25T02:08:34.000Z",
+    "type": "GraphImage",
+    "comment": 1,
+    "text": "Portland the beautiful",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/77a83817c64f81f55063db8e372290ee/5B55A9D0/t51.2885-15/e15/11328545_1612204442382836_321806408_n.jpg",
+    "image": "images/Zt6drmM96I.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "1c28af736b0bfa949ea8f1da8fdd7d65",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "433258973868842114",
+    "code": "YDPr3BM9yC",
+    "time": "2013-04-13T15:55:16.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "Iconic pizza time",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/21cf980ef3eb83dd1e183da789ec02ab/5B60B7D0/t51.2885-15/e15/11274300_839105672792470_1770132230_n.jpg",
+    "image": "images/YDPr3BM9yC.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "d810d1008f01948d5bf1b714c98f4760",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "432671828728864094",
+    "code": "YBKLxfs91e",
+    "time": "2013-04-12T20:28:43.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "Beautiful old stone dam",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/f3ffa3a9500f9386c00b7b081494e2f5/5B5BBCC8/t51.2885-15/e15/11282234_634169686719958_1078651290_n.jpg",
+    "image": "images/YBKLxfs91e.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "9d173a575d585f5e5cc336a1cbafc696",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "432671016199904582",
+    "code": "YBJ_8xM91G",
+    "time": "2013-04-12T20:27:06.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "Crofton dam",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/6bd206d4ba44c1f241dc253b1c07d030/5B4EF669/t51.2885-15/e15/11280076_687001724737222_1069333862_n.jpg",
+    "image": "images/YBJ_8xM91G.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "b973bfddc630684e3c015b62211bebe1",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "432595958039305297",
+    "code": "YA47taM9xR",
+    "time": "2013-04-12T17:57:58.000Z",
+    "type": "GraphImage",
+    "comment": 1,
+    "text": "Sleepy hollow",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/6733962f3dbd6e658a8e9015ac7d1509/5B62A01F/t51.2885-15/e15/11287874_421990181338785_380715_n.jpg",
+    "image": "images/YA47taM9xR.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "a00235a307d34be8c4d0b564906928c4",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "402249729178853273",
+    "code": "WVE_9as9-Z",
+    "time": "2013-03-01T21:05:26.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "Crazy warm in SF today. Mid-60s",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/34124d45889971bab771fa52db9cfaae/5B5610DA/t51.2885-15/e15/11251145_1599823240288665_1297228813_n.jpg",
+    "image": "images/WVE_9as9-Z.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "165c20a0aad17ecc91620e4e82c3a831",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "396657460300210097",
+    "code": "WBNdvKs9-x",
+    "time": "2013-02-22T03:54:35.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "BYU. vs St. Mary's",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/710f54d049b30d16daa5f2765eb688d4/5B72A525/t51.2885-15/e15/11257886_365367033659818_1947115382_n.jpg",
+    "image": "images/WBNdvKs9-x.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "1ecb3b7181fb68cd2367f4aada2a7089",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "394910241079418429",
+    "code": "V7AMWds949",
+    "time": "2013-02-19T18:03:10.000Z",
+    "type": "GraphImage",
+    "comment": 1,
+    "text": "Rainy morning on the train",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/13b322b8cadf28ab3de090daa94406c7/5B627C61/t51.2885-15/e15/11256373_1399701320356390_1861180233_n.jpg",
+    "image": "images/V7AMWds949.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "68cecec61ff8ae2b02f6cdcc9aeda1c2",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "389212604606962827",
+    "code": "Vmws0_s9yL",
+    "time": "2013-02-11T21:22:59.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "Lovely spring day in San Francisco",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/e470e02bc83f544514274165c203b813/5B5F0E67/t51.2885-15/e15/11252668_1583985011865990_1037189552_n.jpg",
+    "image": "images/Vmws0_s9yL.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "53995dac5b7aee636c919ddbee00c025",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "388739099008425940",
+    "code": "VlFCais9_U",
+    "time": "2013-02-11T05:42:13.000Z",
+    "type": "GraphImage",
+    "comment": 2,
+    "text": "My new wall photo grid",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/60865533a1c7a6f293b8be553ceb9485/5B57EF42/t51.2885-15/e15/11230390_712086292250337_1353127328_n.jpg",
+    "image": "images/VlFCais9_U.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "a6866cccce6524ada34a68bc5e4be006",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "358263540721901467",
+    "code": "T4zsrIs9-b",
+    "time": "2012-12-31T04:32:43.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "A profile in concentration.",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/d7740894c68acca079c7d1fde04b4c1f/5B5B32EB/t51.2885-15/e15/11252415_826604620756892_429311033_n.jpg",
+    "image": "images/T4zsrIs9-b.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "a4f83b3468d8f235234fd3f45222473d",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "358258295744749374",
+    "code": "T4ygWXs98-",
+    "time": "2012-12-31T04:22:18.000Z",
+    "type": "GraphImage",
+    "comment": 1,
+    "text": "Game night with ma and sis",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/3629d7d650eb35541fca2ca56927ae7b/5B5B45FA/t51.2885-15/e15/11266018_403557056498323_762755229_n.jpg",
+    "image": "images/T4ygWXs98-.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "257cef497e4f2305546155246267f776",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "id": "354333585801731194",
+    "code": "Tq2ITZs9x6",
+    "time": "2012-12-25T18:24:36.000Z",
+    "type": "GraphImage",
+    "comment": 0,
+    "text": "A white Christmas!",
+    "media": "https://instagram.fslc1-1.fna.fbcdn.net/vp/c3874e97281cb23a1486082bc8bc7ba8/5B68D332/t51.2885-15/e15/11246548_894528543936635_827529874_n.jpg",
+    "image": "images/Tq2ITZs9x6.jpg",
+    "children": [],
+    "parent": "aa67975d-e8e0-5c1b-8f31-52eeb71a1bb2",
+    "internal": {
+      "contentDigest": "e6c9c9b959740e62e6d62a31eaf852aa",
+      "type": "PostsJson",
+      "owner": "gatsby-transformer-json"
+    }
+  },
+  {
+    "jsonName": "1685001452849004065-1a9",
+    "internalComponentName": "Component1685001452849004065",
+    "path": "/1685001452849004065/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "1685001452849004065"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /1685001452849004065/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "3aea9ae8378d2977062ccc0a6aa6c9e5",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "1677771511187112561-be6",
+    "internalComponentName": "Component1677771511187112561",
+    "path": "/1677771511187112561/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "1677771511187112561"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /1677771511187112561/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "bfe50df8270d24aab350e8460b4917a1",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "1632234281433883850-14d",
+    "internalComponentName": "Component1632234281433883850",
+    "path": "/1632234281433883850/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "1632234281433883850"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /1632234281433883850/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "d6bc4524b0a87b4e433e6937e3a24d8b",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "1601601194425654597-d25",
+    "internalComponentName": "Component1601601194425654597",
+    "path": "/1601601194425654597/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "1601601194425654597"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /1601601194425654597/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "7ee8a0b39217d4be953210ca47f4946d",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "1601530617317009166-7be",
+    "internalComponentName": "Component1601530617317009166",
+    "path": "/1601530617317009166/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "1601530617317009166"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /1601530617317009166/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "d1b672705b65da323038327f1c197d55",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "1565766376903475329-9b6",
+    "internalComponentName": "Component1565766376903475329",
+    "path": "/1565766376903475329/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "1565766376903475329"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /1565766376903475329/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "c1ebf542385fabe21bd82c5e5aa8a774",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "1515268510112420213-d6b",
+    "internalComponentName": "Component1515268510112420213",
+    "path": "/1515268510112420213/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "1515268510112420213"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /1515268510112420213/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "db176100d27628829ddc90f79ab495bf",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "1486495736706552111-afb",
+    "internalComponentName": "Component1486495736706552111",
+    "path": "/1486495736706552111/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "1486495736706552111"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /1486495736706552111/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "febb4ea3a498b1c6cc45affcfb41a0b3",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "1483463111452464830-7d1",
+    "internalComponentName": "Component1483463111452464830",
+    "path": "/1483463111452464830/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "1483463111452464830"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /1483463111452464830/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "19a9a6620304eb97aefae564e4b2e5dc",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "1478435327902728655-ac2",
+    "internalComponentName": "Component1478435327902728655",
+    "path": "/1478435327902728655/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "1478435327902728655"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /1478435327902728655/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "adda4b926a318b0507374d6f7cd6a730",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "1360516742464695325-5bb",
+    "internalComponentName": "Component1360516742464695325",
+    "path": "/1360516742464695325/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "1360516742464695325"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /1360516742464695325/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "42bdf0e4081bd8bde3b2b13de4188ae9",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "1346779149175505545-f9c",
+    "internalComponentName": "Component1346779149175505545",
+    "path": "/1346779149175505545/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "1346779149175505545"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /1346779149175505545/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "76027aa0f0385c9db352ae22837a33cc",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "1270677182602272387-8a5",
+    "internalComponentName": "Component1270677182602272387",
+    "path": "/1270677182602272387/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "1270677182602272387"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /1270677182602272387/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "e000d7e78a29ff7498bb4f009a4e77fe",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "1256134251849702933-7e1",
+    "internalComponentName": "Component1256134251849702933",
+    "path": "/1256134251849702933/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "1256134251849702933"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /1256134251849702933/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "77c6d5f6b951194698605461358c7db4",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "1232199266021400176-774",
+    "internalComponentName": "Component1232199266021400176",
+    "path": "/1232199266021400176/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "1232199266021400176"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /1232199266021400176/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "aec90cd258a0ff8ce67f19ed658c40c1",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "1192421294565743753-f12",
+    "internalComponentName": "Component1192421294565743753",
+    "path": "/1192421294565743753/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "1192421294565743753"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /1192421294565743753/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "ff34aaea3ae24cffc90caa315f505a9d",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "1179335444856560759-322",
+    "internalComponentName": "Component1179335444856560759",
+    "path": "/1179335444856560759/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "1179335444856560759"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /1179335444856560759/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "76a9e6ddd64ecae7976b29f2500d3388",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "1093024552502680593-a58",
+    "internalComponentName": "Component1093024552502680593",
+    "path": "/1093024552502680593/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "1093024552502680593"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /1093024552502680593/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "79e39addc8d37b67defee02ed12b0228",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "1082958063116475674-1f4",
+    "internalComponentName": "Component1082958063116475674",
+    "path": "/1082958063116475674/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "1082958063116475674"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /1082958063116475674/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "f3dc1f91439df0732cb8a8d99aabdb7d",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "1072104297123274725-826",
+    "internalComponentName": "Component1072104297123274725",
+    "path": "/1072104297123274725/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "1072104297123274725"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /1072104297123274725/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "1b57541df532831adb0e8c83db4b4166",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "1050382401524719413-7e7",
+    "internalComponentName": "Component1050382401524719413",
+    "path": "/1050382401524719413/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "1050382401524719413"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /1050382401524719413/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "4d772cca7165208318eb486ff8273bf5",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "1047380412691897508-da0",
+    "internalComponentName": "Component1047380412691897508",
+    "path": "/1047380412691897508/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "1047380412691897508"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /1047380412691897508/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "33f47b63b9d66ca2ab9419f9e4b9bbb7",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "1019954573251698010-e88",
+    "internalComponentName": "Component1019954573251698010",
+    "path": "/1019954573251698010/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "1019954573251698010"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /1019954573251698010/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "ab918935c7677658e868dda6415694b2",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "1011212316101041196-b98",
+    "internalComponentName": "Component1011212316101041196",
+    "path": "/1011212316101041196/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "1011212316101041196"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /1011212316101041196/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "500d041a1e28600cb3bf2a4a51209fbf",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "1001206739996237060-d96",
+    "internalComponentName": "Component1001206739996237060",
+    "path": "/1001206739996237060/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "1001206739996237060"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /1001206739996237060/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "e17a12c539ea18316213930f0effec5f",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "996585130438155443-5ba",
+    "internalComponentName": "Component996585130438155443",
+    "path": "/996585130438155443/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "996585130438155443"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /996585130438155443/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "725a57773de39074c7cb372f28b792b1",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "976313048697659257-7b5",
+    "internalComponentName": "Component976313048697659257",
+    "path": "/976313048697659257/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "976313048697659257"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /976313048697659257/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "b3b5bdeae2cc5bd3d58018ae22c0d140",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "973323047219223582-508",
+    "internalComponentName": "Component973323047219223582",
+    "path": "/973323047219223582/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "973323047219223582"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /973323047219223582/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "c76d21402efa3878043359fc8c8624ee",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "811160600493415566-77f",
+    "internalComponentName": "Component811160600493415566",
+    "path": "/811160600493415566/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "811160600493415566"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /811160600493415566/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "47addb99a2459407644fc000fcc871c9",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "811160112838466685-9f9",
+    "internalComponentName": "Component811160112838466685",
+    "path": "/811160112838466685/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "811160112838466685"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /811160112838466685/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "1f04491fccba1167eff949b2e1ee37f9",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "800034649663593593-9e2",
+    "internalComponentName": "Component800034649663593593",
+    "path": "/800034649663593593/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "800034649663593593"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /800034649663593593/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "b801b109587ffc4b3d1d3487de8c6c6f",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "783599315140730647-8b0",
+    "internalComponentName": "Component783599315140730647",
+    "path": "/783599315140730647/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "783599315140730647"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /783599315140730647/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "859d033b41a93db3de9ef56873b4e5ae",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "734060454761192929-35e",
+    "internalComponentName": "Component734060454761192929",
+    "path": "/734060454761192929/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "734060454761192929"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /734060454761192929/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "720b6c68caeae996a6818e197a1a989d",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "734060430375509472-2f0",
+    "internalComponentName": "Component734060430375509472",
+    "path": "/734060430375509472/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "734060430375509472"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /734060430375509472/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "4fe52e65ede48d8c51aa4cf30ef2adb5",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "734060413657013727-07b",
+    "internalComponentName": "Component734060413657013727",
+    "path": "/734060413657013727/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "734060413657013727"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /734060413657013727/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "546e835eb13785e8718c4aed524ee116",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "732757276941868346-385",
+    "internalComponentName": "Component732757276941868346",
+    "path": "/732757276941868346/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "732757276941868346"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /732757276941868346/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "0c12b3d8bb460256b7b70acef77abf89",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "732747494080109637-b57",
+    "internalComponentName": "Component732747494080109637",
+    "path": "/732747494080109637/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "732747494080109637"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /732747494080109637/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "b696b93c27f82fad0ea7d46dcc579c4e",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "732734464004972239-009",
+    "internalComponentName": "Component732734464004972239",
+    "path": "/732734464004972239/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "732734464004972239"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /732734464004972239/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "f9509ca512424e8aafbf36f5f3b6d05a",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "732606339090734326-ab9",
+    "internalComponentName": "Component732606339090734326",
+    "path": "/732606339090734326/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "732606339090734326"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /732606339090734326/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "cc299cc94e59814745187bd13133b77e",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "732532731974770038-4a5",
+    "internalComponentName": "Component732532731974770038",
+    "path": "/732532731974770038/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "732532731974770038"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /732532731974770038/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "0e07c1a7b76cad826e0dedb8b84cf155",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "732520051645864977-d14",
+    "internalComponentName": "Component732520051645864977",
+    "path": "/732520051645864977/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "732520051645864977"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /732520051645864977/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "05e174f0ae97457495717cc9db956e8c",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "732518754003705841-3de",
+    "internalComponentName": "Component732518754003705841",
+    "path": "/732518754003705841/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "732518754003705841"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /732518754003705841/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "481e092b54021f9f8f08405ab9b89706",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "723243022496816380-643",
+    "internalComponentName": "Component723243022496816380",
+    "path": "/723243022496816380/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "723243022496816380"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /723243022496816380/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "ebbb9704b1692caf7e45ca643bf19eae",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "722040340713037050-15b",
+    "internalComponentName": "Component722040340713037050",
+    "path": "/722040340713037050/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "722040340713037050"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /722040340713037050/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "69e201ef63534348bb9692a9bad97363",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "709713470394982233-ed8",
+    "internalComponentName": "Component709713470394982233",
+    "path": "/709713470394982233/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "709713470394982233"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /709713470394982233/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "f5445368ea87aaa078f49713f44f553f",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "707264656279068376-7f7",
+    "internalComponentName": "Component707264656279068376",
+    "path": "/707264656279068376/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "707264656279068376"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /707264656279068376/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "4991eed36d25d60b0bae9627012e60bf",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "695949453427990223-2d3",
+    "internalComponentName": "Component695949453427990223",
+    "path": "/695949453427990223/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "695949453427990223"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /695949453427990223/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "a9cf99be7dfd09e2ea0bb05abac0c3d9",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "695178098877128227-d20",
+    "internalComponentName": "Component695178098877128227",
+    "path": "/695178098877128227/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "695178098877128227"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /695178098877128227/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "842685d0aa8066eeee15b67f61dd3d4f",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "682173039289556382-aa2",
+    "internalComponentName": "Component682173039289556382",
+    "path": "/682173039289556382/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "682173039289556382"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /682173039289556382/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "e5003f18c0af9699b0b31ff612f61f36",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "680440398655774583-a35",
+    "internalComponentName": "Component680440398655774583",
+    "path": "/680440398655774583/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "680440398655774583"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /680440398655774583/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "007487fb96b0e3c68fdad55d1c01966b",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "679681270014532918-2d2",
+    "internalComponentName": "Component679681270014532918",
+    "path": "/679681270014532918/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "679681270014532918"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /679681270014532918/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "53e2f8f2ba2e68689504e12c0b2ee18f",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "673465739406204031-38f",
+    "internalComponentName": "Component673465739406204031",
+    "path": "/673465739406204031/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "673465739406204031"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /673465739406204031/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "a207c80eb3b559cbaf0de304170a8ea8",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "673461065357712415-b76",
+    "internalComponentName": "Component673461065357712415",
+    "path": "/673461065357712415/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "673461065357712415"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /673461065357712415/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "49153af2012b0e50754f5187c6a69262",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "673457707733475299-a30",
+    "internalComponentName": "Component673457707733475299",
+    "path": "/673457707733475299/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "673457707733475299"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /673457707733475299/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "d1a01af7291d5eaa260b5f85e8439df9",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "665350447119457524-ea2",
+    "internalComponentName": "Component665350447119457524",
+    "path": "/665350447119457524/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "665350447119457524"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /665350447119457524/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "bc278a812f73a0d3eedd6d6811da7b19",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "650011560209800782-384",
+    "internalComponentName": "Component650011560209800782",
+    "path": "/650011560209800782/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "650011560209800782"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /650011560209800782/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "9b762c130fde3cb08e9d31cd48c49290",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "640022460883001336-3fc",
+    "internalComponentName": "Component640022460883001336",
+    "path": "/640022460883001336/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "640022460883001336"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /640022460883001336/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "9770b0481999011a3deb8f50b28c5dad",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "636409258827833279-0b9",
+    "internalComponentName": "Component636409258827833279",
+    "path": "/636409258827833279/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "636409258827833279"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /636409258827833279/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "1cdc30c4f9cdef9220d83025c404f133",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "635682624046882725-ee7",
+    "internalComponentName": "Component635682624046882725",
+    "path": "/635682624046882725/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "635682624046882725"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /635682624046882725/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "3803b9ca547b32e340b8bf69d9b86186",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "633544903908122621-417",
+    "internalComponentName": "Component633544903908122621",
+    "path": "/633544903908122621/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "633544903908122621"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /633544903908122621/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "7529cc5aa5571e802b83058406eeebd6",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "633500736435772673-ad8",
+    "internalComponentName": "Component633500736435772673",
+    "path": "/633500736435772673/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "633500736435772673"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /633500736435772673/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "4c98f9966ffcf6d7078e2641a2c69aaa",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "632772965954739789-0b9",
+    "internalComponentName": "Component632772965954739789",
+    "path": "/632772965954739789/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "632772965954739789"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /632772965954739789/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "1ab96c1beef0b6c874039bd1028ea0de",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "620418901388549762-711",
+    "internalComponentName": "Component620418901388549762",
+    "path": "/620418901388549762/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "620418901388549762"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /620418901388549762/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "f5814f6f56d62cf17032b5836eaeebe5",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "617411858855616370-9dc",
+    "internalComponentName": "Component617411858855616370",
+    "path": "/617411858855616370/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "617411858855616370"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /617411858855616370/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "d82e4edbf5d9e55f6d797421bc86edc6",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "613426420792942449-e43",
+    "internalComponentName": "Component613426420792942449",
+    "path": "/613426420792942449/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "613426420792942449"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /613426420792942449/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "a7980314130030df278df380ebd78e68",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "611758039731788991-30c",
+    "internalComponentName": "Component611758039731788991",
+    "path": "/611758039731788991/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "611758039731788991"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /611758039731788991/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "a7d8ef3b68a2f41d20de8acf68446227",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "607214368319594481-bd6",
+    "internalComponentName": "Component607214368319594481",
+    "path": "/607214368319594481/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "607214368319594481"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /607214368319594481/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "33d4d02e97bb855e611692691859b04f",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "603923376229310167-7fa",
+    "internalComponentName": "Component603923376229310167",
+    "path": "/603923376229310167/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "603923376229310167"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /603923376229310167/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "4c0f0e1125f1f875fdb110b4423084d8",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "602898508977266473-712",
+    "internalComponentName": "Component602898508977266473",
+    "path": "/602898508977266473/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "602898508977266473"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /602898508977266473/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "b48f2225f4c2e7c46dc776a542c68b01",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "599599505648902132-dd8",
+    "internalComponentName": "Component599599505648902132",
+    "path": "/599599505648902132/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "599599505648902132"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /599599505648902132/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "77b91b9c20b5a270acbc96e8d457000a",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "597507196258082479-010",
+    "internalComponentName": "Component597507196258082479",
+    "path": "/597507196258082479/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "597507196258082479"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /597507196258082479/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "698bf3bbe0cf3c161203aa19fd6537db",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "596440361295142025-41b",
+    "internalComponentName": "Component596440361295142025",
+    "path": "/596440361295142025/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "596440361295142025"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /596440361295142025/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "3c9152cfb3fbed1c1a582cbe7b36a4b2",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "587804514970754664-c47",
+    "internalComponentName": "Component587804514970754664",
+    "path": "/587804514970754664/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "587804514970754664"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /587804514970754664/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "30f91d09858b8dec20aea7515d9b0f4e",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "584320489442499989-123",
+    "internalComponentName": "Component584320489442499989",
+    "path": "/584320489442499989/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "584320489442499989"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /584320489442499989/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "a07c735a542f4262e1856b7aeeae6bcd",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "529876495778438153-427",
+    "internalComponentName": "Component529876495778438153",
+    "path": "/529876495778438153/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "529876495778438153"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /529876495778438153/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "df3241ccff5a03433ca0c2a3de349d76",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "529863260585057945-583",
+    "internalComponentName": "Component529863260585057945",
+    "path": "/529863260585057945/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "529863260585057945"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /529863260585057945/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "00b5b42a008d6eccf30c9e6f29ebb469",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "528199217793195914-d44",
+    "internalComponentName": "Component528199217793195914",
+    "path": "/528199217793195914/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "528199217793195914"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /528199217793195914/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "87cfb253b4344f91681f6bd6a93172e9",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "528198485736152948-57b",
+    "internalComponentName": "Component528198485736152948",
+    "path": "/528198485736152948/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "528198485736152948"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /528198485736152948/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "080cdcae04e4d1c6315f470b631bed65",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "528197163355987780-f65",
+    "internalComponentName": "Component528197163355987780",
+    "path": "/528197163355987780/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "528197163355987780"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /528197163355987780/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "05af1e0ccb8d6235cd7857a1a66f595d",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "523176638502133365-095",
+    "internalComponentName": "Component523176638502133365",
+    "path": "/523176638502133365/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "523176638502133365"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /523176638502133365/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "3ad81ca02b45e38dee4acc10148afa2b",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "515988147267690192-08a",
+    "internalComponentName": "Component515988147267690192",
+    "path": "/515988147267690192/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "515988147267690192"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /515988147267690192/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "6d1e650641c2b3fdb7e5af42f6a2efd1",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "514154189823401179-fb5",
+    "internalComponentName": "Component514154189823401179",
+    "path": "/514154189823401179/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "514154189823401179"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /514154189823401179/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "0cd1b83c48f15d23061d08da9ba65733",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "493743881078431577-6a9",
+    "internalComponentName": "Component493743881078431577",
+    "path": "/493743881078431577/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "493743881078431577"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /493743881078431577/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "05118ffd17ab313ce1c325a7c3a8cd43",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "491519698525216526-869",
+    "internalComponentName": "Component491519698525216526",
+    "path": "/491519698525216526/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "491519698525216526"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /491519698525216526/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "6f6a15528f1f7aa27def23b9529a6ec4",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "474753551234752325-87a",
+    "internalComponentName": "Component474753551234752325",
+    "path": "/474753551234752325/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "474753551234752325"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /474753551234752325/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "16a23fd119f8c7cad342153ecb04cb80",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "465165262878137499-5bf",
+    "internalComponentName": "Component465165262878137499",
+    "path": "/465165262878137499/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "465165262878137499"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /465165262878137499/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "2b157255ca7e37e27738304e8bffeb7f",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "463285372889325235-dbf",
+    "internalComponentName": "Component463285372889325235",
+    "path": "/463285372889325235/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "463285372889325235"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /463285372889325235/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "42da488be00ef6091193728ebf653a09",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "463283463063330440-ff6",
+    "internalComponentName": "Component463283463063330440",
+    "path": "/463283463063330440/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "463283463063330440"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /463283463063330440/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "afe0e98f868ae3259723b1e0e4ceaca8",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "433258973868842114-6db",
+    "internalComponentName": "Component433258973868842114",
+    "path": "/433258973868842114/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "433258973868842114"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /433258973868842114/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "51569081b93c04385e110dd700aca919",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "432671828728864094-402",
+    "internalComponentName": "Component432671828728864094",
+    "path": "/432671828728864094/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "432671828728864094"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /432671828728864094/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "da2850cac7be4369f191e2f0f30c036d",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "432671016199904582-b94",
+    "internalComponentName": "Component432671016199904582",
+    "path": "/432671016199904582/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "432671016199904582"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /432671016199904582/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "07bcb367055b09edd325179f6adb4d9d",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "432595958039305297-344",
+    "internalComponentName": "Component432595958039305297",
+    "path": "/432595958039305297/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "432595958039305297"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /432595958039305297/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "85e588e1bd547d720644a259088ce096",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "402249729178853273-66c",
+    "internalComponentName": "Component402249729178853273",
+    "path": "/402249729178853273/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "402249729178853273"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /402249729178853273/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "6a5b9e051c727498f1e9b1f97d95f5b0",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "396657460300210097-b08",
+    "internalComponentName": "Component396657460300210097",
+    "path": "/396657460300210097/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "396657460300210097"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /396657460300210097/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "07100c1b5071a36ba95eee69c7f589fb",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "394910241079418429-d80",
+    "internalComponentName": "Component394910241079418429",
+    "path": "/394910241079418429/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "394910241079418429"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /394910241079418429/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "8cf5814ba95a78e2b80217104329756f",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "389212604606962827-c94",
+    "internalComponentName": "Component389212604606962827",
+    "path": "/389212604606962827/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "389212604606962827"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /389212604606962827/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "d153912432a24edcc0fc1815133a5ead",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "388739099008425940-c75",
+    "internalComponentName": "Component388739099008425940",
+    "path": "/388739099008425940/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "388739099008425940"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /388739099008425940/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "eebf1b19624434c525b7cade1a3cefa9",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "358263540721901467-684",
+    "internalComponentName": "Component358263540721901467",
+    "path": "/358263540721901467/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "358263540721901467"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /358263540721901467/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "c44a8f12a4ff82e5e6f06562d1280c91",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "358258295744749374-dd0",
+    "internalComponentName": "Component358258295744749374",
+    "path": "/358258295744749374/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "358258295744749374"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /358258295744749374/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "637b7ed637aae321f95fb6b99953cea8",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "354333585801731194-c9d",
+    "internalComponentName": "Component354333585801731194",
+    "path": "/354333585801731194/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "componentChunkName": "component---src-templates-post-page-js",
+    "context": {
+      "id": "354333585801731194"
+    },
+    "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/templates/post-page.js",
+    "id": "SitePage /354333585801731194/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "cf264989fedc09b6984b21ae54303cd1",
+      "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "about-f34",
+    "internalComponentName": "ComponentAbout",
+    "path": "/about/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/pages/about.js",
+    "componentChunkName": "component---src-pages-about-js",
+    "context": {},
+    "pluginCreator___NODE": "52fe8a30-9176-50f6-aaf9-4ba1a44e0ffa",
+    "pluginCreatorId": "52fe8a30-9176-50f6-aaf9-4ba1a44e0ffa",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/pages/about.js",
+    "id": "SitePage /about/",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "4aa969ab6bde2ae1811d00deb3d1a177",
+      "description": "52fe8a30-9176-50f6-aaf9-4ba1a44e0ffa",
+      "owner": "internal-data-bridge"
+    }
+  },
+  {
+    "jsonName": "index",
+    "internalComponentName": "ComponentIndex",
+    "path": "/",
+    "component": "<PROJECT_ROOT>/examples/gatsbygram/src/pages/index.js",
+    "componentChunkName": "component---src-pages-index-js",
+    "context": {},
+    "pluginCreator___NODE": "52fe8a30-9176-50f6-aaf9-4ba1a44e0ffa",
+    "pluginCreatorId": "52fe8a30-9176-50f6-aaf9-4ba1a44e0ffa",
+    "componentPath": "<PROJECT_ROOT>/examples/gatsbygram/src/pages/index.js",
+    "id": "SitePage /",
+    "parent": null,
+    "children": [],
+    "internal": {
+      "type": "SitePage",
+      "contentDigest": "9c1c2a5d1b9af719da65f705f010474f",
+      "description": "52fe8a30-9176-50f6-aaf9-4ba1a44e0ffa",
+      "owner": "internal-data-bridge"
+    }
+  }
+]
diff --git a/node_modules/gatsby/src/schema/__tests__/fixtures/node-model.js b/node_modules/gatsby/src/schema/__tests__/fixtures/node-model.js
new file mode 100644
index 0000000..c7ba466
--- /dev/null
+++ b/node_modules/gatsby/src/schema/__tests__/fixtures/node-model.js
@@ -0,0 +1,85 @@
+const nodes = [
+  {
+    id: `person1`,
+    parent: null,
+    children: [],
+    internal: { type: `Author` },
+    name: `Person1`,
+    email: `person1@example.com`,
+  },
+  {
+    id: `person2`,
+    parent: null,
+    children: [],
+    internal: { type: `Contributor` },
+    name: `Person2`,
+    email: `person2@example.com`,
+  },
+  {
+    id: `person3`,
+    parent: null,
+    children: [],
+    internal: { type: `Author` },
+    name: `Person3`,
+    email: null,
+  },
+  {
+    id: `post1`,
+    parent: `file1`,
+    children: [],
+    internal: { type: `Post` },
+    frontmatter: {
+      authors: [`person1`],
+      reviewers: [`person1`, `person2`],
+      published: false,
+      date: new Date(Date.UTC(2019, 0, 1)),
+    },
+  },
+  {
+    id: `post2`,
+    parent: `file2`,
+    children: [],
+    internal: { type: `Post` },
+    frontmatter: {
+      authors: [`person1`, `person2`],
+      reviewers: [],
+      published: true,
+      date: new Date(Date.UTC(2018, 0, 1)),
+    },
+  },
+  {
+    id: `post3`,
+    parent: `file3`,
+    children: [],
+    internal: { type: `Post` },
+    frontmatter: {
+      authors: [],
+      reviewers: [`person3`],
+      published: false,
+      date: new Date(Date.UTC(2017, 0, 1)),
+    },
+  },
+  {
+    id: `file1`,
+    parent: null,
+    children: [`post1`],
+    internal: { type: `File` },
+    name: `File1`,
+  },
+  {
+    id: `file2`,
+    parent: null,
+    children: [`post2`],
+    internal: { type: `RemoteFile` },
+    url: `RemoteFile2`,
+  },
+  {
+    id: `file3`,
+    parent: null,
+    children: [`post3`],
+    internal: { type: `File` },
+    name: `File3`,
+  },
+]
+
+module.exports = nodes
diff --git a/node_modules/gatsby/src/schema/__tests__/fixtures/queries.js b/node_modules/gatsby/src/schema/__tests__/fixtures/queries.js
new file mode 100644
index 0000000..38db0b3
--- /dev/null
+++ b/node_modules/gatsby/src/schema/__tests__/fixtures/queries.js
@@ -0,0 +1,88 @@
+const nodes = [
+  {
+    id: `file1`,
+    parent: null,
+    children: [`md1`],
+    internal: {
+      type: `File`,
+      contentDigest: `file1`,
+    },
+    name: `1.md`,
+  },
+  {
+    id: `file2`,
+    parent: null,
+    children: [`md2`],
+    internal: {
+      type: `File`,
+      contentDigest: `file2`,
+    },
+    name: `2.md`,
+  },
+  {
+    id: `file3`,
+    parent: null,
+    children: [`author2`, `author1`],
+    internal: {
+      type: `File`,
+      contentDigest: `file3`,
+    },
+    name: `authors.yaml`,
+  },
+  {
+    id: `md1`,
+    parent: `file1`,
+    children: [],
+    internal: {
+      type: `Markdown`,
+      contentDigest: `md1`,
+    },
+    frontmatter: {
+      title: `Markdown File 1`,
+      date: new Date(Date.UTC(2019, 0, 1)),
+      authors: [`author2@example.com`, `author1@example.com`],
+      reviewer___NODE: `author2`,
+      reviewerByEmail: `author2@example.com`,
+    },
+  },
+  {
+    id: `md2`,
+    parent: `file2`,
+    children: [],
+    internal: {
+      type: `Markdown`,
+      contentDigest: `md2`,
+    },
+    frontmatter: {
+      title: `Markdown File 2`,
+      published: false,
+      authors: [`author1@example.com`],
+      reviewer___NODE: null,
+      reviewerByEmail: null,
+    },
+  },
+  {
+    id: `author1`,
+    parent: `file3`,
+    children: [],
+    internal: {
+      type: `Author`,
+      contentDigest: `author1`,
+    },
+    name: `Author 1`,
+    email: `author1@example.com`,
+  },
+  {
+    id: `author2`,
+    parent: `file3`,
+    children: [],
+    internal: {
+      type: `Author`,
+      contentDigest: `author1`,
+    },
+    name: `Author 2`,
+    email: `author2@example.com`,
+  },
+]
+
+module.exports = nodes
diff --git a/node_modules/gatsby/src/schema/__tests__/kitchen-sink.js b/node_modules/gatsby/src/schema/__tests__/kitchen-sink.js
new file mode 100644
index 0000000..4b76b33
--- /dev/null
+++ b/node_modules/gatsby/src/schema/__tests__/kitchen-sink.js
@@ -0,0 +1,242 @@
+// @flow
+
+const { SchemaComposer } = require(`graphql-compose`)
+const { graphql } = require(`graphql`)
+const { store } = require(`../../redux`)
+const { build } = require(`../index`)
+const fs = require(`fs-extra`)
+const path = require(`path`)
+const slash = require(`slash`)
+const withResolverContext = require(`../context`)
+require(`../../db/__tests__/fixtures/ensure-loki`)()
+
+jest.mock(`../../utils/api-runner-node`)
+const apiRunnerNode = require(`../../utils/api-runner-node`)
+
+// XXX(freiksenet): Expand
+describe(`Kichen sink schema test`, () => {
+  let schema
+
+  const runQuery = query =>
+    graphql(schema, query, undefined, withResolverContext({}, schema))
+
+  beforeAll(async () => {
+    apiRunnerNode.mockImplementation((api, ...args) => {
+      if (api === `setFieldsOnGraphQLNodeType`) {
+        return mockSetFieldsOnGraphQLNodeType(...args)
+      } else if (api === `createResolvers`) {
+        return mockCreateResolvers(...args)
+      } else {
+        return []
+      }
+    })
+
+    const nodes = JSON.parse(
+      fs
+        .readFileSync(
+          path.join(__dirname, `./fixtures/kitchen-sink.json`),
+          `utf-8`
+        )
+        .replace(/<PROJECT_ROOT>/g, slash(process.cwd()))
+    )
+
+    store.dispatch({ type: `DELETE_CACHE` })
+    nodes.forEach(node =>
+      store.dispatch({ type: `CREATE_NODE`, payload: node })
+    )
+    store.dispatch({
+      type: `CREATE_TYPES`,
+      payload: `
+        type PostsJson implements Node {
+          id: String!
+          time: Date
+          code: String
+        }
+      `,
+    })
+    store.dispatch({
+      type: `ADD_THIRD_PARTY_SCHEMA`,
+      payload: buildThirdPartySchema(),
+    })
+    await build({})
+    schema = store.getState().schema
+  })
+
+  it(`passes kitchen sink query`, async () => {
+    expect(
+      await runQuery(`
+        {
+          sort: allPostsJson(sort: { fields: likes, order: ASC }, limit: 2) {
+            edges {
+              node {
+                id
+                idWithDecoration
+                time(formatString: "DD.MM.YYYY")
+                code
+                likes
+                comment
+                image {
+                  childImageSharp {
+                    id
+        					}
+                }
+                _3invalidKey
+        			}
+            }
+          }
+          filter: allPostsJson(filter: { likes: { eq: null } }, limit: 2) {
+            edges {
+              node {
+                id
+                comment
+              }
+            }
+          }
+          resolveFilter: postsJson(idWithDecoration: { eq: "decoration-1601601194425654597"}) {
+            id
+            idWithDecoration
+            likes
+          }
+          addResolvers: likedEnough {
+            id
+            likes
+            code
+          }
+          thirdPartyStuff {
+            text
+            child {
+              ... on ThirdPartyStuff {
+                text
+              }
+              ... on ThirdPartyStuff2 {
+                foo
+              }
+            }
+          }
+          thirdPartyUnion {
+            ... on ThirdPartyStuff {
+              text
+            }
+            ... on ThirdPartyStuff2 {
+              foo
+            }
+          }
+          thirdPartyInterface {
+            ... on ThirdPartyStuff3 {
+              text
+            }
+          }
+        }
+    `)
+    ).toMatchSnapshot()
+  })
+})
+
+const buildThirdPartySchema = () => {
+  const schemaComposer = new SchemaComposer()
+  schemaComposer.addTypeDefs(`
+    type ThirdPartyStuff {
+      text: String
+      child: ThirdPartyUnion2
+    }
+
+    type ThirdPartyStuff2 {
+      foo: String
+    }
+
+    union ThirdPartyUnion = ThirdPartyStuff | ThirdPartyStuff2
+
+    interface ThirdPartyInterface {
+      text: String
+      relay: Query
+    }
+
+    type ThirdPartyStuff3 implements ThirdPartyInterface {
+      text: String
+      relay: Query
+    }
+
+    union ThirdPartyUnion2 = ThirdPartyStuff | ThirdPartyStuff2
+
+    type Query {
+      thirdPartyStuff: ThirdPartyStuff
+      thirdPartyUnion: ThirdPartyUnion
+      thirdPartyInterface: ThirdPartyInterface
+      relay: Query
+      relay2: [Query]!
+    }
+  `)
+  schemaComposer
+    .getUTC(`ThirdPartyUnion`)
+    .setResolveType(() => `ThirdPartyStuff`)
+  schemaComposer
+    .getUTC(`ThirdPartyUnion2`)
+    .setResolveType(() => `ThirdPartyStuff`)
+  schemaComposer
+    .getIFTC(`ThirdPartyInterface`)
+    .setResolveType(() => `ThirdPartyStuff3`)
+  schemaComposer.Query.extendField(`thirdPartyStuff`, {
+    resolve() {
+      return {
+        text: `Hello third-party schema!`,
+        child: {
+          text: `Hello from children!`,
+        },
+      }
+    },
+  })
+  schemaComposer.Query.extendField(`thirdPartyUnion`, {
+    resolve() {
+      return {
+        text: `Hello third-party schema!`,
+        child: {
+          text: `Hello from children!`,
+        },
+      }
+    },
+  })
+  schemaComposer.Query.extendField(`thirdPartyInterface`, {
+    resolve() {
+      return {
+        text: `Hello third-party schema!`,
+      }
+    },
+  })
+  schemaComposer.addSchemaMustHaveType(
+    schemaComposer.getOTC(`ThirdPartyStuff3`)
+  )
+  return schemaComposer.buildSchema()
+}
+
+const mockSetFieldsOnGraphQLNodeType = async ({ type: { name } }) => {
+  if (name === `PostsJson`) {
+    return [
+      {
+        idWithDecoration: {
+          type: `String`,
+          resolve(parent) {
+            return `decoration-${parent.id}`
+          },
+        },
+      },
+    ]
+  } else {
+    return []
+  }
+}
+
+const mockCreateResolvers = ({ createResolvers }) => {
+  createResolvers({
+    Query: {
+      likedEnough: {
+        type: `[PostsJson]`,
+        resolve(parent, args, context) {
+          return context.nodeModel
+            .getAllNodes({ type: `PostsJson` })
+            .filter(post => post.likes != null && post.likes > 5)
+            .slice(0, 2)
+        },
+      },
+    },
+  })
+}
diff --git a/node_modules/gatsby/src/schema/__tests__/node-model.js b/node_modules/gatsby/src/schema/__tests__/node-model.js
new file mode 100644
index 0000000..47d7a3e
--- /dev/null
+++ b/node_modules/gatsby/src/schema/__tests__/node-model.js
@@ -0,0 +1,366 @@
+const { store } = require(`../../redux`)
+const nodeStore = require(`../../db/nodes`)
+require(`../../db/__tests__/fixtures/ensure-loki`)()
+const { LocalNodeModel } = require(`../node-model`)
+const { build } = require(`..`)
+
+const nodes = require(`./fixtures/node-model`)
+
+describe(`NodeModel`, () => {
+  let nodeModel
+  let schema
+  const createPageDependency = jest.fn()
+
+  beforeAll(async () => {
+    store.dispatch({ type: `DELETE_CACHE` })
+    nodes.forEach(node =>
+      store.dispatch({ type: `CREATE_NODE`, payload: node })
+    )
+
+    const types = `
+      union AllFiles = File | RemoteFile
+
+      interface TeamMember {
+        name: String!
+      }
+
+      type Author implements TeamMember & Node {
+        name: String!
+      }
+
+      type Contributor implements TeamMember & Node {
+        name: String!
+      }
+    `
+    store.dispatch({
+      type: `CREATE_TYPES`,
+      payload: types,
+    })
+
+    await build({})
+    schema = store.getState().schema
+
+    nodeModel = new LocalNodeModel({
+      schema,
+      nodeStore,
+      createPageDependency,
+    })
+  })
+
+  beforeEach(() => {
+    createPageDependency.mockClear()
+  })
+
+  describe(`getNodeById`, () => {
+    it(`returns node by id`, () => {
+      const result = nodeModel.getNodeById({ id: `person3` })
+      expect(result.name).toBe(`Person3`)
+      expect(result.email).toBeNull()
+    })
+
+    it(`returns node by id and type`, () => {
+      const result = nodeModel.getNodeById({ id: `person1`, type: `Author` })
+      expect(result.name).toBe(`Person1`)
+      expect(result.email).toBe(`person1@example.com`)
+    })
+
+    it(`returns node by id and union type`, () => {
+      const result = nodeModel.getNodeById({ id: `file3`, type: `AllFiles` })
+      expect(result.name).toBe(`File3`)
+    })
+
+    it(`returns node by id and interface type`, () => {
+      const result = nodeModel.getNodeById({
+        id: `person1`,
+        type: `TeamMember`,
+      })
+      expect(result.name).toBe(`Person1`)
+    })
+
+    it(`creates page dependency`, () => {
+      nodeModel.getNodeById({ id: `person3` }, { path: `/` })
+      expect(createPageDependency).toHaveBeenCalledTimes(1)
+      expect(createPageDependency).toHaveBeenCalledWith({
+        path: `/`,
+        nodeId: `person3`,
+      })
+    })
+
+    it(`returns null when no id provided`, () => {
+      expect(nodeModel.getNodeById()).toBeNull()
+      expect(nodeModel.getNodeById({})).toBeNull()
+      expect(nodeModel.getNodeById({ id: null })).toBeNull()
+    })
+
+    it(`returns null when matching id does not match type`, () => {
+      const result = nodeModel.getNodeById({ id: `person1`, type: `Post` })
+      expect(result).toBeNull()
+    })
+
+    it(`returns null when no matching node found`, () => {
+      const result = nodeModel.getNodeById({ id: `person4` })
+      expect(result).toBeNull()
+    })
+
+    it(`does not create page dependency when no matching node found`, () => {
+      nodeModel.getNodeById({ id: `person4` }, { path: `/` })
+      expect(createPageDependency).not.toHaveBeenCalled()
+    })
+
+    it(`handles already resolved id`, () => {
+      const result = nodeModel.getNodeById({
+        id: { id: `person1`, name: `Person1` },
+      })
+      expect(result.id).toBe(`person1`)
+      expect(result.name).toBe(`Person1`)
+    })
+  })
+
+  describe(`getNodesByIds`, () => {
+    it(`returns nodes by ids`, () => {
+      const result = nodeModel.getNodesByIds({ ids: [`person1`, `post2`] })
+      expect(result.length).toBe(2)
+      expect(result[0].name).toBe(`Person1`)
+      expect(result[1].frontmatter.authors[0]).toBe(`person1`)
+    })
+
+    it(`returns nodes by ids and type`, () => {
+      const result = nodeModel.getNodesByIds({
+        ids: [`person1`, `post2`],
+        type: `Author`,
+      })
+      expect(result.length).toBe(1)
+      expect(result[0].name).toBe(`Person1`)
+    })
+
+    it(`returns nodes by ids and union type`, () => {
+      const result = nodeModel.getNodesByIds({
+        ids: [`file1`, `file2`, `file3`, `post1`],
+        type: `AllFiles`,
+      })
+      expect(result.length).toBe(3)
+      expect(
+        result.every(r => [`File`, `RemoteFile`].includes(r.internal.type))
+      ).toBeTruthy()
+    })
+
+    it(`returns nodes by ids and interface type`, () => {
+      const result = nodeModel.getNodesByIds({
+        ids: [`person1`, `person2`, `person3`, `post1`],
+        type: `TeamMember`,
+      })
+      expect(result.length).toBe(3)
+      expect(
+        result.every(r => [`Author`, `Contributor`].includes(r.internal.type))
+      ).toBeTruthy()
+    })
+
+    it(`creates page dependencies`, () => {
+      nodeModel.getNodesByIds({ ids: [`person1`, `post2`] }, { path: `/` })
+      expect(createPageDependency).toHaveBeenCalledTimes(2)
+      expect(createPageDependency).toHaveBeenCalledWith({
+        path: `/`,
+        nodeId: `person1`,
+      })
+      expect(createPageDependency).toHaveBeenCalledWith({
+        path: `/`,
+        nodeId: `post2`,
+      })
+    })
+
+    it(`returns empty array when no ids provided`, () => {
+      expect(nodeModel.getNodesByIds()).toEqual([])
+      expect(nodeModel.getNodesByIds({})).toEqual([])
+      expect(nodeModel.getNodesByIds({ ids: null })).toEqual([])
+      expect(nodeModel.getNodesByIds({ ids: [] })).toEqual([])
+    })
+
+    it(`returns empty array when matching ids don't match type`, () => {
+      const result = nodeModel.getNodesByIds({
+        ids: [`person1`, `post2`],
+        type: `File`,
+      })
+      expect(result).toEqual([])
+    })
+
+    it(`returns empty array when no matching nodes found`, () => {
+      const result = nodeModel.getNodesByIds({ ids: [`person4`, `post4`] })
+      expect(result).toEqual([])
+    })
+
+    it(`does not create page dependencies when no matching nodes found`, () => {
+      nodeModel.getNodesByIds({ ids: [`person4`, `post4`] }, { path: `/` })
+      expect(createPageDependency).not.toHaveBeenCalled()
+    })
+
+    it(`handles already resolved ids`, () => {
+      const result = nodeModel.getNodesByIds({
+        ids: [
+          { id: `person1`, name: `Person1` },
+          `person2`,
+          { id: `post1`, frontmatter: { published: false } },
+        ],
+      })
+      expect(result.length).toBe(3)
+      expect(result[0].id).toBe(`person1`)
+      expect(result[0].name).toBe(`Person1`)
+      expect(result[1].id).toBe(`person2`)
+      expect(result[1].name).toBe(`Person2`)
+      expect(result[2].id).toBe(`post1`)
+      expect(result[2].frontmatter.published).toBe(false)
+    })
+  })
+
+  describe(`getAllNodes`, () => {
+    it(`returns all nodes`, () => {
+      const result = nodeModel.getAllNodes()
+      expect(result.length).toBe(9)
+    })
+
+    it(`returns all nodes of type`, () => {
+      const result = nodeModel.getAllNodes({ type: `Author` })
+      expect(result.length).toBe(2)
+    })
+
+    it(`returns all nodes of union type`, () => {
+      const result = nodeModel.getAllNodes({ type: `AllFiles` })
+      expect(result.length).toBe(3)
+    })
+
+    it(`returns all nodes of interface type`, () => {
+      const result = nodeModel.getAllNodes({ type: `TeamMember` })
+      expect(result.length).toBe(3)
+    })
+
+    it(`creates page dependencies`, () => {
+      nodeModel.getAllNodes({}, { path: `/` })
+      expect(createPageDependency).toHaveBeenCalledTimes(9)
+    })
+
+    it(`returns empty array when no nodes of type found`, () => {
+      const result = nodeModel.getAllNodes({ type: `Astronauts` })
+      expect(result).toEqual([])
+    })
+
+    it(`does not create page dependencies when no matching nodes found`, () => {
+      nodeModel.getAllNodes({ type: `Astronauts` }, { path: `/` })
+      expect(createPageDependency).not.toHaveBeenCalled()
+    })
+  })
+
+  describe(`getTypes`, () => {
+    it(`returns all node types in the store`, () => {
+      const result = nodeModel.getTypes()
+      expect(result.length).toBe(5)
+      expect(result).toEqual(
+        expect.arrayContaining([
+          `Author`,
+          `Contributor`,
+          `Post`,
+          `File`,
+          `RemoteFile`,
+        ])
+      )
+    })
+  })
+
+  describe(`runQuery`, () => {
+    it(`returns first result only`, async () => {
+      const type = `Post`
+      const query = { filter: { frontmatter: { published: { eq: false } } } }
+      const firstOnly = true
+      const result = await nodeModel.runQuery({ query, firstOnly, type })
+      expect(result.id).toBe(`post1`)
+    })
+
+    it(`returns all results`, async () => {
+      const type = `Post`
+      const query = { filter: { frontmatter: { published: { eq: false } } } }
+      const firstOnly = false
+      const result = await nodeModel.runQuery({ query, firstOnly, type })
+      expect(result.length).toBe(2)
+      expect(result[0].id).toBe(`post1`)
+      expect(result[1].id).toBe(`post3`)
+    })
+
+    it(`creates page dependencies`, async () => {
+      const type = `Post`
+      const query = { filter: { frontmatter: { published: { eq: false } } } }
+      const firstOnly = false
+      await nodeModel.runQuery({ query, firstOnly, type }, { path: `/` })
+      expect(createPageDependency).toHaveBeenCalledTimes(2)
+      expect(createPageDependency).toHaveBeenCalledWith({
+        path: `/`,
+        nodeId: `post1`,
+      })
+      expect(createPageDependency).toHaveBeenCalledWith({
+        path: `/`,
+        nodeId: `post3`,
+      })
+    })
+
+    it(`creates page dependencies with connection type`, async () => {
+      const type = `Post`
+      const query = { filter: { frontmatter: { published: { eq: false } } } }
+      const firstOnly = false
+      await nodeModel.runQuery(
+        { query, firstOnly, type },
+        { path: `/`, connectionType: `Post` }
+      )
+      expect(createPageDependency).toHaveBeenCalledTimes(1)
+      expect(createPageDependency).toHaveBeenCalledWith({
+        path: `/`,
+        connection: `Post`,
+      })
+    })
+
+    it(`doesn't allow querying union types`, () => {
+      const type = `AllFiles`
+      const query = {}
+      const firstOnly = true
+      const result = nodeModel.runQuery({ query, firstOnly, type })
+      return expect(result).rejects.toThrowError(
+        `Querying GraphQLUnion types is not supported.`
+      )
+    })
+
+    it(`handles interface types`, async () => {
+      const type = `TeamMember`
+      const query = { name: { ne: null } }
+      const firstOnly = true
+      const result = await nodeModel.runQuery({ query, firstOnly, type })
+      expect(result.name).toBe(`Person1`)
+    })
+
+    it(`allows passing GraphQLType instead of type name`, async () => {
+      const type = schema.getType(`File`)
+      const query = {
+        filter: {
+          children: { elemMatch: { internal: { type: { eq: `Post` } } } },
+        },
+      }
+      const firstOnly = false
+      const result = await nodeModel.runQuery({ query, firstOnly, type })
+      expect(result.length).toBe(2)
+      expect(result[0].id).toBe(`file1`)
+      expect(result[1].id).toBe(`file3`)
+    })
+  })
+
+  describe(`findRootNodeAncestor`, () => {
+    it(`returns an object's top most ancestor node`, () => {
+      const node = nodes.find(node => node.id === `post1`)
+      const obj = node.frontmatter.authors
+      const result = nodeModel.findRootNodeAncestor(obj)
+      expect(result.id).toBe(`file1`)
+    })
+
+    it(`returns an object's ancestor node that matches the provided predicate`, () => {
+      const node = nodes.find(node => node.id === `post1`)
+      const obj = node.frontmatter.authors
+      const predicate = obj => obj.internal && obj.internal.type === `File`
+      const result = nodeModel.findRootNodeAncestor(obj, predicate)
+      expect(result.id).toBe(`file1`)
+    })
+  })
+})
diff --git a/node_modules/gatsby/src/schema/__tests__/queries-file.js b/node_modules/gatsby/src/schema/__tests__/queries-file.js
new file mode 100644
index 0000000..e13551e
--- /dev/null
+++ b/node_modules/gatsby/src/schema/__tests__/queries-file.js
@@ -0,0 +1,192 @@
+const { graphql } = require(`graphql`)
+const { store } = require(`../../redux`)
+const { build } = require(`..`)
+const withResolverContext = require(`../context`)
+const { trackInlineObjectsInRootNode } = require(`../../db/node-tracking`)
+require(`../../db/__tests__/fixtures/ensure-loki`)()
+const path = require(`path`)
+const slash = require(`slash`)
+
+const basePath = slash(__dirname)
+const filePath = p => slash(path.join(basePath, p))
+
+const nodes = [
+  {
+    id: `file1`,
+    parent: null,
+    children: [],
+    internal: {
+      type: `File`,
+      contentDigest: `file1`,
+    },
+    name: `1.png`,
+    dir: basePath,
+    absolutePath: filePath(`1.png`),
+  },
+  {
+    id: `file2`,
+    parent: null,
+    children: [],
+    internal: {
+      type: `File`,
+      contentDigest: `file2`,
+    },
+    name: `2.png`,
+    dir: basePath,
+    absolutePath: filePath(`2.png`),
+  },
+  {
+    id: `file3`,
+    parent: null,
+    children: [`test1`],
+    internal: {
+      type: `File`,
+      contentDigest: `file3`,
+    },
+    name: `test.txt`,
+    dir: basePath,
+    absolutePath: filePath(`test.txt`),
+  },
+  {
+    id: `test1`,
+    parent: `file3`,
+    children: [],
+    internal: {
+      type: `Test`,
+    },
+    file: `./1.png`,
+    files: [`./1.png`, `./2.png`],
+    nested: {
+      file: `./1.png`,
+      files: [`./1.png`, `./2.png`],
+    },
+    array: [
+      {
+        file: `./1.png`,
+        files: [`./1.png`, `./2.png`],
+      },
+      {
+        file: `./2.png`,
+        files: [`./2.png`],
+      },
+    ],
+  },
+]
+
+describe(`Query fields of type File`, () => {
+  let schema
+
+  const runQuery = query =>
+    graphql(schema, query, undefined, withResolverContext({}, schema))
+
+  beforeAll(async () => {
+    store.dispatch({ type: `DELETE_CACHE` })
+    nodes.forEach(node => {
+      // FIXME: We should be testing with action creators, not dispatching actions directly.
+      // Because we're not we have to manually ensure that node objects are being tracked,
+      // which is otherwise taken care of in the action creator.
+      store.dispatch({ type: `CREATE_NODE`, payload: node })
+      trackInlineObjectsInRootNode(node)
+    })
+
+    await build({})
+    schema = store.getState().schema
+  })
+
+  it(`finds File nodes`, async () => {
+    const query = `
+      {
+        test {
+          file { name }
+          files { name }
+          nested {
+            file { name }
+            files { name }
+          }
+          array {
+            file { name }
+            files { name }
+          }
+        }
+      }
+    `
+    const results = await runQuery(query)
+    const expected = {
+      test: {
+        file: { name: `1.png` },
+        files: [{ name: `1.png` }, { name: `2.png` }],
+        nested: {
+          file: { name: `1.png` },
+          files: [{ name: `1.png` }, { name: `2.png` }],
+        },
+        array: [
+          {
+            file: { name: `1.png` },
+            files: [{ name: `1.png` }, { name: `2.png` }],
+          },
+          {
+            file: { name: `2.png` },
+            files: [{ name: `2.png` }],
+          },
+        ],
+      },
+    }
+    expect(results.errors).toBeUndefined()
+    expect(results.data).toEqual(expected)
+  })
+
+  it(`finds filtered File nodes`, async () => {
+    const query = `
+      {
+        test(
+          file: { name: { ne: null } }
+          files: { elemMatch: { name: { ne: null } } }
+          nested: {
+            file: { name: { ne: null } }
+            files: { elemMatch: { name: { ne: null } } }
+          }
+          array: {
+            elemMatch: {
+              file: { name: { ne: null } }
+              files: { elemMatch: { name: { ne: null } } }
+            }
+          }
+        ) {
+          file { name }
+          files { name }
+          nested {
+            file { name }
+            files { name }
+          }
+          array {
+            file { name }
+            files { name }
+          }
+        }
+      }
+    `
+    const results = await runQuery(query)
+    const expected = {
+      test: {
+        file: { name: `1.png` },
+        files: [{ name: `1.png` }, { name: `2.png` }],
+        nested: {
+          file: { name: `1.png` },
+          files: [{ name: `1.png` }, { name: `2.png` }],
+        },
+        array: [
+          {
+            file: { name: `1.png` },
+            files: [{ name: `1.png` }, { name: `2.png` }],
+          },
+          {
+            file: { name: `2.png` },
+            files: [{ name: `2.png` }],
+          },
+        ],
+      },
+    }
+    expect(results.errors).toBeUndefined()
+    expect(results.data).toEqual(expected)
+  })
+})
diff --git a/node_modules/gatsby/src/schema/__tests__/queries.js b/node_modules/gatsby/src/schema/__tests__/queries.js
new file mode 100644
index 0000000..8ac99f4
--- /dev/null
+++ b/node_modules/gatsby/src/schema/__tests__/queries.js
@@ -0,0 +1,1074 @@
+const { graphql } = require(`graphql`)
+const { store } = require(`../../redux`)
+const { build } = require(`..`)
+const withResolverContext = require(`../context`)
+require(`../../db/__tests__/fixtures/ensure-loki`)()
+
+jest.mock(`../../utils/api-runner-node`)
+const apiRunnerNode = require(`../../utils/api-runner-node`)
+
+const nodes = require(`./fixtures/queries`)
+
+describe(`Query schema`, () => {
+  let schema
+
+  const runQuery = query =>
+    graphql(schema, query, undefined, withResolverContext({}, schema))
+
+  beforeAll(async () => {
+    apiRunnerNode.mockImplementation(async (api, ...args) => {
+      if (api === `setFieldsOnGraphQLNodeType`) {
+        if (args[0].type.name === `Markdown`) {
+          return [
+            {
+              [`frontmatter.authorNames`]: {
+                type: `[String!]!`,
+                async resolve(source, args, context, info) {
+                  const authors = await context.nodeModel.runQuery({
+                    type: `Author`,
+                    query: { filter: { email: { in: source.authors } } },
+                    firstOnly: false,
+                  })
+                  return authors.map(author => author.name)
+                },
+              },
+              [`frontmatter.anotherField`]: {
+                type: `Boolean`,
+                resolve() {
+                  return true
+                },
+              },
+            },
+          ]
+        }
+        return []
+      } else if (api === `createResolvers`) {
+        return [
+          args[0].createResolvers({
+            Frontmatter: {
+              authors: {
+                resolve(source, args, context, info) {
+                  // NOTE: When using the first field resolver argument (here called
+                  // `source`, also called `parent` or `root`), it is important to
+                  // take care of the fact that the resolver can be called more than once
+                  // in one query, e.g. when the field is referenced both in the input filter
+                  // and in the selection set. In this test example, the `authors` field will
+                  // already have been expanded to an array of full `Author` nodes when the
+                  // resolver is called the second time.
+                  if (
+                    source.authors.some(
+                      author => author && typeof author === `object`
+                    )
+                  ) {
+                    return source.authors
+                  }
+                  return context.nodeModel
+                    .getAllNodes({ type: `Author` })
+                    .filter(author => source.authors.includes(author.email))
+                },
+              },
+            },
+            Author: {
+              posts: {
+                resolve(source, args, context, info) {
+                  // NOTE: One of the differences between using `runQuery` and
+                  // `getAllNodes` is that the latter will always get the nodes
+                  // which will be queried directly from the store, while `runQuery`
+                  // will first try to call field resolvers, e.g. to expand
+                  // foreign-key fields to full nodes. Here for example we can
+                  // query `authors.email`.
+                  // Another thing to note is that we don't have to use the
+                  // `$elemMatch` operator when querying arrays of objects
+                  // (although we could).
+                  return context.nodeModel.runQuery({
+                    type: `Markdown`,
+                    query: {
+                      filter: {
+                        frontmatter: {
+                          authors: { email: { eq: source.email } },
+                          // authors: {
+                          //   elemMatch: { email: { eq: source.email } },
+                          // },
+                        },
+                      },
+                    },
+                    firstOnly: false,
+                  })
+                },
+              },
+            },
+          }),
+          args[0].createResolvers({
+            Query: {
+              allAuthorNames: {
+                type: `[String!]!`,
+                resolve(source, args, context, info) {
+                  return context.nodeModel
+                    .getAllNodes({ type: `Author` })
+                    .map(author => author.name)
+                },
+              },
+            },
+          }),
+        ]
+      } else {
+        return []
+      }
+    })
+
+    store.dispatch({ type: `DELETE_CACHE` })
+    nodes.forEach(node =>
+      store.dispatch({ type: `CREATE_NODE`, payload: node })
+    )
+
+    const typeDefs = [
+      `type Markdown implements Node { frontmatter: Frontmatter! }`,
+      `type Frontmatter { authors: [Author] }`,
+      `type Author implements Node { posts: [Markdown] }`,
+    ]
+    typeDefs.forEach(def =>
+      store.dispatch({ type: `CREATE_TYPES`, payload: def })
+    )
+
+    store.dispatch({
+      type: `SET_SITE_CONFIG`,
+      payload: {
+        mapping: {
+          "Markdown.frontmatter.reviewerByEmail": `Author.email`,
+        },
+      },
+    })
+
+    await build({})
+    schema = store.getState().schema
+  })
+
+  describe(`on children fields`, () => {
+    it(`handles Node interface children field`, async () => {
+      const query = `
+        {
+          allFile {
+            edges {
+              node {
+                children {
+                  ... on Markdown { frontmatter { title } }
+                  ... on Author { name }
+                }
+              }
+            }
+          }
+        }
+      `
+      const results = await runQuery(query)
+      const expected = {
+        allFile: {
+          edges: [
+            {
+              node: {
+                children: [{ frontmatter: { title: `Markdown File 1` } }],
+              },
+            },
+            {
+              node: {
+                children: [{ frontmatter: { title: `Markdown File 2` } }],
+              },
+            },
+            {
+              node: {
+                children: [{ name: `Author 2` }, { name: `Author 1` }],
+              },
+            },
+          ],
+        },
+      }
+      expect(results.errors).toBeUndefined()
+      expect(results.data).toEqual(expected)
+    })
+
+    it(`handles convenience child fields`, async () => {
+      const query = `
+        {
+          allFile {
+            edges {
+              node {
+                childMarkdown { frontmatter { title } }
+              }
+            }
+          }
+        }
+      `
+      const results = await runQuery(query)
+      const expected = {
+        allFile: {
+          edges: [
+            {
+              node: {
+                childMarkdown: { frontmatter: { title: `Markdown File 1` } },
+              },
+            },
+            {
+              node: {
+                childMarkdown: { frontmatter: { title: `Markdown File 2` } },
+              },
+            },
+            {
+              node: {
+                childMarkdown: null,
+              },
+            },
+          ],
+        },
+      }
+      expect(results.errors).toBeUndefined()
+      expect(results.data).toEqual(expected)
+    })
+
+    it(`handles convenience children fields`, async () => {
+      const query = `
+        {
+          allFile {
+            edges {
+              node {
+                childrenAuthor { name }
+              }
+            }
+          }
+        }
+      `
+      const results = await runQuery(query)
+      const expected = {
+        allFile: {
+          edges: [
+            {
+              node: {
+                childrenAuthor: [],
+              },
+            },
+            {
+              node: {
+                childrenAuthor: [],
+              },
+            },
+            {
+              node: {
+                childrenAuthor: [{ name: `Author 2` }, { name: `Author 1` }],
+              },
+            },
+          ],
+        },
+      }
+      expect(results.errors).toBeUndefined()
+      expect(results.data).toEqual(expected)
+    })
+
+    // NOTE: Also tests handling children fields being in both
+    // input filter and selection set.
+    it(`handles query arguments on children fields`, async () => {
+      const query = `
+        {
+          allFile(
+            filter: {
+              children: {
+                elemMatch: { internal: { type: { eq: "Markdown" } } }
+              }
+            }
+            sort: { fields: [id], order: [DESC] }
+          ) {
+            edges {
+              node {
+                name
+                children {
+                  id
+                }
+              }
+            }
+          }
+        }
+      `
+      const results = await runQuery(query)
+      const expected = {
+        allFile: {
+          edges: [
+            {
+              node: { name: `2.md`, children: [{ id: `md2` }] },
+            },
+            {
+              node: { name: `1.md`, children: [{ id: `md1` }] },
+            },
+          ],
+        },
+      }
+      expect(results.errors).toBeUndefined()
+      expect(results.data).toEqual(expected)
+    })
+  })
+
+  describe(`on fields added with createTypes`, () => {
+    it(`handles selection set`, async () => {
+      const query = `
+        {
+          markdown {
+            frontmatter {
+              authors {
+                posts {
+                  frontmatter {
+                    title
+                  }
+                }
+              }
+            }
+          }
+          allMarkdown {
+            edges {
+              node {
+                frontmatter {
+                  title
+                  date(formatString: "MM-DD-YYYY")
+                  published
+                  authors {
+                    name
+                    email
+                    posts {
+                      frontmatter {
+                        title
+                      }
+                    }
+                  }
+                  authorNames
+                }
+              }
+            }
+          }
+        }
+      `
+      const results = await runQuery(query)
+      const expected = {
+        markdown: {
+          frontmatter: {
+            authors: [
+              {
+                posts: [
+                  { frontmatter: { title: `Markdown File 1` } },
+                  { frontmatter: { title: `Markdown File 2` } },
+                ],
+              },
+              { posts: [{ frontmatter: { title: `Markdown File 1` } }] },
+            ],
+          },
+        },
+        allMarkdown: {
+          edges: [
+            {
+              node: {
+                frontmatter: {
+                  authorNames: [`Author 1`, `Author 2`],
+                  authors: [
+                    {
+                      email: `author1@example.com`,
+                      name: `Author 1`,
+                      posts: [
+                        { frontmatter: { title: `Markdown File 1` } },
+                        { frontmatter: { title: `Markdown File 2` } },
+                      ],
+                    },
+                    {
+                      email: `author2@example.com`,
+                      name: `Author 2`,
+                      posts: [{ frontmatter: { title: `Markdown File 1` } }],
+                    },
+                  ],
+                  date: `01-01-2019`,
+                  published: null,
+                  title: `Markdown File 1`,
+                },
+              },
+            },
+            {
+              node: {
+                frontmatter: {
+                  authorNames: [`Author 1`],
+                  authors: [
+                    {
+                      email: `author1@example.com`,
+                      name: `Author 1`,
+                      posts: [
+                        { frontmatter: { title: `Markdown File 1` } },
+                        { frontmatter: { title: `Markdown File 2` } },
+                      ],
+                    },
+                  ],
+                  date: null,
+                  published: false,
+                  title: `Markdown File 2`,
+                },
+              },
+            },
+          ],
+        },
+      }
+      expect(results.errors).toBeUndefined()
+      expect(results.data).toEqual(expected)
+    })
+
+    it(`handles query arguments`, async () => {
+      const query = `
+        {
+          author(
+            posts: {
+              elemMatch: {
+                frontmatter: {
+                  title: { eq: "Markdown File 2" }
+                }
+              }
+            }
+          ) {
+            name
+            posts {
+              frontmatter {
+                title
+              }
+            }
+          }
+          allMarkdown(
+            filter: {
+              frontmatter: {
+                authors: {
+                  elemMatch: {
+                    name: { regex: "/^Author/" }
+                    posts: {
+                      elemMatch: {
+                        frontmatter: {
+                          title: {
+                            eq: "Markdown File 2"
+                          }
+                        }
+                      }
+                    }
+                  }
+                }
+              }
+            }
+            sort: { fields: [frontmatter___title], order: [DESC] }
+          ) {
+            edges {
+              node {
+                id
+                frontmatter {
+                  authors {
+                    name
+                  }
+                }
+              }
+            }
+          }
+        }
+      `
+      const results = await runQuery(query)
+      const expected = {
+        author: {
+          name: `Author 1`,
+          posts: [
+            { frontmatter: { title: `Markdown File 1` } },
+            { frontmatter: { title: `Markdown File 2` } },
+          ],
+        },
+        allMarkdown: {
+          edges: [
+            {
+              node: {
+                id: `md2`,
+                frontmatter: { authors: [{ name: `Author 1` }] },
+              },
+            },
+            {
+              node: {
+                id: `md1`,
+                frontmatter: {
+                  authors: expect.arrayContaining([
+                    { name: `Author 1` },
+                    { name: `Author 2` },
+                  ]),
+                },
+              },
+            },
+          ],
+        },
+      }
+      expect(results.errors).toBeUndefined()
+      expect(results.data).toEqual(expected)
+    })
+  })
+
+  describe(`on pagination fields`, () => {
+    describe(`edges { node }`, () => {
+      it(`paginates results`, async () => {
+        const query = `
+          {
+            pages: allMarkdown {
+              totalCount
+              edges {
+                node {
+                  frontmatter {
+                    title
+                    authors {
+                      name
+                    }
+                  }
+                }
+              }
+            }
+            skiplimit: allMarkdown(
+              skip: 1
+              limit: 1
+            ) {
+              totalCount
+              edges { node { id } }
+            }
+            findsort: allMarkdown(
+              filter: {
+                frontmatter: {
+                  authors: { elemMatch: { name: { regex: "/^Author\\\\s\\\\d/" } } }
+                }
+              }
+              sort: { fields: [frontmatter___title], order: [DESC] }
+            ) {
+              totalCount
+              edges {
+                node {
+                  frontmatter {
+                    title
+                    authors {
+                      name
+                    }
+                  }
+                }
+              }
+            }
+          }
+        `
+        const results = await runQuery(query)
+        const expected = {
+          findsort: {
+            totalCount: 2,
+            edges: [
+              {
+                node: {
+                  frontmatter: {
+                    authors: [{ name: `Author 1` }],
+                    title: `Markdown File 2`,
+                  },
+                },
+              },
+              {
+                node: {
+                  frontmatter: {
+                    authors: expect.arrayContaining([
+                      { name: `Author 1` },
+                      { name: `Author 2` },
+                    ]),
+                    title: `Markdown File 1`,
+                  },
+                },
+              },
+            ],
+          },
+          pages: {
+            totalCount: 2,
+            edges: [
+              {
+                node: {
+                  frontmatter: {
+                    authors: expect.arrayContaining([
+                      { name: `Author 1` },
+                      { name: `Author 2` },
+                    ]),
+                    title: `Markdown File 1`,
+                  },
+                },
+              },
+              {
+                node: {
+                  frontmatter: {
+                    authors: [{ name: `Author 1` }],
+                    title: `Markdown File 2`,
+                  },
+                },
+              },
+            ],
+          },
+          skiplimit: { totalCount: 1, edges: [{ node: { id: `md2` } }] },
+        }
+        expect(results.errors).toBeUndefined()
+        expect(results.data).toEqual(expected)
+      })
+
+      it(`paginates null result`, async () => {
+        const query = `
+          {
+            allMarkdown(
+              skip: 1
+              limit: 1,
+              filter: {
+                id: { eq: "non-existing"}
+              }
+            ) {
+              totalCount
+              edges { node { id } }
+              nodes { id }
+            }
+          }
+        `
+        const results = await runQuery(query)
+        expect(results.errors).toBeUndefined()
+        expect(results.data).toMatchInlineSnapshot(`
+Object {
+  "allMarkdown": Object {
+    "edges": Array [],
+    "nodes": Array [],
+    "totalCount": 0,
+  },
+}
+`)
+      })
+
+      it(`adds nodes field as a convenience shortcut`, async () => {
+        const query = `
+          {
+            allMarkdown(
+              skip: 1
+              limit: 1
+            ) {
+              totalCount
+              nodes { id }
+            }
+          }
+        `
+        const results = await runQuery(query)
+        const expected = {
+          allMarkdown: {
+            totalCount: 1,
+            nodes: [{ id: `md2` }],
+          },
+        }
+        expect(results.errors).toBeUndefined()
+        expect(results.data).toEqual(expected)
+      })
+    })
+
+    describe(`group field`, () => {
+      it(`groups query results`, async () => {
+        const query = `
+          {
+            allMarkdown {
+              group(field: frontmatter___title) {
+                fieldValue
+                edges {
+                  node {
+                    frontmatter {
+                      title
+                      date(formatString: "YYYY-MM-DD")
+                    }
+                  }
+                }
+              }
+            }
+          }
+        `
+        const results = await runQuery(query)
+        const expected = {
+          allMarkdown: {
+            group: [
+              {
+                fieldValue: `Markdown File 1`,
+                edges: [
+                  {
+                    node: {
+                      frontmatter: {
+                        title: `Markdown File 1`,
+                        date: `2019-01-01`,
+                      },
+                    },
+                  },
+                ],
+              },
+              {
+                fieldValue: `Markdown File 2`,
+                edges: [
+                  {
+                    node: {
+                      frontmatter: {
+                        title: `Markdown File 2`,
+                        date: null,
+                      },
+                    },
+                  },
+                ],
+              },
+            ],
+          },
+        }
+        expect(results.errors).toBeUndefined()
+        expect(results.data).toEqual(expected)
+      })
+
+      it(`groups query results by scalar field with resolver`, async () => {
+        const query = `
+          {
+            allMarkdown {
+              group(field: frontmatter___date) {
+                fieldValue
+                edges {
+                  node {
+                    frontmatter {
+                      title
+                      date(formatString: "YYYY/MM/DD")
+                    }
+                  }
+                }
+              }
+            }
+          }
+        `
+        const results = await runQuery(query)
+        const expected = {
+          allMarkdown: {
+            group: [
+              {
+                fieldValue: `2019-01-01T00:00:00.000Z`,
+                edges: [
+                  {
+                    node: {
+                      frontmatter: {
+                        title: `Markdown File 1`,
+                        date: `2019/01/01`,
+                      },
+                    },
+                  },
+                ],
+              },
+            ],
+          },
+        }
+        expect(results.errors).toBeUndefined()
+        expect(results.data).toEqual(expected)
+      })
+
+      // FIXME: This is not yet possible
+      it.skip(`groups query results by foreign key field`, async () => {
+        const query = `
+          {
+            allMarkdown {
+              group(field: frontmatter___authors___name) {
+                fieldValue
+                edges {
+                  node {
+                    frontmatter {
+                      title
+                      date
+                    }
+                  }
+                }
+              }
+            }
+          }
+        `
+        const results = await runQuery(query)
+        const expected = {
+          allMarkdown: {
+            group: [
+              {
+                fieldValue: `Author 1`,
+                edges: [
+                  {
+                    node: {
+                      frontmatter: {
+                        title: `Markdown File 1`,
+                        date: `2019-01-01`,
+                      },
+                    },
+                  },
+                  {
+                    node: {
+                      frontmatter: {
+                        title: `Markdown File 2`,
+                        date: null,
+                      },
+                    },
+                  },
+                ],
+              },
+              {
+                fieldValue: `Author 2`,
+                edges: [
+                  {
+                    node: {
+                      frontmatter: {
+                        title: `Markdown File 1`,
+                        date: `2019-01-01`,
+                      },
+                    },
+                  },
+                ],
+              },
+            ],
+          },
+        }
+        expect(results.errors).toBeUndefined()
+        expect(results.data).toEqual(expected)
+      })
+
+      it(`groups null result`, async () => {
+        const query = `
+          {
+            allMarkdown(
+              skip: 1
+              limit: 1,
+              filter: {
+                id: { eq: "non-existing"}
+              }
+            ) {
+              group(field: frontmatter___title, skip: 1, limit: 1) {
+                field
+                fieldValue
+              }
+            }
+          }
+        `
+        const results = await runQuery(query)
+        expect(results.errors).toBeUndefined()
+        expect(results.data).toMatchInlineSnapshot(`
+Object {
+  "allMarkdown": Object {
+    "group": Array [],
+  },
+}
+`)
+      })
+    })
+
+    describe(`distinct field`, () => {
+      it(`returns distinct values`, async () => {
+        const query = `
+          {
+            allMarkdown {
+              distinct(field: frontmatter___title)
+            }
+          }
+        `
+        const results = await runQuery(query)
+        const expected = {
+          allMarkdown: {
+            distinct: [`Markdown File 1`, `Markdown File 2`],
+          },
+        }
+        expect(results.errors).toBeUndefined()
+        expect(results.data).toEqual(expected)
+      })
+
+      // FIXME: This is not yet possible
+      it.skip(`returns distinct values on foreign-key field`, async () => {
+        const query = `
+          {
+            allMarkdown {
+              distinct(field: frontmatter___authors___name)
+            }
+          }
+        `
+        const results = await runQuery(query)
+        const expected = {
+          allMarkdown: {
+            distinct: [`Author 1`, `Author 2`],
+          },
+        }
+        expect(results.errors).toBeUndefined()
+        expect(results.data).toEqual(expected)
+      })
+
+      it(`returns distinct values on scalar field with resolver`, async () => {
+        const query = `
+          {
+            allMarkdown {
+              distinct(field: frontmatter___date)
+            }
+          }
+        `
+        const results = await runQuery(query)
+        expect(results.errors).toBeUndefined()
+        expect(results.data).toMatchInlineSnapshot(`
+Object {
+  "allMarkdown": Object {
+    "distinct": Array [
+      "2019-01-01T00:00:00.000Z",
+    ],
+  },
+}
+`)
+      })
+
+      it(`handles null result`, async () => {
+        const query = `
+          {
+            allMarkdown(
+              skip: 1
+              limit: 1
+              filter: { id: { eq: "non-existing" } }
+            ) {
+              distinct(field: frontmatter___title)
+            }
+          }
+        `
+        const results = await runQuery(query)
+        expect(results.errors).toBeUndefined()
+        expect(results.data).toMatchInlineSnapshot(`
+Object {
+  "allMarkdown": Object {
+    "distinct": Array [],
+  },
+}
+`)
+      })
+    })
+  })
+
+  describe(`on fields added by setFieldsOnGraphQLNodeType API`, () => {
+    it(`returns correct results`, async () => {
+      const query = `
+        {
+          allMarkdown {
+            edges {
+              node {
+                frontmatter {
+                  authorNames
+                  anotherField
+                }
+              }
+            }
+          }
+        }
+      `
+      const results = await runQuery(query)
+      const expected = {
+        allMarkdown: {
+          edges: [
+            {
+              node: {
+                frontmatter: {
+                  anotherField: true,
+                  authorNames: [`Author 1`, `Author 2`],
+                },
+              },
+            },
+            {
+              node: {
+                frontmatter: {
+                  anotherField: true,
+                  authorNames: [`Author 1`],
+                },
+              },
+            },
+          ],
+        },
+      }
+      expect(results.errors).toBeUndefined()
+      expect(results.data).toEqual(expected)
+    })
+  })
+
+  describe(`on fields added to the root Query type`, () => {
+    it(`returns correct results`, async () => {
+      const query = `
+      {
+        allAuthorNames
+      }
+    `
+      const results = await runQuery(query)
+      const expected = {
+        allAuthorNames: [`Author 1`, `Author 2`],
+      }
+      expect(results.errors).toBeUndefined()
+      expect(results.data).toEqual(expected)
+    })
+  })
+
+  describe(`on fields added from third-party schema`, () => {
+    it.todo(`returns correct results`)
+  })
+
+  describe(`on foreign-key fields`, () => {
+    it(`with the ___NODE convention`, async () => {
+      const query = `
+        {
+          allMarkdown {
+            nodes {
+              frontmatter {
+                reviewer {
+                  name
+                }
+              }
+            }
+          }
+        }
+      `
+      const results = await runQuery(query)
+      expect(results.errors).toBeUndefined()
+      expect(results.data).toMatchInlineSnapshot(`
+Object {
+  "allMarkdown": Object {
+    "nodes": Array [
+      Object {
+        "frontmatter": Object {
+          "reviewer": Object {
+            "name": "Author 2",
+          },
+        },
+      },
+      Object {
+        "frontmatter": Object {
+          "reviewer": null,
+        },
+      },
+    ],
+  },
+}
+`)
+    })
+
+    it(`with defined field mappings`, async () => {
+      const query = `
+          {
+            allMarkdown {
+              nodes {
+                frontmatter {
+                  reviewerByEmail {
+                    name
+                  }
+                }
+              }
+            }
+          }
+        `
+      const results = await runQuery(query)
+      expect(results.errors).toBeUndefined()
+      expect(results.data).toMatchInlineSnapshot(`
+Object {
+  "allMarkdown": Object {
+    "nodes": Array [
+      Object {
+        "frontmatter": Object {
+          "reviewerByEmail": Object {
+            "name": "Author 2",
+          },
+        },
+      },
+      Object {
+        "frontmatter": Object {
+          "reviewerByEmail": null,
+        },
+      },
+    ],
+  },
+}
+`)
+    })
+  })
+})
diff --git a/node_modules/gatsby/src/schema/__tests__/rebuild-schema.js b/node_modules/gatsby/src/schema/__tests__/rebuild-schema.js
new file mode 100644
index 0000000..2d6cf94
--- /dev/null
+++ b/node_modules/gatsby/src/schema/__tests__/rebuild-schema.js
@@ -0,0 +1,129 @@
+const { store } = require(`../../redux`)
+const { build, rebuildWithSitePage } = require(`..`)
+require(`../../db/__tests__/fixtures/ensure-loki`)()
+
+const firstPage = {
+  id: `page1`,
+  parent: null,
+  children: [],
+  internal: { type: `SitePage` },
+  keep: `Page`,
+  fields: {
+    oldKey: `value`,
+  },
+}
+
+const secondPage = {
+  id: `page2`,
+  parent: null,
+  children: [],
+  internal: { type: `SitePage` },
+  fields: {
+    key: `value`,
+  },
+  context: {
+    key: `value`,
+  },
+}
+
+const nodes = [firstPage]
+
+describe(`build and update schema`, () => {
+  let schema
+
+  beforeAll(async () => {
+    store.dispatch({ type: `DELETE_CACHE` })
+    nodes.forEach(node =>
+      store.dispatch({ type: `CREATE_NODE`, payload: node })
+    )
+
+    await build({})
+    schema = store.getState().schema
+  })
+
+  it(`updates SitePage on rebuild`, async () => {
+    let fields
+    let inputFields
+
+    const initialFields = [
+      `id`,
+      `parent`,
+      `children`,
+      `internal`,
+      `keep`,
+      `fields`,
+    ]
+
+    fields = Object.keys(schema.getType(`SitePage`).getFields())
+    expect(fields.length).toBe(6)
+    expect(fields).toEqual(initialFields)
+
+    inputFields = Object.keys(schema.getType(`SitePageFilterInput`).getFields())
+    expect(fields.length).toBe(6)
+    expect(inputFields).toEqual(initialFields)
+
+    // Rebuild Schema
+    store.dispatch({ type: `CREATE_NODE`, payload: secondPage })
+    await rebuildWithSitePage({})
+    schema = store.getState().schema
+
+    fields = Object.keys(schema.getType(`SitePage`).getFields())
+    expect(fields.length).toBe(7)
+    expect(fields).toEqual(initialFields.concat(`context`))
+
+    inputFields = Object.keys(schema.getType(`SitePageFilterInput`).getFields())
+    expect(fields.length).toBe(7)
+    expect(inputFields).toEqual(initialFields.concat(`context`))
+
+    const fieldsEnum = schema
+      .getType(`SitePageFieldsEnum`)
+      .getValue(`context___key`)
+    expect(fieldsEnum).toBeDefined()
+
+    const sortFieldsEnum = schema.getType(`SitePageSortInput`).getFields()
+      .fields.type.ofType
+    expect(sortFieldsEnum.getValue(`context___key`)).toBeDefined()
+  })
+
+  // FIXME: This is not a problem as long as the only use of rebuilding the
+  // schema to add a `context` field to `SitePage`. But it needs to work
+  // if we want to enable on-demand schema regeneration.
+  // This currently does not work because we need to invalidate all FilterInput
+  // composers on nested types as well. Alternatively, use a local cache
+  // in `filter.js` instead of checking `schemaComposer.has()`.
+  it.skip(`updates nested types on rebuild`, async () => {
+    let fields
+    let inputFields
+
+    fields = Object.keys(schema.getType(`SitePageFields`).getFields())
+    expect(fields.length).toBe(1)
+    expect(fields).toEqual([`oldKey`])
+    inputFields = Object.keys(
+      schema.getType(`SitePageSitePageFieldsFilterInput`).getFields()
+    )
+    expect(inputFields.length).toBe(1)
+    expect(inputFields).toEqual([`oldKey`])
+
+    // Rebuild Schema
+    store.dispatch({ type: `CREATE_NODE`, payload: secondPage })
+    await rebuildWithSitePage({})
+    schema = store.getState().schema
+
+    fields = Object.keys(schema.getType(`SitePageFields`).getFields())
+    expect(fields.length).toBe(2)
+    expect(fields).toEqual([`oldKey`, `key`])
+
+    inputFields = Object.keys(
+      schema.getType(`SitePageSitePageFieldsFilterInput`).getFields()
+    )
+    expect(inputFields.length).toBe(2)
+    expect(inputFields).toEqual([`oldKey`, `key`])
+
+    const fieldsEnum = schema
+      .getType(`SitePageFieldsEnum`)
+      .getValues()
+      .map(value => value.name)
+    expect(fieldsEnum.includes(`fields___oldKey`)).toBeTruthy()
+    expect(fieldsEnum.includes(`fields___key`)).toBeTruthy()
+  })
+})
diff --git a/node_modules/gatsby/src/schema/__tests__/run-query.js b/node_modules/gatsby/src/schema/__tests__/run-query.js
new file mode 100644
index 0000000..13c6219
--- /dev/null
+++ b/node_modules/gatsby/src/schema/__tests__/run-query.js
@@ -0,0 +1,526 @@
+const nodesQuery = require(`../../db/nodes-query`)
+const { store } = require(`../../redux`)
+require(`../../db/__tests__/fixtures/ensure-loki`)()
+
+const makeNodes = () => [
+  {
+    id: `0`,
+    internal: { type: `Test` },
+    index: 0,
+    name: `The Mad Max`,
+    string: `a`,
+    float: 1.5,
+    hair: 1,
+    date: `2006-07-22T22:39:53.000Z`,
+    anArray: [1, 2, 3, 4],
+    key: {
+      withEmptyArray: [],
+    },
+    anotherKey: {
+      withANested: {
+        nestedKey: `foo`,
+        emptyArray: [],
+        anotherEmptyArray: [],
+      },
+    },
+    frontmatter: {
+      date: `2006-07-22T22:39:53.000Z`,
+      title: `The world of dash and adventure`,
+      tags: [`moo`, `foo`],
+      blue: 100,
+    },
+    anObjectArray: [
+      { aString: `some string`, aNumber: 2, aBoolean: true },
+      { aString: `some string`, aNumber: 2, anArray: [1, 2] },
+    ],
+    boolean: true,
+    nestedRegex: {
+      field: `har har`,
+    },
+  },
+  {
+    id: `1`,
+    internal: { type: `Test` },
+    index: 1,
+    name: `The Mad Wax`,
+    string: `b`,
+    float: 2.5,
+    hair: 2,
+    anArray: [1, 2, 5, 4],
+    waxOnly: {
+      foo: true,
+      bar: { baz: true },
+    },
+    anotherKey: {
+      withANested: {
+        nestedKey: `foo`,
+      },
+    },
+    frontmatter: {
+      date: `2006-07-22T22:39:53.000Z`,
+      title: `The world of slash and adventure`,
+      blue: 10010,
+      circle: `happy`,
+    },
+    boolean: false,
+    data: {
+      tags: [
+        {
+          tag: {
+            document: [
+              {
+                data: {
+                  tag: `Design System`,
+                },
+                number: 3,
+              },
+            ],
+          },
+        },
+      ],
+    },
+    nestedRegex: {
+      field: ``,
+    },
+  },
+  {
+    id: `2`,
+    internal: { type: `Test` },
+    index: 2,
+    name: `The Mad Wax`,
+    string: `c`,
+    float: 3.5,
+    hair: 0,
+    date: `2006-07-29T22:39:53.000Z`,
+    waxOnly: null,
+    anotherKey: {
+      withANested: {
+        nestedKey: `bar`,
+      },
+    },
+    frontmatter: {
+      date: `2006-07-22T22:39:53.000Z`,
+      title: `The world of shave and adventure`,
+      blue: 10010,
+      circle: `happy`,
+    },
+    data: {
+      tags: [
+        {
+          tag: {
+            document: [
+              {
+                data: {
+                  tag: `Gatsby`,
+                },
+              },
+            ],
+          },
+        },
+        {
+          tag: {
+            document: [
+              {
+                data: {
+                  tag: `Design System`,
+                },
+                number: 5,
+              },
+            ],
+          },
+        },
+      ],
+    },
+  },
+]
+
+function makeGqlType(nodes) {
+  const { createSchemaComposer } = require(`../../schema/schema-composer`)
+  const { addInferredFields } = require(`../infer/add-inferred-fields`)
+  const { getExampleValue } = require(`../infer/example-value`)
+
+  const sc = createSchemaComposer()
+  const typeName = `Test`
+  const tc = sc.createObjectTC(typeName)
+  addInferredFields({
+    schemaComposer: sc,
+    typeComposer: tc,
+    exampleValue: getExampleValue({ nodes, typeName }),
+  })
+  return tc.getType()
+}
+
+function resetDb(nodes) {
+  store.dispatch({ type: `DELETE_CACHE` })
+  for (const node of nodes) {
+    store.dispatch({ type: `CREATE_NODE`, payload: node })
+  }
+}
+
+async function runQuery(queryArgs) {
+  const nodes = makeNodes()
+  resetDb(nodes)
+  const gqlType = makeGqlType(nodes)
+  const args = {
+    gqlType,
+    firstOnly: false,
+    queryArgs,
+  }
+  return await nodesQuery.run(args)
+}
+
+async function runFilter(filter) {
+  return await runQuery({ filter })
+}
+
+describe(`Filter fields`, () => {
+  it(`handles eq operator`, async () => {
+    let result = await runFilter({ hair: { eq: 2 } })
+
+    expect(result.length).toEqual(1)
+    expect(result[0].hair).toEqual(2)
+  })
+
+  it(`handles eq operator with false value`, async () => {
+    let result = await runFilter({ boolean: { eq: false } })
+
+    expect(result.length).toEqual(1)
+    expect(result[0].name).toEqual(`The Mad Wax`)
+  })
+
+  it(`handles eq operator with 0`, async () => {
+    let result = await runFilter({ hair: { eq: 0 } })
+
+    expect(result.length).toEqual(1)
+    expect(result[0].hair).toEqual(0)
+  })
+
+  it(`handles ne operator`, async () => {
+    let result = await runFilter({ hair: { ne: 2 } })
+
+    expect(result.length).toEqual(2)
+    expect(result[0].hair).toEqual(1)
+  })
+
+  it(`handles ne: true operator`, async () => {
+    let result = await runFilter({ boolean: { ne: true } })
+
+    expect(result.length).toEqual(2)
+  })
+
+  it(`handles nested ne: true operator`, async () => {
+    let result = await runFilter({ waxOnly: { foo: { ne: true } } })
+
+    expect(result.length).toEqual(2)
+  })
+
+  it(`handles deeply nested ne: true operator`, async () => {
+    let result = await runFilter({
+      waxOnly: { bar: { baz: { ne: true } } },
+    })
+
+    expect(result.length).toEqual(2)
+  })
+
+  it(`handles lt operator`, async () => {
+    let result = await runFilter({ hair: { lt: 2 } })
+
+    expect(result.length).toEqual(2)
+    expect(result[0].hair).toEqual(1)
+    expect(result[1].hair).toEqual(0)
+  })
+
+  it(`handles lte operator`, async () => {
+    let result = await runFilter({ hair: { lte: 1 } })
+
+    expect(result.length).toEqual(2)
+    expect(result[0].hair).toEqual(1)
+    expect(result[1].hair).toEqual(0)
+  })
+
+  it(`handles gt operator`, async () => {
+    let result = await runFilter({ hair: { gt: 0 } })
+
+    expect(result.length).toEqual(2)
+    expect(result[0].hair).toEqual(1)
+    expect(result[1].hair).toEqual(2)
+  })
+
+  it(`handles gte operator`, async () => {
+    let result = await runFilter({ hair: { gte: 1 } })
+
+    expect(result.length).toEqual(2)
+    expect(result[0].hair).toEqual(1)
+    expect(result[1].hair).toEqual(2)
+  })
+
+  it(`handles the regex operator`, async () => {
+    let result = await runFilter({ name: { regex: `/^the.*wax/i` } })
+    expect(result.length).toEqual(2)
+    expect(result[0].name).toEqual(`The Mad Wax`)
+  })
+
+  it(`handles the nested regex operator`, async () => {
+    let result = await runFilter({ nestedRegex: { field: { regex: `/.*/` } } })
+    expect(result.length).toEqual(2)
+    expect(result[0].id).toEqual(`0`)
+    expect(result[1].id).toEqual(`1`)
+  })
+
+  it(`handles the in operator for strings`, async () => {
+    let result = await runFilter({ string: { in: [`b`, `c`] } })
+    expect(result.length).toEqual(2)
+    expect(result[0].index).toEqual(1)
+  })
+
+  it(`handles the in operator for ints`, async () => {
+    let result = await runFilter({ index: { in: [0, 2] } })
+    expect(result.length).toEqual(2)
+    expect(result[0].index).toEqual(0)
+    expect(result[1].index).toEqual(2)
+  })
+
+  it(`handles the in operator for floats`, async () => {
+    let result = await runFilter({ float: { in: [1.5, 2.5] } })
+    expect(result.length).toEqual(2)
+    expect(result[0].index).toEqual(0)
+    expect(result[1].index).toEqual(1)
+  })
+
+  it(`handles the in operator for booleans`, async () => {
+    let result = await runFilter({ boolean: { in: [true] } })
+    expect(result.length).toEqual(1) // 2
+    expect(result[0].index).toEqual(0)
+    //    expect(result[1].index).toEqual(2)
+  })
+
+  it(`handles the in operator for array`, async () => {
+    let result = await runFilter({ anArray: { in: [5] } })
+    expect(result.length).toEqual(1)
+    expect(result[0].name).toEqual(`The Mad Wax`)
+  })
+
+  it(`handles the nested in operator for array of strings`, async () => {
+    let result = await runFilter({ frontmatter: { tags: { in: [`moo`] } } })
+    expect(result).toHaveLength(1)
+    expect(result[0].name).toEqual(`The Mad Max`)
+  })
+
+  it(`handles the elemMatch operator for array of objects`, async () => {
+    let result = await runFilter({
+      data: {
+        tags: {
+          elemMatch: {
+            tag: {
+              document: {
+                elemMatch: {
+                  data: {
+                    tag: { eq: `Gatsby` },
+                  },
+                },
+              },
+            },
+          },
+        },
+      },
+    })
+
+    expect(result.length).toEqual(1)
+    expect(result[0].index).toEqual(2)
+  })
+
+  it(`handles the elemMatch operator for array of objects (2)`, async () => {
+    let result = await runFilter({
+      data: {
+        tags: {
+          elemMatch: {
+            tag: {
+              document: {
+                elemMatch: {
+                  data: {
+                    tag: { eq: `Design System` },
+                  },
+                },
+              },
+            },
+          },
+        },
+      },
+    })
+
+    expect(result.length).toEqual(2)
+    expect(result[0].index).toEqual(1)
+    expect(result[1].index).toEqual(2)
+  })
+
+  it(`handles the elemMatch operator for array of objects (number)`, async () => {
+    let result = await runFilter({
+      data: {
+        tags: {
+          elemMatch: {
+            tag: {
+              document: {
+                elemMatch: {
+                  number: { lt: 4 },
+                },
+              },
+            },
+          },
+        },
+      },
+    })
+
+    expect(result.length).toEqual(1)
+    expect(result[0].index).toEqual(1)
+  })
+
+  it(`handles the nin operator for array`, async () => {
+    let result = await runFilter({ anArray: { nin: [5] } })
+
+    expect(result.length).toEqual(2)
+
+    result.forEach(edge => {
+      expect(edge.anArray).not.toEqual(expect.arrayContaining([5]))
+    })
+  })
+
+  it(`handles the nin operator for strings`, async () => {
+    let result = await runFilter({ string: { nin: [`b`, `c`] } })
+
+    expect(result.length).toEqual(1)
+    result.forEach(edge => {
+      expect(edge.string).not.toEqual(`b`)
+      expect(edge.string).not.toEqual(`c`)
+    })
+  })
+
+  it(`handles the nin operator for ints`, async () => {
+    let result = await runFilter({ index: { nin: [0, 2] } })
+
+    expect(result.length).toEqual(1)
+    result.forEach(edge => {
+      expect(edge.index).not.toEqual(0)
+      expect(edge.index).not.toEqual(2)
+    })
+  })
+
+  it(`handles the nin operator for floats`, async () => {
+    let result = await runFilter({ float: { nin: [1.5] } })
+
+    expect(result.length).toEqual(2)
+    result.forEach(edge => {
+      expect(edge.float).not.toEqual(1.5)
+    })
+  })
+
+  it(`handles the nin operator for booleans`, async () => {
+    let result = await runFilter({ boolean: { nin: [true, null] } })
+
+    expect(result.length).toEqual(1)
+    expect(result[0].boolean).toBe(false)
+  })
+
+  it(`handles the glob operator`, async () => {
+    let result = await runFilter({ name: { glob: `*Wax` } })
+
+    expect(result.length).toEqual(2)
+    expect(result[0].name).toEqual(`The Mad Wax`)
+  })
+
+  it(`filters date fields`, async () => {
+    let result = await runFilter({ date: { ne: null } })
+
+    expect(result.length).toEqual(2)
+    expect(result[0].index).toEqual(0)
+    expect(result[1].index).toEqual(2)
+  })
+
+  it(`handles the eq operator for array field values`, async () => {
+    const result = await runFilter({ anArray: { eq: 5 } })
+
+    expect(result.length).toBe(1)
+    expect(result[0].index).toBe(1)
+  })
+
+  it(`handles the ne operator for array field values`, async () => {
+    const result = await runFilter({ anArray: { ne: 1 } })
+
+    expect(result.length).toBe(1)
+    expect(result[0].index).toBe(2)
+  })
+})
+
+describe(`collection fields`, () => {
+  it(`sorts results`, async () => {
+    let result = await runQuery({
+      limit: 10,
+      sort: {
+        fields: [`frontmatter.blue`],
+        order: [`desc`],
+      },
+    })
+
+    expect(result.length).toEqual(3)
+    expect(result[0].name).toEqual(`The Mad Wax`)
+  })
+
+  it(`sorts results with desc has null fields first`, async () => {
+    let result = await runQuery({
+      limit: 10,
+      sort: {
+        fields: [`waxOnly`],
+        order: [`desc`],
+      },
+    })
+
+    expect(result.length).toEqual(3)
+    expect(result[0].id).toEqual(`0`)
+    expect(result[1].id).toEqual(`2`)
+    expect(result[2].id).toEqual(`1`)
+  })
+
+  it(`sorts results with asc has null fields last`, async () => {
+    let result = await runQuery({
+      limit: 10,
+      sort: {
+        fields: [`waxOnly`],
+        order: [`asc`],
+      },
+    })
+
+    expect(result.length).toEqual(3)
+    expect(result[0].id).toEqual(`1`)
+    expect(result[1].id).toEqual(`2`)
+    expect(result[2].id).toEqual(`0`)
+  })
+
+  it(`applies specified sort order, and sorts asc by default`, async () => {
+    let result = await runQuery({
+      limit: 10,
+      sort: {
+        fields: [`frontmatter.blue`, `id`],
+        order: [`desc`], // `id` field will be sorted asc
+      },
+    })
+
+    expect(result.length).toEqual(3)
+    expect(result[0].id).toEqual(`1`) // blue = 10010, id = 1
+    expect(result[1].id).toEqual(`2`) // blue = 10010, id = 2
+    expect(result[2].id).toEqual(`0`) // blue = 100, id = 0
+  })
+
+  it(`applies specified sort order per field`, async () => {
+    let result = await runQuery({
+      limit: 10,
+      sort: {
+        fields: [`frontmatter.blue`, `id`],
+        order: [`desc`, `desc`], // `id` field will be sorted desc
+      },
+    })
+
+    expect(result.length).toEqual(3)
+    expect(result[0].id).toEqual(`2`) // blue = 10010, id = 2
+    expect(result[1].id).toEqual(`1`) // blue = 10010, id = 1
+    expect(result[2].id).toEqual(`0`) // blue = 100, id = 0
+  })
+})
diff --git a/node_modules/gatsby/src/schema/context.js b/node_modules/gatsby/src/schema/context.js
new file mode 100644
index 0000000..9e037af
--- /dev/null
+++ b/node_modules/gatsby/src/schema/context.js
@@ -0,0 +1,18 @@
+const { LocalNodeModel } = require(`./node-model`)
+
+const withResolverContext = (context, schema) => {
+  const nodeStore = require(`../db/nodes`)
+  const createPageDependency = require(`../redux/actions/add-page-dependency`)
+
+  return {
+    ...context,
+    nodeModel: new LocalNodeModel({
+      nodeStore,
+      schema,
+      createPageDependency,
+      path: context.path,
+    }),
+  }
+}
+
+module.exports = withResolverContext
diff --git a/node_modules/gatsby/src/schema/index.js b/node_modules/gatsby/src/schema/index.js
new file mode 100644
index 0000000..3601c93
--- /dev/null
+++ b/node_modules/gatsby/src/schema/index.js
@@ -0,0 +1,79 @@
+/* @flow */
+
+const tracer = require(`opentracing`).globalTracer()
+const { store } = require(`../redux`)
+const nodeStore = require(`../db/nodes`)
+const { createSchemaComposer } = require(`./schema-composer`)
+const { buildSchema, rebuildSchemaWithSitePage } = require(`./schema`)
+const { TypeConflictReporter } = require(`./infer/type-conflict-reporter`)
+
+module.exports.build = async ({ parentSpan }) => {
+  const spanArgs = parentSpan ? { childOf: parentSpan } : {}
+  const span = tracer.startSpan(`build schema`, spanArgs)
+
+  let {
+    schemaCustomization: { thirdPartySchemas, types },
+    config: { mapping: typeMapping },
+  } = store.getState()
+
+  const typeConflictReporter = new TypeConflictReporter()
+
+  const schemaComposer = createSchemaComposer()
+  const schema = await buildSchema({
+    schemaComposer,
+    nodeStore,
+    types,
+    thirdPartySchemas,
+    typeMapping,
+    typeConflictReporter,
+    parentSpan,
+  })
+
+  typeConflictReporter.printConflicts()
+
+  store.dispatch({
+    type: `SET_SCHEMA_COMPOSER`,
+    payload: schemaComposer,
+  })
+  store.dispatch({
+    type: `SET_SCHEMA`,
+    payload: schema,
+  })
+
+  span.finish()
+}
+
+module.exports.rebuildWithSitePage = async ({ parentSpan }) => {
+  const spanArgs = parentSpan ? { childOf: parentSpan } : {}
+  const span = tracer.startSpan(
+    `rebuild schema with SitePage context`,
+    spanArgs
+  )
+  let {
+    schemaCustomization: { composer: schemaComposer },
+    config: { mapping: typeMapping },
+  } = store.getState()
+
+  const typeConflictReporter = new TypeConflictReporter()
+
+  const schema = await rebuildSchemaWithSitePage({
+    schemaComposer,
+    nodeStore,
+    typeMapping,
+    typeConflictReporter,
+    parentSpan,
+  })
+
+  typeConflictReporter.printConflicts()
+
+  store.dispatch({
+    type: `SET_SCHEMA_COMPOSER`,
+    payload: schemaComposer,
+  })
+  store.dispatch({
+    type: `SET_SCHEMA`,
+    payload: schema,
+  })
+
+  span.finish()
+}
diff --git a/node_modules/gatsby/src/schema/infer/__tests__/__snapshots__/example-value.js.snap b/node_modules/gatsby/src/schema/infer/__tests__/__snapshots__/example-value.js.snap
new file mode 100644
index 0000000..d127c51
--- /dev/null
+++ b/node_modules/gatsby/src/schema/infer/__tests__/__snapshots__/example-value.js.snap
@@ -0,0 +1,167 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`Get example value for type inference build enum values for fields from array on nodes 1`] = `
+Object {
+  "anArray": Object {
+    "field": "anArray",
+  },
+  "context___nestedObject___name": Object {
+    "field": "context.nestedObject.name",
+  },
+  "context___nestedObject___someOtherProperty": Object {
+    "field": "context.nestedObject.someOtherProperty",
+  },
+  "date": Object {
+    "field": "date",
+  },
+  "frontmatter___blue": Object {
+    "field": "frontmatter.blue",
+  },
+  "frontmatter___circle": Object {
+    "field": "frontmatter.circle",
+  },
+  "frontmatter___date": Object {
+    "field": "frontmatter.date",
+  },
+  "frontmatter___draft": Object {
+    "field": "frontmatter.draft",
+  },
+  "frontmatter___title": Object {
+    "field": "frontmatter.title",
+  },
+  "hair": Object {
+    "field": "hair",
+  },
+  "key_with__unsupported_values": Object {
+    "field": "key_with__unsupported_values",
+  },
+  "name": Object {
+    "field": "name",
+  },
+  "nestedArrays": Object {
+    "field": "nestedArrays",
+  },
+  "objectsInArray": Object {
+    "field": "objectsInArray",
+  },
+  "objectsInArray___field1": Object {
+    "field": "objectsInArray.field1",
+  },
+  "objectsInArray___field2": Object {
+    "field": "objectsInArray.field2",
+  },
+  "objectsInArray___field3": Object {
+    "field": "objectsInArray.field3",
+  },
+}
+`;
+
+exports[`Get example value for type inference builds field examples from an array of nodes 1`] = `
+Object {
+  "anArray": Array [
+    1,
+  ],
+  "context": Object {
+    "nestedObject": Object {
+      "name": "Inner name",
+      "someOtherProperty": 1,
+    },
+  },
+  "date": "2006-07-22T22:39:53.000Z",
+  "frontmatter": Object {
+    "blue": 100,
+    "circle": "happy",
+    "date": "2006-07-22T22:39:53.000Z",
+    "draft": false,
+    "title": "The world of dash and adventure",
+  },
+  "hair": 1,
+  "key-with..unsupported-values": true,
+  "name": "The Mad Max",
+  "nestedArrays": Array [
+    Array [
+      1,
+    ],
+  ],
+  "objectsInArray": Array [
+    Object {
+      "field1": true,
+      "field2": 1,
+      "field3": "foo",
+    },
+  ],
+}
+`;
+
+exports[`Type conflicts doesn't report ignored fields 1`] = `
+Array [
+  TypeConflictEntry {
+    "selector": "Conflict_3.other",
+    "types": Map {
+      "number" => Object {
+        "description": "",
+        "value": 1,
+      },
+      "string" => Object {
+        "description": "",
+        "value": "foo",
+      },
+    },
+  },
+]
+`;
+
+exports[`Type conflicts reports conflict when array has mixed types and its origin 1`] = `
+Array [
+  TypeConflictEntry {
+    "selector": "Conflict_2.arrayOfMixedType",
+    "types": Map {
+      "[string,number,boolean]" => Object {
+        "description": "",
+        "value": Array [
+          "string1",
+          5,
+          "string2",
+          true,
+        ],
+      },
+    },
+  },
+]
+`;
+
+exports[`Type conflicts reports date and string conflicts 1`] = `
+Array [
+  TypeConflictEntry {
+    "selector": "Conflict_1.date",
+    "types": Map {
+      "date" => Object {
+        "description": "",
+        "value": "2019-01-01",
+      },
+      "string" => Object {
+        "description": "",
+        "value": "Totally not a date",
+      },
+    },
+  },
+]
+`;
+
+exports[`Type conflicts reports type conflicts and its origin 1`] = `
+Array [
+  TypeConflictEntry {
+    "selector": "Conflict_1.stringOrNumber",
+    "types": Map {
+      "string" => Object {
+        "description": "",
+        "value": "string",
+      },
+      "number" => Object {
+        "description": "",
+        "value": 5,
+      },
+    },
+  },
+]
+`;
diff --git a/node_modules/gatsby/src/schema/infer/__tests__/__snapshots__/infer.js.snap b/node_modules/gatsby/src/schema/infer/__tests__/__snapshots__/infer.js.snap
new file mode 100644
index 0000000..5838c41
--- /dev/null
+++ b/node_modules/gatsby/src/schema/infer/__tests__/__snapshots__/infer.js.snap
@@ -0,0 +1,293 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`GraphQL type inference Handles dates Infers from Date objects 1`] = `
+Object {
+  "data": Object {
+    "allTest": Object {
+      "edges": Array [
+        Object {
+          "node": Object {
+            "dateObject": "2012-11-05T00:00:00.000Z",
+          },
+        },
+        Object {
+          "node": Object {
+            "dateObject": "2012-11-05T00:00:00.000Z",
+          },
+        },
+      ],
+    },
+  },
+}
+`;
+
+exports[`GraphQL type inference Handles dates Infers from array of Date objects 1`] = `
+Object {
+  "data": Object {
+    "allTest": Object {
+      "edges": Array [
+        Object {
+          "node": Object {
+            "dateObject": Array [
+              "2012-11-05T00:00:00.000Z",
+              "2012-11-06T00:00:00.000Z",
+            ],
+          },
+        },
+        Object {
+          "node": Object {
+            "dateObject": Array [
+              "2012-11-05T00:00:00.000Z",
+            ],
+          },
+        },
+      ],
+    },
+  },
+}
+`;
+
+exports[`GraphQL type inference Handles priority for conflicting fields 1`] = `
+Object {
+  "data": Object {
+    "allTest": Object {
+      "edges": Array [
+        Object {
+          "node": Object {
+            "_2invalid": 1,
+            "sibling": Object {
+              "id": "2",
+            },
+          },
+        },
+        Object {
+          "node": Object {
+            "_2invalid": 1,
+            "sibling": Object {
+              "id": "3",
+            },
+          },
+        },
+        Object {
+          "node": Object {
+            "_2invalid": 1,
+            "sibling": Object {
+              "id": "1",
+            },
+          },
+        },
+      ],
+    },
+  },
+}
+`;
+
+exports[`GraphQL type inference Handles priority for conflicting nested fields 1`] = `
+Object {
+  "data": Object {
+    "allTest": Object {
+      "edges": Array [
+        Object {
+          "node": Object {
+            "_2invalid": Object {
+              "nested": Object {
+                "check": true,
+              },
+            },
+          },
+        },
+        Object {
+          "node": Object {
+            "_2invalid": Object {
+              "nested": Object {
+                "check": false,
+              },
+            },
+          },
+        },
+      ],
+    },
+  },
+}
+`;
+
+exports[`GraphQL type inference Infers graphql type from array of nodes 1`] = `
+Object {
+  "data": Object {
+    "allTest": Object {
+      "edges": Array [
+        Object {
+          "node": Object {
+            "aBoolean": true,
+            "aNestedArray": Array [
+              Array [
+                1,
+                2,
+                3,
+                4,
+              ],
+              Array [
+                5,
+                6,
+                7,
+                8,
+              ],
+            ],
+            "anArray": Array [
+              1,
+              2,
+              3,
+              4,
+            ],
+            "anObjectArray": Array [
+              Object {
+                "aBoolean": true,
+                "aNumber": 2,
+                "anArray": null,
+                "anotherObjectArray": null,
+              },
+              Object {
+                "aBoolean": null,
+                "aNumber": 2,
+                "anArray": Array [
+                  1,
+                  2,
+                ],
+                "anotherObjectArray": null,
+              },
+              Object {
+                "aBoolean": null,
+                "aNumber": null,
+                "anArray": null,
+                "anotherObjectArray": Array [
+                  Object {
+                    "bar": 10,
+                    "baz": null,
+                  },
+                ],
+              },
+            ],
+            "anObjectArrayWithNull": Array [
+              Object {
+                "anotherObjectArray": Array [
+                  Object {
+                    "baz": "quz",
+                  },
+                ],
+              },
+              null,
+            ],
+            "date": "1012",
+            "deepObject": Object {
+              "deepObject": Object {
+                "deepObject": Object {
+                  "level": 3,
+                },
+                "level": 2,
+              },
+              "level": 1,
+            },
+            "domain": "pizza.com",
+            "externalUrl": "https://example.com/awesome.jpg",
+            "frontmatter": Object {
+              "date": "1012",
+              "title": "The world of dash and adventure",
+            },
+            "hair": 1,
+          },
+        },
+        Object {
+          "node": Object {
+            "aBoolean": null,
+            "aNestedArray": Array [
+              Array [
+                1,
+                2,
+                3,
+                4,
+              ],
+            ],
+            "anArray": Array [
+              1,
+              2,
+              5,
+              4,
+            ],
+            "anObjectArray": Array [
+              Object {
+                "aBoolean": null,
+                "aNumber": null,
+                "anArray": null,
+                "anotherObjectArray": Array [
+                  Object {
+                    "bar": null,
+                    "baz": "quz",
+                  },
+                ],
+              },
+            ],
+            "anObjectArrayWithNull": Array [
+              Object {
+                "anotherObjectArray": Array [
+                  Object {
+                    "baz": "quz",
+                  },
+                ],
+              },
+              null,
+            ],
+            "date": "1984",
+            "deepObject": null,
+            "domain": null,
+            "externalUrl": null,
+            "frontmatter": Object {
+              "date": "1984",
+              "title": "The world of slash and adventure",
+            },
+            "hair": 2,
+          },
+        },
+      ],
+    },
+  },
+}
+`;
+
+exports[`GraphQL type inference handles lowercase type names 1`] = `
+Object {
+  "data": Object {
+    "allWordpressPage": Object {
+      "edges": Array [
+        Object {
+          "node": Object {
+            "__typename": "wordpress__PAGE",
+            "acfFields": Object {
+              "__typename": "wordpress__PAGEAcfFields",
+              "fooz": "bar",
+            },
+            "id": "1",
+          },
+        },
+      ],
+    },
+  },
+}
+`;
+
+exports[`GraphQL type inference type conflicts catches conflicts and removes field 1`] = `
+Array [
+  TypeConflictEntry {
+    "selector": "Test.number",
+    "types": Map {
+      "number" => Object {
+        "description": "",
+        "value": 1.1,
+      },
+      "string" => Object {
+        "description": "",
+        "value": "1",
+      },
+    },
+  },
+]
+`;
diff --git a/node_modules/gatsby/src/schema/infer/__tests__/example-value.js b/node_modules/gatsby/src/schema/infer/__tests__/example-value.js
new file mode 100644
index 0000000..0fcbd90
--- /dev/null
+++ b/node_modules/gatsby/src/schema/infer/__tests__/example-value.js
@@ -0,0 +1,737 @@
+// NOTE: Previously `data-tree-utils-test.js`
+
+const { getExampleValue } = require(`../example-value`)
+const { TypeConflictReporter } = require(`../type-conflict-reporter`)
+
+const INVALID_VALUE = undefined
+
+describe(`Get example value for type inference`, () => {
+  const typeConflictReporter = new TypeConflictReporter()
+
+  afterEach(() => {
+    typeConflictReporter.clearConflicts()
+  })
+
+  const nodes = [
+    {
+      name: `The Mad Max`,
+      hair: 1,
+      date: `2006-07-22T22:39:53.000Z`,
+      "key-with..unsupported-values": true,
+      emptyArray: [],
+      anArray: [1, 2, 3, 4],
+      nestedArrays: [[1, 2, 3], [4, 5, 6]],
+      objectsInArray: [{ field1: true }, { field2: 1 }],
+      frontmatter: {
+        date: `2006-07-22T22:39:53.000Z`,
+        title: `The world of dash and adventure`,
+        blue: 100,
+      },
+      context: {
+        nestedObject: null,
+      },
+    },
+    {
+      name: `The Mad Wax`,
+      hair: 2,
+      date: `2006-07-22T22:39:53.000Z`,
+      emptyArray: [undefined, null],
+      anArray: [1, 2, 5, 4],
+      iAmNull: null,
+      nestedArrays: [[1, 2, 3]],
+      objectsInArray: [{ field3: `foo` }],
+      frontmatter: {
+        date: `2006-07-22T22:39:53.000Z`,
+        title: `The world of slash and adventure`,
+        blue: 10010,
+        circle: `happy`,
+        draft: false,
+      },
+      context: {
+        nestedObject: {
+          someOtherProperty: 1,
+        },
+      },
+    },
+    {
+      name: `The Mad Wax`,
+      hair: 3,
+      date: `2006-07-22T22:39:53.000Z`,
+      anArray: [],
+      iAmNull: null,
+      frontmatter: {
+        date: `2006-07-22T22:39:53.000Z`,
+        title: `The world of slash and adventure`,
+        blue: 10010,
+        circle: `happy`,
+        draft: false,
+      },
+      context: {
+        nestedObject: {
+          someOtherProperty: 2,
+        },
+      },
+    },
+    {
+      name: `The Mad Wax`,
+      hair: 4,
+      date: `2006-07-22T22:39:53.000Z`,
+      anArray: [4, 6, 2],
+      iAmNull: null,
+      frontmatter: {
+        date: `2006-07-22T22:39:53.000Z`,
+        title: `The world of slash and adventure`,
+        blue: 10010,
+        circle: `happy`,
+        draft: false,
+      },
+      context: {
+        nestedObject: {
+          name: `Inner name`,
+          someOtherProperty: 3,
+        },
+      },
+      "": ``,
+    },
+  ]
+
+  it(`builds field examples from an array of nodes`, () => {
+    expect(getExampleValue({ nodes, typeConflictReporter })).toMatchSnapshot()
+  })
+
+  it(`skips null fields`, () => {
+    expect(
+      getExampleValue({ nodes, typeConflictReporter }).iAmNull
+    ).not.toBeDefined()
+  })
+
+  it(`skips fields with key set to empty string`, () => {
+    expect(
+      getExampleValue({ nodes, typeConflictReporter })[``]
+    ).not.toBeDefined()
+  })
+
+  it(`should not mutate the nodes`, () => {
+    getExampleValue({ nodes, typeConflictReporter })
+    expect(nodes[0].context.nestedObject).toBeNull()
+    expect(nodes[1].context.nestedObject.someOtherProperty).toEqual(1)
+    expect(nodes[2].context.nestedObject.someOtherProperty).toEqual(2)
+    expect(nodes[3].context.nestedObject.someOtherProperty).toEqual(3)
+  })
+
+  it(`skips empty or sparse arrays`, () => {
+    expect(
+      getExampleValue({ nodes, typeConflictReporter }).emptyArray
+    ).not.toBeDefined()
+    expect(getExampleValue({ nodes, typeConflictReporter }).hair).toBeDefined()
+  })
+
+  it(`skips ignoredFields at the top level`, () => {
+    const example = getExampleValue({
+      nodes,
+      typeConflictReporter,
+      ignoreFields: [`name`, `anArray`],
+    })
+
+    expect(example.name).not.toBeDefined()
+    expect(example.anArray).not.toBeDefined()
+    expect(example.hair).toBeDefined()
+    expect(example.context.nestedObject.name).toBeDefined()
+  })
+
+  it(`build enum values for fields from array on nodes`, () => {
+    // TODO: Should be moved to `types/__tests__/sort.js`
+    const { createSchemaComposer } = require(`../../schema-composer`)
+    const { addInferredFields } = require(`../add-inferred-fields`)
+    const { getFieldsEnum } = require(`../../types/sort`)
+
+    const sc = createSchemaComposer()
+    const tc = sc.createObjectTC(`Fields`)
+    addInferredFields({
+      schemaComposer: sc,
+      typeComposer: tc,
+      exampleValue: getExampleValue({ nodes, typeConflictReporter }),
+    })
+
+    const fields = getFieldsEnum({
+      schemaComposer: sc,
+      typeComposer: tc,
+      inputTypeComposer: tc.getITC(),
+    })
+      .getType()
+      .getValues()
+      .reduce((acc, { name, value }) => {
+        acc[name] = { field: value }
+        return acc
+      }, {})
+
+    expect(fields).toMatchSnapshot()
+  })
+
+  it(`turns polymorphic fields null`, () => {
+    let example = getExampleValue({
+      nodes: [{ foo: null }, { foo: [1] }, { foo: { field: 1 } }],
+      typeConflictReporter,
+    })
+    expect(example.foo).toBe(INVALID_VALUE)
+  })
+
+  it(`handles polymorphic arrays`, () => {
+    let example = getExampleValue({
+      nodes: [{ foo: [[`foo`, `bar`]] }, { foo: [{ field: 1 }] }],
+      typeConflictReporter,
+    })
+    expect(example.foo).toBe(INVALID_VALUE)
+  })
+
+  it(`doesn't confuse empty fields for polymorhpic ones`, () => {
+    let example = getExampleValue({
+      nodes: [{ foo: { bar: 1 } }, { foo: null }, { foo: { field: 1 } }],
+      typeConflictReporter,
+    })
+    expect(example.foo).toEqual({ field: 1, bar: 1 })
+
+    example = getExampleValue({
+      nodes: [
+        { foo: [{ bar: 1 }] },
+        { foo: null },
+        { foo: [{ field: 1 }, { baz: 1 }] },
+      ],
+      typeConflictReporter,
+    })
+    expect(example.foo).toEqual([{ field: 1, bar: 1, baz: 1 }])
+  })
+
+  it(`skips unsupported types`, () => {
+    // Skips functions
+    let example = getExampleValue({
+      nodes: [{ foo: () => {} }],
+      typeConflictReporter,
+    })
+    expect(example.foo).not.toBeDefined()
+
+    // Skips array of functions
+    example = getExampleValue({
+      nodes: [{ foo: [() => {}] }],
+      typeConflictReporter,
+    })
+    expect(example.foo).not.toBeDefined()
+  })
+
+  it(`prefers float when multiple number types`, () => {
+    let example
+
+    // nodes starting with 32-bit integer ("big" ints are float)
+    example = getExampleValue({
+      nodes: [{ number: 5 }, { number: 2.5 }],
+      typeConflictReporter,
+    })
+    expect(example.number).toBeDefined()
+    expect(example.number).toEqual(2.5)
+    example = getExampleValue({
+      nodes: [{ number: 5 }, { number: 3000000000 }],
+      typeConflictReporter,
+    })
+    expect(example.number).toBeDefined()
+    expect(example.number).toEqual(3000000000)
+
+    // with node not containing number field
+    example = getExampleValue({
+      nodes: [{ number: 5 }, {}, { number: 2.5 }],
+      typeConflictReporter,
+    })
+    expect(example.number).toBeDefined()
+    expect(example.number).toEqual(2.5)
+
+    // nodes starting with float ("big" ints are float)
+    example = getExampleValue({
+      nodes: [{ number: 2.5 }, { number: 5 }],
+      typeConflictReporter,
+    })
+    expect(example.number).toBeDefined()
+    expect(example.number).toEqual(2.5)
+    example = getExampleValue({
+      nodes: [{ number: 3000000000 }, { number: 5 }],
+      typeConflictReporter,
+    })
+    expect(example.number).toBeDefined()
+    expect(example.number).toEqual(3000000000)
+
+    // array of numbers - starting with float
+    example = getExampleValue({
+      nodes: [{ numbers: [2.5, 5] }],
+      typeConflictReporter,
+    })
+    expect(example.numbers).toBeDefined()
+    expect(Array.isArray(example.numbers)).toBe(true)
+    expect(example.numbers.length).toBe(1)
+    expect(example.numbers[0]).toBe(2.5)
+    example = getExampleValue({
+      nodes: [{ numbers: [3000000000, 5] }],
+      typeConflictReporter,
+    })
+    expect(example.numbers).toBeDefined()
+    expect(Array.isArray(example.numbers)).toBe(true)
+    expect(example.numbers.length).toBe(1)
+    expect(example.numbers[0]).toBe(3000000000)
+
+    // array of numbers - starting with 32-bit integer
+    example = getExampleValue({
+      nodes: [{ numbers: [5, 2.5] }],
+      typeConflictReporter,
+    })
+    expect(example.numbers).toBeDefined()
+    expect(Array.isArray(example.numbers)).toBe(true)
+    expect(example.numbers.length).toBe(1)
+    expect(example.numbers[0]).toBe(2.5)
+    example = getExampleValue({
+      nodes: [{ numbers: [5, 3000000000] }],
+      typeConflictReporter,
+    })
+    expect(example.numbers).toBeDefined()
+    expect(Array.isArray(example.numbers)).toBe(true)
+    expect(example.numbers.length).toBe(1)
+    expect(example.numbers[0]).toBe(3000000000)
+  })
+
+  it(`goes through nested object-like objects`, () => {
+    class ObjectLike {
+      constructor(key1, key2) {
+        this.key1 = key1
+        this.key2 = key2
+      }
+    }
+
+    const example = getExampleValue({
+      nodes: [
+        {
+          foo: new ObjectLike(1, `string`),
+          bar: new ObjectLike(2, `string2`),
+        },
+      ],
+      typeConflictReporter,
+    })
+    expect(example).toMatchInlineSnapshot(`
+Object {
+  "bar": Object {
+    "key1": 2,
+    "key2": "string2",
+  },
+  "foo": Object {
+    "key1": 1,
+    "key2": "string",
+  },
+}
+`)
+  })
+
+  describe(`handles mix of date strings and date objects`, () => {
+    it(`infers mixed string and object dates as Date`, () => {
+      let example = getExampleValue({
+        nodes: [
+          { date: new Date(`2017-12-01T14:59:45.600Z`) },
+          { date: `2017-01-12T18:13:38.326Z` },
+          { date: `` },
+        ],
+        typeConflictReporter,
+      })
+      expect(example.date).toMatchInlineSnapshot(`"1978-09-26"`)
+
+      example = getExampleValue({
+        nodes: [
+          { date: `2017-01-12T18:13:38.326Z` },
+          { date: new Date(`2017-12-01T14:59:45.600Z`) },
+          { date: `` },
+        ],
+        typeConflictReporter,
+      })
+      expect(example.date).toMatchInlineSnapshot(`"1978-09-26"`)
+
+      example = getExampleValue({
+        nodes: [
+          { date: `` },
+          { date: `2017-01-12T18:13:38.326Z` },
+          { date: new Date(`2017-12-01T14:59:45.600Z`) },
+        ],
+        typeConflictReporter,
+      })
+      expect(example.date).toMatchInlineSnapshot(`"1978-09-26"`)
+    })
+
+    it(`infers mixed date objects and non-date strings as string`, () => {
+      let example = getExampleValue({
+        nodes: [
+          { date: new Date(`2017-12-01T14:59:45.600Z`) },
+          { date: `This is not a date!!!!!!` },
+          { date: `` },
+        ],
+        typeConflictReporter,
+      })
+      expect(example.date).toEqual(`String`)
+
+      example = getExampleValue({
+        nodes: [
+          { date: `This is not a date!!!!!!` },
+          { date: new Date(`2017-12-01T14:59:45.600Z`) },
+          { date: `` },
+        ],
+        typeConflictReporter,
+      })
+      expect(example.date).toEqual(`String`)
+
+      example = getExampleValue({
+        nodes: [
+          { date: `` },
+          { date: `This is not a date!!!!!!` },
+          { date: new Date(`2017-12-01T14:59:45.600Z`) },
+        ],
+        typeConflictReporter,
+      })
+      expect(example.date).toEqual(`String`)
+    })
+
+    it(`infers arrays with mix of date strings and date objects as dates`, () => {
+      let example = getExampleValue({
+        nodes: [
+          { dates: [new Date(`2017-12-01T14:59:45.600Z`)] },
+          { dates: [`2017-01-12T18:13:38.326Z`] },
+          { dates: [``] },
+        ],
+        typeConflictReporter,
+      })
+      expect(example.dates).toMatchInlineSnapshot(`
+Array [
+  "1978-09-26",
+]
+`)
+
+      example = getExampleValue({
+        nodes: [
+          { dates: [`2017-01-12T18:13:38.326Z`] },
+          { dates: [``] },
+          { dates: [new Date(`2017-12-01T14:59:45.600Z`)] },
+        ],
+        typeConflictReporter,
+      })
+      expect(example.dates).toMatchInlineSnapshot(`
+Array [
+  "1978-09-26",
+]
+`)
+
+      example = getExampleValue({
+        nodes: [
+          { dates: [``] },
+          { dates: [new Date(`2017-12-01T14:59:45.600Z`)] },
+          { dates: [`2017-01-12T18:13:38.326Z`] },
+        ],
+        typeConflictReporter,
+      })
+      expect(example.dates).toMatchInlineSnapshot(`
+Array [
+  "1978-09-26",
+]
+`)
+    })
+
+    it(`infers arrays of mixed date objects and non-date strings as strings`, () => {
+      let example = getExampleValue({
+        nodes: [
+          { dates: [new Date(`2017-12-01T14:59:45.600Z`)] },
+          { dates: [`This is not a date!!!!!!`] },
+          { dates: [``] },
+        ],
+        typeConflictReporter,
+      })
+      expect(example.dates).toEqual([`String`])
+
+      example = getExampleValue({
+        nodes: [
+          { dates: [`This is not a date!!!!!!`] },
+          { dates: [new Date(`2017-12-01T14:59:45.600Z`)] },
+          { dates: [``] },
+        ],
+        typeConflictReporter,
+      })
+      expect(example.dates).toEqual([`String`])
+
+      example = getExampleValue({
+        nodes: [
+          { dates: [``] },
+          { dates: [new Date(`2017-12-01T14:59:45.600Z`)] },
+          { dates: [`This is not a date!!!!!!`] },
+        ],
+        typeConflictReporter,
+      })
+      expect(example.dates).toEqual([`String`])
+    })
+
+    it(`infers single array of mixed date objects and date strings as date`, () => {
+      let example = getExampleValue({
+        nodes: [
+          {
+            dates: [
+              new Date(`2017-12-01T14:59:45.600Z`),
+              `2017-01-12T18:13:38.326Z`,
+              ``,
+            ],
+          },
+        ],
+        typeConflictReporter,
+      })
+      expect(example.dates).toMatchInlineSnapshot(`
+Array [
+  "1978-09-26",
+]
+`)
+
+      example = getExampleValue({
+        nodes: [
+          {
+            dates: [
+              `2017-01-12T18:13:38.326Z`,
+              new Date(`2017-12-01T14:59:45.600Z`),
+              ``,
+            ],
+          },
+        ],
+        typeConflictReporter,
+      })
+      expect(example.dates).toMatchInlineSnapshot(`
+Array [
+  "1978-09-26",
+]
+`)
+
+      example = getExampleValue({
+        nodes: [
+          {
+            dates: [
+              ``,
+              `2017-01-12T18:13:38.326Z`,
+              new Date(`2017-12-01T14:59:45.600Z`),
+            ],
+          },
+        ],
+        typeConflictReporter,
+      })
+      expect(example.dates).toMatchInlineSnapshot(`
+Array [
+  "1978-09-26",
+]
+`)
+    })
+
+    it(`infers arrays of mixed date objects and non-date strings as strings`, () => {
+      let example = getExampleValue({
+        nodes: [
+          {
+            dates: [
+              new Date(`2017-12-01T14:59:45.600Z`),
+              ``,
+              `This is not a date!!!!!!`,
+            ],
+          },
+        ],
+        typeConflictReporter,
+      })
+      expect(example.dates).toEqual([`String`])
+
+      example = getExampleValue({
+        nodes: [
+          {
+            dates: [
+              ``,
+              new Date(`2017-12-01T14:59:45.600Z`),
+              `This is not a date!!!!!!`,
+            ],
+          },
+        ],
+        typeConflictReporter,
+      })
+      expect(example.dates).toEqual([`String`])
+    })
+
+    it(`infers variadic arrays of mix of dates and date strings as date`, () => {
+      const example = getExampleValue({
+        nodes: [
+          {
+            dates: [
+              new Date(`2017-12-01T14:59:45.600Z`),
+              `2017-01-12T18:13:38.326Z`,
+              ``,
+            ],
+          },
+          { dates: [new Date(`2017-12-01T14:59:45.600Z`), ``] },
+          { dates: [``, `2017-01-12T18:13:38.326Z`] },
+        ],
+        typeConflictReporter,
+      })
+      expect(example.dates).toMatchInlineSnapshot(`
+Array [
+  "1978-09-26",
+]
+`)
+    })
+
+    it(`infers variadic arrays of mix of dates and non-date strings as string`, () => {
+      let example = getExampleValue({
+        nodes: [
+          {
+            dates: [
+              ``,
+              new Date(`2017-12-01T14:59:45.600Z`),
+              `This is not a date!!!!!!`,
+            ],
+          },
+          { dates: [new Date(`2017-12-01T14:59:45.600Z`)] },
+          { dates: [`2017-01-12T18:13:38.326Z`] },
+        ],
+        typeConflictReporter,
+      })
+      expect(example.dates).toEqual([`String`])
+
+      example = getExampleValue({
+        nodes: [
+          {
+            dates: [
+              new Date(`2017-12-01T14:59:45.600Z`),
+              `2017-01-12T18:13:38.326Z`,
+            ],
+          },
+          { dates: [new Date(`2017-12-01T14:59:45.600Z`), ``] },
+          { dates: [`This is not a date!!!!!!`] },
+        ],
+        typeConflictReporter,
+      })
+      expect(example.dates).toEqual([`String`])
+
+      // should be valid - separate arrays of both unique types and mixed types (string is not a date) #2
+      example = getExampleValue({
+        nodes: [
+          {
+            dates: [
+              ``,
+              new Date(`2017-12-01T14:59:45.600Z`),
+              `This is not a date!!!!!!`,
+            ],
+          },
+          { dates: [new Date(`2017-12-01T14:59:45.600Z`)] },
+          { dates: [`This is not a date!!!!!!`] },
+        ],
+        typeConflictReporter,
+      })
+      expect(example.dates).toEqual([`String`])
+    })
+  })
+})
+
+describe(`Type conflicts`, () => {
+  it(`Doesn't report conflicts if there are none`, () => {
+    const typeConflictReporter = new TypeConflictReporter()
+    const nodes = [
+      {
+        id: `id1`,
+        string: `string`,
+        number: 5,
+        boolean: true,
+        arrayOfStrings: [`string1`],
+      },
+      {
+        id: `id2`,
+        string: `other string`,
+        number: 3.5,
+        boolean: false,
+        arrayOfStrings: null,
+      },
+    ]
+
+    getExampleValue({ nodes, typeName: `NoConflict`, typeConflictReporter })
+
+    expect(typeConflictReporter.getConflicts()).toEqual([])
+  })
+
+  it(`reports type conflicts and its origin`, () => {
+    const typeConflictReporter = new TypeConflictReporter()
+
+    const nodes = [
+      {
+        id: `id1`,
+        stringOrNumber: `string`,
+        number: 5,
+        boolean: true,
+        arrayOfStrings: [`string1`],
+      },
+      {
+        id: `id2`,
+        stringOrNumber: 5,
+        number: 3.5,
+        boolean: false,
+        arrayOfStrings: null,
+      },
+    ]
+
+    getExampleValue({ nodes, typeName: `Conflict_1`, typeConflictReporter })
+
+    expect(typeConflictReporter.getConflicts()).toMatchSnapshot()
+  })
+
+  it(`reports conflict when array has mixed types and its origin`, () => {
+    const nodes = [
+      {
+        id: `id1`,
+        arrayOfMixedType: [`string1`, 5, `string2`, true],
+      },
+    ]
+    const typeConflictReporter = new TypeConflictReporter()
+
+    getExampleValue({ nodes, typeName: `Conflict_2`, typeConflictReporter })
+    expect(typeConflictReporter.getConflicts()).toMatchSnapshot()
+  })
+
+  it(`doesn't report ignored fields`, () => {
+    const typeConflictReporter = new TypeConflictReporter()
+
+    const nodes = [
+      {
+        id: `id1`,
+        stringOrNumber: `string`,
+        other: 1,
+      },
+      {
+        id: `id2`,
+        stringOrNumber: 5,
+        other: `foo`,
+      },
+    ]
+
+    getExampleValue({
+      nodes,
+      typeName: `Conflict_3`,
+      typeConflictReporter,
+      ignoreFields: [`stringOrNumber`],
+    })
+
+    expect(typeConflictReporter.getConflicts()).toMatchSnapshot()
+  })
+
+  // We removed this warning to not confuse people
+  it.skip(`reports date and string conflicts`, () => {
+    const typeConflictReporter = new TypeConflictReporter()
+
+    const nodes = [
+      {
+        id: `id1`,
+        date: `2019-01-01`,
+      },
+      {
+        id: `id2`,
+        date: `Totally not a date`,
+      },
+    ]
+
+    getExampleValue({ nodes, typeName: `Conflict_1`, typeConflictReporter })
+
+    expect(typeConflictReporter.getConflicts()).toMatchSnapshot()
+  })
+})
diff --git a/node_modules/gatsby/src/schema/infer/__tests__/infer-input.js b/node_modules/gatsby/src/schema/infer/__tests__/infer-input.js
new file mode 100644
index 0000000..ed36fce
--- /dev/null
+++ b/node_modules/gatsby/src/schema/infer/__tests__/infer-input.js
@@ -0,0 +1,207 @@
+// NOTE: Previously `infer-graphql-input-type-test.js`
+
+const { graphql } = require(`graphql`)
+const { createSchemaComposer } = require(`../../schema-composer`)
+const { buildSchema } = require(`../../schema`)
+const { LocalNodeModel } = require(`../../node-model`)
+const nodeStore = require(`../../../db/nodes`)
+const { store } = require(`../../../redux`)
+const createPageDependency = require(`../../../redux/actions/add-page-dependency`)
+require(`../../../db/__tests__/fixtures/ensure-loki`)()
+
+const buildTestSchema = async nodes => {
+  store.dispatch({ type: `DELETE_CACHE` })
+  for (const node of nodes) {
+    store.dispatch({ type: `CREATE_NODE`, payload: node })
+  }
+  const schemaComposer = createSchemaComposer()
+  const schema = await buildSchema({
+    schemaComposer,
+    nodeStore,
+    types: [],
+    thirdPartySchemas: [],
+  })
+  return schema
+}
+const queryResult = async (nodes, query) => {
+  const schema = await buildTestSchema(nodes)
+  return graphql(schema, query, undefined, {
+    nodeModel: new LocalNodeModel({ schema, nodeStore, createPageDependency }),
+  })
+}
+
+describe(`GraphQL Input args`, () => {
+  it(`filters out null example values`, async () => {
+    const nodes = [
+      {
+        id: `1`,
+        internal: { type: `Bar` },
+        children: [],
+        foo: null,
+        bar: `baz`,
+      },
+    ]
+    const result = await queryResult(
+      nodes,
+      `
+        {
+          allBar(filter: { foo: { eq: "bar" } }) {
+            edges { node { bar } }
+          }
+        }
+      `
+    )
+    expect(result.errors.length).toEqual(1)
+    expect(result.errors[0].message).toMatch(
+      `Field "foo" is not defined by type BarFilterInput.`
+    )
+  })
+
+  it(`filters out empty objects`, async () => {
+    const nodes = [
+      {
+        id: `1`,
+        internal: { type: `Bar` },
+        children: [],
+        foo: {},
+        bar: `baz`,
+      },
+    ]
+    const result = await queryResult(
+      nodes,
+      `
+        {
+          allBar(filter: { foo: { eq: "bar" } }) {
+            edges { node { bar } }
+          }
+        }
+      `
+    )
+    expect(result.errors.length).toEqual(1)
+    expect(result.errors[0].message).toMatch(
+      `Field "foo" is not defined by type BarFilterInput.`
+    )
+  })
+
+  it(`filters out empty arrays`, async () => {
+    const nodes = [
+      { id: `1`, internal: { type: `Bar` }, children: [], foo: [], bar: `baz` },
+    ]
+    const result = await queryResult(
+      nodes,
+      `
+        {
+          allBar(filter: { foo: { eq: "bar" } }) {
+            edges { node { bar } }
+          }
+        }
+      `
+    )
+    expect(result.errors.length).toEqual(1)
+    expect(result.errors[0].message).toMatch(
+      `Field "foo" is not defined by type BarFilterInput.`
+    )
+  })
+
+  it(`filters out sparse arrays`, async () => {
+    const nodes = [
+      {
+        id: `1`,
+        internal: { type: `Bar` },
+        children: [],
+        foo: [undefined, null, null],
+        bar: `baz`,
+      },
+    ]
+    const result = await queryResult(
+      nodes,
+      `
+        {
+          allBar(filter: { foo: { eq: "bar" } }) {
+            edges { node { bar } }
+          }
+        }
+      `
+    )
+    expect(result.errors.length).toEqual(1)
+    expect(result.errors[0].message).toMatch(
+      `Field "foo" is not defined by type BarFilterInput.`
+    )
+  })
+
+  it(`uses correct keys for linked fields`, async () => {
+    const nodes = [
+      {
+        id: `1`,
+        internal: { type: `Bar` },
+        children: [],
+        linked___NODE: `baz`,
+        foo: `bar`,
+      },
+      { id: `baz`, internal: { type: `Foo` }, children: [] },
+    ]
+    const result = await queryResult(
+      nodes,
+      `
+        {
+          allBar(filter: { linked___NODE: { eq: "baz" } }) {
+            edges { node { linked { id } } }
+          }
+        }
+      `
+    )
+    expect(result.errors.length).toEqual(1)
+    expect(result.errors[0].message).toMatch(
+      `Field "linked___NODE" is not defined by type BarFilterInput.`
+    )
+  })
+
+  it(`Replaces unsupported values in keys`, async () => {
+    // NOTE: This does not make much sense anymore (we sanitize
+    // fieldnames for ObjectType, and derive InputType from there)
+
+    // Add a key with unsupported values to test
+    // if they're replaced.
+
+    const nodes = [
+      {
+        id: `1`,
+        internal: { type: `Test` },
+        parent: null,
+        children: [],
+        foo: {
+          parent: `parent`,
+          children: [`bar`],
+          "foo-moo": `tasty`,
+        },
+      },
+    ]
+    const schema = await buildTestSchema(nodes)
+    const fields = schema.getType(`TestFilterInput`).getFields()
+
+    expect(Object.keys(fields.foo.type.getFields())[2]).toEqual(`foo_moo`)
+  })
+
+  it.skip(`Removes specific root fields`, async () => {
+    // We don't do that anymoe
+  })
+
+  it(`infers number types`, async () => {
+    const nodes = [
+      {
+        id: `1`,
+        internal: { type: `Test` },
+        children: [],
+        int32: 42,
+        float: 2.5,
+        longint: 3000000000,
+      },
+    ]
+    const schema = await buildTestSchema(nodes)
+    const fields = schema.getType(`TestFilterInput`).getFields()
+
+    expect(fields.int32.type.name).toBe(`IntQueryOperatorInput`)
+    expect(fields.float.type.name).toBe(`FloatQueryOperatorInput`)
+    expect(fields.longint.type.name).toBe(`FloatQueryOperatorInput`)
+  })
+})
diff --git a/node_modules/gatsby/src/schema/infer/__tests__/infer.js b/node_modules/gatsby/src/schema/infer/__tests__/infer.js
new file mode 100644
index 0000000..acda4be
--- /dev/null
+++ b/node_modules/gatsby/src/schema/infer/__tests__/infer.js
@@ -0,0 +1,1138 @@
+// NOTE: Previously `infer-graphql-type-test.js`
+
+const { graphql } = require(`graphql`)
+const nodeStore = require(`../../../db/nodes`)
+const { LocalNodeModel } = require(`../../node-model`)
+const path = require(`path`)
+const slash = require(`slash`)
+const { store } = require(`../../../redux`)
+const createPageDependency = require(`../../../redux/actions/add-page-dependency`)
+const { buildSchema } = require(`../../schema`)
+const { createSchemaComposer } = require(`../../schema-composer`)
+const { TypeConflictReporter } = require(`../type-conflict-reporter`)
+require(`../../../db/__tests__/fixtures/ensure-loki`)()
+
+const makeNodes = () => [
+  {
+    id: `foo`,
+    internal: { type: `Test` },
+    name: `The Mad Max`,
+    type: `Test`,
+    "key-with..unsupported-values": true,
+    hair: 1,
+    date: `1012-11-01`,
+    anArray: [1, 2, 3, 4],
+    aNestedArray: [[1, 2, 3, 4], [5, 6, 7, 8]],
+    anObjectArray: [
+      { aString: `some string`, aNumber: 2, aBoolean: true },
+      { aString: `some string`, aNumber: 2, anArray: [1, 2] },
+      { anotherObjectArray: [{ bar: 10 }] },
+    ],
+    anObjectArrayWithNull: [{ anotherObjectArray: [{ baz: `quz` }] }, null],
+    deepObject: {
+      level: 1,
+      deepObject: {
+        level: 2,
+        deepObject: {
+          level: 3,
+        },
+      },
+    },
+    "with space": 1,
+    "with-hyphen": 2,
+    "with resolver": `1012-11-01`,
+    123: 42,
+    456: {
+      testingTypeNameCreation: true,
+    },
+    aBoolean: true,
+    externalUrl: `https://example.com/awesome.jpg`,
+    domain: `pizza.com`,
+    frontmatter: {
+      date: `1012-11-01`,
+      title: `The world of dash and adventure`,
+      blue: 100,
+    },
+  },
+  {
+    id: `boo`,
+    internal: { type: `Test` },
+    name: `The Mad Wax`,
+    type: `Test`,
+    hair: 2,
+    date: `1984-10-12`,
+    anArray: [1, 2, 5, 4],
+    aNestedArray: [[1, 2, 3, 4]],
+    anObjectArray: [{ anotherObjectArray: [{ baz: `quz` }] }],
+    anObjectArrayWithNull: [{ anotherObjectArray: [{ baz: `quz` }] }, null],
+    "with space": 3,
+    "with-hyphen": 4,
+    123: 24,
+    frontmatter: {
+      date: `1984-10-12`,
+      title: `The world of slash and adventure`,
+      blue: 10010,
+    },
+  },
+]
+
+describe(`GraphQL type inference`, () => {
+  const typeConflictReporter = new TypeConflictReporter()
+
+  const buildTestSchema = async (nodes, buildSchemaArgs) => {
+    store.dispatch({ type: `DELETE_CACHE` })
+    nodes.forEach(node =>
+      store.dispatch({ type: `CREATE_NODE`, payload: node })
+    )
+
+    const schemaComposer = createSchemaComposer()
+    const schema = await buildSchema({
+      schemaComposer,
+      nodeStore,
+      types: [],
+      thirdPartySchemas: [],
+      typeMapping: [],
+      typeConflictReporter,
+      ...(buildSchemaArgs || {}),
+    })
+    return schema
+  }
+
+  const getQueryResult = async (nodes, fragment, buildSchemaArgs) => {
+    const schema = await buildTestSchema(nodes, buildSchemaArgs)
+    store.dispatch({ type: `SET_SCHEMA`, payload: schema })
+    return graphql(
+      schema,
+      `query {
+        allTest {
+          edges {
+            node {
+              ${fragment}
+            }
+          }
+        }
+      }
+      `,
+      undefined,
+      {
+        path: `/`,
+        nodeModel: new LocalNodeModel({
+          schema,
+          nodeStore,
+          createPageDependency,
+        }),
+      }
+    )
+  }
+
+  const getInferredFields = async (nodes, buildSchemaArgs) => {
+    const schema = await buildTestSchema(nodes, buildSchemaArgs)
+    return schema.getType(`Test`).getFields()
+  }
+
+  afterEach(() => {
+    typeConflictReporter.clearConflicts()
+  })
+
+  it(`filters out null example values`, async () => {
+    const nodes = [
+      { foo: null, bar: `baz`, internal: { type: `Test` }, id: `1` },
+    ]
+    const result = await getQueryResult(
+      nodes,
+      `
+        foo
+        bar
+      `
+    )
+    expect(result.errors.length).toEqual(1)
+    expect(result.errors[0].message).toMatch(
+      `Cannot query field "foo" on type "Test".`
+    )
+  })
+
+  it(`doesn't throw errors at ints longer than 32-bit`, async () => {
+    const nodes = [{ longint: 3000000000, internal: { type: `Test` }, id: `1` }]
+    const result = await getQueryResult(
+      nodes,
+      `
+        longint
+      `
+    )
+    expect(result.errors).toBeUndefined()
+  })
+
+  it(`prefers float when multiple number types`, async () => {
+    const nodes = [
+      { number: 1.1, internal: { type: `Test` }, id: `1` },
+      { number: 1, internal: { type: `Test` }, id: `2` },
+    ]
+    const result = await getQueryResult(
+      nodes,
+      `
+        number
+      `
+    )
+    expect(result.data.allTest.edges[0].node.number).toEqual(1.1)
+  })
+
+  it(`filters out empty objects`, async () => {
+    const nodes = [{ foo: {}, bar: `baz`, internal: { type: `Test` }, id: `1` }]
+    const result = await getQueryResult(
+      nodes,
+      `
+        foo
+        bar
+      `
+    )
+    expect(result.errors.length).toEqual(1)
+    expect(result.errors[0].message).toMatch(
+      `Cannot query field "foo" on type "Test".`
+    )
+  })
+
+  it(`filters out empty arrays`, async () => {
+    const nodes = [{ foo: [], bar: `baz`, internal: { type: `Test` }, id: `1` }]
+    const result = await getQueryResult(
+      nodes,
+      `
+        foo
+        bar
+      `
+    )
+    expect(result.errors.length).toEqual(1)
+    expect(result.errors[0].message).toMatch(
+      `Cannot query field "foo" on type "Test".`
+    )
+  })
+
+  it(`filters out sparse arrays`, async () => {
+    const nodes = [
+      {
+        foo: [undefined, null, null],
+        bar: `baz`,
+        internal: { type: `Test` },
+        id: `1`,
+      },
+    ]
+    const result = await getQueryResult(
+      nodes,
+      `
+        foo
+        bar
+      `
+    )
+    expect(result.errors.length).toEqual(1)
+    expect(result.errors[0].message).toMatch(
+      `Cannot query field "foo" on type "Test".`
+    )
+  })
+
+  it(`handles sparse arrays`, async () => {
+    const nodes = [
+      { sparse: [null, true], internal: { type: `Test` }, id: `1` },
+      { sparse: [null], internal: { type: `Test` }, id: `2` },
+      { sparse: null, internal: { type: `Test` }, id: `3` },
+    ]
+    const result = await getQueryResult(
+      nodes,
+      `
+      sparse
+      `
+    )
+    const { edges } = result.data.allTest
+    expect(edges[0].node.sparse).toEqual([null, true])
+  })
+
+  it(`handles sparse arrays of objects`, async () => {
+    const nodes = [
+      { sparse: [null, { foo: true }], internal: { type: `Test` }, id: `1` },
+      { sparse: [null], internal: { type: `Test` }, id: `2` },
+      { sparse: null, internal: { type: `Test` }, id: `3` },
+    ]
+    const result = await getQueryResult(
+      nodes,
+      `
+      sparse { foo }
+      `
+    )
+    const { edges } = result.data.allTest
+    expect(edges[0].node.sparse[1].foo).toBe(true)
+  })
+
+  // NOTE: Honestly this test does not makes much sense now
+  it.skip(`Removes specific root fields`, () => {
+    const { addInferredFields } = require(`../infer`)
+    const { getExampleValue } = require(`../example-value`)
+    const { getNodeInterface } = require(`../../types/node-interface`)
+    const nodes = [
+      {
+        type: `Test`,
+        id: `foo`,
+        parent: `parent`,
+        children: [`bar`],
+        internal: { type: `Test` },
+        foo: {
+          type: `Test`,
+          id: `foo`,
+          parent: `parent`,
+          children: [`bar`],
+        },
+      },
+    ]
+    const schemaComposer = createSchemaComposer()
+    const typeComposer = schemaComposer.createObjectTC(`Test`)
+    addInferredFields({
+      schemaComposer,
+      typeComposer,
+      exampleValue: getExampleValue({
+        nodes,
+        ignoreFields: getNodeInterface({ schemaComposer }).getFieldNames(),
+      }),
+    })
+    const fields = typeComposer.getType().getFields()
+
+    expect(Object.keys(fields)).toHaveLength(2)
+    expect(Object.keys(fields.foo.type.getFields())).toHaveLength(4)
+  })
+
+  it(`infers number types`, async () => {
+    const nodes = [
+      {
+        int32: 42,
+        float: 2.5,
+        longint: 3000000000,
+        internal: { type: `Test` },
+        id: `1`,
+      },
+    ]
+    const fields = await getInferredFields(nodes)
+
+    expect(fields.int32.type.name).toEqual(`Int`)
+    expect(fields.float.type.name).toEqual(`Float`)
+    expect(fields.longint.type.name).toEqual(`Float`)
+  })
+
+  it(`Handle invalid graphql field names`, async () => {
+    const nodes = makeNodes()
+    const result = await getQueryResult(
+      nodes,
+      `
+        with_space
+        with_hyphen
+        with_resolver(formatString:"DD.MM.YYYY")
+        _123
+        _456 {
+          testingTypeNameCreation
+        }
+      `
+    )
+
+    expect(result.errors).not.toBeDefined()
+    expect(result.data.allTest.edges.length).toEqual(2)
+    expect(result.data.allTest.edges[0].node.with_space).toEqual(1)
+    expect(result.data.allTest.edges[0].node.with_hyphen).toEqual(2)
+    expect(result.data.allTest.edges[1].node.with_space).toEqual(3)
+    expect(result.data.allTest.edges[1].node.with_hyphen).toEqual(4)
+    expect(result.data.allTest.edges[0].node.with_resolver).toEqual(
+      `01.11.1012`
+    )
+    expect(result.data.allTest.edges[0].node._123).toEqual(42)
+    expect(result.data.allTest.edges[1].node._123).toEqual(24)
+    expect(result.data.allTest.edges[0].node._456).toEqual(nodes[0][`456`])
+  })
+
+  it(`Handles priority for conflicting fields`, async () => {
+    const nodes = [
+      {
+        _2invalid: 1,
+        "2invalid": 2,
+        sibling: { id: `Test` },
+        sibling___NODE: `2`,
+        internal: { type: `Test` },
+        id: `1`,
+      },
+      {
+        _2invalid: 1,
+        "2invalid": 2,
+        sibling: { id: `Test` },
+        sibling___NODE: `3`,
+        internal: { type: `Test` },
+        id: `2`,
+      },
+      {
+        _2invalid: 1,
+        "2invalid": 2,
+        sibling: { id: `Test` },
+        sibling___NODE: `1`,
+        internal: { type: `Test` },
+        id: `3`,
+      },
+    ]
+
+    const result = await getQueryResult(
+      nodes,
+      `
+      sibling { id }
+      _2invalid
+      `
+    )
+    expect(result).toMatchSnapshot()
+  })
+
+  it(`Handles priority for conflicting nested fields`, async () => {
+    const nodes = [
+      {
+        "2invalid": { nested: { check: 1 } },
+        _2invalid: { nested: { check: true } },
+        internal: { type: `Test` },
+        id: `1`,
+      },
+      {
+        "2invalid": { nested: { check: 0 } },
+        _2invalid: { nested: { check: false } },
+        internal: { type: `Test` },
+        id: `2`,
+      },
+    ]
+
+    const result = await getQueryResult(
+      nodes,
+      `
+      _2invalid { nested { check } }
+      `
+    )
+    const { edges } = result.data.allTest
+    expect(edges[0].node[`_2invalid`].nested.check).toBe(true)
+    expect(edges[1].node[`_2invalid`].nested.check).toBe(false)
+    expect(result).toMatchSnapshot()
+  })
+
+  it(`handles lowercase type names`, async () => {
+    const nodes = [
+      {
+        id: `1`,
+        internal: { type: `wordpress__PAGE` },
+        acfFields: {
+          fooz: `bar`,
+        },
+      },
+    ]
+    const schema = await buildTestSchema(nodes)
+    store.dispatch({ type: `SET_SCHEMA`, payload: schema })
+    const result = await graphql(
+      schema,
+      `
+        query {
+          allWordpressPage {
+            edges {
+              node {
+                __typename
+                id
+                acfFields {
+                  fooz
+                  __typename
+                }
+              }
+            }
+          }
+        }
+      `,
+      undefined,
+      {
+        path: `/`,
+        nodeModel: new LocalNodeModel({
+          schema,
+          nodeStore,
+          createPageDependency,
+        }),
+      }
+    )
+
+    expect(result).toMatchSnapshot()
+  })
+
+  describe(`Handles dates`, () => {
+    it(`Handles integer with valid date format`, async () => {
+      const nodes = [
+        { number: 2018, internal: { type: `Test` }, id: `1` },
+        { number: 1987, internal: { type: `Test` }, id: `2` },
+      ]
+      const result = await getQueryResult(
+        nodes,
+        `
+          number
+        `
+      )
+      expect(result.data.allTest.edges[0].node.number).toEqual(2018)
+    })
+
+    it(`Infers from Date objects`, async () => {
+      const nodes = [
+        {
+          dateObject: new Date(Date.UTC(2012, 10, 5)),
+          internal: { type: `Test` },
+          id: `1`,
+        },
+        {
+          dateObject: new Date(Date.UTC(2012, 10, 5)),
+          internal: { type: `Test` },
+          id: `2`,
+        },
+      ]
+      const result = await getQueryResult(
+        nodes,
+        `
+          dateObject
+        `
+      )
+      expect(result).toMatchSnapshot()
+    })
+
+    it(`Infers from array of Date objects`, async () => {
+      const nodes = [
+        {
+          dateObject: [
+            new Date(Date.UTC(2012, 10, 5)),
+            new Date(Date.UTC(2012, 10, 6)),
+          ],
+          internal: { type: `Test` },
+          id: `1`,
+        },
+        {
+          dateObject: [new Date(Date.UTC(2012, 10, 5))],
+          internal: { type: `Test` },
+          id: `2`,
+        },
+      ]
+      const result = await getQueryResult(
+        nodes,
+        `
+          dateObject
+        `
+      )
+      expect(result).toMatchSnapshot()
+    })
+
+    it(`Infers from date strings`, async () => {
+      const nodes = [
+        { date: `1012-11-01`, internal: { type: `Test` }, id: `1` },
+      ]
+      const result = await getQueryResult(
+        nodes,
+        `
+          date(formatString:"DD.MM.YYYY")
+        `
+      )
+      expect(result.errors).not.toBeDefined()
+      expect(result.data.allTest.edges[0].node.date).toEqual(`01.11.1012`)
+    })
+
+    it(`Infers from arrays of date strings`, async () => {
+      const nodes = [
+        {
+          date: [`1012-11-01`, `10390203`],
+          internal: { type: `Test` },
+          id: `1`,
+        },
+      ]
+      const result = await getQueryResult(
+        nodes,
+        `
+          date(formatString:"DD.MM.YYYY")
+        `
+      )
+      expect(result.errors).not.toBeDefined()
+      expect(result.data.allTest.edges[0].node.date.length).toEqual(2)
+      expect(result.data.allTest.edges[0].node.date[0]).toEqual(`01.11.1012`)
+      expect(result.data.allTest.edges[0].node.date[1]).toEqual(`03.02.1039`)
+    })
+
+    it(`infers mixes of non-dates and dates as string`, async () => {
+      const nodes = [
+        {
+          date: `1012-11-01`,
+          internal: { type: `Test` },
+          id: `1`,
+        },
+        {
+          date: `totally-not-a-date`,
+          internal: { type: `Test` },
+          id: `2`,
+        },
+      ]
+      const result = await getQueryResult(
+        nodes,
+        `
+          date
+        `
+      )
+      expect(result.errors).not.toBeDefined()
+      expect(result.data.allTest.edges.length).toEqual(2)
+      expect(result.data.allTest.edges[0].node.date).toEqual(`1012-11-01`)
+      expect(result.data.allTest.edges[1].node.date).toEqual(
+        `totally-not-a-date`
+      )
+    })
+  })
+
+  describe(`Linked inference from config mappings`, () => {
+    const getMappingNodes = () => [
+      {
+        id: `node1`,
+        label: `First node`,
+        internal: { type: `MappingTest` },
+        nestedField: {
+          mapTarget: `test1`,
+        },
+      },
+      {
+        id: `node2`,
+        label: `Second node`,
+        internal: { type: `MappingTest` },
+        nestedField: {
+          mapTarget: `test2`,
+        },
+      },
+      {
+        id: `node3`,
+        label: `Third node`,
+        internal: { type: `MappingTest` },
+        nestedField: {
+          mapTarget: `test3`,
+        },
+      },
+    ]
+
+    it(`Links to single node by id`, async () => {
+      const nodes = [
+        {
+          id: `1`,
+          linkedOnID: `node1`,
+          internal: { type: `Test` },
+        },
+        {
+          id: `2`,
+          linkedOnID: `not_existing`,
+          internal: { type: `Test` },
+        },
+      ].concat(getMappingNodes())
+      const result = await getQueryResult(
+        nodes,
+        `
+          linkedOnID {
+            label
+          }
+        `,
+        {
+          typeMapping: {
+            "Test.linkedOnID": `MappingTest`,
+            "Test.linkedOnCustomField": `MappingTest.nestedField.mapTarget`,
+          },
+        }
+      )
+
+      expect(result.errors).not.toBeDefined()
+      expect(result.data.allTest.edges.length).toEqual(2)
+      expect(result.data.allTest.edges[0].node.linkedOnID).toBeDefined()
+      expect(result.data.allTest.edges[1].node.linkedOnID).toEqual(null)
+      expect(result.data.allTest.edges[0].node.linkedOnID.label).toEqual(
+        `First node`
+      )
+    })
+
+    it(`Links to array of nodes by id`, async () => {
+      const nodes = [
+        {
+          id: `3`,
+          linkedOnID: [`node1`, `node2`],
+          internal: { type: `Test` },
+        },
+      ].concat(getMappingNodes())
+      const result = await getQueryResult(
+        nodes,
+        `
+          linkedOnID {
+            label
+          }
+        `,
+        {
+          typeMapping: {
+            "Test.linkedOnID": `MappingTest`,
+            "Test.linkedOnCustomField": `MappingTest.nestedField.mapTarget`,
+          },
+        }
+      )
+
+      expect(result.errors).not.toBeDefined()
+      expect(result.data.allTest.edges.length).toEqual(1)
+      expect(result.data.allTest.edges[0].node.linkedOnID).toBeDefined()
+      expect(result.data.allTest.edges[0].node.linkedOnID.length).toEqual(2)
+      expect(result.data.allTest.edges[0].node.linkedOnID[0].label).toEqual(
+        `First node`
+      )
+      expect(result.data.allTest.edges[0].node.linkedOnID[1].label).toEqual(
+        `Second node`
+      )
+    })
+
+    it(`Links to single node by custom field`, async () => {
+      const nodes = [
+        {
+          id: `1`,
+          linkedOnCustomField: `test2`,
+          internal: { type: `Test` },
+        },
+        {
+          id: `2`,
+          linkedOnCustomField: `not_existing`,
+          internal: { type: `Test` },
+        },
+      ].concat(getMappingNodes())
+      const result = await getQueryResult(
+        nodes,
+        `
+          linkedOnCustomField {
+            label
+          }
+        `,
+        {
+          typeMapping: {
+            "Test.linkedOnID": `MappingTest`,
+            "Test.linkedOnCustomField": `MappingTest.nestedField.mapTarget`,
+          },
+        }
+      )
+
+      expect(result.errors).not.toBeDefined()
+      expect(result.data.allTest.edges.length).toEqual(2)
+      expect(
+        result.data.allTest.edges[0].node.linkedOnCustomField
+      ).toBeDefined()
+      expect(result.data.allTest.edges[1].node.linkedOnCustomField).toEqual(
+        null
+      )
+      expect(
+        result.data.allTest.edges[0].node.linkedOnCustomField.label
+      ).toEqual(`Second node`)
+    })
+
+    it(`Links to array of nodes by custom field`, async () => {
+      const nodes = [
+        {
+          id: `1`,
+          linkedOnCustomField: [`test1`, `test3`],
+          internal: { type: `Test` },
+        },
+      ].concat(getMappingNodes())
+      const result = await getQueryResult(
+        nodes,
+        `
+          linkedOnCustomField {
+            label
+          }
+        `,
+        {
+          typeMapping: {
+            "Test.linkedOnID": `MappingTest`,
+            "Test.linkedOnCustomField": `MappingTest.nestedField.mapTarget`,
+          },
+        }
+      )
+
+      expect(result.errors).not.toBeDefined()
+      expect(result.data.allTest.edges.length).toEqual(1)
+      expect(
+        result.data.allTest.edges[0].node.linkedOnCustomField
+      ).toBeDefined()
+      expect(
+        result.data.allTest.edges[0].node.linkedOnCustomField.length
+      ).toEqual(2)
+      expect(
+        result.data.allTest.edges[0].node.linkedOnCustomField[0].label
+      ).toEqual(`First node`)
+      expect(
+        result.data.allTest.edges[0].node.linkedOnCustomField[1].label
+      ).toEqual(`Third node`)
+    })
+  })
+
+  describe(`Linked inference from file URIs`, () => {
+    const dir = slash(path.resolve(`/path/`))
+    const getFileNodes = () => [
+      {
+        id: `parent`,
+        internal: { type: `File` },
+        absolutePath: slash(path.resolve(dir, `index.md`)),
+        dir,
+      },
+      {
+        id: `file_1`,
+        internal: { type: `File` },
+        absolutePath: slash(path.resolve(dir, `file_1.jpg`)),
+        dir,
+      },
+      {
+        id: `file_2`,
+        internal: { type: `File` },
+        absolutePath: slash(path.resolve(dir, `file_2.txt`)),
+        dir,
+      },
+    ]
+
+    it(`Links to file node`, async () => {
+      const nodes = [
+        {
+          id: `1`,
+          file: `./file_1.jpg`,
+          parent: `parent`,
+          internal: { type: `Test` },
+        },
+      ].concat(getFileNodes())
+
+      let result = await getQueryResult(
+        nodes,
+        `
+          file {
+            absolutePath
+          }
+        `
+      )
+
+      expect(result.errors).not.toBeDefined()
+      expect(result.data.allTest.edges[0].node.file.absolutePath).toEqual(
+        slash(path.resolve(dir, `file_1.jpg`))
+      )
+    })
+
+    it(`Links to array of file nodes`, async () => {
+      const nodes = [
+        {
+          id: `1`,
+          files: [`./file_1.jpg`, `./file_2.txt`],
+          parent: `parent`,
+          internal: { type: `Test` },
+        },
+      ].concat(getFileNodes())
+
+      let result = await getQueryResult(
+        nodes,
+        `
+          files {
+            absolutePath
+          }
+        `
+      )
+
+      expect(result.errors).not.toBeDefined()
+      expect(result.data.allTest.edges[0].node.files.length).toEqual(2)
+      expect(result.data.allTest.edges[0].node.files[0].absolutePath).toEqual(
+        slash(path.resolve(dir, `file_1.jpg`))
+      )
+      expect(result.data.allTest.edges[0].node.files[1].absolutePath).toEqual(
+        slash(path.resolve(dir, `file_2.txt`))
+      )
+    })
+  })
+
+  describe(`Linked inference by __NODE convention`, () => {
+    const getLinkedNodes = () => [
+      { id: `child_1`, internal: { type: `Child` }, hair: `brown` },
+      { id: `child_2`, internal: { type: `Child` }, hair: `blonde` },
+      { id: `pet_1`, internal: { type: `Pet` }, species: `dog` },
+    ]
+
+    it(`Links nodes`, async () => {
+      const nodes = [
+        { linked___NODE: `child_1`, internal: { type: `Test` }, id: `1` },
+      ].concat(getLinkedNodes())
+      const result = await getQueryResult(
+        nodes,
+        `
+          linked {
+            hair
+          }
+        `
+      )
+      expect(result.errors).not.toBeDefined()
+      expect(result.data.allTest.edges[0].node.linked.hair).toEqual(`brown`)
+    })
+
+    it(`Links an array of nodes`, async () => {
+      const nodes = [
+        {
+          linked___NODE: [`child_1`, `child_2`],
+          internal: { type: `Test` },
+          id: `1`,
+        },
+      ].concat(getLinkedNodes())
+      const result = await getQueryResult(
+        nodes,
+        `
+          linked {
+            hair
+          }
+        `
+      )
+      expect(result.errors).not.toBeDefined()
+      expect(result.data.allTest.edges[0].node.linked[0].hair).toEqual(`brown`)
+      expect(result.data.allTest.edges[0].node.linked[1].hair).toEqual(`blonde`)
+    })
+
+    it(`Links nodes by field`, async () => {
+      const nodes = [
+        { linked___NODE___hair: `brown`, internal: { type: `Test` }, id: `1` },
+      ].concat(getLinkedNodes())
+      const result = await getQueryResult(
+        nodes,
+        `
+          linked {
+            hair
+          }
+        `
+      )
+      expect(result.errors).not.toBeDefined()
+      expect(result.data.allTest.edges[0].node.linked.hair).toEqual(`brown`)
+    })
+
+    it(`Links an array of nodes by field`, async () => {
+      const nodes = [
+        {
+          linked___NODE___hair: [`brown`, `blonde`],
+          internal: { type: `Test` },
+          id: `1`,
+        },
+      ].concat(getLinkedNodes())
+      const result = await getQueryResult(
+        nodes,
+        `
+          linked {
+            hair
+          }
+        `
+      )
+      expect(result.errors).not.toBeDefined()
+      expect(result.data.allTest.edges[0].node.linked[0].hair).toEqual(`brown`)
+      expect(result.data.allTest.edges[0].node.linked[1].hair).toEqual(`blonde`)
+    })
+
+    it(`Errors clearly when missing nodes`, async () => {
+      expect.assertions(1)
+      try {
+        await getInferredFields([
+          { linked___NODE: `baz`, internal: { type: `Test` }, id: `1` },
+        ])
+      } catch (e) {
+        expect(e.message).toEqual(
+          `Encountered an error trying to infer a GraphQL type ` +
+            `for: \`linked___NODE\`. There is no corresponding node with the \`id\` ` +
+            `field matching: "baz".`
+        )
+      }
+    })
+
+    // We can't miss types anymore
+    it.skip(`Errors clearly when missing types`, async () => {
+      expect(async () => {
+        await getInferredFields([
+          { id: `baz`, internal: { type: `Bar` } },
+          { linked___NODE: `baz`, internal: { type: `Test` }, id: `1` },
+        ])
+      }).toThrow(
+        `Encountered an error trying to infer a GraphQL type ` +
+          `for: \`linked___NODE\`. There is no corresponding GraphQL type ` +
+          `\`Bar\` available to link to this node.`
+      )
+    })
+
+    describe(`Creation of union types when array field is linking to multiple types`, () => {
+      it(`Creates union types`, async () => {
+        const nodes = [
+          {
+            linked___NODE: [`child_1`, `pet_1`],
+            internal: { type: `Test` },
+            id: `1`,
+          },
+        ].concat(getLinkedNodes())
+        const result = await getQueryResult(
+          nodes,
+          `
+            linked {
+              __typename
+              ... on Child {
+                hair
+              }
+              ... on Pet {
+                species
+              }
+            }
+          `
+        )
+        expect(result.errors).not.toBeDefined()
+        expect(result.data.allTest.edges[0].node.linked[0].hair).toEqual(
+          `brown`
+        )
+        expect(result.data.allTest.edges[0].node.linked[0].__typename).toEqual(
+          `Child`
+        )
+        expect(result.data.allTest.edges[0].node.linked[1].species).toEqual(
+          `dog`
+        )
+        expect(result.data.allTest.edges[0].node.linked[1].__typename).toEqual(
+          `Pet`
+        )
+      })
+
+      it(`Uses same union type for same child node types and key`, async () => {
+        const nodes = [
+          {
+            test___NODE: [`pet_1`, `child_1`],
+            internal: { type: `Test` },
+            id: `1`,
+          },
+          {
+            test___NODE: [`pet_1`, `child_2`],
+            internal: { type: `OtherType` },
+            id: `2`,
+          },
+        ].concat(getLinkedNodes())
+        const schema = await buildTestSchema(nodes)
+        const fields = schema.getType(`Test`).getFields()
+        const otherFields = schema.getType(`OtherType`).getFields()
+
+        expect(fields.test.type.ofType.name).toBe(
+          otherFields.test.type.ofType.name
+        )
+        expect(fields.test.type.ofType.getTypes()).toEqual(
+          otherFields.test.type.ofType.getTypes()
+        )
+        expect(fields.test.type.ofType).toBe(otherFields.test.type.ofType)
+      })
+
+      it.skip(`Uses a different type for the same child node types with a different key`, () => {
+        // NOTE: We don't do that anymore
+      })
+
+      it(`Uses a different type for different child node types with the same key`, async () => {
+        const nodes = [
+          { id: `toy_1`, internal: { type: `Toy` } },
+          {
+            test___NODE: [`pet_1`, `child_1`],
+            internal: { type: `Test` },
+            id: `1`,
+          },
+          {
+            test___NODE: [`pet_1`, `child_2`, `toy_1`],
+            internal: { type: `OtherType` },
+            id: `2`,
+          },
+        ].concat(getLinkedNodes())
+        const schema = await buildTestSchema(nodes)
+        const fields = schema.getType(`Test`).getFields()
+        const otherFields = schema.getType(`OtherType`).getFields()
+
+        expect(fields.test.type.ofType.name).toBe(`ChildPetUnion`)
+        expect(otherFields.test.type.ofType.name).toBe(`ChildPetToyUnion`)
+        expect(fields.test.type.ofType).not.toEqual(
+          otherFields.test.type.ofType
+        )
+      })
+
+      it.skip(`Creates a new type after schema updates clear union types`, () => {
+        // NOTE: We don't clear union types anymore
+      })
+
+      it.skip(`Uses a reliable naming convention`, () => {
+        // NOTE: We don't postfix union type names anymore
+      })
+    })
+  })
+
+  it(`Infers graphql type from array of nodes`, async () => {
+    const nodes = makeNodes()
+    const result = await getQueryResult(
+      nodes,
+      `
+        hair,
+        anArray,
+        aNestedArray,
+        anObjectArray {
+          aNumber,
+          aBoolean,
+          anArray
+          anotherObjectArray {
+            bar
+            baz
+          }
+        },
+        anObjectArrayWithNull {
+          anotherObjectArray {
+            baz
+          }
+        }
+        deepObject {
+          level
+          deepObject {
+            level
+            deepObject {
+              level
+            }
+          }
+        }
+        aBoolean,
+        externalUrl,
+        domain,
+        date(formatString: "YYYY"),
+        frontmatter {
+          title,
+          date(formatString: "YYYY")
+        }
+    `
+    )
+    expect(result).toMatchSnapshot()
+  })
+
+  describe(`type conflicts`, () => {
+    it(`catches conflicts and removes field`, async () => {
+      const nodes = [
+        { foo: `foo`, number: 1.1, internal: { type: `Test` }, id: `1` },
+        { foo: `bar`, number: `1`, internal: { type: `Test` }, id: `2` },
+      ]
+      const result = await getQueryResult(
+        nodes,
+        `
+          foo
+          number
+        `
+      )
+      expect(typeConflictReporter.getConflicts()).toMatchSnapshot()
+
+      expect(result.errors.length).toEqual(1)
+      expect(result.errors[0].message).toMatch(
+        `Cannot query field "number" on type "Test".`
+      )
+    })
+
+    // FIXME, ignoreFields isn't passable, Do we create type with typedefs and test it?
+    it.skip(`does not warn about provided types`, async () => {
+      const nodes = [
+        { foo: `foo`, number: 1.1, internal: { type: `Test` }, id: `1` },
+        { foo: `bar`, number: `1`, internal: { type: `Test` }, id: `2` },
+      ]
+      const result = await getQueryResult(
+        nodes,
+        `
+          foo
+          number
+        `,
+        { ignoreFields: [`number`] }
+      )
+      expect(typeConflictReporter.getConflicts()).toEqual([])
+
+      expect(result.errors.length).toEqual(1)
+      expect(result.errors[0].message).toMatch(
+        `Cannot query field "number" on type "Test".`
+      )
+    })
+  })
+})
diff --git a/node_modules/gatsby/src/schema/infer/__tests__/merge-types.js b/node_modules/gatsby/src/schema/infer/__tests__/merge-types.js
new file mode 100644
index 0000000..4327e22
--- /dev/null
+++ b/node_modules/gatsby/src/schema/infer/__tests__/merge-types.js
@@ -0,0 +1,433 @@
+const { buildObjectType } = require(`../../types/type-builders`)
+const { store } = require(`../../../redux`)
+const { build } = require(`../..`)
+require(`../../../db/__tests__/fixtures/ensure-loki`)()
+
+const nodes = [
+  {
+    id: `id1`,
+    internal: { type: `Test` },
+    foo: true,
+    inferDate: new Date(),
+    explicitDate: new Date(),
+    conflictType: 1,
+    conflictArray: [1],
+    conflictArrayType: [1],
+    conflictArrayReverse: 1,
+    conflictScalar: { foo: true },
+    conflictScalarReverse: 1,
+    conflictScalarArray: [{ foo: true }],
+    conflcitScalarArrayReverse: [1],
+    nested: {
+      foo: true,
+      conflict: 1,
+      nested: {
+        foo: true,
+        conflict: 1,
+        extraExtra: true,
+      },
+    },
+    nestedArray: [
+      {
+        foo: true,
+        conflict: 1,
+        extra: true,
+        nested: { foo: true, conflict: 1, extraExtraExtra: true },
+      },
+    ],
+  },
+  {
+    id: `id2`,
+    internal: { type: `ArrayTest` },
+    array: [{ foo: true }],
+  },
+  {
+    id: `id3`,
+    internal: { type: `LinkTest` },
+    link___NODE: `id1`,
+    links___NODE: [`id1`],
+  },
+]
+
+describe(`merges explicit and inferred type definitions`, () => {
+  beforeEach(() => {
+    store.dispatch({ type: `DELETE_CACHE` })
+    nodes.forEach(node =>
+      store.dispatch({ type: `CREATE_NODE`, payload: { ...node } })
+    )
+  })
+
+  const buildTestSchemaWithSdl = async ({
+    infer = true,
+    addDefaultResolvers = true,
+  }) => {
+    const inferDirective = infer ? `@infer` : `@dontInfer`
+    const noDefaultResolvers = addDefaultResolvers ? `false` : `true`
+    const typeDefs = [
+      `
+      type NestedNested {
+        bar: Boolean!
+        conflict: String!
+        notExtra: Boolean
+      }
+
+      type Nested {
+        bar: Boolean!
+        conflict: String!
+        nested: NestedNested
+      }
+
+      type Test implements Node ${inferDirective}(noDefaultResolvers: ${noDefaultResolvers}) {
+        explicitDate: Date
+        bar: Boolean!
+        nested: Nested!
+        nestedArray: [Nested!]!
+        conflictType: String!
+        conflictArray: Int!
+        conflictArrayReverse: [Int!]!
+        conflictArrayType: [String!]!
+        conflictScalar: Int!
+        conflictScalarReverse: Nested!
+        conflictScalarArray: [Int!]!
+        conflcitScalarArrayReverse: [Nested!]!
+      }`,
+    ]
+
+    typeDefs.forEach(def =>
+      store.dispatch({ type: `CREATE_TYPES`, payload: def })
+    )
+
+    await build({})
+    return store.getState().schema
+  }
+
+  const buildTestSchemaWithTypeBuilders = async ({
+    infer = true,
+    addDefaultResolvers = true,
+  }) => {
+    const typeDefs = [
+      buildObjectType({
+        name: `NestedNested`,
+        fields: {
+          bar: `Boolean!`,
+          conflict: `String!`,
+          notExtra: `Boolean`,
+        },
+      }),
+      buildObjectType({
+        name: `Nested`,
+        fields: {
+          bar: `Boolean!`,
+          conflict: `String!`,
+          nested: `NestedNested`,
+        },
+      }),
+      buildObjectType({
+        name: `Test`,
+        interfaces: [`Node`],
+        extensions: {
+          infer,
+          addDefaultResolvers,
+        },
+        fields: {
+          explicitDate: `Date`,
+          bar: `Boolean!`,
+          nested: `Nested!`,
+          nestedArray: `[Nested!]!`,
+          conflictType: `String!`,
+          conflictArray: `Int!`,
+          conflictArrayReverse: `[Int!]!`,
+          conflictArrayType: `[String!]!`,
+          conflictScalar: `Int!`,
+          conflictScalarReverse: `Nested!`,
+          conflictScalarArray: `[Int!]!`,
+          conflcitScalarArrayReverse: `[Nested!]!`,
+        },
+      }),
+    ]
+
+    typeDefs.forEach(def =>
+      store.dispatch({ type: `CREATE_TYPES`, payload: def })
+    )
+
+    await build({})
+    return store.getState().schema
+  }
+
+  ;[
+    [`sdl`, buildTestSchemaWithSdl],
+    [`typeBuilders`, buildTestSchemaWithTypeBuilders],
+  ].forEach(([name, buildTestSchema]) => {
+    describe(`with ${name}`, () => {
+      it(`with default strategy`, async () => {
+        const schema = await buildTestSchema({})
+        const fields = schema.getType(`Test`).getFields()
+        const nestedFields = schema.getType(`Nested`).getFields()
+        const nestedNestedFields = schema.getType(`NestedNested`).getFields()
+
+        // Non-conflicting top-level fields added
+        expect(fields.foo.type.toString()).toBe(`Boolean`)
+        expect(fields.bar.type.toString()).toBe(`Boolean!`)
+
+        // Non-conflicting fields added on nested type
+        expect(fields.nested.type.toString()).toBe(`Nested!`)
+        expect(fields.nestedArray.type.toString()).toBe(`[Nested!]!`)
+        expect(nestedFields.foo.type.toString()).toBe(`Boolean`)
+        expect(nestedFields.bar.type.toString()).toBe(`Boolean!`)
+        expect(nestedNestedFields.foo.type.toString()).toBe(`Boolean`)
+        expect(nestedNestedFields.bar.type.toString()).toBe(`Boolean!`)
+
+        // When type is referenced more than once on typeDefs, all non-conflicting
+        // fields are added
+        expect(nestedFields.extra.type.toString()).toBe(`Boolean`)
+        expect(nestedNestedFields.notExtra.type.toString()).toBe(`Boolean`)
+        expect(nestedNestedFields.extraExtra.type.toString()).toBe(`Boolean`)
+        expect(nestedNestedFields.extraExtraExtra.type.toString()).toBe(
+          `Boolean`
+        )
+
+        // Explicit typeDefs have proprity in case of type conflict
+        expect(fields.conflictType.type.toString()).toBe(`String!`)
+        expect(fields.conflictArray.type.toString()).toBe(`Int!`)
+        expect(fields.conflictArrayReverse.type.toString()).toBe(`[Int!]!`)
+        expect(fields.conflictArrayType.type.toString()).toBe(`[String!]!`)
+        expect(fields.conflictScalar.type.toString()).toBe(`Int!`)
+        expect(fields.conflictScalarReverse.type.toString()).toBe(`Nested!`)
+        expect(fields.conflictScalarArray.type.toString()).toBe(`[Int!]!`)
+        expect(fields.conflcitScalarArrayReverse.type.toString()).toBe(
+          `[Nested!]!`
+        )
+
+        // Explicit typeDefs have priority on nested types as well
+        expect(nestedFields.conflict.type.toString()).toBe(`String!`)
+        expect(nestedNestedFields.conflict.type.toString()).toBe(`String!`)
+
+        // Date resolvers
+        expect(fields.explicitDate.resolve).toBeDefined()
+        expect(fields.inferDate.resolve).toBeDefined()
+      })
+
+      it(`with @dontInfer directive`, async () => {
+        const schema = await buildTestSchema({
+          infer: false,
+        })
+        const fields = schema.getType(`Test`).getFields()
+        const nestedFields = schema.getType(`Nested`).getFields()
+        const nestedNestedFields = schema.getType(`NestedNested`).getFields()
+
+        // Non-conflicting top-level fields added
+        expect(fields.bar.type.toString()).toBe(`Boolean!`)
+
+        // Not adding inferred fields
+        expect(fields.foo).toBeUndefined()
+        expect(nestedFields.foo).toBeUndefined()
+        expect(nestedNestedFields.foo).toBeUndefined()
+        expect(nestedFields.extra).toBeUndefined()
+        expect(nestedNestedFields.extraExtra).toBeUndefined()
+        expect(nestedNestedFields.extraExtraExtra).toBeUndefined()
+        expect(fields.inferDate).toBeUndefined()
+
+        // Non-conflicting fields added on nested type
+        expect(fields.nested.type.toString()).toBe(`Nested!`)
+        expect(fields.nestedArray.type.toString()).toBe(`[Nested!]!`)
+        expect(nestedFields.bar.type.toString()).toBe(`Boolean!`)
+        expect(nestedNestedFields.bar.type.toString()).toBe(`Boolean!`)
+
+        // When type is referenced more than once on typeDefs, all non-conflicting
+        // fields are added
+        expect(nestedNestedFields.notExtra.type.toString()).toBe(`Boolean`)
+
+        // Explicit typeDefs have proprity in case of type conflict
+        expect(fields.conflictType.type.toString()).toBe(`String!`)
+        expect(fields.conflictArray.type.toString()).toBe(`Int!`)
+        expect(fields.conflictArrayReverse.type.toString()).toBe(`[Int!]!`)
+        expect(fields.conflictArrayType.type.toString()).toBe(`[String!]!`)
+        expect(fields.conflictScalar.type.toString()).toBe(`Int!`)
+        expect(fields.conflictScalarReverse.type.toString()).toBe(`Nested!`)
+        expect(fields.conflictScalarArray.type.toString()).toBe(`[Int!]!`)
+        expect(fields.conflcitScalarArrayReverse.type.toString()).toBe(
+          `[Nested!]!`
+        )
+
+        // Explicit typeDefs have priority on nested types as well
+        expect(nestedFields.conflict.type.toString()).toBe(`String!`)
+        expect(nestedNestedFields.conflict.type.toString()).toBe(`String!`)
+
+        // Date resolvers
+        expect(fields.explicitDate.resolve).toBeDefined()
+      })
+
+      it(`with noDefaultResolvers: true`, async () => {
+        const schema = await buildTestSchema({
+          addDefaultResolvers: false,
+        })
+        const fields = schema.getType(`Test`).getFields()
+        const nestedFields = schema.getType(`Nested`).getFields()
+        const nestedNestedFields = schema.getType(`NestedNested`).getFields()
+
+        // Non-conflicting top-level fields added
+        expect(fields.foo.type.toString()).toBe(`Boolean`)
+        expect(fields.bar.type.toString()).toBe(`Boolean!`)
+
+        // Non-conflicting fields added on nested type
+        expect(fields.nested.type.toString()).toBe(`Nested!`)
+        expect(fields.nestedArray.type.toString()).toBe(`[Nested!]!`)
+        expect(nestedFields.foo.type.toString()).toBe(`Boolean`)
+        expect(nestedFields.bar.type.toString()).toBe(`Boolean!`)
+        expect(nestedNestedFields.foo.type.toString()).toBe(`Boolean`)
+        expect(nestedNestedFields.bar.type.toString()).toBe(`Boolean!`)
+
+        // When type is referenced more than once on typeDefs, all non-conflicting
+        // fields are added
+        expect(nestedFields.extra.type.toString()).toBe(`Boolean`)
+        expect(nestedNestedFields.notExtra.type.toString()).toBe(`Boolean`)
+        expect(nestedNestedFields.extraExtra.type.toString()).toBe(`Boolean`)
+        expect(nestedNestedFields.extraExtraExtra.type.toString()).toBe(
+          `Boolean`
+        )
+
+        // Explicit typeDefs have proprity in case of type conflict
+        expect(fields.conflictType.type.toString()).toBe(`String!`)
+        expect(fields.conflictArray.type.toString()).toBe(`Int!`)
+        expect(fields.conflictArrayReverse.type.toString()).toBe(`[Int!]!`)
+        expect(fields.conflictArrayType.type.toString()).toBe(`[String!]!`)
+        expect(fields.conflictScalar.type.toString()).toBe(`Int!`)
+        expect(fields.conflictScalarReverse.type.toString()).toBe(`Nested!`)
+        expect(fields.conflictScalarArray.type.toString()).toBe(`[Int!]!`)
+        expect(fields.conflcitScalarArrayReverse.type.toString()).toBe(
+          `[Nested!]!`
+        )
+
+        // Explicit typeDefs have priority on nested types as well
+        expect(nestedFields.conflict.type.toString()).toBe(`String!`)
+        expect(nestedNestedFields.conflict.type.toString()).toBe(`String!`)
+
+        // Date resolvers
+        expect(fields.explicitDate.resolve).toBeUndefined()
+        expect(fields.inferDate.resolve).toBeDefined()
+      })
+
+      it(`with both @dontInfer and noDefaultResolvers: true`, async () => {
+        const schema = await buildTestSchema({
+          addDefaultResolvers: false,
+          infer: false,
+        })
+
+        const fields = schema.getType(`Test`).getFields()
+        const nestedFields = schema.getType(`Nested`).getFields()
+        const nestedNestedFields = schema.getType(`NestedNested`).getFields()
+
+        // Non-conflicting top-level fields added
+        expect(fields.bar.type.toString()).toBe(`Boolean!`)
+
+        // Not adding inferred fields
+        expect(fields.foo).toBeUndefined()
+        expect(nestedFields.foo).toBeUndefined()
+        expect(nestedNestedFields.foo).toBeUndefined()
+        expect(nestedFields.extra).toBeUndefined()
+        expect(nestedNestedFields.extraExtra).toBeUndefined()
+        expect(nestedNestedFields.extraExtraExtra).toBeUndefined()
+        expect(fields.inferDate).toBeUndefined()
+
+        // Non-conflicting fields added on nested type
+        expect(fields.nested.type.toString()).toBe(`Nested!`)
+        expect(fields.nestedArray.type.toString()).toBe(`[Nested!]!`)
+        expect(nestedFields.bar.type.toString()).toBe(`Boolean!`)
+        expect(nestedNestedFields.bar.type.toString()).toBe(`Boolean!`)
+
+        // When type is referenced more than once on typeDefs, all non-conflicting
+        // fields are added
+        expect(nestedNestedFields.notExtra.type.toString()).toBe(`Boolean`)
+
+        // Explicit typeDefs have proprity in case of type conflict
+        expect(fields.conflictType.type.toString()).toBe(`String!`)
+        expect(fields.conflictArray.type.toString()).toBe(`Int!`)
+        expect(fields.conflictArrayReverse.type.toString()).toBe(`[Int!]!`)
+        expect(fields.conflictArrayType.type.toString()).toBe(`[String!]!`)
+        expect(fields.conflictScalar.type.toString()).toBe(`Int!`)
+        expect(fields.conflictScalarReverse.type.toString()).toBe(`Nested!`)
+        expect(fields.conflictScalarArray.type.toString()).toBe(`[Int!]!`)
+        expect(fields.conflcitScalarArrayReverse.type.toString()).toBe(
+          `[Nested!]!`
+        )
+
+        // Explicit typeDefs have priority on nested types as well
+        expect(nestedFields.conflict.type.toString()).toBe(`String!`)
+        expect(nestedNestedFields.conflict.type.toString()).toBe(`String!`)
+
+        // Date resolvers
+        expect(fields.explicitDate.resolve).toBeUndefined()
+      })
+    })
+  })
+
+  it(`honors array depth when merging types`, async () => {
+    const typeDefs = `
+      type FooBar {
+        bar: Boolean
+      }
+      type ArrayTest implements Node {
+        array: [FooBar]
+      }
+    `
+    store.dispatch({ type: `CREATE_TYPES`, payload: typeDefs })
+    await build({})
+    const { schema } = store.getState()
+    const { foo, bar } = schema.getType(`FooBar`).getFields()
+    expect(foo.type.toString()).toBe(`Boolean`)
+    expect(bar.type.toString()).toBe(`Boolean`)
+  })
+
+  it(`does not merge types when array depth does not match`, async () => {
+    const typeDefs = `
+      type FooBar {
+        bar: Boolean
+      }
+      type ArrayTest implements Node {
+        array: FooBar
+      }
+    `
+    store.dispatch({ type: `CREATE_TYPES`, payload: typeDefs })
+    await build({})
+    const { schema } = store.getState()
+    const { foo, bar } = schema.getType(`FooBar`).getFields()
+    expect(foo).toBeUndefined()
+    expect(bar.type.toString()).toBe(`Boolean`)
+  })
+
+  it(`preserves foreign-key resolvers on ___NODE fields when noDefaultResolvers: false`, async () => {
+    const typeDefs = `
+      type LinkTest implements Node {
+        link: Test!
+        links: [Test!]!
+      }
+    `
+    store.dispatch({ type: `CREATE_TYPES`, payload: typeDefs })
+
+    await build({})
+    const { schema } = store.getState()
+    const { link, links } = schema.getType(`LinkTest`).getFields()
+    expect(link.type.toString()).toBe(`Test!`)
+    expect(links.type.toString()).toBe(`[Test!]!`)
+    expect(link.resolve).toBeDefined()
+    expect(links.resolve).toBeDefined()
+  })
+
+  it(`ignores foreign-key resolvers on ___NODE fields when noDefaultResolvers: true`, async () => {
+    const typeDefs = `
+      type LinkTest implements Node @infer(noDefaultResolvers: true) {
+        link: Test!
+        links: [Test!]!
+      }
+    `
+    store.dispatch({ type: `CREATE_TYPES`, payload: typeDefs })
+
+    await build({})
+    const { schema } = store.getState()
+    const { link, links } = schema.getType(`LinkTest`).getFields()
+    expect(link.type.toString()).toBe(`Test!`)
+    expect(links.type.toString()).toBe(`[Test!]!`)
+    expect(link.resolve).toBeUndefined()
+    expect(links.resolve).toBeUndefined()
+  })
+})
diff --git a/node_modules/gatsby/src/schema/infer/add-inferred-fields.js b/node_modules/gatsby/src/schema/infer/add-inferred-fields.js
new file mode 100644
index 0000000..b27c53a
--- /dev/null
+++ b/node_modules/gatsby/src/schema/infer/add-inferred-fields.js
@@ -0,0 +1,423 @@
+const _ = require(`lodash`)
+const {
+  defaultFieldResolver,
+  getNamedType,
+  GraphQLObjectType,
+  GraphQLList,
+} = require(`graphql`)
+const { ObjectTypeComposer } = require(`graphql-compose`)
+const invariant = require(`invariant`)
+const report = require(`gatsby-cli/lib/reporter`)
+
+const { isFile } = require(`./is-file`)
+const { link, fileByPath } = require(`../resolvers`)
+const { isDate, dateResolver } = require(`../types/date`)
+const is32BitInteger = require(`./is-32-bit-integer`)
+
+const addInferredFields = ({
+  schemaComposer,
+  typeComposer,
+  exampleValue,
+  nodeStore,
+  inferConfig,
+  typeMapping,
+  parentSpan,
+}) => {
+  addInferredFieldsImpl({
+    schemaComposer,
+    typeComposer,
+    nodeStore,
+    exampleObject: exampleValue,
+    prefix: typeComposer.getTypeName(),
+    typeMapping,
+    addNewFields: inferConfig ? inferConfig.infer : true,
+    addDefaultResolvers: inferConfig ? inferConfig.addDefaultResolvers : true,
+  })
+}
+
+module.exports = {
+  addInferredFields,
+}
+
+const addInferredFieldsImpl = ({
+  schemaComposer,
+  typeComposer,
+  nodeStore,
+  exampleObject,
+  typeMapping,
+  prefix,
+  addNewFields,
+  addDefaultResolvers,
+}) => {
+  const fields = []
+  Object.keys(exampleObject).forEach(unsanitizedKey => {
+    const exampleValue = exampleObject[unsanitizedKey]
+    fields.push(
+      getFieldConfig({
+        schemaComposer,
+        typeComposer,
+        nodeStore,
+        prefix,
+        exampleValue,
+        unsanitizedKey,
+        typeMapping,
+        addNewFields,
+        addDefaultResolvers,
+      })
+    )
+  })
+
+  const fieldsByKey = _.groupBy(fields, field => field.key)
+
+  Object.keys(fieldsByKey).forEach(key => {
+    const possibleFields = fieldsByKey[key]
+    let fieldConfig
+    if (possibleFields.length > 1) {
+      const field = resolveMultipleFields(possibleFields)
+      const possibleFieldsNames = possibleFields
+        .map(field => `\`${field.unsanitizedKey}\``)
+        .join(`, `)
+      report.warn(
+        `Multiple node fields resolve to the same GraphQL field \`${prefix}.${
+          field.key
+        }\` - [${possibleFieldsNames}]. Gatsby will use \`${
+          field.unsanitizedKey
+        }\`.`
+      )
+      fieldConfig = field.fieldConfig
+    } else {
+      fieldConfig = possibleFields[0].fieldConfig
+    }
+
+    let arrays = 0
+    let namedInferredType = fieldConfig.type
+    while (Array.isArray(namedInferredType)) {
+      namedInferredType = namedInferredType[0]
+      arrays++
+    }
+
+    if (typeComposer.hasField(key)) {
+      const fieldType = typeComposer.getFieldType(key)
+
+      let lists = 0
+      let namedFieldType = fieldType
+      while (namedFieldType.ofType) {
+        if (namedFieldType instanceof GraphQLList) {
+          lists++
+        }
+        namedFieldType = namedFieldType.ofType
+      }
+
+      const namedInferredTypeName =
+        typeof namedInferredType === `string`
+          ? namedInferredType
+          : namedInferredType.getTypeName()
+
+      if (arrays === lists && namedFieldType.name === namedInferredTypeName) {
+        if (
+          namedFieldType instanceof GraphQLObjectType &&
+          namedInferredType instanceof ObjectTypeComposer
+        ) {
+          const fieldTypeComposer = typeComposer.getFieldTC(key)
+          const inferredFields = namedInferredType.getFields()
+          fieldTypeComposer.addFields(inferredFields)
+        }
+        if (addDefaultResolvers) {
+          let field = typeComposer.getField(key)
+          if (!field.type) {
+            field = {
+              type: field,
+            }
+          }
+          if (_.isEmpty(field.args) && fieldConfig.args) {
+            field.args = fieldConfig.args
+          }
+          if (!field.resolve && fieldConfig.resolve) {
+            field.resolve = fieldConfig.resolve
+          }
+          typeComposer.setField(key, field)
+        }
+      }
+    } else if (addNewFields) {
+      if (namedInferredType instanceof ObjectTypeComposer) {
+        schemaComposer.add(namedInferredType)
+      }
+      typeComposer.setField(key, fieldConfig)
+    }
+  })
+
+  return typeComposer
+}
+
+const getFieldConfig = ({
+  schemaComposer,
+  typeComposer,
+  nodeStore,
+  prefix,
+  exampleValue,
+  unsanitizedKey,
+  typeMapping,
+  addNewFields,
+  addDefaultResolvers,
+}) => {
+  let key = createFieldName(unsanitizedKey)
+  const selector = `${prefix}.${key}`
+
+  let arrays = 0
+  let value = exampleValue
+  while (Array.isArray(value)) {
+    value = value[0]
+    arrays++
+  }
+
+  let fieldConfig
+  if (hasMapping(typeMapping, selector)) {
+    // TODO: Use `prefix` instead of `selector` in hasMapping and getFromMapping?
+    // i.e. does the config contain sanitized field names?
+    fieldConfig = getFieldConfigFromMapping({ typeMapping, selector })
+  } else if (key.includes(`___NODE`)) {
+    fieldConfig = getFieldConfigFromFieldNameConvention({
+      schemaComposer,
+      nodeStore,
+      value: exampleValue,
+      key: unsanitizedKey,
+    })
+    key = key.split(`___NODE`)[0]
+  } else {
+    fieldConfig = getSimpleFieldConfig({
+      schemaComposer,
+      typeComposer,
+      nodeStore,
+      key,
+      value,
+      selector,
+      typeMapping,
+      addNewFields,
+      addDefaultResolvers,
+    })
+  }
+
+  // Proxy resolver to unsanitized fieldName in case it contained invalid characters
+  if (key !== unsanitizedKey) {
+    const resolver = fieldConfig.resolve || defaultFieldResolver
+    fieldConfig = {
+      ...fieldConfig,
+      resolve: (source, args, context, info) =>
+        resolver(source, args, context, {
+          ...info,
+          fieldName: unsanitizedKey,
+        }),
+    }
+  }
+
+  while (arrays > 0) {
+    fieldConfig = { ...fieldConfig, type: [fieldConfig.type] }
+    arrays--
+  }
+
+  return {
+    key,
+    unsanitizedKey,
+    fieldConfig,
+  }
+}
+
+const resolveMultipleFields = possibleFields => {
+  const nodeField = possibleFields.find(field =>
+    field.unsanitizedKey.includes(`___NODE`)
+  )
+  if (nodeField) {
+    return nodeField
+  }
+
+  const canonicalField = possibleFields.find(
+    field => field.unsanitizedKey === field.key
+  )
+  if (canonicalField) {
+    return canonicalField
+  }
+
+  return _.sortBy(possibleFields, field => field.unsanitizedKey)[0]
+}
+
+// XXX(freiksenet): removing this as it's a breaking change
+// Deeper nested levels should be inferred as JSON.
+// const MAX_DEPTH = 5
+
+const hasMapping = (mapping, selector) =>
+  mapping && Object.keys(mapping).includes(selector)
+
+const getFieldConfigFromMapping = ({ typeMapping, selector }) => {
+  const [type, ...path] = typeMapping[selector].split(`.`)
+  return { type, resolve: link({ by: path.join(`.`) || `id` }) }
+}
+
+// probably should be in example value
+const getFieldConfigFromFieldNameConvention = ({
+  schemaComposer,
+  nodeStore,
+  value,
+  key,
+}) => {
+  const path = key.split(`___NODE___`)[1]
+  // Allow linking by nested fields, e.g. `author___NODE___contact___email`
+  const foreignKey = path && path.replace(/___/g, `.`)
+
+  const getNodeBy = value =>
+    foreignKey
+      ? nodeStore.getNodes().find(node => _.get(node, foreignKey) === value)
+      : nodeStore.getNode(value)
+
+  const linkedNodes = Array.isArray(value)
+    ? value.map(getNodeBy)
+    : [getNodeBy(value)]
+
+  const linkedTypes = _.uniq(
+    linkedNodes.filter(Boolean).map(node => node.internal.type)
+  )
+
+  invariant(
+    linkedTypes.length,
+    `Encountered an error trying to infer a GraphQL type for: \`${key}\`. ` +
+      `There is no corresponding node with the \`id\` field matching: "${value}".`
+  )
+
+  let type
+  // If the field value is an array that links to more than one type,
+  // create a GraphQLUnionType. Note that we don't support the case where
+  // scalar fields link to different types. Similarly, an array of objects
+  // with foreign-key fields will produce union types if those foreign-key
+  // fields are arrays, but not if they are scalars. See the tests for an example.
+  // FIXME: The naming of union types is a breaking change. In current master,
+  // the type name includes the key, which is (i) potentially not unique, and
+  // (ii) hinders reusing types.
+  if (linkedTypes.length > 1) {
+    const typeName = linkedTypes.sort().join(``) + `Union`
+    type = schemaComposer.getOrCreateUTC(typeName, utc => {
+      const types = linkedTypes.map(typeName =>
+        schemaComposer.getOrCreateOTC(typeName)
+      )
+      utc.setTypes(types)
+      utc.setResolveType(node => node.internal.type)
+    })
+  } else {
+    type = linkedTypes[0]
+  }
+
+  return { type, resolve: link({ by: foreignKey || `id` }) }
+}
+
+const getSimpleFieldConfig = ({
+  schemaComposer,
+  typeComposer,
+  nodeStore,
+  key,
+  value,
+  selector,
+  typeMapping,
+  addNewFields,
+  addDefaultResolvers,
+}) => {
+  switch (typeof value) {
+    case `boolean`:
+      return { type: `Boolean` }
+    case `number`:
+      return { type: is32BitInteger(value) ? `Int` : `Float` }
+    case `string`:
+      if (isDate(value)) {
+        return dateResolver
+      }
+      // FIXME: The weird thing is that we are trying to infer a File,
+      // but cannot assume that a source plugin for File nodes is actually present.
+      if (schemaComposer.has(`File`) && isFile(nodeStore, selector, value)) {
+        // NOTE: For arrays of files, where not every path references
+        // a File node in the db, it is semi-random if the field is
+        // inferred as File or String, since the exampleValue only has
+        // the first entry (which could point to an existing file or not).
+        return { type: `File`, resolve: fileByPath }
+      }
+      return { type: `String` }
+    case `object`:
+      if (value instanceof Date) {
+        return dateResolver
+      }
+      if (value instanceof String) {
+        return { type: `String` }
+      }
+      if (value /* && depth < MAX_DEPTH*/) {
+        // We only create a temporary TypeComposer on nested fields
+        // (either a clone of an existing field type, or a temporary new one),
+        // because we don't yet know if this type should end up in the schema.
+        // It might be for a possibleField that will be disregarded later,
+        // so we cannot mutate the original.
+        let fieldTypeComposer
+        if (
+          typeComposer.hasField(key) &&
+          getNamedType(typeComposer.getFieldType(key)) instanceof
+            GraphQLObjectType
+        ) {
+          const originalFieldTypeComposer = typeComposer.getFieldTC(key)
+          fieldTypeComposer = originalFieldTypeComposer.clone(
+            originalFieldTypeComposer.getTypeName()
+          )
+        } else {
+          fieldTypeComposer = ObjectTypeComposer.createTemp(
+            createTypeName(selector),
+            schemaComposer
+          )
+        }
+
+        return {
+          type: addInferredFieldsImpl({
+            schemaComposer,
+            typeComposer: fieldTypeComposer,
+            nodeStore,
+            exampleObject: value,
+            typeMapping,
+            prefix: selector,
+            addNewFields,
+            addDefaultResolvers,
+          }),
+        }
+      }
+  }
+  throw new Error(`Can't determine type for "${value}" in \`${selector}\`.`)
+}
+
+const createTypeName = selector => {
+  const keys = selector.split(`.`)
+  const suffix = keys
+    .slice(1)
+    .map(_.upperFirst)
+    .join(``)
+  return `${keys[0]}${suffix}`
+}
+
+const NON_ALPHA_NUMERIC_EXPR = new RegExp(`[^a-zA-Z0-9_]`, `g`)
+
+/**
+ * GraphQL field names must be a string and cannot contain anything other than
+ * alphanumeric characters and `_`. They also can't start with `__` which is
+ * reserved for internal fields (`___foo` doesn't work either).
+ */
+const createFieldName = key => {
+  // Check if the key is really a string otherwise GraphQL will throw.
+  invariant(
+    typeof key === `string`,
+    `GraphQL field name (key) is not a string: \`${key}\`.`
+  )
+
+  const replaced = key.replace(NON_ALPHA_NUMERIC_EXPR, `_`)
+
+  // key is invalid; normalize with leading underscore and rest with x
+  if (replaced.match(/^__/)) {
+    return replaced.replace(/_/g, (char, index) => (index === 0 ? `_` : `x`))
+  }
+
+  // key is invalid (starts with numeric); normalize with leading underscore
+  if (replaced.match(/^[0-9]/)) {
+    return `_` + replaced
+  }
+
+  return replaced
+}
diff --git a/node_modules/gatsby/src/schema/infer/example-value.js b/node_modules/gatsby/src/schema/infer/example-value.js
new file mode 100644
index 0000000..3e7d032
--- /dev/null
+++ b/node_modules/gatsby/src/schema/infer/example-value.js
@@ -0,0 +1,189 @@
+const _ = require(`lodash`)
+const is32BitInteger = require(`./is-32-bit-integer`)
+const { looksLikeADate } = require(`../types/date`)
+
+const getExampleValue = ({
+  nodes,
+  typeName,
+  typeConflictReporter,
+  ignoreFields,
+}) => {
+  const exampleValue = getExampleObject({
+    nodes,
+    prefix: typeName,
+    typeConflictReporter,
+    ignoreFields,
+  })
+  return exampleValue
+}
+
+module.exports = {
+  getExampleValue,
+}
+
+const getExampleObject = ({
+  nodes: rawNodes,
+  prefix,
+  typeConflictReporter,
+  ignoreFields = [],
+}) => {
+  const nodes = rawNodes.filter(node => node != null)
+  const allKeys = nodes.reduce(
+    (acc, node) =>
+      Object.keys(node).forEach(
+        key => key && !ignoreFields.includes(key) && acc.add(key)
+      ) || acc,
+    new Set()
+  )
+
+  const exampleValue = Array.from(allKeys).reduce((acc, key) => {
+    const entries = nodes
+      .map(node => {
+        const value = node[key]
+        const type = getType(value)
+        return type && { value, type, parent: node }
+      })
+      .filter(Boolean)
+
+    const selector = prefix ? `${prefix}.${key}` : key
+
+    const entriesByType = _.uniqBy(entries, entry => entry.type)
+    if (!entriesByType.length) return acc
+
+    // TODO: This whole thing could be prettier!
+    let { value, type } = entriesByType[0]
+    let arrayWrappers = 0
+    while (Array.isArray(value)) {
+      value = value.find(v => v != null)
+      arrayWrappers++
+    }
+
+    if (entriesByType.length > 1 || type.includes(`,`)) {
+      if (
+        isMixOfDatesAndStrings(
+          entriesByType.map(entry => entry.type),
+          arrayWrappers
+        )
+      ) {
+        // TODO: Possibly revisit this in Gatsby v3.
+        const allNonEmptyStringsAreDates = entries.every(entry => {
+          const values = Array.isArray(entry.value)
+            ? _.flatMap(entry.value)
+            : [entry.value]
+          return values.every(
+            value => value === `` || getType(value) === `date`
+          )
+        })
+        if (allNonEmptyStringsAreDates) {
+          value = `1978-09-26`
+        } else {
+          value = `String`
+        }
+      } else {
+        typeConflictReporter.addConflict(selector, entriesByType)
+        return acc
+      }
+    }
+
+    let exampleFieldValue
+    if (
+      _.isObject(value) &&
+      !_.isArray(value) &&
+      !_.isDate(value) &&
+      !_.isRegExp(value)
+    ) {
+      const objects = entries.reduce((acc, entry) => {
+        let { value } = entry
+
+        let arrays = arrayWrappers - 1
+        while (arrays > 0) {
+          value = value.find(v => v != null)
+          arrays--
+        }
+        return acc.concat(value)
+      }, [])
+      const exampleObject = getExampleObject({
+        nodes: objects,
+        prefix: selector,
+        typeConflictReporter,
+      })
+      if (!Object.keys(exampleObject).length) return acc
+      exampleFieldValue = exampleObject
+    } else if (key.includes(`___NODE`) && arrayWrappers) {
+      // For arrays on ___NODE foreign-key fields we return all values,
+      // because the array values are allowed to link to nodes of different types.
+      // For those we will create a GraphQLUnionType later.
+      arrayWrappers--
+      exampleFieldValue = entries.reduce(
+        (acc, entry) => acc.concat(entry.value),
+        []
+      )
+    } else {
+      // FIXME: Why not simply treat every number as float (instead of looping through all values again)?
+      exampleFieldValue =
+        (typeof value === `number` && findFloat(entries)) || value
+      // exampleFieldValue = value === `number` ? 0.1 : value
+    }
+    while (arrayWrappers--) {
+      exampleFieldValue = [exampleFieldValue]
+    }
+    acc[key] = exampleFieldValue
+
+    return acc
+  }, {})
+
+  return exampleValue
+}
+
+const isMixOfDatesAndStrings = (types, arrayWrappers) => {
+  const acc = new Set()
+  types.every(type => {
+    let arrays = arrayWrappers
+    while (arrays--) {
+      if (type.startsWith(`[`)) {
+        type = type.slice(1, -1)
+      } else {
+        return false
+      }
+    }
+    type.split(`,`).forEach(t => acc.add(t.replace(/[[]]/g, ``)))
+    return true
+  })
+  return acc.size === 2 && acc.has(`date`) && acc.has(`string`)
+}
+
+const findFloat = entries => {
+  let result
+  const find = numbers =>
+    numbers.some(value => {
+      const number = typeof value === `object` ? value.value : value
+      return Array.isArray(number)
+        ? find(number)
+        : !is32BitInteger(number) && (result = number)
+    })
+  find(entries)
+  return result
+}
+
+const getType = value => {
+  switch (typeof value) {
+    case `number`:
+      return `number`
+    case `string`:
+      return looksLikeADate(value) ? `date` : `string`
+    case `boolean`:
+      return `boolean`
+    case `object`:
+      if (value === null) return null
+      if (value instanceof Date) return `date`
+      if (value instanceof String) return `string`
+      if (Array.isArray(value)) {
+        const uniqueValues = _.uniq(value.map(getType).filter(v => v != null))
+        return uniqueValues.length ? `[${uniqueValues.join(`,`)}]` : null
+      }
+      if (!Object.keys(value).length) return null
+      return `object`
+    default:
+      return null
+  }
+}
diff --git a/node_modules/gatsby/src/schema/infer/get-infer-config.js b/node_modules/gatsby/src/schema/infer/get-infer-config.js
new file mode 100644
index 0000000..1591be4
--- /dev/null
+++ b/node_modules/gatsby/src/schema/infer/get-infer-config.js
@@ -0,0 +1,27 @@
+// @flow
+
+export interface InferConfig {
+  infer: boolean;
+  addDefaultResolvers: boolean;
+}
+
+const DEFAULT_INFER_CONFIG: InferConfig = {
+  infer: true,
+  addDefaultResolvers: true,
+}
+
+// Get inferance config from type directives
+const getInferConfig: (
+  typeComposer: TypeComposer
+) => InferConfig = typeComposer => {
+  return {
+    infer: typeComposer.hasExtension(`infer`)
+      ? typeComposer.getExtension(`infer`)
+      : DEFAULT_INFER_CONFIG.infer,
+    addDefaultResolvers: typeComposer.hasExtension(`addDefaultResolvers`)
+      ? typeComposer.getExtension(`addDefaultResolvers`)
+      : DEFAULT_INFER_CONFIG.addDefaultResolvers,
+  }
+}
+
+module.exports = getInferConfig
diff --git a/node_modules/gatsby/src/schema/infer/index.js b/node_modules/gatsby/src/schema/infer/index.js
new file mode 100644
index 0000000..85c5249
--- /dev/null
+++ b/node_modules/gatsby/src/schema/infer/index.js
@@ -0,0 +1,121 @@
+const report = require(`gatsby-cli/lib/reporter`)
+const { getExampleValue } = require(`./example-value`)
+const {
+  addNodeInterface,
+  getNodeInterface,
+} = require(`../types/node-interface`)
+const { addInferredFields } = require(`./add-inferred-fields`)
+const getInferConfig = require(`./get-infer-config`)
+
+const addInferredType = ({
+  schemaComposer,
+  typeComposer,
+  nodeStore,
+  typeConflictReporter,
+  typeMapping,
+  parentSpan,
+}) => {
+  const typeName = typeComposer.getTypeName()
+  const nodes = nodeStore.getNodesByType(typeName)
+  if (
+    !typeComposer.hasExtension(`plugin`) &&
+    typeComposer.getExtension(`createdFrom`) === `infer`
+  ) {
+    typeComposer.setExtension(`plugin`, nodes[0].internal.owner)
+  }
+  const exampleValue = getExampleValue({
+    nodes,
+    typeName,
+    typeConflictReporter,
+    ignoreFields: [
+      ...getNodeInterface({ schemaComposer }).getFieldNames(),
+      `$loki`,
+    ],
+  })
+
+  addInferredFields({
+    schemaComposer,
+    typeComposer,
+    nodeStore,
+    exampleValue,
+    inferConfig: getInferConfig(typeComposer),
+    typeMapping,
+    parentSpan,
+  })
+  return typeComposer
+}
+
+const addInferredTypes = ({
+  schemaComposer,
+  nodeStore,
+  typeConflictReporter,
+  typeMapping,
+  parentSpan,
+}) => {
+  // XXX(freiksenet): Won't be needed after plugins set typedefs
+  // Infer File first so all the links to it would work
+  const typeNames = putFileFirst(nodeStore.getTypes())
+  const noNodeInterfaceTypes = []
+
+  typeNames.forEach(typeName => {
+    let typeComposer
+    let inferConfig
+    if (schemaComposer.has(typeName)) {
+      typeComposer = schemaComposer.getOTC(typeName)
+      inferConfig = getInferConfig(typeComposer)
+      if (inferConfig.infer) {
+        if (!typeComposer.hasInterface(`Node`)) {
+          noNodeInterfaceTypes.push(typeComposer.getType())
+        }
+      }
+    } else {
+      typeComposer = schemaComposer.createObjectTC(typeName)
+      typeComposer.setExtension(`createdFrom`, `infer`)
+      addNodeInterface({ schemaComposer, typeComposer })
+    }
+  })
+
+  // XXX(freiksenet): We iterate twice to pre-create all types
+  const typeComposers = typeNames.map(typeName =>
+    addInferredType({
+      schemaComposer,
+      nodeStore,
+      typeConflictReporter,
+      typeComposer: schemaComposer.getOTC(typeName),
+      typeMapping,
+      parentSpan,
+    })
+  )
+
+  if (noNodeInterfaceTypes.length > 0) {
+    noNodeInterfaceTypes.forEach(type => {
+      report.warn(
+        `Type \`${type}\` declared in \`createTypes\` looks like a node, ` +
+          `but doesn't implement a \`Node\` interface. It's likely that you should ` +
+          `add the \`Node\` interface to your type def:\n\n` +
+          `\`type ${type} implements Node { ... }\`\n\n` +
+          `If you know that you don't want it to be a node (which would mean no ` +
+          `root queries to retrieve it), you can explicitly disable inference ` +
+          `for it:\n\n` +
+          `\`type ${type} @dontInfer { ... }\``
+      )
+    })
+    report.panic(`Building schema failed`)
+  }
+
+  return typeComposers
+}
+
+const putFileFirst = typeNames => {
+  const index = typeNames.indexOf(`File`)
+  if (index !== -1) {
+    return [`File`, ...typeNames.slice(0, index), ...typeNames.slice(index + 1)]
+  } else {
+    return typeNames
+  }
+}
+
+module.exports = {
+  addInferredType,
+  addInferredTypes,
+}
diff --git a/node_modules/gatsby/src/schema/infer/is-32-bit-integer.js b/node_modules/gatsby/src/schema/infer/is-32-bit-integer.js
new file mode 100644
index 0000000..af07ce3
--- /dev/null
+++ b/node_modules/gatsby/src/schema/infer/is-32-bit-integer.js
@@ -0,0 +1,3 @@
+const is32BitInteger = num => (num | 0) === num
+
+module.exports = is32BitInteger
diff --git a/node_modules/gatsby/src/schema/infer/is-file.js b/node_modules/gatsby/src/schema/infer/is-file.js
new file mode 100644
index 0000000..d190eac
--- /dev/null
+++ b/node_modules/gatsby/src/schema/infer/is-file.js
@@ -0,0 +1,85 @@
+const path = require(`path`)
+const slash = require(`slash`)
+const mime = require(`mime`)
+const isRelative = require(`is-relative`)
+const isRelativeUrl = require(`is-relative-url`)
+const { getValueAt } = require(`../utils/get-value-at`)
+
+const isFile = (nodeStore, field, relativePath) => {
+  const filePath = getFilePath(nodeStore, field, relativePath)
+  if (!filePath) return false
+  const filePathExists = nodeStore
+    .getNodesByType(`File`)
+    .some(node => node.absolutePath === filePath)
+  return filePathExists
+}
+
+module.exports = {
+  isFile,
+}
+
+const getFirstValueAt = (node, selector) => {
+  let value = getValueAt(node, selector)
+  while (Array.isArray(value)) {
+    value = value[0]
+  }
+  return value
+}
+
+const getFilePath = (nodeStore, field, relativePath) => {
+  const [typeName, ...selector] = field.split(`.`)
+
+  if (typeName === `File`) return null
+
+  const looksLikeFile =
+    !path.isAbsolute(relativePath) &&
+    mime.getType(relativePath) !== null &&
+    // FIXME: Do we need all of this?
+    mime.getType(relativePath) !== `application/x-msdownload` &&
+    isRelative(relativePath) &&
+    isRelativeUrl(relativePath)
+
+  if (!looksLikeFile) return null
+
+  const normalizedPath = slash(relativePath)
+  const node = nodeStore
+    .getNodesByType(typeName)
+    .find(node => getFirstValueAt(node, selector) === normalizedPath)
+
+  return node ? getAbsolutePath(nodeStore, node, normalizedPath) : null
+}
+
+const getAbsolutePath = (nodeStore, node, relativePath) => {
+  const dir = getBaseDir(nodeStore, node)
+  const withDir = withBaseDir(dir)
+  return dir
+    ? Array.isArray(relativePath)
+      ? relativePath.map(withDir)
+      : withDir(relativePath)
+    : null
+}
+
+const getBaseDir = (nodeStore, node) => {
+  if (node) {
+    const { dir } =
+      findAncestorNode(
+        nodeStore,
+        node,
+        node => node.internal.type === `File`
+      ) || {}
+    return dir
+  }
+  return null
+}
+
+const withBaseDir = dir => p => path.posix.join(dir, slash(p))
+
+const findAncestorNode = (nodeStore, childNode, predicate) => {
+  let node = childNode
+  do {
+    if (predicate(node)) {
+      return node
+    }
+  } while ((node = node.parent && nodeStore.getNode(node.parent)))
+  return null
+}
diff --git a/node_modules/gatsby/src/schema/infer/type-conflict-reporter.js b/node_modules/gatsby/src/schema/infer/type-conflict-reporter.js
new file mode 100644
index 0000000..9db5763
--- /dev/null
+++ b/node_modules/gatsby/src/schema/infer/type-conflict-reporter.js
@@ -0,0 +1,148 @@
+// @flow
+const _ = require(`lodash`)
+const report = require(`gatsby-cli/lib/reporter`)
+const typeOf = require(`type-of`)
+const util = require(`util`)
+const { findRootNodeAncestor } = require(`../../db/node-tracking`)
+
+export type TypeConflictExample = {
+  value: mixed,
+  parent: {},
+  type: string,
+  arrayTypes: string[],
+}
+
+type TypeConflict = {
+  value: mixed,
+  description: string,
+}
+
+const isNodeWithDescription = node =>
+  node && node.internal && node.internal.description
+
+const findNodeDescription = obj => {
+  if (obj) {
+    const node = findRootNodeAncestor(obj, isNodeWithDescription)
+    if (isNodeWithDescription(node)) {
+      return node.internal.description
+    }
+  }
+  return ``
+}
+
+const formatValue = value => {
+  if (!_.isArray(value)) {
+    return util.inspect(value, {
+      colors: true,
+      depth: 0,
+      breakLength: Infinity,
+    })
+  }
+
+  let wasElipsisLast = false
+  const usedTypes = []
+  const output = []
+
+  value.forEach(item => {
+    const type = typeOf(item)
+    if (usedTypes.indexOf(type) !== -1) {
+      if (!wasElipsisLast) {
+        output.push(`...`)
+        wasElipsisLast = true
+      }
+    } else {
+      output.push(formatValue(item))
+      wasElipsisLast = false
+      usedTypes.push(type)
+    }
+  })
+
+  return `[ ${output.join(`, `)} ]`
+}
+
+class TypeConflictEntry {
+  selector: string
+  types: Map<string, TypeConflict>
+
+  constructor(selector: string) {
+    this.selector = selector
+    this.types = new Map()
+  }
+
+  addExample({ value, type, parent }: TypeConflictExample) {
+    this.types.set(type, {
+      value,
+      description: findNodeDescription(parent),
+    })
+  }
+
+  printEntry() {
+    const sortedByTypeName = _.sortBy(
+      Array.from(this.types.entries()),
+      ([typeName, value]) => typeName
+    )
+
+    report.log(
+      `${this.selector}:${sortedByTypeName
+        .map(
+          ([typeName, { value, description }]) =>
+            `\n - type: ${typeName}\n   value: ${formatValue(
+              value
+            )}${description && `\n   source: ${description}`}`
+        )
+        .join(``)}`
+    )
+  }
+}
+
+class TypeConflictReporter {
+  entries: Map<string, TypeConflictEntry>
+
+  constructor() {
+    this.entries = new Map()
+  }
+
+  clearConflicts() {
+    this.entries.clear()
+  }
+
+  getEntryFromSelector(selector: string): TypeConflictEntry {
+    let dataEntry = this.entries.get(selector)
+
+    if (!dataEntry) {
+      dataEntry = new TypeConflictEntry(selector)
+      this.entries.set(selector, dataEntry)
+    }
+
+    return dataEntry
+  }
+
+  addConflict(selector: string, examples: TypeConflictExample[]) {
+    if (selector.substring(0, 11) === `SitePlugin.`) {
+      // Don't store and print out type conflicts in plugins.
+      // This is out of user control so he/she can't do anything
+      // to hide those.
+      return
+    }
+
+    const entry = this.getEntryFromSelector(selector)
+    examples
+      .filter(example => example.value != null)
+      .forEach(example => entry.addExample(example))
+  }
+
+  printConflicts() {
+    if (this.entries.size > 0) {
+      report.warn(
+        `There are conflicting field types in your data. GraphQL schema will omit those fields.`
+      )
+      this.entries.forEach(entry => entry.printEntry())
+    }
+  }
+
+  getConflicts() {
+    return Array.from(this.entries.values())
+  }
+}
+
+module.exports = { TypeConflictReporter, TypeConflictEntry }
diff --git a/node_modules/gatsby/src/schema/node-model.js b/node_modules/gatsby/src/schema/node-model.js
new file mode 100644
index 0000000..81e9583
--- /dev/null
+++ b/node_modules/gatsby/src/schema/node-model.js
@@ -0,0 +1,279 @@
+// @flow
+
+const _ = require(`lodash`)
+const {
+  isAbstractType,
+  GraphQLOutputType,
+  GraphQLUnionType,
+} = require(`graphql`)
+const invariant = require(`invariant`)
+
+type IDOrNode = string | { id: string }
+type TypeOrTypeName = string | GraphQLOutputType
+
+/**
+ * Optional page dependency information.
+ *
+ * @typedef {Object} PageDependencies
+ * @property {string} path The path of the page that depends on the retrieved nodes' data
+ * @property {string} [connectionType] Mark this dependency as a connection
+ */
+interface PageDependencies {
+  path: string;
+  connectionType?: string;
+}
+
+interface QueryArguments {
+  type: TypeOrTypeName;
+  query: { filter: Object, sort?: Object, skip?: number, limit?: number };
+  firstOnly?: boolean;
+}
+
+export interface NodeModel {
+  getNodeById(
+    { id: IDOrNode, type?: TypeOrTypeName },
+    pageDependencies?: PageDependencies
+  ): any | null;
+  getNodesByIds(
+    { ids: Array<IDOrNode>, type?: TypeOrTypeName },
+    pageDependencies?: PageDependencies
+  ): Array<any>;
+  getAllNodes(
+    { type?: TypeOrTypeName },
+    pageDependencies?: PageDependencies
+  ): Array<any>;
+  runQuery(
+    args: QueryArguments,
+    pageDependencies?: PageDependencies
+  ): Promise<any>;
+  getTypes(): Array<string>;
+  trackPageDependencies<nodeOrNodes: Node | Node[]>(
+    result: nodeOrNodes,
+    pageDependencies?: PageDependencies
+  ): nodesOrNodes;
+}
+
+class LocalNodeModel {
+  constructor({ schema, nodeStore, createPageDependency, path }) {
+    this.schema = schema
+    this.nodeStore = nodeStore
+    this.createPageDependency = createPageDependency
+    this.path = path
+  }
+
+  /**
+   * Get a node from the store by ID and optional type.
+   *
+   * @param {Object} args
+   * @param {string} args.id ID of the requested node
+   * @param {(string|GraphQLOutputType)} [args.type] Optional type of the node
+   * @param {PageDependencies} [pageDependencies]
+   * @returns {(Node|null)}
+   */
+  getNodeById(args, pageDependencies) {
+    const { id, type } = args || {}
+
+    const node = getNodeById(this.nodeStore, id)
+
+    let result
+    if (!node) {
+      result = null
+    } else if (!type) {
+      result = node
+    } else {
+      const nodeTypeNames = toNodeTypeNames(this.schema, type)
+      result = nodeTypeNames.includes(node.internal.type) ? node : null
+    }
+
+    return this.trackPageDependencies(result, pageDependencies)
+  }
+
+  /**
+   * Get nodes from the store by IDs and optional type.
+   *
+   * @param {Object} args
+   * @param {string[]} args.ids IDs of the requested nodes
+   * @param {(string|GraphQLOutputType)} [args.type] Optional type of the nodes
+   * @param {PageDependencies} [pageDependencies]
+   * @returns {Node[]}
+   */
+  getNodesByIds(args, pageDependencies) {
+    const { ids, type } = args || {}
+
+    const nodes = Array.isArray(ids)
+      ? ids.map(id => getNodeById(this.nodeStore, id)).filter(Boolean)
+      : []
+
+    let result
+    if (!nodes.length || !type) {
+      result = nodes
+    } else {
+      const nodeTypeNames = toNodeTypeNames(this.schema, type)
+      result = nodes.filter(node => nodeTypeNames.includes(node.internal.type))
+    }
+
+    return this.trackPageDependencies(result, pageDependencies)
+  }
+
+  /**
+   * Get all nodes in the store, or all nodes of a specified type. Note that
+   * this doesn't add tracking to all the nodes, unless pageDependencies are
+   * passed.
+   *
+   * @param {Object} args
+   * @param {(string|GraphQLOutputType)} [args.type] Optional type of the nodes
+   * @param {PageDependencies} [pageDependencies]
+   * @returns {Node[]}
+   */
+  getAllNodes(args, pageDependencies) {
+    const { type } = args || {}
+
+    let result
+    if (!type) {
+      result = this.nodeStore.getNodes()
+    } else {
+      const nodeTypeNames = toNodeTypeNames(this.schema, type)
+      const nodes = nodeTypeNames.reduce(
+        (acc, typeName) => acc.concat(this.nodeStore.getNodesByType(typeName)),
+        []
+      )
+      result = nodes.filter(Boolean)
+    }
+
+    if (pageDependencies) {
+      return this.trackPageDependencies(result, pageDependencies)
+    } else {
+      return result
+    }
+  }
+
+  /**
+   * Get nodes of a type matching the specified query.
+   *
+   * @param {Object} args
+   * @param {Object} args.query Query arguments (`filter`, `sort`, `limit`, `skip`)
+   * @param {(string|GraphQLOutputType)} args.type Type
+   * @param {boolean} [args.firstOnly] If true, return only first match
+   * @param {PageDependencies} [pageDependencies]
+   * @returns {Promise<Node[]>}
+   */
+  async runQuery(args, pageDependencies) {
+    const { query, firstOnly, type } = args || {}
+
+    // We don't support querying union types (yet?), because the combined types
+    // need not have any fields in common.
+    const gqlType = typeof type === `string` ? this.schema.getType(type) : type
+    invariant(
+      !(gqlType instanceof GraphQLUnionType),
+      `Querying GraphQLUnion types is not supported.`
+    )
+
+    // We provide nodes in case of abstract types, because `run-sift` should
+    // only need to know about node types in the store.
+    let nodes
+    const nodeTypeNames = toNodeTypeNames(this.schema, gqlType)
+    if (nodeTypeNames.length > 1) {
+      nodes = nodeTypeNames.reduce(
+        (acc, typeName) => acc.concat(this.nodeStore.getNodesByType(typeName)),
+        []
+      )
+    }
+
+    const queryResult = await this.nodeStore.runQuery({
+      queryArgs: query,
+      firstOnly,
+      gqlType,
+      nodes,
+    })
+
+    let result = queryResult
+    if (args.firstOnly) {
+      if (result && result.length > 0) {
+        result = result[0]
+      } else {
+        result = null
+      }
+    }
+
+    return this.trackPageDependencies(result, pageDependencies)
+  }
+
+  /**
+   * Get the names of all node types in the store.
+   *
+   * @returns {string[]}
+   */
+  getTypes() {
+    return this.nodeStore.getTypes()
+  }
+
+  /**
+   * Get the root ancestor node for an object's parent node, or its first
+   * ancestor matching a specified condition.
+   *
+   * @param {(Object|Array)} obj An object belonging to a Node, or a Node object
+   * @param {Function} [predicate] Optional condition to match
+   * @returns {(Node|null)}
+   */
+  findRootNodeAncestor(obj, predicate) {
+    return this.nodeStore.findRootNodeAncestor(obj, predicate)
+  }
+
+  /**
+   * Given a result, that's either a single node or an array of them, track them
+   * using pageDependencies. Defaults to tracking according to current resolver
+   * path. Returns the result back.
+   *
+   * @param {Node | Node[]} result
+   * @param {PageDependencies} [pageDependencies]
+   * @returns {Node | Node[]}
+   */
+  trackPageDependencies(result, pageDependencies) {
+    const fullDependencies = {
+      path: this.path,
+      ...(pageDependencies || {}),
+    }
+    const { path, connectionType } = fullDependencies
+    if (path) {
+      if (connectionType) {
+        this.createPageDependency({ path, connection: connectionType })
+      } else {
+        const nodes = Array.isArray(result) ? result : [result]
+        nodes
+          .filter(Boolean)
+          .map(node => this.createPageDependency({ path, nodeId: node.id }))
+      }
+    }
+
+    return result
+  }
+}
+
+const getNodeById = (nodeStore, id) => {
+  // This is for cases when the `id` has already been resolved
+  // to a full Node for the input filter, and is also in the selection
+  // set. E.g. `{ foo(parent: { id: { eq: 1 } } ) { parent { id } } }`.
+  if (_.isPlainObject(id) && id.id) {
+    return id
+  }
+  return id != null ? nodeStore.getNode(id) : null
+}
+
+const toNodeTypeNames = (schema, gqlTypeName) => {
+  const gqlType =
+    typeof gqlTypeName === `string` ? schema.getType(gqlTypeName) : gqlTypeName
+
+  if (!gqlType) return []
+
+  const possibleTypes = isAbstractType(gqlType)
+    ? schema.getPossibleTypes(gqlType)
+    : [gqlType]
+
+  return possibleTypes
+    .filter(type => type.getInterfaces().some(iface => iface.name === `Node`))
+    .map(type => type.name)
+}
+
+module.exports = {
+  LocalNodeModel,
+}
diff --git a/node_modules/gatsby/src/schema/resolvers.js b/node_modules/gatsby/src/schema/resolvers.js
new file mode 100644
index 0000000..75c440f
--- /dev/null
+++ b/node_modules/gatsby/src/schema/resolvers.js
@@ -0,0 +1,190 @@
+const systemPath = require(`path`)
+const normalize = require(`normalize-path`)
+const _ = require(`lodash`)
+const { GraphQLList, getNullableType, getNamedType } = require(`graphql`)
+const { getValueAt } = require(`./utils/get-value-at`)
+
+const findMany = typeName => ({ args, context, info }) =>
+  context.nodeModel.runQuery(
+    {
+      query: args,
+      firstOnly: false,
+      type: info.schema.getType(typeName),
+    },
+    { path: context.path, connectionType: typeName }
+  )
+
+const findOne = typeName => ({ args, context, info }) =>
+  context.nodeModel.runQuery(
+    {
+      query: { filter: args },
+      firstOnly: true,
+      type: info.schema.getType(typeName),
+    },
+    { path: context.path }
+  )
+
+const findManyPaginated = typeName => async rp => {
+  const result = await findMany(typeName)(rp)
+  return paginate(result, { skip: rp.args.skip, limit: rp.args.limit })
+}
+
+const distinct = (source, args, context, info) => {
+  const { field } = args
+  const { edges } = source
+  const values = edges.reduce((acc, { node }) => {
+    const value = getValueAt(node, field)
+    return value != null
+      ? acc.concat(value instanceof Date ? value.toISOString() : value)
+      : acc
+  }, [])
+  return Array.from(new Set(values)).sort()
+}
+
+const group = (source, args, context, info) => {
+  const { field } = args
+  const { edges } = source
+  const groupedResults = edges.reduce((acc, { node }) => {
+    const value = getValueAt(node, field)
+    const values = Array.isArray(value) ? value : [value]
+    values
+      .filter(value => value != null)
+      .forEach(value => {
+        const key = value instanceof Date ? value.toISOString() : value
+        acc[key] = (acc[key] || []).concat(node)
+      })
+    return acc
+  }, {})
+  return Object.keys(groupedResults)
+    .sort()
+    .reduce((acc, fieldValue) => {
+      acc.push({
+        ...paginate(groupedResults[fieldValue], args),
+        field,
+        fieldValue,
+      })
+      return acc
+    }, [])
+}
+
+const paginate = (results = [], { skip = 0, limit }) => {
+  if (results === null) {
+    results = []
+  }
+
+  const count = results.length
+  const items = results.slice(skip, limit && skip + limit)
+
+  const hasNextPage = skip + limit < count
+
+  return {
+    totalCount: items.length,
+    edges: items.map((item, i, arr) => {
+      return {
+        node: item,
+        next: arr[i + 1],
+        previous: arr[i - 1],
+      }
+    }),
+    nodes: items,
+    pageInfo: {
+      hasNextPage,
+    },
+  }
+}
+
+const link = ({ by, from }) => async (source, args, context, info) => {
+  const fieldValue = source && source[from || info.fieldName]
+
+  if (fieldValue == null || _.isPlainObject(fieldValue)) return fieldValue
+  if (
+    Array.isArray(fieldValue) &&
+    (fieldValue[0] == null || _.isPlainObject(fieldValue[0]))
+  ) {
+    return fieldValue
+  }
+
+  const returnType = getNullableType(info.returnType)
+  const type = getNamedType(returnType)
+
+  if (by === `id`) {
+    if (Array.isArray(fieldValue)) {
+      return context.nodeModel.getNodesByIds(
+        { ids: fieldValue, type: type },
+        { path: context.path }
+      )
+    } else {
+      return context.nodeModel.getNodeById(
+        { id: fieldValue, type: type },
+        { path: context.path }
+      )
+    }
+  }
+
+  const equals = value => {
+    return { eq: value }
+  }
+  const oneOf = value => {
+    return { in: value }
+  }
+  const operator = Array.isArray(fieldValue) ? oneOf : equals
+  args.filter = by.split(`.`).reduceRight((acc, key, i, { length }) => {
+    return {
+      [key]: i === length - 1 ? operator(acc) : acc,
+    }
+  }, fieldValue)
+
+  return context.nodeModel.runQuery(
+    { query: args, firstOnly: !(returnType instanceof GraphQLList), type },
+    { path: context.path }
+  )
+}
+
+const fileByPath = (source, args, context, info) => {
+  const fieldValue = source && source[info.fieldName]
+
+  if (fieldValue == null || _.isPlainObject(fieldValue)) return fieldValue
+  if (
+    Array.isArray(fieldValue) &&
+    (fieldValue[0] == null || _.isPlainObject(fieldValue[0]))
+  ) {
+    return fieldValue
+  }
+
+  const isArray = getNullableType(info.returnType) instanceof GraphQLList
+
+  const findLinkedFileNode = async relativePath => {
+    // Use the parent File node to create the absolute path to
+    // the linked file.
+    const fileLinkPath = normalize(
+      systemPath.resolve(parentFileNode.dir, relativePath)
+    )
+
+    // Use that path to find the linked File node.
+    const linkedFileNode = _.find(
+      await context.nodeModel.getAllNodes({ type: `File` }),
+      n => n.absolutePath === fileLinkPath
+    )
+    return linkedFileNode
+  }
+
+  // Find the File node for this node (we assume the node is something
+  // like markdown which would be a child node of a File node).
+  const parentFileNode = context.nodeModel.findRootNodeAncestor(source)
+
+  // Find the linked File node(s)
+  if (isArray) {
+    return Promise.all(fieldValue.map(findLinkedFileNode))
+  } else {
+    return findLinkedFileNode(fieldValue)
+  }
+}
+
+module.exports = {
+  findManyPaginated,
+  findOne,
+  fileByPath,
+  link,
+  distinct,
+  group,
+}
diff --git a/node_modules/gatsby/src/schema/schema-composer.js b/node_modules/gatsby/src/schema/schema-composer.js
new file mode 100644
index 0000000..8b12a0f
--- /dev/null
+++ b/node_modules/gatsby/src/schema/schema-composer.js
@@ -0,0 +1,15 @@
+const { SchemaComposer } = require(`graphql-compose`)
+const { getNodeInterface } = require(`./types/node-interface`)
+const { GraphQLDate } = require(`./types/date`)
+const { InferDirective, DontInferDirective } = require(`./types/directives`)
+
+const createSchemaComposer = () => {
+  const schemaComposer = new SchemaComposer()
+  getNodeInterface({ schemaComposer })
+  schemaComposer.addAsComposer(GraphQLDate)
+  schemaComposer.addDirective(InferDirective)
+  schemaComposer.addDirective(DontInferDirective)
+  return schemaComposer
+}
+
+module.exports = { createSchemaComposer }
diff --git a/node_modules/gatsby/src/schema/schema.js b/node_modules/gatsby/src/schema/schema.js
new file mode 100644
index 0000000..a482a42
--- /dev/null
+++ b/node_modules/gatsby/src/schema/schema.js
@@ -0,0 +1,611 @@
+const _ = require(`lodash`)
+const invariant = require(`invariant`)
+const {
+  isSpecifiedScalarType,
+  isIntrospectionType,
+  defaultFieldResolver,
+  assertValidName,
+  getNamedType,
+  Kind,
+} = require(`graphql`)
+const {
+  ObjectTypeComposer,
+  InterfaceTypeComposer,
+  UnionTypeComposer,
+  InputTypeComposer,
+} = require(`graphql-compose`)
+const apiRunner = require(`../utils/api-runner-node`)
+const report = require(`gatsby-cli/lib/reporter`)
+const { addNodeInterfaceFields } = require(`./types/node-interface`)
+const { addInferredType, addInferredTypes } = require(`./infer`)
+const { findOne, findManyPaginated } = require(`./resolvers`)
+const { getPagination } = require(`./types/pagination`)
+const { getSortInput } = require(`./types/sort`)
+const { getFilterInput } = require(`./types/filter`)
+const { isGatsbyType, GatsbyGraphQLTypeKind } = require(`./types/type-builders`)
+
+const buildSchema = async ({
+  schemaComposer,
+  nodeStore,
+  types,
+  thirdPartySchemas,
+  typeMapping,
+  typeConflictReporter,
+  parentSpan,
+}) => {
+  await updateSchemaComposer({
+    schemaComposer,
+    nodeStore,
+    types,
+    thirdPartySchemas,
+    typeMapping,
+    typeConflictReporter,
+    parentSpan,
+  })
+  // const { printSchema } = require(`graphql`)
+  const schema = schemaComposer.buildSchema()
+  // console.log(printSchema(schema))
+  return schema
+}
+
+const rebuildSchemaWithSitePage = async ({
+  schemaComposer,
+  nodeStore,
+  typeMapping,
+  typeConflictReporter,
+  parentSpan,
+}) => {
+  const typeComposer = addInferredType({
+    schemaComposer,
+    typeComposer: schemaComposer.getOTC(`SitePage`),
+    nodeStore,
+    typeConflictReporter,
+    typeMapping,
+    parentSpan,
+  })
+  await processTypeComposer({
+    schemaComposer,
+    typeComposer,
+    nodeStore,
+    parentSpan,
+  })
+  return schemaComposer.buildSchema()
+}
+
+module.exports = {
+  buildSchema,
+  rebuildSchemaWithSitePage,
+}
+
+const updateSchemaComposer = async ({
+  schemaComposer,
+  nodeStore,
+  types,
+  typeMapping,
+  thirdPartySchemas,
+  typeConflictReporter,
+  parentSpan,
+}) => {
+  await addTypes({ schemaComposer, parentSpan, types })
+  await addInferredTypes({
+    schemaComposer,
+    nodeStore,
+    typeConflictReporter,
+    typeMapping,
+    parentSpan,
+  })
+  await addSetFieldsOnGraphQLNodeTypeFields({
+    schemaComposer,
+    nodeStore,
+    parentSpan,
+  })
+  await Promise.all(
+    Array.from(schemaComposer.values()).map(typeComposer =>
+      processTypeComposer({
+        schemaComposer,
+        typeComposer,
+        nodeStore,
+        parentSpan,
+      })
+    )
+  )
+  await addThirdPartySchemas({ schemaComposer, thirdPartySchemas, parentSpan })
+  await addCustomResolveFunctions({ schemaComposer, parentSpan })
+}
+
+const processTypeComposer = async ({
+  schemaComposer,
+  typeComposer,
+  nodeStore,
+  parentSpan,
+}) => {
+  if (
+    typeComposer instanceof ObjectTypeComposer &&
+    typeComposer.hasInterface(`Node`)
+  ) {
+    await addNodeInterfaceFields({ schemaComposer, typeComposer, parentSpan })
+    await addResolvers({ schemaComposer, typeComposer, parentSpan })
+    await addConvenienceChildrenFields({
+      schemaComposer,
+      typeComposer,
+      nodeStore,
+      parentSpan,
+    })
+    await addTypeToRootQuery({ schemaComposer, typeComposer, parentSpan })
+  }
+}
+
+const addTypes = ({ schemaComposer, types, parentSpan }) => {
+  types.forEach(({ typeOrTypeDef, plugin }) => {
+    if (typeof typeOrTypeDef === `string`) {
+      let addedTypes
+      try {
+        addedTypes = schemaComposer.addTypeDefs(typeOrTypeDef)
+      } catch (error) {
+        reportParsingError(error)
+      }
+      addedTypes.forEach(type => {
+        processAddedType({
+          schemaComposer,
+          type,
+          parentSpan,
+          createdFrom: `sdl`,
+          plugin,
+        })
+      })
+    } else if (isGatsbyType(typeOrTypeDef)) {
+      const type = createTypeComposerFromGatsbyType({
+        schemaComposer,
+        type: typeOrTypeDef,
+        parentSpan,
+      })
+
+      if (type) {
+        processAddedType({
+          schemaComposer,
+          type,
+          parentSpan,
+          createdFrom: `typeBuilder`,
+          plugin,
+        })
+      }
+    } else {
+      processAddedType({
+        schemaComposer,
+        type: typeOrTypeDef,
+        parentSpan,
+        createdFrom: `graphql-js`,
+        plugin,
+      })
+    }
+  })
+}
+
+const processAddedType = ({
+  schemaComposer,
+  type,
+  parentSpan,
+  createdFrom,
+  plugin,
+}) => {
+  const typeName = schemaComposer.addAsComposer(type)
+  checkIsAllowedTypeName(typeName)
+  const typeComposer = schemaComposer.get(typeName)
+  if (
+    typeComposer instanceof InterfaceTypeComposer ||
+    typeComposer instanceof UnionTypeComposer
+  ) {
+    if (!typeComposer.getResolveType()) {
+      typeComposer.setResolveType(node => node.internal.type)
+    }
+  }
+  schemaComposer.addSchemaMustHaveType(typeComposer)
+
+  typeComposer.setExtension(`createdFrom`, createdFrom)
+  typeComposer.setExtension(`plugin`, plugin ? plugin.name : null)
+
+  if (createdFrom === `sdl`) {
+    if (type.astNode && type.astNode.directives) {
+      type.astNode.directives.forEach(directive => {
+        if (directive.name.value === `infer`) {
+          typeComposer.setExtension(`infer`, true)
+          typeComposer.setExtension(
+            `addDefaultResolvers`,
+            getNoDefaultResolvers(directive)
+          )
+        } else if (directive.name.value === `dontInfer`) {
+          typeComposer.setExtension(`infer`, false)
+          typeComposer.setExtension(
+            `addDefaultResolvers`,
+            getNoDefaultResolvers(directive)
+          )
+        }
+      })
+    }
+  }
+
+  return typeComposer
+}
+
+const getNoDefaultResolvers = directive => {
+  const noDefaultResolvers = directive.arguments.find(
+    ({ name }) => name.value === `noDefaultResolvers`
+  )
+  if (noDefaultResolvers) {
+    if (noDefaultResolvers.value.kind === Kind.BOOLEAN) {
+      return !noDefaultResolvers.value.value
+    }
+  }
+
+  return null
+}
+
+const checkIsAllowedTypeName = name => {
+  invariant(
+    name !== `Node`,
+    `The GraphQL type \`Node\` is reserved for internal use.`
+  )
+  invariant(
+    !name.endsWith(`FilterInput`) && !name.endsWith(`SortInput`),
+    `GraphQL type names ending with "FilterInput" or "SortInput" are ` +
+      `reserved for internal use. Please rename \`${name}\`.`
+  )
+  invariant(
+    ![`Boolean`, `Date`, `Float`, `ID`, `Int`, `JSON`, `String`].includes(name),
+    `The GraphQL type \`${name}\` is reserved for internal use by ` +
+      `built-in scalar types.`
+  )
+  assertValidName(name)
+}
+
+const createTypeComposerFromGatsbyType = ({
+  schemaComposer,
+  type,
+  parentSpan,
+}) => {
+  switch (type.kind) {
+    case GatsbyGraphQLTypeKind.OBJECT: {
+      return ObjectTypeComposer.createTemp(
+        {
+          ...type.config,
+          interfaces: () => {
+            if (type.config.interfaces) {
+              return type.config.interfaces.map(iface => {
+                if (typeof iface === `string`) {
+                  return schemaComposer.getIFTC(iface).getType()
+                } else {
+                  return iface
+                }
+              })
+            } else {
+              return []
+            }
+          },
+        },
+        schemaComposer
+      )
+    }
+    case GatsbyGraphQLTypeKind.INPUT_OBJECT: {
+      return InputTypeComposer.createTemp(type.config, schemaComposer)
+    }
+    case GatsbyGraphQLTypeKind.UNION: {
+      return UnionTypeComposer.createTemp(
+        {
+          ...type.config,
+          types: () => {
+            if (type.config.types) {
+              return type.config.types.map(typeName =>
+                schemaComposer.getOTC(typeName).getType()
+              )
+            } else {
+              return []
+            }
+          },
+        },
+        schemaComposer
+      )
+    }
+    case GatsbyGraphQLTypeKind.INTERFACE: {
+      return InterfaceTypeComposer.createTemp(type.config, schemaComposer)
+    }
+    default: {
+      report.warn(`Illegal type definition: ${JSON.stringify(type.config)}`)
+      return null
+    }
+  }
+}
+
+const addSetFieldsOnGraphQLNodeTypeFields = ({
+  schemaComposer,
+  nodeStore,
+  parentSpan,
+}) =>
+  Promise.all(
+    Array.from(schemaComposer.values()).map(async tc => {
+      if (tc instanceof ObjectTypeComposer && tc.hasInterface(`Node`)) {
+        const typeName = tc.getTypeName()
+        const result = await apiRunner(`setFieldsOnGraphQLNodeType`, {
+          type: {
+            name: typeName,
+            nodes: nodeStore.getNodesByType(typeName),
+          },
+          traceId: `initial-setFieldsOnGraphQLNodeType`,
+          parentSpan: parentSpan,
+        })
+        if (result) {
+          // NOTE: `setFieldsOnGraphQLNodeType` only allows setting
+          // nested fields with a path as property name, i.e.
+          // `{ 'frontmatter.published': 'Boolean' }`, but not in the form
+          // `{ frontmatter: { published: 'Boolean' }}`
+          result.forEach(fields => tc.addNestedFields(fields))
+        }
+      }
+    })
+  )
+
+const addThirdPartySchemas = ({
+  schemaComposer,
+  thirdPartySchemas,
+  parentSpan,
+}) => {
+  thirdPartySchemas.forEach(schema => {
+    const schemaQueryType = schema.getQueryType()
+    const queryTC = ObjectTypeComposer.createTemp(schemaQueryType)
+    processThirdPartyType({
+      schemaComposer,
+      typeComposer: queryTC,
+      schemaQueryType,
+    })
+    const fields = queryTC.getFields()
+    schemaComposer.Query.addFields(fields)
+
+    // Explicitly add the third-party schema's types, so they can be targeted
+    // in `createResolvers` API.
+    const types = schema.getTypeMap()
+    Object.keys(types).forEach(typeName => {
+      const type = types[typeName]
+      if (
+        type !== schemaQueryType &&
+        !isSpecifiedScalarType(type) &&
+        !isIntrospectionType(type)
+      ) {
+        schemaComposer.addAsComposer(type)
+        const typeComposer = schemaComposer.getAnyTC(type.name)
+        processThirdPartyType({ schemaComposer, typeComposer, schemaQueryType })
+        schemaComposer.addSchemaMustHaveType(typeComposer)
+      }
+    })
+  })
+}
+
+const processThirdPartyType = ({
+  schemaComposer,
+  typeComposer,
+  schemaQueryType,
+}) => {
+  typeComposer.getType().isThirdPartyType = true
+  // Fix for types that refer to Query. Thanks Relay Classic!
+  if (
+    typeComposer instanceof ObjectTypeComposer ||
+    typeComposer instanceof InterfaceTypeComposer
+  ) {
+    typeComposer.getFieldNames().forEach(fieldName => {
+      const fieldType = typeComposer.getFieldType(fieldName)
+      if (getNamedType(fieldType) === schemaQueryType) {
+        typeComposer.extendField(fieldName, {
+          type: fieldType.toString().replace(schemaQueryType.name, `Query`),
+        })
+      }
+    })
+  }
+  return typeComposer
+}
+
+const addCustomResolveFunctions = async ({ schemaComposer, parentSpan }) => {
+  const intermediateSchema = schemaComposer.buildSchema()
+  const createResolvers = resolvers => {
+    Object.keys(resolvers).forEach(typeName => {
+      const fields = resolvers[typeName]
+      if (schemaComposer.has(typeName)) {
+        const tc = schemaComposer.getOTC(typeName)
+        Object.keys(fields).forEach(fieldName => {
+          const fieldConfig = fields[fieldName]
+          if (tc.hasField(fieldName)) {
+            const originalFieldConfig = tc.getFieldConfig(fieldName)
+            const originalTypeName = originalFieldConfig.type.toString()
+            const originalResolver = originalFieldConfig.resolve
+            const fieldTypeName =
+              fieldConfig.type && fieldConfig.type.toString()
+            if (
+              !fieldTypeName ||
+              fieldTypeName.replace(/!/g, ``) ===
+                originalTypeName.replace(/!/g, ``) ||
+              tc.getType().isThirdPartyType
+            ) {
+              const newConfig = {}
+              if (fieldConfig.type) {
+                newConfig.type = fieldConfig.type
+              }
+              if (fieldConfig.args) {
+                newConfig.args = fieldConfig.args
+              }
+              if (fieldConfig.resolve) {
+                newConfig.resolve = (source, args, context, info) =>
+                  fieldConfig.resolve(source, args, context, {
+                    ...info,
+                    originalResolver: originalResolver || defaultFieldResolver,
+                  })
+              }
+              tc.extendField(fieldName, newConfig)
+            } else if (fieldTypeName) {
+              report.warn(
+                `\`createResolvers\` passed resolvers for field ` +
+                  `\`${typeName}.${fieldName}\` with type \`${fieldTypeName}\`. ` +
+                  `Such a field with type \`${originalTypeName}\` already exists ` +
+                  `on the type. Use \`createTypes\` to override type fields.`
+              )
+            }
+          } else {
+            tc.addFields({ [fieldName]: fieldConfig })
+          }
+        })
+      } else {
+        report.warn(
+          `\`createResolvers\` passed resolvers for type \`${typeName}\` that ` +
+            `doesn't exist in the schema. Use \`createTypes\` to add the type ` +
+            `before adding resolvers.`
+        )
+      }
+    })
+  }
+  await apiRunner(`createResolvers`, {
+    schema: intermediateSchema,
+    createResolvers,
+    traceId: `initial-createResolvers`,
+    parentSpan: parentSpan,
+  })
+}
+
+const addResolvers = ({ schemaComposer, typeComposer }) => {
+  const typeName = typeComposer.getTypeName()
+
+  // TODO: We should have an abstraction for keeping and clearing
+  // related TypeComposers and InputTypeComposers.
+  // Also see the comment on the skipped test in `rebuild-schema`.
+  typeComposer.removeInputTypeComposer()
+
+  const sortInputTC = getSortInput({
+    schemaComposer,
+    typeComposer,
+  })
+  const filterInputTC = getFilterInput({
+    schemaComposer,
+    typeComposer,
+  })
+  const paginationTC = getPagination({
+    schemaComposer,
+    typeComposer,
+  })
+  typeComposer.addResolver({
+    name: `findOne`,
+    type: typeComposer,
+    args: {
+      ...filterInputTC.getFields(),
+    },
+    resolve: findOne(typeName),
+  })
+  typeComposer.addResolver({
+    name: `findManyPaginated`,
+    type: paginationTC,
+    args: {
+      filter: filterInputTC,
+      sort: sortInputTC,
+      skip: `Int`,
+      limit: `Int`,
+      // page: `Int`,
+      // perPage: { type: `Int`, defaultValue: 20 },
+    },
+    resolve: findManyPaginated(typeName),
+  })
+}
+
+const addConvenienceChildrenFields = ({
+  schemaComposer,
+  typeComposer,
+  nodeStore,
+}) => {
+  const nodes = nodeStore.getNodesByType(typeComposer.getTypeName())
+
+  const childNodesByType = groupChildNodesByType({ nodeStore, nodes })
+
+  Object.keys(childNodesByType).forEach(typeName => {
+    const typeChildren = childNodesByType[typeName]
+    const maxChildCount = _.maxBy(
+      _.values(_.groupBy(typeChildren, c => c.parent)),
+      g => g.length
+    ).length
+
+    if (maxChildCount > 1) {
+      typeComposer.addFields(createChildrenField(typeName))
+    } else {
+      typeComposer.addFields(createChildField(typeName))
+    }
+  })
+}
+
+function createChildrenField(typeName) {
+  return {
+    [_.camelCase(`children ${typeName}`)]: {
+      type: () => [typeName],
+      resolve(source, args, context) {
+        const { path } = context
+        return context.nodeModel.getNodesByIds(
+          { ids: source.children, type: typeName },
+          { path }
+        )
+      },
+    },
+  }
+}
+
+function createChildField(typeName) {
+  return {
+    [_.camelCase(`child ${typeName}`)]: {
+      type: () => typeName,
+      async resolve(source, args, context) {
+        const { path } = context
+        const result = await context.nodeModel.getNodesByIds(
+          { ids: source.children, type: typeName },
+          { path }
+        )
+        if (result && result.length > 0) {
+          return result[0]
+        } else {
+          return null
+        }
+      },
+    },
+  }
+}
+
+function groupChildNodesByType({ nodeStore, nodes }) {
+  return _(nodes)
+    .flatMap(node => (node.children || []).map(nodeStore.getNode))
+    .groupBy(node => (node.internal ? node.internal.type : undefined))
+    .value()
+}
+
+const addTypeToRootQuery = ({ schemaComposer, typeComposer }) => {
+  const typeName = typeComposer.getTypeName()
+  // not strictly correctly, result is `npmPackage` and `allNpmPackage` from type `NPMPackage`
+  const queryName = _.camelCase(typeName)
+  const queryNamePlural = _.camelCase(`all ${typeName}`)
+  schemaComposer.Query.addFields({
+    [queryName]: typeComposer.getResolver(`findOne`),
+    [queryNamePlural]: typeComposer.getResolver(`findManyPaginated`),
+  })
+}
+
+const reportParsingError = error => {
+  const { message, source, locations } = error
+
+  if (source && locations && locations.length) {
+    const report = require(`gatsby-cli/lib/reporter`)
+    const { codeFrameColumns } = require(`@babel/code-frame`)
+
+    const frame = codeFrameColumns(
+      source.body,
+      { start: locations[0] },
+      { linesAbove: 5, linesBelow: 5 }
+    )
+    report.panic(
+      `Encountered an error parsing the provided GraphQL type definitions:\n` +
+        message +
+        `\n\n` +
+        frame +
+        `\n`
+    )
+  } else {
+    throw error
+  }
+}
diff --git a/node_modules/gatsby/src/schema/types/__tests__/date.js b/node_modules/gatsby/src/schema/types/__tests__/date.js
new file mode 100644
index 0000000..936e805
--- /dev/null
+++ b/node_modules/gatsby/src/schema/types/__tests__/date.js
@@ -0,0 +1,509 @@
+const { store } = require(`../../../redux`)
+const { build } = require(`../..`)
+const { isDate, looksLikeADate } = require(`../date`)
+require(`../../../db/__tests__/fixtures/ensure-loki`)()
+
+// Timestamps grabbed from https://github.com/moment/moment/blob/2e2a5b35439665d4b0200143d808a7c26d6cd30f/src/test/moment/is_valid.js
+
+describe(`isDate`, () => {
+  it.each([
+    `1970`,
+    `2019`,
+    `1970-01`,
+    `2019-01`,
+    `1970-01-01`,
+    `2010-01-01`,
+    `2010-01-30`,
+    `19700101`,
+    `20100101`,
+    `20100130`,
+    `2010-01-30T23+00:00`,
+    `2010-01-30T23:59+00:00`,
+    `2010-01-30T23:59:59+00:00`,
+    `2010-01-30T23:59:59.999+00:00`,
+    `2010-01-30T23:59:59.999-07:00`,
+    `2010-01-30T00:00:00.000+07:00`,
+    `2010-01-30T23:59:59.999-07`,
+    `2010-01-30T00:00:00.000+07`,
+    `2010-01-30T23Z`,
+    `2010-01-30T23:59Z`,
+    `2010-01-30T23:59:59Z`,
+    `2010-01-30T23:59:59.999Z`,
+    `2010-01-30T00:00:00.000Z`,
+    `1970-01-01T00:00:00.000001Z`,
+    `2012-04-01T00:00:00-05:00`,
+    `2012-11-12T00:00:00+01:00`,
+  ])(`should return true for valid ISO 8601: %s`, dateString => {
+    expect(isDate(dateString)).toBeTruthy()
+  })
+
+  it.each([
+    `2010-01-30 23+00:00`,
+    `2010-01-30 23:59+00:00`,
+    `2010-01-30 23:59:59+00:00`,
+    `2010-01-30 23:59:59.999+00:00`,
+    `2010-01-30 23:59:59.999-07:00`,
+    `2010-01-30 00:00:00.000+07:00`,
+    `2010-01-30 23:59:59.999-07`,
+    `2010-01-30 00:00:00.000+07`,
+    `1970-01-01 00:00:00.000Z`,
+    `2012-04-01 00:00:00-05:00`,
+    `2012-11-12 00:00:00+01:00`,
+    `1970-01-01 00:00:00.0000001 Z`,
+    `1970-01-01 00:00:00.000 Z`,
+    `1970-01-01 00:00:00 Z`,
+    `1970-01-01 000000 Z`,
+    `1970-01-01 00:00 Z`,
+    `1970-01-01 00 Z`,
+  ])(`should return true for ISO 8601 (no T, extra space): %s`, dateString => {
+    expect(isDate(dateString)).toBeTruthy()
+  })
+
+  it.each([`1970-W31`, `2006-W01`, `1970W31`, `2009-W53-7`, `2009W537`])(
+    `should return true for ISO 8601 week dates: %s`,
+    dateString => {
+      expect(isDate(dateString)).toBeTruthy()
+    }
+  )
+
+  it.each([`1970-334`, `1970334`, `2090-001`, `2090001`])(
+    `should return true for ISO 8601 ordinal dates: %s`,
+    dateString => {
+      expect(isDate(dateString)).toBeTruthy()
+    }
+  )
+
+  it.each([`2018-08-31T23:25:16.019345+02:00`, `2018-08-31T23:25:16.019345Z`])(
+    `should return true for microsecond precision: %s`,
+    dateString => {
+      expect(isDate(dateString)).toBeTruthy()
+    }
+  )
+
+  it.skip.each([
+    `2018-08-31T23:25:16.019345123+02:00`,
+    `2018-08-31T23:25:16.019345123Z`,
+  ])(`should return true for nanosecond precision: %s`, dateString => {
+    expect(isDate(dateString)).toBeTruthy()
+  })
+
+  it.skip.each([`2018-08-31T23:25:16.012345678901+02:00`])(
+    `should return false for precision beyond 9 digits: %s`,
+    dateString => {
+      expect(isDate(dateString)).toBeFalsy()
+    }
+  )
+
+  it.each([
+    `2010-00-00`,
+    `2010-01-00`,
+    `2010-01-40`,
+    `2010-01-01T24:01`, // 24:00:00 is actually valid
+    `2010-01-01T23:60`,
+    `2010-01-01T23:59:60`,
+    `2010-01-40T23:59:59.9999`,
+    `2010-00-00T+00:00`,
+    `2010-01-00T+00:00`,
+    `2010-01-40T+00:00`,
+    `2010-01-40T24:01+00:00`,
+    `2010-01-40T23:60+00:00`,
+    `2010-01-40T23:59:60+00:00`,
+    `2010-01-40T23:59:59.9999+00:00`,
+    `2010-01-40T23:59:59,9999+00:00`,
+    `2012-04-01T00:00:00-5:00`, // should be -05:00
+    `2012-04-01T00:00:00+1:00`, // should be +01:00
+    undefined,
+    `undefined`,
+    null,
+    `null`,
+    [],
+    {},
+    ``,
+    ` `,
+    `2012-04-01T00:basketball`,
+  ])(`should return false for invalid ISO 8601: %s`, dateString => {
+    expect(isDate(dateString)).toBeFalsy()
+  })
+
+  it.skip.each([
+    1371065286,
+    1379066897.0,
+    1379066897.7,
+    1379066897.0,
+    1379066897.07,
+    1379066897.17,
+    1379066897.0,
+    1379066897.007,
+    1379066897.017,
+    1379066897.157,
+    `1371065286`,
+    `1379066897.`,
+    `1379066897.0`,
+    `1379066897.7`,
+    `1379066897.00`,
+    `1379066897.07`,
+    `1379066897.17`,
+    `1379066897.000`,
+    `1379066897.007`,
+    `1379066897.017`,
+    `1379066897.157`,
+  ])(`should return true for unix timestamps: %s`, dateString => {
+    expect(isDate(dateString)).toBeTruthy()
+  })
+})
+
+describe(`looksLikeADate`, () => {
+  it.each([
+    `1970`,
+    `2019`,
+    `1970-01`,
+    `2019-01`,
+    `1970-01-01`,
+    `2010-01-01`,
+    `2010-01-30`,
+    `19700101`,
+    `20100101`,
+    `20100130`,
+    `2010-01-30T23+00:00`,
+    `2010-01-30T23:59+00:00`,
+    `2010-01-30T23:59:59+00:00`,
+    `2010-01-30T23:59:59.999+00:00`,
+    `2010-01-30T23:59:59.999-07:00`,
+    `2010-01-30T00:00:00.000+07:00`,
+    `2010-01-30T23:59:59.999-07`,
+    `2010-01-30T00:00:00.000+07`,
+    `2010-01-30T23Z`,
+    `2010-01-30T23:59Z`,
+    `2010-01-30T23:59:59Z`,
+    `2010-01-30T23:59:59.999Z`,
+    `2010-01-30T00:00:00.000Z`,
+    `1970-01-01T00:00:00.000001Z`,
+    `2012-04-01T00:00:00-05:00`,
+    `2012-11-12T00:00:00+01:00`,
+  ])(`should return true for valid ISO 8601: %s`, dateString => {
+    expect(looksLikeADate(dateString)).toBeTruthy()
+  })
+
+  it.each([
+    `2010-01-30 23+00:00`,
+    `2010-01-30 23:59+00:00`,
+    `2010-01-30 23:59:59+00:00`,
+    `2010-01-30 23:59:59.999+00:00`,
+    `2010-01-30 23:59:59.999-07:00`,
+    `2010-01-30 00:00:00.000+07:00`,
+    `2010-01-30 23:59:59.999-07`,
+    `2010-01-30 00:00:00.000+07`,
+    `1970-01-01 00:00:00.000Z`,
+    `2012-04-01 00:00:00-05:00`,
+    `2012-11-12 00:00:00+01:00`,
+    `1970-01-01 00:00:00.0000001 Z`,
+    `1970-01-01 00:00:00.000 Z`,
+    `1970-01-01 00:00:00 Z`,
+    `1970-01-01 000000 Z`,
+    `1970-01-01 00:00 Z`,
+    `1970-01-01 00 Z`,
+  ])(`should return true for ISO 8601 (no T, extra space): %s`, dateString => {
+    expect(looksLikeADate(dateString)).toBeTruthy()
+  })
+
+  it.each([`1970-W31`, `2006-W01`, `1970W31`, `2009-W53-7`, `2009W537`])(
+    `should return true for ISO 8601 week dates: %s`,
+    dateString => {
+      expect(looksLikeADate(dateString)).toBeTruthy()
+    }
+  )
+
+  it.each([`1970-334`, `1970334`, `2090-001`, `2090001`])(
+    `should return true for ISO 8601 ordinal dates: %s`,
+    dateString => {
+      expect(looksLikeADate(dateString)).toBeTruthy()
+    }
+  )
+
+  it.skip.each([
+    `2018-08-31T23:25:16.019345+02:00`,
+    `2018-08-31T23:25:16.019345Z`,
+  ])(`should return true for microsecond precision: %s`, dateString => {
+    expect(looksLikeADate(dateString)).toBeTruthy()
+  })
+
+  it.skip.each([
+    `2018-08-31T23:25:16.019345123+02:00`,
+    `2018-08-31T23:25:16.019345123Z`,
+  ])(`should return true for nanosecond precision: %s`, dateString => {
+    expect(looksLikeADate(dateString)).toBeTruthy()
+  })
+
+  it.skip.each([`2018-08-31T23:25:16.012345678901+02:00`])(
+    `should return false for precision beyond 9 digits: %s`,
+    dateString => {
+      expect(looksLikeADate(dateString)).toBeFalsy()
+    }
+  )
+
+  it.each([
+    `2010-00-00`,
+    `2010-01-00`,
+    `2010-01-40`,
+    `2010-01-01T24:01`, // 24:00:00 is actually valid
+    `2010-01-40T24:01+00:00`,
+    `2010-01-01T23:60`,
+    `2010-01-01T23:59:60`,
+    `2010-01-40T23:60+00:00`,
+    `2010-01-40T23:59:60+00:00`,
+  ])(`should return true for some valid ISO 8601: %s`, dateString => {
+    expect(looksLikeADate(dateString)).toBeTruthy()
+  })
+
+  it.each([
+    `2010-01-40T23:59:59.9999`,
+    `2010-01-40T23:59:59.9999+00:00`,
+    `2010-01-40T23:59:59,9999+00:00`,
+    `2010-00-00T+00:00`,
+    `2010-01-00T+00:00`,
+    `2010-01-40T+00:00`,
+    `2012-04-01T00:00:00-5:00`, // should be -05:00
+    `2012-04-01T00:00:00+1:00`, // should be +01:00
+    undefined,
+    `undefined`,
+    null,
+    `null`,
+    [],
+    {},
+    ``,
+    ` `,
+    `2012-04-01T00:basketball`,
+  ])(`should return false for invalid ISO 8601: %s`, dateString => {
+    expect(looksLikeADate(dateString)).toBeFalsy()
+  })
+})
+
+const nodes = [
+  {
+    id: `id1`,
+    internal: { type: `Test` },
+    testDate: new Date(),
+    explicitValidDate: `2010-01-30T23:59:59.999-07:00`,
+    inferredValidDate: `1970-01-01T00:00:00.000Z`,
+    validYYYY: `1970`,
+    validYYMM: `2019-01`,
+    validYYMMDD: `2010-01-30`,
+    validYYMMDDNoDash: `20100101`,
+    validISO1: `2010-01-30T23:59:59.999+00:00`,
+    validISO2: `2010-01-30T23:59:59.999-07:00`,
+    validISO3: `2010-01-30T00:00:00.000+07:00`,
+    validISO4: `2010-01-30T23:59:59.999-07`,
+    validISO5: `2010-01-30T00:00:00.000+07`,
+    validISO6: `2010-01-30 00:00:00.000Z`,
+    validISO7: `1970-01-01T00:00:00.000Z`,
+    validISO8: `2012-04-01T00:00:00-05:00`,
+    validISO9: `2012-11-12T00:00:00+01:00`,
+
+    validOrdinal1: `1970-334`,
+    validOrdinal2: `1970334`,
+    validOrdinal3: `2090-001`,
+    validOrdinal4: `2090001`,
+
+    validWeek1: `1970-W31`,
+    validWeek2: `2006-W01`,
+    validWeek3: `1970W31`,
+    validWeek4: `2009-W53-7`,
+    validWeek5: `2009W537`,
+
+    validMicrosecond1: `2018-08-31T23:25:16.019345+02:00`,
+    validMicrosecond2: `2018-08-31T23:25:16.019345Z`,
+
+    validNanosecond1: `2018-08-31T23:25:16.019345123+02:00`,
+    validNanosecond2: `2018-08-31T23:25:16.019345123Z`,
+
+    invalidHighPrecision: `2018-08-31T23:25:16.01234567899993+02:00`,
+
+    invalidDate1: `2010-00-00`,
+    invalidDate2: `2010-01-00`,
+    invalidDate3: `2010-01-40`,
+    invalidDate4: `2010-01-01T24:01`, // 24:00:00 is actually valid
+    invalidDate5: `2010-01-01T23:60`,
+    invalidDate6: `2010-01-01T23:59:60`,
+    invalidDate7: `2010-01-40T23:59:59.9999`,
+
+    invalidDate8: undefined,
+    invalidDate9: `undefined`,
+    invalidDate10: null,
+    invalidDate11: `null`,
+    invalidDate12: [],
+    invalidDate13: {},
+    invalidDate14: ``,
+    invalidDate15: ` `,
+    invalidDate16: `2012-04-01T00:basketball`,
+  },
+]
+
+describe(`dateResolver`, () => {
+  beforeEach(() => {
+    store.dispatch({ type: `DELETE_CACHE` })
+    nodes.forEach(node =>
+      store.dispatch({ type: `CREATE_NODE`, payload: { ...node } })
+    )
+  })
+
+  const buildTestSchema = async ({
+    infer = true,
+    addDefaultResolvers = true,
+  }) => {
+    const inferDirective = infer ? `@infer` : `@dontInfer`
+    const noDefaultResolvers = addDefaultResolvers ? `false` : `true`
+    const typeDefs = [
+      `
+      type Test implements Node ${inferDirective}(noDefaultResolvers: ${noDefaultResolvers}) {
+        testDate: Date
+        explicitValidDate: Date
+        invalidHighPrecision: Date
+        invalidDate8: Date
+        invalidDate9: Date
+        invalidDate10: Date
+        invalidDate11: Date
+        invalidDate12: Date
+        invalidDate13: Date
+        invalidDate14: Date
+        invalidDate15: Date
+        invalidDate16: Date
+      }`,
+    ]
+    typeDefs.forEach(def =>
+      store.dispatch({ type: `CREATE_TYPES`, payload: def })
+    )
+
+    await build({})
+    return store.getState().schema
+  }
+
+  it(`can properly resolve datetimes`, async () => {
+    const schema = await buildTestSchema({})
+    const fields = schema.getType(`Test`).getFields()
+
+    expect(fields.testDate.resolve).toBeDefined()
+    expect(fields.explicitValidDate.resolve).toBeDefined()
+    expect(fields.inferredValidDate.resolve).toBeDefined()
+    expect(fields.validYYYY.resolve).toBeDefined()
+    expect(fields.validYYMM.resolve).toBeDefined()
+    expect(fields.validYYMMDD.resolve).toBeDefined()
+    expect(fields.validYYMMDDNoDash.resolve).toBeDefined()
+
+    expect(fields.validISO1.resolve).toBeDefined()
+    expect(fields.validISO2.resolve).toBeDefined()
+    expect(fields.validISO3.resolve).toBeDefined()
+    expect(fields.validISO4.resolve).toBeDefined()
+    expect(fields.validISO5.resolve).toBeDefined()
+    expect(fields.validISO6.resolve).toBeDefined()
+    expect(fields.validISO7.resolve).toBeDefined()
+    expect(fields.validISO8.resolve).toBeDefined()
+    expect(fields.validISO9.resolve).toBeDefined()
+
+    expect(fields.validOrdinal1.resolve).toBeDefined()
+    expect(fields.validOrdinal2.resolve).toBeDefined()
+    expect(fields.validOrdinal3.resolve).toBeDefined()
+    expect(fields.validOrdinal4.resolve).toBeDefined()
+
+    expect(fields.validWeek1.resolve).toBeDefined()
+    expect(fields.validWeek2.resolve).toBeDefined()
+    expect(fields.validWeek3.resolve).toBeDefined()
+    expect(fields.validWeek4.resolve).toBeDefined()
+    expect(fields.validWeek5.resolve).toBeDefined()
+
+    expect(fields.validMicrosecond1.resolve).toBeDefined()
+    expect(fields.validMicrosecond2.resolve).toBeDefined()
+
+    expect(fields.validNanosecond1.resolve).toBeDefined()
+    expect(fields.validNanosecond2.resolve).toBeDefined()
+    // expect(fields.invalidHighPrecision.resolve).toBeDefined()
+    expect(fields.invalidDate1.resolve).toBeUndefined()
+    expect(fields.invalidDate2.resolve).toBeUndefined()
+    expect(fields.invalidDate3.resolve).toBeUndefined()
+    expect(fields.invalidDate4.resolve).toBeUndefined()
+    expect(fields.invalidDate5.resolve).toBeUndefined()
+    expect(fields.invalidDate6.resolve).toBeUndefined()
+    expect(fields.invalidDate7.resolve).toBeUndefined()
+    expect(fields.invalidDate8.resolve).toBeUndefined()
+    expect(fields.invalidDate9.resolve).toBeUndefined()
+    expect(fields.invalidDate10.resolve).toBeUndefined()
+    expect(fields.invalidDate11.resolve).toBeUndefined()
+    expect(fields.invalidDate12.resolve).toBeUndefined()
+    expect(fields.invalidDate13.resolve).toBeUndefined()
+    expect(fields.invalidDate14.resolve).toBeUndefined()
+    expect(fields.invalidDate15.resolve).toBeUndefined()
+    expect(fields.invalidDate16.resolve).toBeUndefined()
+  })
+
+  it.each([
+    `2018-01-28T23:59:59.999-07:00`,
+    `2018-01-29T00:00:00.000Z`,
+    `2018-01-29`,
+    `20180129`,
+    `2018-01-29T23:59:59.999+00:00`,
+    `2018-01-28T19:59:59.999-07:00`,
+    `2018-01-30T06:00:00.001+07:00`,
+    `2018-01-28 17:00:00.001-07`,
+    `2018-01-30 04:00:00.001+07`,
+    `2018-01-29 04:00:00.001Z`,
+    `2018-01-29 04:00:00.001 Z`,
+    `2018-01-29 04:00:00 Z`,
+    `2018-01-29 04:00 Z`,
+    `2018-01-29 04 Z`,
+    `2018-01-28T17:00:00.001-07`,
+    `2018-01-30T04:00:00.001+07`,
+    `2018-01-29 00:00:00.001Z`,
+    `2018-01-29T00:00:00.001Z`,
+    `2018-01-28 23:00:00-05:00`,
+    `2018-01-29 23:00:00+01:00`,
+    `2018-01-28T23:00:00-05:00`,
+    `2018-01-29T23:00:00+01:00`,
+    `2018-029`,
+    `2018029`,
+    `2018-W05`,
+    `2018W05`,
+    `2018-W05-1`,
+    `2018-01-29T23:25:16.019345+02:00`,
+    `2018-01-29T23:25:16.019345Z`,
+    // Seems to not require nanosecond definition to not fail
+    `2018-01-29T23:25:16.019345123+02:00`,
+    `2018-01-29T23:25:16.019345123Z`,
+  ])(`should return "Jan 29, 2018": %s`, async dateString => {
+    const schema = await buildTestSchema({})
+    const fields = schema.getType(`Test`).getFields()
+    expect(
+      fields[`testDate`].resolve(
+        { date: dateString },
+        { formatString: `MMM DD, YYYY` },
+        {},
+        {
+          fieldName: `date`,
+        }
+      )
+    ).toEqual(`Jan 29, 2018`)
+  })
+
+  it.each([
+    `2010-00-00`,
+    `2010-01-00`,
+    `2010-01-40`,
+    `2010-01-01T24:01`,
+    `2010-01-01T23:60`,
+    `2010-01-01T23:59:60`,
+    `2010-01-40T23:59:59.9999`,
+    // Combine with above statement once we figure out why it passes
+    // `2018-08-31T23:25:16.01234567899993+02:00`,
+  ])(`should return "Invalid Date": %s`, async dateString => {
+    const schema = await buildTestSchema({})
+    const fields = schema.getType(`Test`).getFields()
+    expect(
+      fields[`testDate`].resolve(
+        { date: dateString },
+        { formatString: `MMM DD, YYYY` },
+        {},
+        {
+          fieldName: `date`,
+        }
+      )
+    ).toEqual(`Invalid date`)
+  })
+})
diff --git a/node_modules/gatsby/src/schema/types/__tests__/filter-input.js b/node_modules/gatsby/src/schema/types/__tests__/filter-input.js
new file mode 100644
index 0000000..92c868a
--- /dev/null
+++ b/node_modules/gatsby/src/schema/types/__tests__/filter-input.js
@@ -0,0 +1,56 @@
+const { build } = require(`../..`)
+const { store } = require(`../../../redux`)
+require(`../../../db/__tests__/fixtures/ensure-loki`)()
+
+const nodes = [
+  {
+    id: `parent`,
+    nested: {
+      union___NODE: [`union1`, `union2`],
+    },
+    internal: {
+      type: `Parent`,
+      contentDigest: `a`,
+    },
+  },
+  {
+    id: `union1`,
+    foo: `bar`,
+    internal: {
+      type: `Union1`,
+      contentDigest: `bar`,
+    },
+  },
+  {
+    id: `union2`,
+    foo: `baz`,
+    internal: {
+      type: `Union2`,
+      contentDigest: `baz`,
+    },
+  },
+]
+
+describe(`Filter input`, () => {
+  beforeEach(async () => {
+    store.dispatch({ type: `DELETE_CACHE` })
+    nodes.forEach(node =>
+      store.dispatch({ type: `CREATE_NODE`, payload: { ...node } })
+    )
+  })
+
+  it(`removes empty input filter fields`, async () => {
+    // This can happen when a type has only one GraphQLUnion type field,
+    // which will be skipped by `toInputObjectType`
+    const schema = await buildSchema()
+    const parentFilterInput = schema.getType(`ParentFilterInput`)
+    const fields = parentFilterInput.getFields()
+    expect(fields.id).toBeDefined()
+    expect(fields.nested).toBeUndefined()
+  })
+})
+
+const buildSchema = async () => {
+  await build({})
+  return store.getState().schema
+}
diff --git a/node_modules/gatsby/src/schema/types/__tests__/sort-and-filter.js b/node_modules/gatsby/src/schema/types/__tests__/sort-and-filter.js
new file mode 100644
index 0000000..2220438
--- /dev/null
+++ b/node_modules/gatsby/src/schema/types/__tests__/sort-and-filter.js
@@ -0,0 +1,453 @@
+// NOTE: Previously `infer-graphql-input-from-fields-test.js`
+
+const { createSchemaComposer } = require(`../../schema-composer`)
+const { getFilterInput } = require(`../filter`)
+const { getSortInput } = require(`../sort`)
+
+const {
+  GraphQLBoolean,
+  GraphQLFloat,
+  GraphQLInt,
+  GraphQLID,
+  GraphQLNonNull,
+  GraphQLString,
+  GraphQLObjectType,
+  GraphQLScalarType,
+  GraphQLEnumType,
+  GraphQLList,
+  GraphQLInputObjectType,
+  Kind,
+} = require(`graphql`)
+const { GraphQLDate } = require(`../date`)
+const { GraphQLJSON } = require(`graphql-compose`)
+
+const getInferredFields = fields => {
+  const schemaComposer = createSchemaComposer()
+  const tc = schemaComposer.createObjectTC({ name: `Test`, fields })
+  return getFilterInput({ schemaComposer, typeComposer: tc })
+    .getType()
+    .getFields()
+}
+
+function isIntInput(type) {
+  expect(type.name).toBe(`IntQueryOperatorInput`)
+  expect(type instanceof GraphQLInputObjectType).toBeTruthy()
+  expect(type.getFields()).toEqual({
+    eq: { name: `eq`, type: GraphQLInt },
+    ne: { name: `ne`, type: GraphQLInt },
+    lt: { name: `lt`, type: GraphQLInt },
+    lte: { name: `lte`, type: GraphQLInt },
+    gt: { name: `gt`, type: GraphQLInt },
+    gte: { name: `gte`, type: GraphQLInt },
+    in: { name: `in`, type: new GraphQLList(GraphQLInt) },
+    nin: { name: `nin`, type: new GraphQLList(GraphQLInt) },
+  })
+}
+
+function isDateInput(type) {
+  expect(type.name).toBe(`DateQueryOperatorInput`)
+  expect(type instanceof GraphQLInputObjectType).toBeTruthy()
+  expect(type.getFields()).toEqual({
+    eq: { name: `eq`, type: GraphQLDate },
+    ne: { name: `ne`, type: GraphQLDate },
+    lt: { name: `lt`, type: GraphQLDate },
+    lte: { name: `lte`, type: GraphQLDate },
+    gt: { name: `gt`, type: GraphQLDate },
+    gte: { name: `gte`, type: GraphQLDate },
+    in: { name: `in`, type: new GraphQLList(GraphQLDate) },
+    nin: { name: `nin`, type: new GraphQLList(GraphQLDate) },
+  })
+}
+
+function isIdInput(type) {
+  expect(type.name).toBe(`IDQueryOperatorInput`)
+  expect(type instanceof GraphQLInputObjectType).toBeTruthy()
+  expect(type.getFields()).toEqual({
+    eq: { name: `eq`, type: GraphQLID },
+    ne: { name: `ne`, type: GraphQLID },
+    in: { name: `in`, type: new GraphQLList(GraphQLID) },
+    nin: { name: `nin`, type: new GraphQLList(GraphQLID) },
+  })
+}
+
+function isStringInput(type) {
+  expect(type.name).toBe(`StringQueryOperatorInput`)
+  expect(type instanceof GraphQLInputObjectType).toBeTruthy()
+  expect(type.getFields()).toEqual({
+    eq: { name: `eq`, type: GraphQLString },
+    ne: { name: `ne`, type: GraphQLString },
+    regex: { name: `regex`, type: GraphQLString },
+    glob: { name: `glob`, type: GraphQLString },
+    in: { name: `in`, type: new GraphQLList(GraphQLString) },
+    nin: { name: `nin`, type: new GraphQLList(GraphQLString) },
+  })
+}
+
+function isJsonInput(type) {
+  expect(type.name).toBe(`JSONQueryOperatorInput`)
+  expect(type instanceof GraphQLInputObjectType).toBeTruthy()
+  expect(type.getFields()).toEqual({
+    eq: { name: `eq`, type: GraphQLJSON },
+    ne: { name: `ne`, type: GraphQLJSON },
+    regex: { name: `regex`, type: GraphQLJSON },
+    glob: { name: `glob`, type: GraphQLJSON },
+    in: { name: `in`, type: new GraphQLList(GraphQLJSON) },
+    nin: { name: `nin`, type: new GraphQLList(GraphQLJSON) },
+  })
+}
+
+function isFloatInput(type) {
+  expect(type.name).toBe(`FloatQueryOperatorInput`)
+  expect(type instanceof GraphQLInputObjectType).toBeTruthy()
+  expect(type.getFields()).toEqual({
+    eq: { name: `eq`, type: GraphQLFloat },
+    ne: { name: `ne`, type: GraphQLFloat },
+    lt: { name: `lt`, type: GraphQLFloat },
+    lte: { name: `lte`, type: GraphQLFloat },
+    gt: { name: `gt`, type: GraphQLFloat },
+    gte: { name: `gte`, type: GraphQLFloat },
+    in: { name: `in`, type: new GraphQLList(GraphQLFloat) },
+    nin: { name: `nin`, type: new GraphQLList(GraphQLFloat) },
+  })
+}
+
+function isBoolInput(type) {
+  expect(type.name).toBe(`BooleanQueryOperatorInput`)
+  expect(type instanceof GraphQLInputObjectType).toBeTruthy()
+  expect(type.getFields()).toEqual({
+    eq: { name: `eq`, type: GraphQLBoolean },
+    ne: { name: `ne`, type: GraphQLBoolean },
+    in: { name: `in`, type: new GraphQLList(GraphQLBoolean) },
+    nin: { name: `nin`, type: new GraphQLList(GraphQLBoolean) },
+  })
+}
+
+function isCustomScalarInput(queryType, type) {
+  expect(queryType instanceof GraphQLInputObjectType).toBeTruthy()
+  expect(queryType.getFields()).toEqual({
+    eq: { name: `eq`, type },
+    ne: { name: `ne`, type },
+    in: { name: `in`, type: new GraphQLList(type) },
+    nin: { name: `nin`, type: new GraphQLList(type) },
+  })
+}
+
+function isEnumInput(queryType, type) {
+  expect(queryType instanceof GraphQLInputObjectType).toBeTruthy()
+  expect(queryType.getFields()).toEqual({
+    eq: { name: `eq`, type },
+    ne: { name: `ne`, type },
+    in: { name: `in`, type: new GraphQLList(type) },
+    nin: { name: `nin`, type: new GraphQLList(type) },
+  })
+}
+
+describe(`GraphQL Input args from fields`, () => {
+  function oddValue(value) {
+    return value % 2 === 1 ? value : null
+  }
+
+  const OddType = new GraphQLScalarType({
+    name: `Odd`,
+    serialize: oddValue,
+    parseValue: oddValue,
+    parseLiteral(ast) {
+      if (ast.kind === Kind.INT) {
+        return oddValue(parseInt(ast.value, 10))
+      }
+      return null
+    },
+  })
+
+  it(`handles all known scalars`, async () => {
+    const fields = {
+      scal_id: `ID`,
+      scal_int: `Int`,
+      scal_float: `Float`,
+      scal_string: `String`,
+      scal_bool: `Boolean`,
+      scal_json: `JSON`,
+      scal_date: `Date`,
+      scal_odd: { type: OddType },
+      scal_enum: {
+        type: new GraphQLEnumType({
+          name: `CustomEnum`,
+          values: { FOO: { value: `foo` } },
+        }),
+      },
+    }
+
+    const inferredFields = getInferredFields(fields)
+
+    const id = inferredFields.scal_id.type
+    isIdInput(id)
+
+    const int = inferredFields.scal_int.type
+    isIntInput(int)
+
+    const float = inferredFields.scal_float.type
+    isFloatInput(float)
+
+    const string = inferredFields.scal_string.type
+    isStringInput(string)
+
+    const bool = inferredFields.scal_bool.type
+    isBoolInput(bool)
+
+    const date = inferredFields.scal_date.type
+    isDateInput(date)
+
+    const json = inferredFields.scal_json.type
+    isJsonInput(json)
+
+    const custom_scalar = inferredFields.scal_odd.type
+    isCustomScalarInput(custom_scalar, fields.scal_odd.type)
+
+    const custom_enum = inferredFields.scal_enum.type
+    isEnumInput(custom_enum, fields.scal_enum.type)
+  })
+
+  it(`recursively converts object types`, async () => {
+    const fields = {
+      obj: {
+        type: new GraphQLObjectType({
+          name: `Obj`,
+          fields: {
+            foo: { type: GraphQLInt },
+            bar: {
+              type: new GraphQLObjectType({
+                name: `Jbo`,
+                fields: {
+                  foo: { type: GraphQLString },
+                },
+              }),
+            },
+          },
+        }),
+      },
+    }
+
+    const inferredFields = getInferredFields(fields)
+
+    const obj = inferredFields.obj.type
+    const objFields = obj.getFields()
+
+    expect(obj instanceof GraphQLInputObjectType).toBeTruthy()
+    isIntInput(objFields.foo.type)
+
+    const innerObj = objFields.bar.type
+    const innerObjFields = innerObj.getFields()
+    isStringInput(innerObjFields.foo.type)
+  })
+
+  it(`handles lists within lists`, async () => {
+    const Row = new GraphQLObjectType({
+      name: `Row`,
+      fields: () => {
+        return {
+          cells: { type: new GraphQLList(Cell) },
+        }
+      },
+    })
+
+    const Cell = new GraphQLObjectType({
+      name: `Cell`,
+      fields: () => {
+        return {
+          value: { type: GraphQLInt },
+        }
+      },
+    })
+
+    const fields = {
+      rows: { type: new GraphQLList(Row) },
+    }
+
+    expect(() => {
+      getInferredFields(fields)
+    }).not.toThrow()
+  })
+
+  it(`protects against infinite recursion on circular definitions`, async () => {
+    const TypeA = new GraphQLObjectType({
+      name: `TypeA`,
+      fields: () => {
+        return {
+          typeb: { type: TypeB },
+        }
+      },
+    })
+
+    const TypeB = new GraphQLObjectType({
+      name: `TypeB`,
+      fields: () => {
+        return {
+          bar: { type: GraphQLID },
+          typea: { type: TypeA },
+        }
+      },
+    })
+
+    const fields = {
+      entryPointA: { type: TypeA },
+      entryPointB: { type: TypeB },
+    }
+
+    let inferredFields
+
+    expect(() => {
+      inferredFields = getInferredFields(fields)
+    }).not.toThrow()
+
+    const entryPointA = inferredFields.entryPointA.type
+    const entryPointAFields = entryPointA.getFields()
+    const entryPointB = inferredFields.entryPointB.type
+    const entryPointBFields = entryPointB.getFields()
+
+    expect(entryPointA instanceof GraphQLInputObjectType).toBeTruthy()
+    expect(entryPointB instanceof GraphQLInputObjectType).toBeTruthy()
+    isIdInput(entryPointBFields.bar.type)
+
+    const childAB = entryPointAFields.typeb.type
+    const childABFields = childAB.getFields()
+    expect(childAB instanceof GraphQLInputObjectType).toBeTruthy()
+    isIdInput(childABFields.bar.type)
+
+    expect(childABFields.typea.type.name).toBe(`TypeAFilterInput`)
+
+    expect(entryPointBFields.typea.type.name).toBe(`TypeAFilterInput`)
+  })
+
+  // NOTE: We now convert all scalars and enums
+  it.skip(`recovers from unknown output types`, async () => {
+    const fields = {
+      obj: {
+        type: new GraphQLObjectType({
+          name: `Obj`,
+          fields: {
+            aa: { type: OddType },
+            foo: { type: GraphQLInt },
+            bar: {
+              type: new GraphQLObjectType({
+                name: `Jbo`,
+                fields: {
+                  aa: { type: OddType },
+                  foo: { type: GraphQLString },
+                  ba: { type: OddType },
+                  bar: { type: GraphQLInt },
+                },
+              }),
+            },
+            baz: {
+              type: new GraphQLObjectType({
+                name: `Jbo2`,
+                fields: {
+                  aa: { type: OddType },
+                },
+              }),
+            },
+          },
+        }),
+      },
+      odd: { type: OddType },
+    }
+
+    const inferredFields = getInferredFields(fields)
+
+    expect(inferredFields.odd).toBeUndefined()
+
+    const obj = inferredFields.obj.type
+    const objFields = obj.getFields()
+
+    expect(obj instanceof GraphQLInputObjectType).toBeTruthy()
+    isIntInput(objFields.foo.type)
+    expect(objFields.aa).toBeUndefined()
+
+    const innerObj = objFields.bar.type
+    const innerObjFields = innerObj.getFields()
+    expect(innerObjFields.aa).toBeUndefined()
+    isStringInput(innerObjFields.foo.type)
+    expect(innerObjFields.ba).toBeUndefined()
+    isIntInput(innerObjFields.bar.type)
+
+    // innerObj.baz is object containing only unsupported types
+    // so it should not be defined
+    expect(innerObj.baz).toBeUndefined()
+  })
+
+  it(`includes the filters of list elements`, async () => {
+    const fields = {
+      list: { type: new GraphQLList(GraphQLFloat) },
+    }
+
+    const inferredFields = getInferredFields(fields)
+
+    const list = inferredFields.list.type
+
+    expect(list instanceof GraphQLInputObjectType).toBeTruthy()
+    expect(list.getFields()).toEqual({
+      eq: { name: `eq`, type: GraphQLFloat },
+      ne: { name: `ne`, type: GraphQLFloat },
+      gt: { name: `gt`, type: GraphQLFloat },
+      gte: { name: `gte`, type: GraphQLFloat },
+      lt: { name: `lt`, type: GraphQLFloat },
+      lte: { name: `lte`, type: GraphQLFloat },
+      in: { name: `in`, type: new GraphQLList(GraphQLFloat) },
+      nin: { name: `nin`, type: new GraphQLList(GraphQLFloat) },
+    })
+  })
+
+  it(`strips away NonNull`, async () => {
+    const fields = {
+      nonNull: { type: new GraphQLNonNull(GraphQLInt) },
+    }
+
+    const inferredFields = getInferredFields(fields)
+
+    isIntInput(inferredFields.nonNull.type)
+  })
+
+  it(`extracts the fields you can sort on`, async () => {
+    const fields = {
+      foo: { type: GraphQLString },
+      bar: { type: GraphQLFloat },
+      baz: {
+        type: new GraphQLObjectType({
+          name: `Baz`,
+          fields: {
+            ka: { type: GraphQLFloat },
+            ma: {
+              type: new GraphQLList(
+                new GraphQLObjectType({
+                  name: `Hol`,
+                  fields: {
+                    go: { type: GraphQLFloat },
+                  },
+                })
+              ),
+            },
+          },
+        }),
+      },
+    }
+
+    const schemaComposer = createSchemaComposer()
+    const tc = schemaComposer.createObjectTC({ name: `Test`, fields })
+    const sort = getSortInput({
+      schemaComposer,
+      typeComposer: tc,
+    })
+      .getType()
+      .getFields()
+      .fields.type.ofType.getValues()
+      .map(({ name }) => name)
+
+    expect(sort.sort()).toEqual([
+      `bar`,
+      `baz___ka`,
+      `baz___ma`,
+      `baz___ma___go`,
+      `foo`,
+    ])
+  })
+})
diff --git a/node_modules/gatsby/src/schema/types/date.js b/node_modules/gatsby/src/schema/types/date.js
new file mode 100644
index 0000000..e17ec8a
--- /dev/null
+++ b/node_modules/gatsby/src/schema/types/date.js
@@ -0,0 +1,258 @@
+const moment = require(`moment`)
+const {
+  GraphQLString,
+  GraphQLBoolean,
+  GraphQLScalarType,
+  Kind,
+} = require(`graphql`)
+const { oneLine } = require(`common-tags`)
+
+const ISO_8601_FORMAT = [
+  `YYYY`,
+  `YYYY-MM`,
+  `YYYY-MM-DD`,
+  `YYYYMMDD`,
+
+  // Local Time
+  `YYYY-MM-DDTHH`,
+  `YYYY-MM-DDTHH:mm`,
+  `YYYY-MM-DDTHHmm`,
+  `YYYY-MM-DDTHH:mm:ss`,
+  `YYYY-MM-DDTHHmmss`,
+  `YYYY-MM-DDTHH:mm:ss.SSS`,
+  `YYYY-MM-DDTHHmmss.SSS`,
+  `YYYY-MM-DDTHH:mm:ss.SSSSSS`,
+  `YYYY-MM-DDTHHmmss.SSSSSS`,
+  // `YYYY-MM-DDTHH:mm:ss.SSSSSSSSS`,
+  // `YYYY-MM-DDTHHmmss.SSSSSSSSS`,
+
+  // Local Time (Omit T)
+  `YYYY-MM-DD HH`,
+  `YYYY-MM-DD HH:mm`,
+  `YYYY-MM-DD HHmm`,
+  `YYYY-MM-DD HH:mm:ss`,
+  `YYYY-MM-DD HHmmss`,
+  `YYYY-MM-DD HH:mm:ss.SSS`,
+  `YYYY-MM-DD HHmmss.SSS`,
+  `YYYY-MM-DD HH:mm:ss.SSSSSS`,
+  `YYYY-MM-DD HHmmss.SSSSSS`,
+  // `YYYY-MM-DD HH:mm:ss.SSSSSSSSS`,
+  // `YYYY-MM-DD HHmmss.SSSSSSSSS`,
+
+  // Coordinated Universal Time (UTC)
+  `YYYY-MM-DDTHHZ`,
+  `YYYY-MM-DDTHH:mmZ`,
+  `YYYY-MM-DDTHHmmZ`,
+  `YYYY-MM-DDTHH:mm:ssZ`,
+  `YYYY-MM-DDTHHmmssZ`,
+  `YYYY-MM-DDTHH:mm:ss.SSSZ`,
+  `YYYY-MM-DDTHHmmss.SSSZ`,
+  `YYYY-MM-DDTHH:mm:ss.SSSSSSZ`,
+  `YYYY-MM-DDTHHmmss.SSSSSSZ`,
+  // `YYYY-MM-DDTHH:mm:ss.SSSSSSSSSZ`,
+  // `YYYY-MM-DDTHHmmss.SSSSSSSSSZ`,
+
+  // Coordinated Universal Time (UTC) (Omit T)
+  `YYYY-MM-DD HHZ`,
+  `YYYY-MM-DD HH:mmZ`,
+  `YYYY-MM-DD HHmmZ`,
+  `YYYY-MM-DD HH:mm:ssZ`,
+  `YYYY-MM-DD HHmmssZ`,
+  `YYYY-MM-DD HH:mm:ss.SSSZ`,
+  `YYYY-MM-DD HHmmss.SSSZ`,
+  `YYYY-MM-DD HH:mm:ss.SSSSSSZ`,
+  `YYYY-MM-DD HHmmss.SSSSSSZ`,
+  // `YYYY-MM-DD HH:mm:ss.SSSSSSSSSZ`,
+  // `YYYY-MM-DD HHmmss.SSSSSSSSSZ`,
+
+  // Coordinated Universal Time (UTC) (Omit T, Extra Space before Z)
+  `YYYY-MM-DD HH Z`,
+  `YYYY-MM-DD HH:mm Z`,
+  `YYYY-MM-DD HHmm Z`,
+  `YYYY-MM-DD HH:mm:ss Z`,
+  `YYYY-MM-DD HHmmss Z`,
+  `YYYY-MM-DD HH:mm:ss.SSS Z`,
+  `YYYY-MM-DD HHmmss.SSS Z`,
+  `YYYY-MM-DD HH:mm:ss.SSSSSS Z`,
+  `YYYY-MM-DD HHmmss.SSSSSS Z`,
+
+  `YYYY-[W]WW`,
+  `YYYY[W]WW`,
+  `YYYY-[W]WW-E`,
+  `YYYY[W]WWE`,
+  `YYYY-DDDD`,
+  `YYYYDDDD`,
+]
+
+const GraphQLDate = new GraphQLScalarType({
+  name: `Date`,
+  description: oneLine`
+    A date string, such as 2007-12-03, compliant with the ISO 8601 standard
+    for representation of dates and times using the Gregorian calendar.`,
+  serialize: String,
+  parseValue: String,
+  parseLiteral(ast) {
+    return ast.kind === Kind.STRING ? ast.value : undefined
+  },
+})
+
+const momentFormattingTokens = /(\[[^[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g
+const momentFormattingRegexes = {
+  YYYY: `\\d{4}`,
+  MM: `\\d{2}`,
+  DD: `\\d{2}`,
+  DDDD: `\\d{4}`,
+  HH: `\\d{2}`,
+  mm: `\\d{2}`,
+  ss: `\\d{2}`,
+  SSS: `\\d{3}`,
+  SSSSSS: `\\d{6}`,
+  E: `\\d`,
+  W: `\\d`,
+  WW: `\\d{2}`,
+  "[W]": `W`,
+  ".": `\\.`,
+  Z: `(Z|[+-]\\d\\d(?::?\\d\\d)?)`,
+}
+const ISO_8601_FORMAT_AS_REGEX = ISO_8601_FORMAT.map(format =>
+  // convert ISO string to a map of momentTokens ([YYYY, MM, DD])
+  [...format.match(momentFormattingTokens)]
+    .map(token =>
+      // see if the token (YYYY or ss) is found, else we just return the value
+      momentFormattingRegexes[token] ? momentFormattingRegexes[token] : token
+    )
+    .join(``)
+).join(`|`)
+
+// calculate all lengths of the formats, if a string is longer or smaller it can't be valid
+const ISO_8601_FORMAT_LENGTHS = [
+  ...new Set(
+    ISO_8601_FORMAT.reduce((acc, val) => {
+      if (!val.endsWith(`Z`)) {
+        return acc.concat(val.length)
+      }
+
+      // we add count of +01 & +01:00
+      return acc.concat([val.length, val.length + 3, val.length + 5])
+    }, [])
+  ),
+]
+
+// lets imagine these formats: YYYY-MM-DDTHH & YYYY-MM-DD HHmmss.SSSSSS Z
+// this regex looks like (/^(\d{4}-\d{2}-\d{2}T\d{2}|\d{4}-\d{2}-\d{2} \d{2}\d{2}\d{2}.\d{6} Z)$)
+const quickDateValidateRegex = new RegExp(`^(${ISO_8601_FORMAT_AS_REGEX})$`)
+
+const looksLikeDateStartRegex = /^\d{4}/
+// this regex makes sure the last characters are a number or the letter Z
+const looksLikeDateEndRegex = /(\d|Z)$/
+
+/**
+ * looksLikeADate isn't a 100% valid check if it is a real date but at least it's something that looks like a date.
+ * It won't catch values like 2010-02-30
+ * 1) is it a number?
+ * 2) does the length of the value comply with any of our formats
+ * 3) does the str starts with 4 digites (YYYY)
+ * 4) does the str ends with something that looks like a date
+ * 5) Small regex to see if it matches any of the formats
+ * 6) check momentjs
+ *
+ * @param {*} value
+ * @return {boolean}
+ */
+function looksLikeADate(value) {
+  // quick check if value does not look like a date
+  if (
+    !value ||
+    (value.length && !ISO_8601_FORMAT_LENGTHS.includes(value.length)) ||
+    !looksLikeDateStartRegex.test(value) ||
+    !looksLikeDateEndRegex.test(value)
+  ) {
+    return false
+  }
+
+  // If it looks like a date we parse the date with a regex to see if we can handle it.
+  // momentjs just does regex validation itself if you don't do any operations on it.
+  if (typeof value === `string` && quickDateValidateRegex.test(value)) {
+    return true
+  }
+
+  return isDate(value)
+}
+
+/**
+ * @param {*} value
+ * @return {boolean}
+ */
+function isDate(value) {
+  const momentDate = moment.utc(value, ISO_8601_FORMAT, true)
+  return typeof value !== `number` && momentDate.isValid()
+}
+
+const formatDate = ({
+  date,
+  fromNow,
+  difference,
+  formatString,
+  locale = `en`,
+}) => {
+  const normalizedDate = JSON.parse(JSON.stringify(date))
+  if (formatString) {
+    return moment
+      .utc(normalizedDate, ISO_8601_FORMAT, true)
+      .locale(locale)
+      .format(formatString)
+  } else if (fromNow) {
+    return moment
+      .utc(normalizedDate, ISO_8601_FORMAT, true)
+      .locale(locale)
+      .fromNow()
+  } else if (difference) {
+    return moment().diff(
+      moment.utc(normalizedDate, ISO_8601_FORMAT, true).locale(locale),
+      difference
+    )
+  }
+  return normalizedDate
+}
+
+const dateResolver = {
+  type: `Date`,
+  args: {
+    formatString: {
+      type: GraphQLString,
+      description: oneLine`
+        Format the date using Moment.js' date tokens, e.g.
+        \`date(formatString: "YYYY MMMM DD")\`.
+        See https://momentjs.com/docs/#/displaying/format/
+        for documentation for different tokens.`,
+    },
+    fromNow: {
+      type: GraphQLBoolean,
+      description: oneLine`
+        Returns a string generated with Moment.js' \`fromNow\` function`,
+    },
+    difference: {
+      type: GraphQLString,
+      description: oneLine`
+        Returns the difference between this date and the current time.
+        Defaults to "miliseconds" but you can also pass in as the
+        measurement "years", "months", "weeks", "days", "hours", "minutes",
+        and "seconds".`,
+    },
+    locale: {
+      type: GraphQLString,
+      description: oneLine`
+        Configures the locale Moment.js will use to format the date.`,
+    },
+  },
+  resolve(source, args, context, { fieldName }) {
+    const date = source[fieldName]
+    if (date == null) return null
+
+    return Array.isArray(date)
+      ? date.map(d => formatDate({ date: d, ...args }))
+      : formatDate({ date, ...args })
+  },
+}
+
+module.exports = { GraphQLDate, dateResolver, isDate, looksLikeADate }
diff --git a/node_modules/gatsby/src/schema/types/directives.js b/node_modules/gatsby/src/schema/types/directives.js
new file mode 100644
index 0000000..55894a2
--- /dev/null
+++ b/node_modules/gatsby/src/schema/types/directives.js
@@ -0,0 +1,39 @@
+const {
+  GraphQLBoolean,
+  GraphQLNonNull,
+  GraphQLDirective,
+  DirectiveLocation,
+} = require(`graphql`)
+
+const InferDirective = new GraphQLDirective({
+  name: `infer`,
+  description: `Infer fields for this type from nodes.`,
+  locations: [DirectiveLocation.OBJECT],
+  args: {
+    noDefaultResolvers: {
+      type: new GraphQLNonNull(GraphQLBoolean),
+      default: false,
+      description: `Don't add default resolvers to defined fields.`,
+      deprecationReason: `noDefaultResolvers is deprecated, annotate individual fields.`,
+    },
+  },
+})
+
+const DontInferDirective = new GraphQLDirective({
+  name: `dontInfer`,
+  description: `Do not infer additional fields for this type from nodes.`,
+  locations: [DirectiveLocation.OBJECT],
+  args: {
+    noDefaultResolvers: {
+      type: new GraphQLNonNull(GraphQLBoolean),
+      default: false,
+      description: `Don't add default resolvers to defined fields.`,
+      deprecationReason: `noDefaultResolvers is deprecated, annotate individual fields.`,
+    },
+  },
+})
+
+module.exports = {
+  InferDirective,
+  DontInferDirective,
+}
diff --git a/node_modules/gatsby/src/schema/types/filter.js b/node_modules/gatsby/src/schema/types/filter.js
new file mode 100644
index 0000000..35d894f
--- /dev/null
+++ b/node_modules/gatsby/src/schema/types/filter.js
@@ -0,0 +1,194 @@
+const {
+  getNamedType,
+  getNullableType,
+  GraphQLInputObjectType,
+  GraphQLEnumType,
+  GraphQLList,
+  isSpecifiedScalarType,
+} = require(`graphql`)
+const { InputTypeComposer } = require(`graphql-compose`)
+const { GraphQLJSON } = require(`graphql-compose`)
+const { GraphQLDate } = require(`./date`)
+
+const convert = ({
+  schemaComposer,
+  inputTypeComposer,
+  filterInputComposer,
+}) => {
+  const inputTypeName = inputTypeComposer
+    .getTypeName()
+    .replace(/Input$/, `FilterInput`)
+
+  let convertedITC
+  if (filterInputComposer) {
+    convertedITC = filterInputComposer
+  } else if (schemaComposer.has(inputTypeName)) {
+    return schemaComposer.getITC(inputTypeName)
+  } else {
+    convertedITC = new InputTypeComposer(
+      new GraphQLInputObjectType({
+        name: inputTypeName,
+        fields: {},
+      }),
+      schemaComposer
+    )
+  }
+
+  schemaComposer.addAsComposer(convertedITC)
+
+  const fieldNames = inputTypeComposer.getFieldNames()
+  const convertedFields = {}
+  fieldNames.forEach(fieldName => {
+    const fieldConfig = inputTypeComposer.getFieldConfig(fieldName)
+    const type = getNamedType(fieldConfig.type)
+
+    if (type instanceof GraphQLInputObjectType) {
+      const itc = new InputTypeComposer(type, schemaComposer)
+
+      const operatorsInputTC = convert({
+        schemaComposer,
+        inputTypeComposer: itc,
+      })
+
+      // TODO: array of arrays?
+      const isListType =
+        getNullableType(fieldConfig.type) instanceof GraphQLList
+
+      // elemMatch operator
+      convertedFields[fieldName] = isListType
+        ? getQueryOperatorListInput({
+            schemaComposer,
+            inputTypeComposer: operatorsInputTC,
+          })
+        : operatorsInputTC
+    } else {
+      // GraphQLScalarType || GraphQLEnumType
+      const operatorFields = getQueryOperatorInput({ schemaComposer, type })
+      if (operatorFields) {
+        convertedFields[fieldName] = operatorFields
+      }
+    }
+  })
+
+  convertedITC.addFields(convertedFields)
+  return convertedITC
+}
+
+const removeEmptyFields = (
+  { schemaComposer, inputTypeComposer },
+  cache = new Set()
+) => {
+  const convert = itc => {
+    if (cache.has(itc)) {
+      return itc
+    }
+    cache.add(itc)
+    const fields = itc.getFields()
+    const nonEmptyFields = {}
+    Object.keys(fields).forEach(fieldName => {
+      const fieldITC = fields[fieldName]
+      if (fieldITC instanceof InputTypeComposer) {
+        const convertedITC = convert(fieldITC)
+        if (convertedITC.getFieldNames().length) {
+          nonEmptyFields[fieldName] = convertedITC
+        }
+      } else {
+        nonEmptyFields[fieldName] = fieldITC
+      }
+    })
+    itc.setFields(nonEmptyFields)
+    return itc
+  }
+  return convert(inputTypeComposer)
+}
+
+const getFilterInput = ({ schemaComposer, typeComposer }) => {
+  const typeName = typeComposer.getTypeName()
+  const filterInputComposer = schemaComposer.getOrCreateITC(
+    `${typeName}FilterInput`
+  )
+  const inputTypeComposer = typeComposer.getInputTypeComposer()
+
+  // TODO: In Gatsby v2, the NodeInput.id field is of type String, not ID.
+  // Remove this workaround for v3.
+  if (
+    inputTypeComposer.hasField(`id`) &&
+    getNamedType(inputTypeComposer.getFieldType(`id`)).name === `ID`
+  ) {
+    inputTypeComposer.extendField(`id`, { type: `String` })
+  }
+
+  const filterInputTC = convert({
+    schemaComposer,
+    inputTypeComposer,
+    filterInputComposer,
+  })
+
+  return removeEmptyFields({ schemaComposer, inputTypeComposer: filterInputTC })
+}
+
+module.exports = { getFilterInput }
+
+const EQ = `eq`
+const NE = `ne`
+const GT = `gt`
+const GTE = `gte`
+const LT = `lt`
+const LTE = `lte`
+const IN = `in`
+const NIN = `nin`
+const REGEX = `regex`
+const GLOB = `glob`
+
+const ALLOWED_OPERATORS = {
+  Boolean: [EQ, NE, IN, NIN],
+  Date: [EQ, NE, GT, GTE, LT, LTE, IN, NIN],
+  Float: [EQ, NE, GT, GTE, LT, LTE, IN, NIN],
+  ID: [EQ, NE, IN, NIN],
+  Int: [EQ, NE, GT, GTE, LT, LTE, IN, NIN],
+  JSON: [EQ, NE, IN, NIN, REGEX, GLOB],
+  String: [EQ, NE, IN, NIN, REGEX, GLOB],
+  Enum: [EQ, NE, IN, NIN],
+  CustomScalar: [EQ, NE, IN, NIN],
+}
+
+const ARRAY_OPERATORS = [IN, NIN]
+
+const getOperatorFields = (fieldType, operators) => {
+  const result = {}
+  operators.forEach(op => {
+    if (ARRAY_OPERATORS.includes(op)) {
+      result[op] = [fieldType]
+    } else {
+      result[op] = fieldType
+    }
+  })
+  return result
+}
+
+const getQueryOperatorInput = ({ schemaComposer, type }) => {
+  let typeName
+  if (type instanceof GraphQLEnumType) {
+    typeName = `Enum`
+  } else if (isBuiltInScalarType(type)) {
+    typeName = type.name
+  } else {
+    typeName = `CustomScalar`
+  }
+  const operators = ALLOWED_OPERATORS[typeName]
+  return schemaComposer.getOrCreateITC(type.name + `QueryOperatorInput`, itc =>
+    itc.addFields(getOperatorFields(type, operators))
+  )
+}
+
+const getQueryOperatorListInput = ({ schemaComposer, inputTypeComposer }) => {
+  const typeName = inputTypeComposer.getTypeName().replace(/Input/, `ListInput`)
+  return schemaComposer.getOrCreateITC(typeName, itc => {
+    itc.addFields({
+      elemMatch: inputTypeComposer,
+    })
+  })
+}
+
+const isBuiltInScalarType = type =>
+  isSpecifiedScalarType(type) || type === GraphQLDate || type === GraphQLJSON
diff --git a/node_modules/gatsby/src/schema/types/node-interface.js b/node_modules/gatsby/src/schema/types/node-interface.js
new file mode 100644
index 0000000..ef4dd46
--- /dev/null
+++ b/node_modules/gatsby/src/schema/types/node-interface.js
@@ -0,0 +1,72 @@
+const getOrCreateNodeInterface = schemaComposer => {
+  // TODO: why is `mediaType` on Internal? Applies only to File!?
+  // `fieldOwners` is an object
+  // Should we drop ignoreType?
+  const internalTC = schemaComposer.getOrCreateOTC(`Internal`, tc => {
+    tc.addFields({
+      content: `String`,
+      contentDigest: `String!`,
+      description: `String`,
+      fieldOwners: [`String`],
+      ignoreType: `Boolean`,
+      mediaType: `String`,
+      owner: `String!`,
+      type: `String!`,
+    })
+    // TODO: Can be removed with graphql-compose 5.11
+    tc.getInputTypeComposer()
+  })
+
+  const nodeInterfaceTC = schemaComposer.getOrCreateIFTC(`Node`, tc => {
+    tc.setDescription(`Node Interface`)
+    tc.addFields({
+      id: `ID!`,
+      parent: {
+        type: `Node`,
+        resolve: (source, args, context, info) => {
+          const { path } = context
+          return context.nodeModel.getNodeById({ id: source.parent }, { path })
+        },
+      },
+      children: {
+        type: `[Node!]!`,
+        resolve: (source, args, context, info) => {
+          const { path } = context
+          return context.nodeModel.getNodesByIds(
+            { ids: source.children },
+            { path }
+          )
+        },
+      },
+      internal: internalTC.getTypeNonNull(),
+    })
+    // TODO: In Gatsby v2, the NodeInput.id field is of type String, not ID.
+    // Remove this workaround for v3.
+    const nodeInputTC = tc.getInputTypeComposer()
+    nodeInputTC.extendField(`id`, { type: `String` })
+  })
+
+  return nodeInterfaceTC
+}
+
+const addNodeInterface = ({ schemaComposer, typeComposer }) => {
+  const nodeInterfaceTC = getOrCreateNodeInterface(schemaComposer)
+  typeComposer.addInterface(nodeInterfaceTC)
+  addNodeInterfaceFields({ schemaComposer, typeComposer })
+}
+
+const addNodeInterfaceFields = ({ schemaComposer, typeComposer }) => {
+  const nodeInterfaceTC = getOrCreateNodeInterface(schemaComposer)
+  typeComposer.addFields(nodeInterfaceTC.getFields())
+  nodeInterfaceTC.setResolveType(node => node.internal.type)
+  schemaComposer.addSchemaMustHaveType(typeComposer)
+}
+
+const getNodeInterface = ({ schemaComposer }) =>
+  getOrCreateNodeInterface(schemaComposer)
+
+module.exports = {
+  addNodeInterface,
+  addNodeInterfaceFields,
+  getNodeInterface,
+}
diff --git a/node_modules/gatsby/src/schema/types/pagination.js b/node_modules/gatsby/src/schema/types/pagination.js
new file mode 100644
index 0000000..f217131
--- /dev/null
+++ b/node_modules/gatsby/src/schema/types/pagination.js
@@ -0,0 +1,98 @@
+const { getFieldsEnum } = require(`./sort`)
+const { distinct, group } = require(`../resolvers`)
+
+const getPageInfo = ({ schemaComposer }) =>
+  schemaComposer.getOrCreateOTC(`PageInfo`, tc => {
+    tc.addFields({
+      hasNextPage: `Boolean!`,
+      // currentPage: `Int!`,
+      // hasPreviousPage: `Boolean!`,
+      // itemCount: `Int!`,
+      // pageCount: `Int!`,
+      // perPage: `Int`,
+    })
+  })
+
+const getEdge = ({ schemaComposer, typeComposer }) => {
+  const typeName = typeComposer.getTypeName() + `Edge`
+  return schemaComposer.getOrCreateOTC(typeName, tc => {
+    tc.addFields({
+      next: typeComposer,
+      node: typeComposer.getTypeNonNull(),
+      previous: typeComposer,
+    })
+  })
+}
+
+const createPagination = ({
+  schemaComposer,
+  typeComposer,
+  fields,
+  typeName,
+}) => {
+  const paginationTypeComposer = schemaComposer.getOrCreateOTC(typeName, tc => {
+    tc.addFields({
+      totalCount: `Int!`,
+      edges: [getEdge({ schemaComposer, typeComposer }).getTypeNonNull()],
+      nodes: [typeComposer.getTypeNonNull()],
+      pageInfo: getPageInfo({ schemaComposer }).getTypeNonNull(),
+      ...fields,
+    })
+  })
+  paginationTypeComposer.makeFieldNonNull(`edges`)
+  paginationTypeComposer.makeFieldNonNull(`nodes`)
+  return paginationTypeComposer
+}
+
+const getGroup = ({ schemaComposer, typeComposer }) => {
+  const typeName = typeComposer.getTypeName() + `GroupConnection`
+  const fields = {
+    field: `String!`,
+    fieldValue: `String`,
+  }
+  return createPagination({ schemaComposer, typeComposer, fields, typeName })
+}
+
+const getPagination = ({ schemaComposer, typeComposer }) => {
+  const inputTypeComposer = typeComposer.getInputTypeComposer()
+  const typeName = typeComposer.getTypeName() + `Connection`
+  const fieldsEnumTC = getFieldsEnum({
+    schemaComposer,
+    typeComposer,
+    inputTypeComposer,
+  })
+  const fields = {
+    distinct: {
+      type: [`String!`],
+      args: {
+        field: fieldsEnumTC.getTypeNonNull(),
+      },
+      resolve: distinct,
+    },
+    group: {
+      type: [getGroup({ schemaComposer, typeComposer }).getTypeNonNull()],
+      args: {
+        skip: `Int`,
+        limit: `Int`,
+        field: fieldsEnumTC.getTypeNonNull(),
+      },
+      resolve: group,
+    },
+  }
+  const paginationTypeComposer = createPagination({
+    schemaComposer,
+    typeComposer,
+    fields,
+    typeName,
+  })
+  paginationTypeComposer.makeFieldNonNull(`distinct`)
+  paginationTypeComposer.makeFieldNonNull(`group`)
+  return paginationTypeComposer
+}
+
+module.exports = {
+  getPageInfo,
+  getEdge,
+  getGroup,
+  getPagination,
+}
diff --git a/node_modules/gatsby/src/schema/types/sort.js b/node_modules/gatsby/src/schema/types/sort.js
new file mode 100644
index 0000000..d2213db
--- /dev/null
+++ b/node_modules/gatsby/src/schema/types/sort.js
@@ -0,0 +1,79 @@
+// @flow
+
+const {
+  getNamedType,
+  getNullableType,
+  GraphQLInputObjectType,
+  GraphQLList,
+} = require(`graphql`)
+
+const getSortOrderEnum = ({ schemaComposer }) =>
+  schemaComposer.getOrCreateETC(`SortOrderEnum`, etc => {
+    etc.setFields({
+      ASC: { value: `ASC` },
+      DESC: { value: `DESC` },
+    })
+  })
+
+const getFieldsEnum = ({ schemaComposer, typeComposer, inputTypeComposer }) => {
+  const typeName = typeComposer.getTypeName()
+  const fieldsEnumTypeComposer = schemaComposer.getOrCreateETC(
+    `${typeName}FieldsEnum`
+  )
+  const fields = convert(inputTypeComposer.getFields())
+  fieldsEnumTypeComposer.setFields(fields)
+  return fieldsEnumTypeComposer
+}
+
+const getSortInput = ({ schemaComposer, typeComposer }) => {
+  const inputTypeComposer = typeComposer.getInputTypeComposer()
+  const sortOrderEnumTC = getSortOrderEnum({ schemaComposer })
+  const fieldsEnumTC = getFieldsEnum({
+    schemaComposer,
+    typeComposer,
+    inputTypeComposer,
+  })
+  const typeName = typeComposer.getTypeName()
+
+  return schemaComposer.getOrCreateITC(`${typeName}SortInput`, itc => {
+    itc.addFields({
+      fields: [fieldsEnumTC],
+      order: { type: [sortOrderEnumTC], defaultValue: [`ASC`] },
+    })
+  })
+}
+
+module.exports = { getSortInput, getFieldsEnum, getSortOrderEnum }
+
+const MAX_SORT_DEPTH = 3
+const SORT_FIELD_DELIMITER = `___`
+
+const convert = (fields, prefix = null, depth = 0) => {
+  const sortFields = {}
+
+  Object.keys(fields).forEach(fieldName => {
+    const fieldConfig = fields[fieldName]
+    const sortKey = prefix ? `${prefix}.${fieldName}` : fieldName
+    const sortKeyFieldName = sortKey.split(`.`).join(SORT_FIELD_DELIMITER)
+
+    // XXX(freiksenet): this is to preserve legacy behaviour, this probably doesn't actually sort
+    if (getNullableType(fieldConfig.type) instanceof GraphQLList) {
+      sortFields[sortKeyFieldName] = {
+        value: sortKey,
+      }
+    }
+
+    const type = getNamedType(fieldConfig.type)
+    if (type instanceof GraphQLInputObjectType) {
+      if (depth < MAX_SORT_DEPTH) {
+        Object.assign(sortFields, convert(type.getFields(), sortKey, depth + 1))
+      }
+    } else {
+      // GraphQLScalarType || GraphQLEnumType
+      sortFields[sortKeyFieldName] = {
+        value: sortKey,
+      }
+    }
+  })
+  return sortFields
+}
diff --git a/node_modules/gatsby/src/schema/types/type-builders.js b/node_modules/gatsby/src/schema/types/type-builders.js
new file mode 100644
index 0000000..6c1b28f
--- /dev/null
+++ b/node_modules/gatsby/src/schema/types/type-builders.js
@@ -0,0 +1,69 @@
+// @flow
+
+import type {
+  ComposeObjectTypeConfig,
+  ComposeInputObjectTypeConfig,
+  ComposeInterfaceTypeConfig,
+  ComposeUnionTypeConfig,
+} from "graphql-compose"
+
+const GatsbyGraphQLTypeKind = {
+  OBJECT: `OBJECT`,
+  INPUT_OBJECT: `INPUT_OBJECT`,
+  UNION: `UNION`,
+  INTERFACE: `INTERFACE`,
+}
+
+export type GatsbyGraphQLType =
+  | { kind: GatsbyGraphQLTypeKind.OBJECT, config: ComposeObjectTypeConfig }
+  | {
+      kind: GatsbyGraphQLTypeKind.INPUT_OBJECT,
+      config: ComposeInputObjectTypeConfig,
+    }
+  | { kind: GatsbyGraphQLTypeKind.UNION, config: ComposeUnionTypeConfig }
+  | {
+      kind: GatsbyGraphQLTypeKind.INTERFACE,
+      config: ComposeInterfaceTypeConfig,
+    }
+
+const buildObjectType = config => {
+  return {
+    kind: GatsbyGraphQLTypeKind.OBJECT,
+    config,
+  }
+}
+
+const buildUnionType = config => {
+  return {
+    kind: GatsbyGraphQLTypeKind.UNION,
+    config,
+  }
+}
+
+const buildInterfaceType = config => {
+  return {
+    kind: GatsbyGraphQLTypeKind.INTERFACE,
+    config,
+  }
+}
+
+const buildInputObjectType = config => {
+  return {
+    kind: GatsbyGraphQLTypeKind.INPUT_OBJECT,
+    config,
+  }
+}
+
+const isGatsbyType = something =>
+  typeof something === `object` &&
+  something.kind &&
+  GatsbyGraphQLTypeKind[something.kind]
+
+module.exports = {
+  GatsbyGraphQLTypeKind,
+  buildObjectType,
+  buildUnionType,
+  buildInterfaceType,
+  buildInputObjectType,
+  isGatsbyType,
+}
diff --git a/node_modules/gatsby/src/schema/utils/get-value-at.js b/node_modules/gatsby/src/schema/utils/get-value-at.js
new file mode 100644
index 0000000..a2ce875
--- /dev/null
+++ b/node_modules/gatsby/src/schema/utils/get-value-at.js
@@ -0,0 +1,16 @@
+const getValueAt = (obj, selector) => {
+  const selectors = Array.isArray(selector) ? selector : selector.split(`.`)
+  return selectors.reduce((acc, key) => {
+    if (acc && typeof acc === `object`) {
+      if (Array.isArray(acc)) {
+        return acc
+          .map(a => (a && typeof a === `object` ? a[key] : undefined))
+          .filter(a => a !== undefined)
+      }
+      return acc[key]
+    }
+    return undefined
+  }, obj)
+}
+
+module.exports = { getValueAt }
diff --git a/node_modules/gatsby/src/utils/__tests__/__snapshots__/create-content-digest.js.snap b/node_modules/gatsby/src/utils/__tests__/__snapshots__/create-content-digest.js.snap
new file mode 100644
index 0000000..4ace7f6
--- /dev/null
+++ b/node_modules/gatsby/src/utils/__tests__/__snapshots__/create-content-digest.js.snap
@@ -0,0 +1,5 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`Create content digest returns the content digest when the input is a non string 1`] = `"d2ce28b9a7fd7e4407e2b0fd499b7fe4"`;
+
+exports[`Create content digest returns the content digest when the input is a string 1`] = `"d2ce28b9a7fd7e4407e2b0fd499b7fe4"`;
diff --git a/node_modules/gatsby/src/utils/__tests__/__snapshots__/get-hash-fn.js.snap b/node_modules/gatsby/src/utils/__tests__/__snapshots__/get-hash-fn.js.snap
new file mode 100644
index 0000000..c8cd15b
--- /dev/null
+++ b/node_modules/gatsby/src/utils/__tests__/__snapshots__/get-hash-fn.js.snap
@@ -0,0 +1,5 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`Test hashing function default parameters 1`] = `174577032270956`;
+
+exports[`Test hashing function guards against collisions 1`] = `[Error: Hash collision at f(my input) = 174577032270956]`;
diff --git a/node_modules/gatsby/src/utils/__tests__/__snapshots__/prepare-regex.js.snap b/node_modules/gatsby/src/utils/__tests__/__snapshots__/prepare-regex.js.snap
new file mode 100644
index 0000000..47dfbc2
--- /dev/null
+++ b/node_modules/gatsby/src/utils/__tests__/__snapshots__/prepare-regex.js.snap
@@ -0,0 +1,7 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`Prepare regex for Sift.js handles flags regex 1`] = `/blue/i`;
+
+exports[`Prepare regex for Sift.js handles simple regex 1`] = `/blue/`;
+
+exports[`Prepare regex for Sift.js handles slashes 1`] = `/bl\\\\/ue/i`;
diff --git a/node_modules/gatsby/src/utils/__tests__/browserslist.js b/node_modules/gatsby/src/utils/__tests__/browserslist.js
new file mode 100644
index 0000000..f0f7945
--- /dev/null
+++ b/node_modules/gatsby/src/utils/__tests__/browserslist.js
@@ -0,0 +1,31 @@
+jest.mock(`browserslist/node`, () => {
+  return {
+    findConfig: jest.fn(),
+  }
+})
+const path = require(`path`)
+const getBrowsersList = require(`../browserslist`)
+const { findConfig: mockedFindConfig } = require(`browserslist/node`)
+
+const BASE = path.resolve(`.`)
+
+describe(`browserslist`, () => {
+  it(`prefers returned browserslist results`, () => {
+    const defaults = [`IE 11`]
+    mockedFindConfig.mockReturnValueOnce({
+      defaults,
+    })
+
+    const list = getBrowsersList(BASE)
+
+    expect(list).toEqual(defaults)
+  })
+
+  it(`falls back to defaults`, () => {
+    mockedFindConfig.mockReturnValueOnce(undefined)
+
+    const list = getBrowsersList(BASE)
+
+    expect(list).toEqual([`>0.25%`, `not dead`])
+  })
+})
diff --git a/node_modules/gatsby/src/utils/__tests__/cache.js b/node_modules/gatsby/src/utils/__tests__/cache.js
new file mode 100644
index 0000000..85e7c07
--- /dev/null
+++ b/node_modules/gatsby/src/utils/__tests__/cache.js
@@ -0,0 +1,142 @@
+const mockErrorValue = jest.fn()
+const mockResultValue = jest.fn()
+
+jest.mock(`cache-manager`, () => {
+  return {
+    caching: jest.fn(),
+    multiCaching: jest.fn(() => {
+      return {
+        get: jest.fn((key, callback) => {
+          callback(mockErrorValue(), mockResultValue())
+        }),
+        set: jest.fn((key, value, args, callback) => {
+          callback(mockErrorValue())
+        }),
+      }
+    }),
+  }
+})
+jest.mock(`fs-extra`, () => {
+  return {
+    ensureDirSync: jest.fn(),
+  }
+})
+const Cache = require(`../cache`)
+const fs = require(`fs-extra`)
+const manager = require(`cache-manager`)
+
+beforeEach(() => {
+  manager.caching.mockReset()
+  fs.ensureDirSync.mockReset()
+})
+
+const getCache = (options = { name: `__test__` }) => new Cache(options).init()
+
+describe(`cache`, () => {
+  it(`it can be instantiated`, () => {
+    expect(() => new Cache()).not.toThrow()
+  })
+
+  it(`it can swap out cache store`, () => {
+    const store = {
+      custom: true,
+    }
+
+    new Cache({
+      store,
+    }).init()
+
+    expect(manager.caching).toHaveBeenLastCalledWith(
+      expect.objectContaining({
+        store,
+      })
+    )
+  })
+
+  it(`it does not set up cache on instantiation`, () => {
+    expect(manager.caching).not.toHaveBeenCalled()
+  })
+
+  it(`uses MAX_SAFE_INTEGER as TTL`, () => {
+    getCache()
+
+    expect(manager.caching).toHaveBeenCalledWith(
+      expect.objectContaining({
+        options: expect.objectContaining({
+          ttl: Number.MAX_SAFE_INTEGER,
+        }),
+      })
+    )
+  })
+
+  describe(`init`, () => {
+    it(`it contains an init method`, () => {
+      const cache = getCache()
+      expect(cache.init).toEqual(expect.any(Function))
+    })
+
+    it(`it calls ensureDirSync`, () => {
+      const name = `__TEST_CACHE_NAME__`
+      getCache({ name })
+
+      expect(fs.ensureDirSync).toHaveBeenCalledWith(
+        expect.stringContaining(name)
+      )
+    })
+
+    it(`it returns cache instance with get/set methods`, () => {
+      const cache = getCache()
+
+      expect(cache.get).toEqual(expect.any(Function))
+      expect(cache.set).toEqual(expect.any(Function))
+    })
+  })
+
+  describe(`get/set`, () => {
+    it(`both are promises`, () => {
+      const cache = getCache()
+
+      const containsThenMethod = result =>
+        expect(result).toEqual(
+          expect.objectContaining({ then: expect.any(Function) })
+        )
+
+      containsThenMethod(cache.get(`a`))
+      containsThenMethod(cache.set(`a`, `b`))
+    })
+  })
+
+  describe(`set`, () => {
+    it(`resolves to the value it cached`, () => {
+      const cache = getCache()
+
+      return expect(cache.set(`a`, `b`)).resolves.toBe(`b`)
+    })
+
+    it(`resolves to undefined on caching error`, () => {
+      const cache = getCache()
+
+      mockErrorValue.mockReturnValueOnce(true)
+
+      return expect(cache.set(`a`, `b`)).resolves.toBeUndefined()
+    })
+  })
+
+  describe(`get`, () => {
+    it(`resolves to the found value`, () => {
+      const cache = getCache()
+
+      mockResultValue.mockReturnValueOnce(`result`)
+
+      return expect(cache.get()).resolves.toBe(`result`)
+    })
+
+    it(`resolves to undefined on caching error`, () => {
+      const cache = getCache()
+
+      mockErrorValue.mockReturnValueOnce(true)
+
+      return expect(cache.get()).resolves.toBeUndefined()
+    })
+  })
+})
diff --git a/node_modules/gatsby/src/utils/__tests__/create-content-digest.js b/node_modules/gatsby/src/utils/__tests__/create-content-digest.js
new file mode 100644
index 0000000..a6e3d13
--- /dev/null
+++ b/node_modules/gatsby/src/utils/__tests__/create-content-digest.js
@@ -0,0 +1,19 @@
+const createContentDigest = require(`../create-content-digest`)
+
+describe(`Create content digest`, () => {
+  it(`returns the content digest when the input is a string`, () => {
+    const input = JSON.stringify({ id: 1 })
+
+    const contentDigest = createContentDigest(input)
+
+    expect(contentDigest).toMatchSnapshot()
+  })
+
+  it(`returns the content digest when the input is a non string`, () => {
+    const input = { id: 1 }
+
+    const contentDigest = createContentDigest(input)
+
+    expect(contentDigest).toMatchSnapshot()
+  })
+})
diff --git a/node_modules/gatsby/src/utils/__tests__/fixtures/bad-module-require.js b/node_modules/gatsby/src/utils/__tests__/fixtures/bad-module-require.js
new file mode 100644
index 0000000..42322ab
--- /dev/null
+++ b/node_modules/gatsby/src/utils/__tests__/fixtures/bad-module-require.js
@@ -0,0 +1 @@
+require(`cheese`)
diff --git a/node_modules/gatsby/src/utils/__tests__/fixtures/bad-module-syntax.js b/node_modules/gatsby/src/utils/__tests__/fixtures/bad-module-syntax.js
new file mode 100644
index 0000000..47a488c
--- /dev/null
+++ b/node_modules/gatsby/src/utils/__tests__/fixtures/bad-module-syntax.js
@@ -0,0 +1 @@
+7 * a
diff --git a/node_modules/gatsby/src/utils/__tests__/get-cache.js b/node_modules/gatsby/src/utils/__tests__/get-cache.js
new file mode 100644
index 0000000..f1e9ce8
--- /dev/null
+++ b/node_modules/gatsby/src/utils/__tests__/get-cache.js
@@ -0,0 +1,21 @@
+const getCache = require(`../get-cache`)
+
+const CACHE_KEY = `__test__`
+
+test(`it returns a new cache instance`, () => {
+  const cache = getCache(CACHE_KEY)
+
+  expect(cache.get).toEqual(expect.any(Function))
+  expect(cache.set).toEqual(expect.any(Function))
+})
+
+test(`it retrieves already created cache instance`, async () => {
+  const key = `some-value`
+  const value = [`a`, `b`, `c`]
+  const cache = getCache(CACHE_KEY)
+  await cache.set(key, value)
+
+  const other = getCache(CACHE_KEY)
+
+  expect(await other.get(key)).toEqual(value)
+})
diff --git a/node_modules/gatsby/src/utils/__tests__/get-hash-fn.js b/node_modules/gatsby/src/utils/__tests__/get-hash-fn.js
new file mode 100644
index 0000000..a816ed6
--- /dev/null
+++ b/node_modules/gatsby/src/utils/__tests__/get-hash-fn.js
@@ -0,0 +1,16 @@
+const getHashFn = require(`../get-hash-fn`)
+
+describe(`Test hashing function`, () => {
+  it(`default parameters`, () => {
+    const hash = getHashFn({})(`my input`)
+    expect(hash).toMatchSnapshot()
+  })
+  it(`guards against collisions`, () => {
+    const hash = getHashFn({})(`my input`)
+    try {
+      getHashFn({ cache: new Set([hash]) })(`my input`)
+    } catch (err) {
+      expect(err).toMatchSnapshot()
+    }
+  })
+})
diff --git a/node_modules/gatsby/src/utils/__tests__/is-32-bit-integer.js b/node_modules/gatsby/src/utils/__tests__/is-32-bit-integer.js
new file mode 100644
index 0000000..855ba9b
--- /dev/null
+++ b/node_modules/gatsby/src/utils/__tests__/is-32-bit-integer.js
@@ -0,0 +1,21 @@
+const is32BitInteger = require(`../is-32-bit-integer.js`)
+
+const MAX_INT = 2147483647
+const MIN_INT = -2147483648
+
+describe(`is32BitInteger`, () => {
+  it(`works with all kind of values`, () => {
+    expect(is32BitInteger(MAX_INT)).toBe(true)
+    expect(is32BitInteger(MIN_INT)).toBe(true)
+    expect(is32BitInteger(MAX_INT + 1)).toBe(false)
+    expect(is32BitInteger(MIN_INT - 1)).toBe(false)
+    expect(is32BitInteger(2.4)).toBe(false)
+    expect(is32BitInteger(`42`)).toBe(false)
+    expect(is32BitInteger({})).toBe(false)
+    expect(is32BitInteger([1])).toBe(false)
+    expect(is32BitInteger(true)).toBe(false)
+    expect(is32BitInteger(false)).toBe(false)
+    expect(is32BitInteger(undefined)).toBe(false)
+    expect(is32BitInteger(null)).toBe(false)
+  })
+})
diff --git a/node_modules/gatsby/src/utils/__tests__/merge-gatsby-config.js b/node_modules/gatsby/src/utils/__tests__/merge-gatsby-config.js
new file mode 100644
index 0000000..292abd5
--- /dev/null
+++ b/node_modules/gatsby/src/utils/__tests__/merge-gatsby-config.js
@@ -0,0 +1,113 @@
+const mergeGatsbyConfig = require(`../merge-gatsby-config`)
+
+describe(`Merge gatsby config`, () => {
+  it(`Merging empty config is an identity operation`, () => {
+    const emptyConfig = {}
+    const basicConfig = {
+      plugins: [`gatsby-mdx`],
+    }
+
+    expect(mergeGatsbyConfig(basicConfig, emptyConfig)).toEqual(basicConfig)
+    expect(mergeGatsbyConfig(emptyConfig, basicConfig)).toEqual(basicConfig)
+  })
+
+  it(`Merging plugins concatenates them`, () => {
+    const basicConfig = {
+      plugins: [`gatsby-mdx`],
+    }
+    const morePlugins = {
+      plugins: [`a-plugin`, `b-plugin`, { resolve: `c-plugin`, options: {} }],
+    }
+    expect(mergeGatsbyConfig(basicConfig, morePlugins)).toEqual({
+      plugins: [
+        `gatsby-mdx`,
+        `a-plugin`,
+        `b-plugin`,
+        { resolve: `c-plugin`, options: {} },
+      ],
+    })
+    expect(mergeGatsbyConfig(morePlugins, basicConfig)).toEqual({
+      plugins: [
+        `a-plugin`,
+        `b-plugin`,
+        { resolve: `c-plugin`, options: {} },
+        `gatsby-mdx`,
+      ],
+    })
+  })
+
+  it(`Merging plugins uniqs them, keeping the first occurrence`, () => {
+    const basicConfig = {
+      plugins: [`gatsby-mdx`],
+    }
+    const morePlugins = {
+      plugins: [
+        `a-plugin`,
+        `gatsby-mdx`,
+        `b-plugin`,
+        { resolve: `c-plugin`, options: {} },
+      ],
+    }
+    expect(mergeGatsbyConfig(basicConfig, morePlugins)).toEqual({
+      plugins: [
+        `gatsby-mdx`,
+        `a-plugin`,
+        `b-plugin`,
+        { resolve: `c-plugin`, options: {} },
+      ],
+    })
+    expect(mergeGatsbyConfig(morePlugins, basicConfig)).toEqual({
+      plugins: [
+        `a-plugin`,
+        `gatsby-mdx`,
+        `b-plugin`,
+        { resolve: `c-plugin`, options: {} },
+      ],
+    })
+  })
+
+  it(`Merging siteMetadata is recursive`, () => {
+    const a = {
+      siteMetadata: {
+        title: `my site`,
+        something: { else: 1 },
+      },
+    }
+
+    const b = {
+      siteMetadata: {
+        something: { nested: 2 },
+      },
+    }
+
+    expect(mergeGatsbyConfig(a, b)).toEqual({
+      siteMetadata: {
+        title: `my site`,
+        something: { else: 1, nested: 2 },
+      },
+    })
+  })
+
+  it(`Merging proxy is overriden`, () => {
+    const a = {
+      proxy: {
+        prefix: `/something-not/api`,
+        url: `http://examplesite.com/api/`,
+      },
+    }
+
+    const b = {
+      proxy: {
+        prefix: `/api`,
+        url: `http://examplesite.com/api/`,
+      },
+    }
+
+    expect(mergeGatsbyConfig(a, b)).toEqual({
+      proxy: {
+        prefix: `/api`,
+        url: `http://examplesite.com/api/`,
+      },
+    })
+  })
+})
diff --git a/node_modules/gatsby/src/utils/__tests__/path.js b/node_modules/gatsby/src/utils/__tests__/path.js
new file mode 100644
index 0000000..a95ceb9
--- /dev/null
+++ b/node_modules/gatsby/src/utils/__tests__/path.js
@@ -0,0 +1,55 @@
+const { joinPath, withBasePath } = require(`../path`)
+const os = require(`os`)
+
+describe(`paths`, () => {
+  describe(`joinPath`, () => {
+    if (os.platform() !== `win32`) {
+      it(`joins paths like path.join on Unix-type platforms.`, () => {
+        const paths = [`/foo`, `bar`, `baz`]
+        const expected = paths.join(`/`)
+        const actual = joinPath(...paths)
+        expect(actual).toBe(expected)
+      })
+    }
+
+    if (os.platform() === `win32`) {
+      it(`replaces '\\' with '\\\\' on Windows.`, () => {
+        const paths = [`foo`, `bar`, `baz`]
+        const expected = paths.join(`\\\\`)
+        const actual = joinPath(...paths)
+        expect(actual).toBe(expected)
+      })
+    }
+  })
+
+  describe(`withBasePath`, () => {
+    it(`returns a function.`, () => {
+      const withEmptyBasePath = withBasePath(``)
+      const expected = `function`
+      const actual = typeof withEmptyBasePath
+      expect(actual).toBe(expected)
+    })
+
+    if (os.platform() !== `win32`) {
+      it(`behaves like joinPath() on Unix-type platforms, but prepends a basePath`, () => {
+        const basePath = `/foo`
+        const subPath = `bar`
+        const withFooPath = withBasePath(basePath)
+        const expected = `${basePath}/${subPath}`
+        const actual = withFooPath(subPath)
+        expect(actual).toBe(expected)
+      })
+    }
+
+    if (os.platform() === `win32`) {
+      it(`behaves like joinPath() on Windows, but prepends a basePath`, () => {
+        const basePath = `foo`
+        const subPath = `bar`
+        const withFooPath = withBasePath(basePath)
+        const expected = `${basePath}\\\\${subPath}`
+        const actual = withFooPath(subPath)
+        expect(actual).toBe(expected)
+      })
+    }
+  })
+})
diff --git a/node_modules/gatsby/src/utils/__tests__/prepare-regex.js b/node_modules/gatsby/src/utils/__tests__/prepare-regex.js
new file mode 100644
index 0000000..a2327cf
--- /dev/null
+++ b/node_modules/gatsby/src/utils/__tests__/prepare-regex.js
@@ -0,0 +1,56 @@
+const prepareRegex = require(`../prepare-regex`)
+
+describe(`Prepare regex for Sift.js`, () => {
+  it(`handles simple regex`, () => {
+    expect(prepareRegex(`/blue/`)).toMatchSnapshot()
+  })
+
+  it(`handles flags regex`, () => {
+    expect(prepareRegex(`/blue/i`)).toMatchSnapshot()
+  })
+
+  it(`handles slashes`, () => {
+    expect(prepareRegex(`/bl/ue/i`)).toMatchSnapshot()
+  })
+
+  it(`handles escape sequences`, () => {
+    const expected = /^\w+\d{2}\.$/
+    expect(prepareRegex(`/^\\w+\\d{2}\\.$/`)).toEqual(expected)
+  })
+
+  it(`handles regex string passed as graphql arg`, async () => {
+    const {
+      GraphQLSchema,
+      GraphQLObjectType,
+      GraphQLString,
+      graphql,
+    } = require(`graphql`)
+    const QueryType = new GraphQLObjectType({
+      name: `Query`,
+      fields: {
+        regex: {
+          type: GraphQLString,
+          args: {
+            regex: { type: GraphQLString },
+          },
+          resolve: (source, args) => args.regex,
+        },
+      },
+    })
+    const schema = new GraphQLSchema({ query: QueryType })
+    /* prettier-ignore */
+    const results = await graphql(
+      schema,
+      `
+        {
+          regex(regex: "/\\\\w+/")
+        }
+      `
+    )
+    expect(results.errors).toBeUndefined()
+    expect(results.data).toEqual({ regex: `/\\w+/` })
+
+    const expected = /\w+/
+    expect(prepareRegex(results.data.regex)).toEqual(expected)
+  })
+})
diff --git a/node_modules/gatsby/src/utils/__tests__/stack-trace-utils.js b/node_modules/gatsby/src/utils/__tests__/stack-trace-utils.js
new file mode 100644
index 0000000..19ac231
--- /dev/null
+++ b/node_modules/gatsby/src/utils/__tests__/stack-trace-utils.js
@@ -0,0 +1,74 @@
+jest.mock(`stack-trace`, () => {
+  const trace = jest.requireActual(`stack-trace`)
+  return {
+    ...trace,
+    get: jest.fn(),
+  }
+})
+jest.mock(`fs-extra`, () => {
+  const fs = jest.requireActual(`fs-extra`)
+  return {
+    ...fs,
+    readFileSync: jest.fn(),
+  }
+})
+const trace = require(`stack-trace`)
+const fs = require(`fs-extra`)
+const path = require(`path`)
+const { getNonGatsbyCodeFrame } = require(`../stack-trace-utils`)
+
+beforeEach(() => {
+  trace.get.mockClear()
+  fs.readFileSync.mockClear()
+})
+
+const setup = ({ columnNumber, fileName, lineNumber }, code = ``) => {
+  const stack = {
+    getFileName: jest.fn(() => fileName),
+    getLineNumber: jest.fn(() => lineNumber),
+    getColumnNumber: jest.fn(() => columnNumber),
+  }
+
+  trace.get.mockReturnValueOnce([stack])
+  fs.readFileSync.mockReturnValueOnce(code)
+
+  return getNonGatsbyCodeFrame({ highlightCode: false })
+}
+
+describe(`ignores gatsby stack traces`, () => {
+  it(`returns null if gatsby code path`, () => {
+    expect(
+      setup({ fileName: path.dirname(require.resolve(`gatsby/package.json`)) })
+    ).toBe(null)
+  })
+})
+
+describe(`formatting of error messages`, () => {
+  it(`invokes readFileSync with fileName`, () => {
+    const fileName = `gatsby-node.js`
+
+    setup({ fileName })
+
+    expect(fs.readFileSync).toHaveBeenCalledWith(fileName, expect.any(Object))
+  })
+
+  it(`displays lineNumber, columnNumber, and fileName`, () => {
+    const fileName = `gatsby-node.js`
+    const lineNumber = 0
+    const columnNumber = 5
+    const code = `exports.createPages = {}`
+    const err = setup({ fileName, lineNumber, columnNumber }, code)
+
+    expect(err).toContain([fileName, lineNumber, columnNumber].join(`:`))
+  })
+
+  it(`displays code snippet`, () => {
+    const fileName = `gatsby-node.js`
+    const lineNumber = 0
+    const columnNumber = 5
+    const code = `exports.createPages = {}`
+    const err = setup({ fileName, lineNumber, columnNumber }, code)
+
+    expect(err).toContain(code)
+  })
+})
diff --git a/node_modules/gatsby/src/utils/__tests__/test-require-error.js b/node_modules/gatsby/src/utils/__tests__/test-require-error.js
new file mode 100644
index 0000000..4ba91ae
--- /dev/null
+++ b/node_modules/gatsby/src/utils/__tests__/test-require-error.js
@@ -0,0 +1,40 @@
+const testRequireError = require(`../test-require-error`).default
+
+describe(`test-require-error`, () => {
+  it(`detects require errors`, () => {
+    try {
+      require(`./fixtures/module-does-not-exist`)
+    } catch (err) {
+      expect(testRequireError(`./fixtures/module-does-not-exist`, err)).toEqual(
+        true
+      )
+    }
+  })
+  it(`detects require errors when using windows path`, () => {
+    try {
+      require(`.\\fixtures\\module-does-not-exist`)
+    } catch (err) {
+      expect(
+        testRequireError(`.\\fixtures\\module-does-not-exist`, err)
+      ).toEqual(true)
+    }
+  })
+  it(`Only returns true on not found errors for actual module not "not found" errors of requires inside the module`, () => {
+    try {
+      require(`./fixtures/bad-module-require`)
+    } catch (err) {
+      expect(testRequireError(`./fixtures/bad-module-require`, err)).toEqual(
+        false
+      )
+    }
+  })
+  it(`ignores other errors`, () => {
+    try {
+      require(`./fixtures/bad-module-syntax`)
+    } catch (err) {
+      expect(testRequireError(`./fixtures/bad-module-syntax`, err)).toEqual(
+        false
+      )
+    }
+  })
+})
diff --git a/node_modules/gatsby/src/utils/__tests__/webpack-utils.js b/node_modules/gatsby/src/utils/__tests__/webpack-utils.js
new file mode 100644
index 0000000..ba60651
--- /dev/null
+++ b/node_modules/gatsby/src/utils/__tests__/webpack-utils.js
@@ -0,0 +1,29 @@
+const utils = require(`../webpack-utils`)
+
+let config
+beforeAll(async () => {
+  config = await utils({
+    stage: `develop`,
+    program: {
+      browserslist: [],
+    },
+  })
+})
+
+describe(`webpack utils`, () => {
+  describe(`mjs`, () => {
+    it(`adds .mjs rule`, () => {
+      expect(config.rules.mjs).toEqual(expect.any(Function))
+    })
+
+    it(`returns correct rule`, () => {
+      const rule = config.rules.mjs()
+
+      expect(rule).toEqual({
+        include: /node_modules/,
+        test: /\.mjs$/,
+        type: `javascript/auto`,
+      })
+    })
+  })
+})
diff --git a/node_modules/gatsby/src/utils/__tests__/webpack.config.js b/node_modules/gatsby/src/utils/__tests__/webpack.config.js
new file mode 100644
index 0000000..4b7b18b
--- /dev/null
+++ b/node_modules/gatsby/src/utils/__tests__/webpack.config.js
@@ -0,0 +1,115 @@
+jest.mock(`webpack`, () => {
+  return {
+    ...jest.requireActual(`webpack`),
+    DefinePlugin: jest.fn(),
+  }
+})
+jest.mock(`fs-extra`, () => {
+  const { readFileSync, ...rest } = jest.requireActual(`fs-extra`)
+  return {
+    ...rest,
+    readFileSync: jest
+      .fn()
+      .mockImplementation((...args) => readFileSync(...args)),
+  }
+})
+const { DefinePlugin } = require(`webpack`)
+const { readFileSync } = require(`fs-extra`)
+const webpackConfig = require(`../webpack.config`)
+const { store } = require(`../../redux`)
+
+beforeEach(() => {
+  DefinePlugin.mockClear()
+  readFileSync.mockClear()
+  store.dispatch({
+    type: `SET_PROGRAM`,
+    payload: {
+      extensions: [],
+      browserslist: [],
+      directory: process.cwd(),
+    },
+  })
+})
+
+const getConfig = (args = {}) =>
+  webpackConfig(
+    {
+      extensions: [`.js`],
+    },
+    process.cwd(),
+    `build-html`
+  )
+
+describe(`basic functionality`, () => {
+  it(`returns webpack config with expected shape`, async () => {
+    const config = await getConfig()
+
+    expect(config).toEqual(
+      expect.objectContaining(
+        [`context`, `entry`, `output`, `module`, `plugins`, `resolve`].reduce(
+          (merged, key) => {
+            merged[key] = expect.anything()
+            return merged
+          },
+          {}
+        )
+      )
+    )
+  })
+})
+
+describe(`environment variables`, () => {
+  afterEach(() => {
+    delete process.env.GATSBY_ACTIVE_ENV
+  })
+
+  it(`sanitizes process.env variables`, async () => {
+    await getConfig()
+
+    expect(DefinePlugin).toHaveBeenCalledWith(
+      expect.objectContaining({
+        "process.env": `{}`,
+      })
+    )
+  })
+
+  it(`provides expected variables`, async () => {
+    await getConfig()
+
+    expect(DefinePlugin).toHaveBeenCalledWith(
+      expect.objectContaining(
+        [
+          `__PATH_PREFIX__`,
+          `process.env.BUILD_STAGE`,
+          `process.env.GATSBY_BUILD_STAGE`,
+          `process.env.NODE_ENV`,
+          `process.env.PUBLIC_DIR`,
+        ].reduce((merged, key) => {
+          merged[key] = expect.anything()
+          return merged
+        }, {})
+      )
+    )
+  })
+
+  describe(`env var overriding`, () => {
+    it(`allows for GATSBY_ACTIVE_ENV override`, async () => {
+      process.env.GATSBY_ACTIVE_ENV = `staging`
+      await getConfig()
+
+      expect(readFileSync).toHaveBeenCalledWith(
+        expect.stringContaining(`.env.staging`),
+        expect.anything()
+      )
+    })
+
+    it(`falls back to NODE_ENV`, async () => {
+      await getConfig()
+
+      expect(readFileSync).toHaveBeenCalledWith(
+        expect.stringContaining(`.env.${process.env.NODE_ENV}`),
+        expect.anything()
+      )
+    })
+  })
+})
diff --git a/node_modules/gatsby/src/utils/api-browser-docs.js b/node_modules/gatsby/src/utils/api-browser-docs.js
new file mode 100644
index 0000000..4cf2cc6
--- /dev/null
+++ b/node_modules/gatsby/src/utils/api-browser-docs.js
@@ -0,0 +1,235 @@
+/**
+ * Called when the Gatsby browser runtime first starts.
+ * @example
+ * exports.onClientEntry = () => {
+ *   console.log("We've started!")
+ *   callAnalyticsAPI()
+ * }
+ */
+exports.onClientEntry = true
+
+/**
+ * Called when the initial (but not subsequent) render of Gatsby App is done on the client.
+ * @example
+ * exports.onInitialClientRender = () => {
+ *   console.log("ReactDOM.render has executed")
+ * }
+ */
+exports.onInitialClientRender = true
+
+/**
+ * Called when changing location is started.
+ * @param {object} $0
+ * @param {object} $0.location A location object
+ * @param {object|null} $0.prevLocation The previous location object
+ * @example
+ * exports.onPreRouteUpdate = ({ location, prevLocation }) => {
+ *   console.log("Gatsby started to change location to", location.pathname)
+ *   console.log("Gatsby started to change location from", prevLocation ? prevLocation.pathname : null)
+ * }
+ */
+exports.onPreRouteUpdate = true
+
+/**
+ * Called when changing location is longer than 1 second.
+ * @param {object} $0
+ * @param {object} $0.location A location object
+ * @param {object} $0.action The "action" that caused the route change
+ * @example
+ * exports.onRouteUpdateDelayed = () => {
+ *   console.log("We can show loading indicator now")
+ * }
+ */
+exports.onRouteUpdateDelayed = true
+
+/**
+ * Called when the user changes routes
+ * @param {object} $0
+ * @param {object} $0.location A location object
+ * @param {object|null} $0.prevLocation The previous location object
+ * @example
+ * exports.onRouteUpdate = ({ location, prevLocation }) => {
+ *   console.log('new pathname', location.pathname)
+ *   console.log('old pathname', prevLocation ? prevLocation.pathname : null)
+ *
+ *   // Track pageview with google analytics
+ *   window.ga(
+ *     `set`,
+ *     `page`,
+ *     location.pathname + location.search + location.hash,
+ *   )
+ *   window.ga(`send`, `pageview`)
+ * }
+ */
+exports.onRouteUpdate = true
+
+/**
+ * Allow a plugin to decide if the scroll position should update or
+ * not on a route change.
+ * @param {object} $0
+ * @param {object} $0.prevRouterProps The previous state of the router before the route change.
+ * @param {object} $0.routerProps The current state of the router.
+ * @param {string} $0.pathname The new pathname (for backwards compatibility with v1).
+ * @param {function} $0.getSavedScrollPosition Takes a location and returns the
+ * coordinates of the last scroll position for that location, or `null`. Gatsby
+ * saves scroll positions for each route in `SessionStorage`, so they are
+ * available after page reload.
+ * @returns {(boolean|string|Array)} Should return either an [x, y] Array of
+ * coordinates to scroll to, a string of the `id` or `name` of an element to
+ * scroll to, `false` to not update the scroll position, or `true` for the
+ * default behavior.
+ * @example
+ * exports.shouldUpdateScroll = ({
+ *   routerProps: { location },
+ *   getSavedScrollPosition
+ * }) => {
+ *   const currentPosition = getSavedScrollPosition(location)
+ *   const queriedPosition = getSavedScrollPosition({ pathname: `/random` })
+ *
+ *   window.scrollTo(...(currentPosition || [0, 0]))
+ *
+ *   return false
+ * }
+ */
+exports.shouldUpdateScroll = true
+
+/**
+ * Allow a plugin to register a Service Worker. Should be a function that returns true.
+ * @example
+ * exports.registerServiceWorker = () => true
+ */
+exports.registerServiceWorker = true
+
+/**
+ * Allow a plugin to replace the page component renderer. This api runner can be used to
+ * implement page transitions. See https://github.com/gatsbyjs/gatsby/tree/master/examples/using-page-transitions for an example of this.
+ * @param {object} $0
+ * @param {object} $0.props The props of the page.
+ * @param {object} $0.loader The gatsby loader.
+ */
+exports.replaceComponentRenderer = true
+
+/**
+ * Allow a plugin to wrap the page element.
+ *
+ * This is useful for setting wrapper component around pages that won't get
+ * unmounted on page change. For setting Provider components use [wrapRootElement](#wrapRootElement).
+ *
+ * _Note:_ [There is equivalent hook in SSR API](/docs/ssr-apis/#wrapPageElement)
+ * @param {object} $0
+ * @param {ReactNode} $0.element The "Page" React Element built by Gatsby.
+ * @param {object} $0.props Props object used by page.
+ * @example
+ * import React from "react"
+ * import Layout from "./src/components/layout"
+ *
+ * export const wrapPageElement = ({ element, props }) => {
+ *   // props provide same data to Layout as Page element will get
+ *   // including location, data, etc - you don't need to pass it
+ *   return <Layout {...props}>{element}</Layout>
+ * }
+ */
+exports.wrapPageElement = true
+
+/**
+ * Allow a plugin to wrap the root element.
+ *
+ * This is useful to setup any Providers component that will wrap your application.
+ * For setting persistent UI elements around pages use [wrapPageElement](#wrapPageElement).
+ *
+ * _Note:_ [There is equivalent hook in SSR API](/docs/ssr-apis/#wrapRootElement)
+ * @param {object} $0
+ * @param {ReactNode} $0.element The "Root" React Element built by Gatsby.
+ * @example
+ * import React from "react"
+ * import { Provider } from "react-redux"
+ *
+ * import createStore from "./src/state/createStore"
+ * const store = createStore()
+ *
+ * export const wrapRootElement = ({ element }) => {
+ *   return (
+ *     <Provider store={store}>
+ *       {element}
+ *     </Provider>
+ *   )
+ * }
+ */
+exports.wrapRootElement = true
+
+/**
+ * Called when prefetching for a pathname is triggered. Allows
+ * for plugins with custom prefetching logic.
+ * @param {object} $0
+ * @param {string} $0.pathname The pathname whose resources should now be prefetched
+ * @param {function} $0.getResourcesForPathname Function for fetching resources related to pathname
+ */
+exports.onPrefetchPathname = true
+
+/**
+ * Called when prefetching for a pathname is successful. Allows
+ * for plugins with custom prefetching logic.
+ * @param {object} $0
+ * @param {string} $0.path The pathname whose resources have now been prefetched
+ * @param {resourceUrls} $0.resourceUrls An array of resource URLs that have been prefetched for this path
+ * @param {function} $0.getResourceURLsForPathname Function for fetching URLs for resources related to the pathname
+ */
+exports.onPostPrefetch = true
+
+/**
+ * Plugins can take over prefetching logic. If they do, they should call this
+ * to disable the now duplicate core prefetching logic.
+ * @example
+ * exports.disableCorePrefetching = () => true
+ */
+exports.disableCorePrefetching = true
+
+/**
+ * Allow a plugin to replace the ReactDOM.render function call by a custom renderer.
+ * This method takes no param and should return a function with same signature as ReactDOM.render()
+ * Note it's very important to call the callback after rendering, otherwise Gatsby will not be able to call `onInitialClientRender`
+ * @example
+ * exports.replaceHydrateFunction = () => {
+ *   return (element, container, callback) => {
+ *     console.log("rendering!");
+ *     ReactDOM.render(element, container, callback);
+ *   };
+ * };
+ */
+exports.replaceHydrateFunction = true
+
+/**
+ * Inform plugins when a service worker has been installed.
+ * @param {object} $0
+ * @param {object} $0.serviceWorker The service worker instance.
+ */
+exports.onServiceWorkerInstalled = true
+
+/**
+ * Inform plugins of when a service worker has an update available.
+ * @param {object} $0
+ * @param {object} $0.serviceWorker The service worker instance.
+ */
+exports.onServiceWorkerUpdateFound = true
+
+/**
+ * Inform plugins when a service worker has been updated in the background
+ * and the page is ready to reload to apply changes.
+ * @param {object} $0
+ * @param {object} $0.serviceWorker The service worker instance.
+ */
+exports.onServiceWorkerUpdateReady = true
+
+/**
+ * Inform plugins when a service worker has become active.
+ * @param {object} $0
+ * @param {object} $0.serviceWorker The service worker instance.
+ */
+exports.onServiceWorkerActive = true
+
+/**
+ * Inform plugins when a service worker is redundant.
+ * @param {object} $0
+ * @param {object} $0.serviceWorker The service worker instance.
+ */
+exports.onServiceWorkerRedundant = true
diff --git a/node_modules/gatsby/src/utils/api-node-docs.js b/node_modules/gatsby/src/utils/api-node-docs.js
new file mode 100644
index 0000000..8b778d8
--- /dev/null
+++ b/node_modules/gatsby/src/utils/api-node-docs.js
@@ -0,0 +1,362 @@
+/**
+ * Lets plugins implementing support for other compile-to-js add to the list
+ * of "resolvable" file extensions. Gatsby supports `.js` and `.jsx` by default.
+ * @returns {Array<string>} array of extensions
+ */
+exports.resolvableExtensions = true
+
+/**
+ * Tell plugins to add pages. This extension point is called only after the initial
+ * sourcing and transformation of nodes plus creation of the GraphQL schema are
+ * complete so you can query your data in order to create pages.
+ *
+ * See also [the documentation for the action `createPage`](/docs/actions/#createPage).
+ * @example
+ * const path = require(`path`)
+ *
+ * exports.createPages = ({ graphql, actions }) => {
+ *   const { createPage } = actions
+ *   const blogPostTemplate = path.resolve(`src/templates/blog-post.js`)
+ *   // Query for markdown nodes to use in creating pages.
+ *   // You can query for whatever data you want to create pages for e.g.
+ *   // products, portfolio items, landing pages, etc.
+ *   return graphql(`
+ *     {
+ *       allMarkdownRemark(limit: 1000) {
+ *         edges {
+ *           node {
+ *             fields {
+ *               slug
+ *             }
+ *           }
+ *         }
+ *       }
+ *     }
+ *   `).then(result => {
+ *     if (result.errors) {
+ *       throw result.errors
+ *     }
+ *
+ *     // Create blog post pages.
+ *     result.data.allMarkdownRemark.edges.forEach(edge => {
+ *       createPage({
+ *         // Path for this page — required
+ *         path: `${edge.node.fields.slug}`,
+ *         component: blogPostTemplate,
+ *         context: {
+ *           // Add optional context data to be inserted
+ *           // as props into the page component..
+ *           //
+ *           // The context data can also be used as
+ *           // arguments to the page GraphQL query.
+ *           //
+ *           // The page "path" is always available as a GraphQL
+ *           // argument.
+ *         },
+ *       })
+ *     })
+ *   })
+ * }
+ */
+
+exports.createPages = true
+
+/**
+ * Like `createPages` but for plugins who want to manage creating and removing
+ * pages themselves in response to changes in data *not* managed by Gatsby.
+ * Plugins implementing `createPages` will get called regularly to recompute
+ * page information as Gatsby's data changes but those implementing
+ * `createPagesStatefully` will not.
+ *
+ * An example of a plugin that uses this extension point is the plugin
+ * [gatsby-plugin-page-creator](https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-page-creator)
+ * which monitors the `src/pages` directory for the adding and removal of JS
+ * pages. As its source of truth, files in the pages directory, is not known by
+ * Gatsby, it needs to keep its own state about its world to know when to
+ * add and remove pages.
+ */
+exports.createPagesStatefully = true
+
+/**
+ * Extension point to tell plugins to source nodes. This API is called during
+ * the Gatsby bootstrap sequence. Source plugins use this hook to create nodes.
+ * This API is called exactly once per plugin (and once for your site's
+ * `gatsby-config.js` file). If you define this hook in `gatsby-node.js` it
+ * will be called exactly once after all of your source plugins have finished
+ * creating nodes.
+ *
+ * See also the documentation for [`createNode`](/docs/actions/#createNode).
+ * @example
+ * exports.sourceNodes = ({ actions, createNodeId, createContentDigest }) => {
+ *   const { createNode } = actions
+ *
+ *   // Data can come from anywhere, but for now create it manually
+ *   const myData = {
+ *     key: 123,
+ *     foo: `The foo field of my node`,
+ *     bar: `Baz`
+ *   }
+ *
+ *   const nodeContent = JSON.stringify(myData)
+ *
+ *   const nodeMeta = {
+ *     id: createNodeId(`my-data-${myData.key}`),
+ *     parent: null,
+ *     children: [],
+ *     internal: {
+ *       type: `MyNodeType`,
+ *       mediaType: `text/html`,
+ *       content: nodeContent,
+ *       contentDigest: createContentDigest(myData)
+ *     }
+ *   }
+ *
+ *   const node = Object.assign({}, myData, nodeMeta)
+ *   createNode(node)
+ * }
+ */
+exports.sourceNodes = true
+
+/**
+ * Called when a new node is created. Plugins wishing to extend or
+ * transform nodes created by other plugins should implement this API.
+ *
+ * See also the documentation for [`createNode`](/docs/actions/#createNode)
+ * and [`createNodeField`](/docs/actions/#createNodeField)
+ * @example
+ * exports.onCreateNode = ({ node, actions }) => {
+ *   const { createNode, createNodeField } = actions
+ *   // Transform the new node here and create a new node or
+ *   // create a new node field.
+ * }
+ */
+exports.onCreateNode = true
+
+/**
+ * Called when a new page is created. This extension API is useful
+ * for programmatically manipulating pages created by other plugins e.g.
+ * if you want paths without trailing slashes.
+ *
+ * See the guide [Creating and Modifying Pages](/docs/creating-and-modifying-pages/)
+ * for more on this API.
+ */
+exports.onCreatePage = true
+
+/**
+ * Called during the creation of the GraphQL schema. Allows plugins
+ * to add new fields to the types created from data nodes. It will be called
+ * separately for each type.
+ *
+ * This function should return an object in the shape of
+ * [GraphQLFieldConfigMap](https://graphql.org/graphql-js/type/#graphqlobjecttype)
+ * which will be appended to fields inferred by Gatsby from data nodes.
+ *
+ * *Note:* Import GraphQL types from `gatsby/graphql` and don't add the `graphql`
+ * package to your project/plugin dependencies to avoid `Schema must
+ * contain unique named types but contains multiple types named` errors.
+ * `gatsby/graphql` exports all builtin GraphQL types as well as the `graphQLJSON`
+ * type.
+ *
+ * Many transformer plugins use this to add fields that take arguments.
+ *
+ * * [`gatsby-transformer-remark`](/packages/gatsby-transformer-remark/)
+ * adds an "excerpt" field where the user when writing their query can specify
+ * how many characters to prune the markdown source to.
+ * * [`gatsby-transformer-sharp`](/packages/gatsby-transformer-sharp/) exposes
+ * many image transformation options as GraphQL fields.
+ *
+ * @param {object} $0
+ * @param {object} $0.type Object containing `name` and `nodes`
+ * @example
+ * import { GraphQLString } from "gatsby/graphql"
+ *
+ * exports.setFieldsOnGraphQLNodeType = ({ type }) => {
+ *   if (type.name === `File`) {
+ *     return {
+ *       newField: {
+ *         type: GraphQLString,
+ *         args: {
+ *           myArgument: {
+ *             type: GraphQLString,
+ *           }
+ *         },
+ *         resolve: (source, fieldArgs) => {
+ *           return `Id of this node is ${source.id}.
+ *                   Field was called with argument: ${fieldArgs.myArgument}`
+ *         }
+ *       }
+ *     }
+ *   }
+ *
+ *   // by default return empty object
+ *   return {}
+ * }
+ */
+exports.setFieldsOnGraphQLNodeType = true
+
+/**
+ * Add custom field resolvers to the GraphQL schema.
+ *
+ * Allows adding new fields to types by providing field configs, or adding resolver
+ * functions to existing fields.
+ *
+ * Things to note:
+ * * Overriding field types is disallowed, instead use the `createTypes`
+ *   action. In case of types added from third-party schemas, where this is not
+ *   possible, overriding field types is allowed.
+ * * New fields will not be available on `filter` and `sort` input types. Extend
+ *   types defined with `createTypes` if you need this.
+ * * In field configs, types can be referenced as strings.
+ * * When extending a field with an existing field resolver, the original
+ *   resolver function is available from `info.originalResolver`.
+ * * The `createResolvers` API is called as the last step in schema generation.
+ *   Thus, an intermediate schema is made available on the `schema` property.
+ *   In resolver functions themselves, it is recommended to access the final
+ *   built schema from `info.schema`.
+ * * Gatsby's data layer, including all internal query capabilities, is
+ *   exposed on [`context.nodeModel`](/docs/node-model/). The node store can be
+ *   queried directly with `getAllNodes`, `getNodeById` and `getNodesByIds`,
+ *   while more advanced queries can be composed with `runQuery`. Note that
+ *   `runQuery` will call field resolvers before querying, so e.g. foreign-key
+ *   fields will be expanded to full nodes. The other methods on `nodeModel`
+ *   don't do this.
+ * * It is possible to add fields to the root `Query` type.
+ * * When using the first resolver argument (`source` in the example below,
+ *   often also called `parent` or `root`), take care of the fact that field
+ *   resolvers can be called more than once in a query, e.g. when the field is
+ *   present both in the input filter and in the selection set. This means that
+ *   foreign-key fields on `source` can be either resolved or not-resolved.
+ *
+ * For fuller examples, see [`using-type-definitions`](https://github.com/gatsbyjs/gatsby/tree/master/examples/using-type-definitions).
+ *
+ * @param {object} $0
+ * @param {GraphQLSchema} $0.schema Current GraphQL schema
+ * @param {function} $0.createResolvers Add custom resolvers to GraphQL field configs
+ * @param {object} $1
+ * @param {object} $1.resolvers Resolvers from plugin options in `gatsby-config.js`.
+ * @example
+ * exports.createResolvers = ({ createResolvers }) => {
+ *   const resolvers = {
+ *     Author: {
+ *       fullName: {
+ *         resolve: (source, args, context, info) => {
+ *           return source.firstName + source.lastName
+ *         }
+ *       },
+ *     },
+ *     Query: {
+ *       allRecentPosts: {
+ *         type: [`BlogPost`]
+ *         resolve: (source, args, context, info) => {
+ *           const posts = context.nodeModel.getAllNodes({ type: `BlogPost` })
+ *           const recentPosts = posts.filter(
+ *             post => post.publishedAt > Date.UTC(2018, 0, 1)
+ *           )
+ *           return recentPosts
+ *         }
+ *       }
+ *     }
+ *   }
+ *   createResolvers(resolvers)
+ * }
+ */
+exports.createResolvers = true
+
+/**
+ * Ask compile-to-js plugins to process source to JavaScript so the query
+ * runner can extract out GraphQL queries for running.
+ */
+exports.preprocessSource = true
+
+/**
+ * Tell plugins with expensive "side effects" from queries to start running
+ * those now. This is a soon-to-be-replaced API only currently in use by
+ * `gatsby-plugin-sharp`.
+ */
+exports.generateSideEffects = true
+
+/**
+ * Let plugins extend/mutate the site's Babel configuration.
+ * This API will change before 2.0 as it needs still to be converted to use
+ * Redux actions.
+ */
+exports.onCreateBabelConfig = true
+
+/**
+ * Let plugins extend/mutate the site's webpack configuration.
+ *
+ * See also the documentation for [`setWebpackConfig`](/docs/actions/#setWebpackConfig).
+ *
+ * @param {object} $0
+ * @param {string} $0.stage The current build stage. One of 'develop', 'develop-html',
+ * 'build-javascript', or 'build-html'
+ * @param {function} $0.getConfig Returns the current webpack config
+ * @param {object} $0.rules A set of preconfigured webpack config rules
+ * @param {object} $0.loaders A set of preconfigured webpack config loaders
+ * @param {object} $0.plugins A set of preconfigured webpack config plugins
+ * @param {object} $0.actions
+ * @example
+ * exports.onCreateWebpackConfig = ({
+ *  stage, getConfig, rules, loaders, actions
+ * }) => {
+ *   actions.setWebpackConfig({
+ *     module: {
+ *       rules: [
+ *         {
+ *           test: 'my-css',
+ *           use: [loaders.style(), loaders.css()]
+ *         },
+ *       ],
+ *     },
+ *   });
+ * }
+ */
+exports.onCreateWebpackConfig = true
+
+/**
+ * The first API called during Gatsby execution, runs as soon as plugins are loaded, before cache initialization and bootstrap preparation.
+ */
+exports.onPreInit = true
+
+/**
+ * Called once Gatsby has initialized itself and is ready to bootstrap your site.
+ */
+exports.onPreBootstrap = true
+
+/**
+ * Called at the end of the bootstrap process after all other extension APIs have been called.
+ */
+exports.onPostBootstrap = true
+
+/**
+ * The first extension point called during the build process. Called after the bootstrap has completed but before the build steps start.
+ */
+exports.onPreBuild = true
+
+/**
+ * The last extension point called after all other parts of the build process
+ * are complete.
+ */
+exports.onPostBuild = true
+
+/**
+ * Run before GraphQL queries/fragments are extracted from JavaScript files. Useful for plugins
+ * to add more JavaScript files with queries/fragments e.g. from node_modules.
+ *
+ * See gatsby-transformer-sharp and gatsby-source-contentful for examples.
+ */
+exports.onPreExtractQueries = true
+
+/**
+ * Run when gatsby develop server is started, its useful to add proxy and middleware
+ * to the dev server app
+ * @param {object} $0
+ * @param {Express} $0.app The [Express app](https://expressjs.com/en/4x/api.html#app) used to run the dev server
+ * @example
+ * exports.onCreateDevServer = ({ app }) => {
+ *   app.get('/hello', function (req, res) {
+ *     res.send('hello world')
+ *   })
+ * }
+ */
+exports.onCreateDevServer = true
diff --git a/node_modules/gatsby/src/utils/api-node-helpers-docs.js b/node_modules/gatsby/src/utils/api-node-helpers-docs.js
new file mode 100644
index 0000000..56230e9
--- /dev/null
+++ b/node_modules/gatsby/src/utils/api-node-helpers-docs.js
@@ -0,0 +1,299 @@
+/* eslint-disable no-unused-vars */
+
+/** */
+const GatsbyReporter = {
+  /**
+   * @callback GatsbyReporterFn
+   * @param {string} message Message to display
+   * @returns {void}
+   */
+
+  /**
+   * @callback GatsbyReporterFnWithError
+   * @param {string} message Message to display
+   * @param {Error}[error] Optional error object
+   * @returns {void}
+   */
+
+  /**
+   * @type {GatsbyReporterFn}
+   * @example
+   * reporter.info(`text`)
+   */
+  info: true,
+
+  /**
+   * @type {GatsbyReporterFn}
+   * @example
+   * reporter.warn(`text`)
+   */
+  warn: true,
+
+  /**
+   * @type {GatsbyReporterFnWithError}
+   * @example
+   * reporter.error(`text`, new Error('something'))
+   */
+  error: true,
+
+  /**
+   * @type {GatsbyReporterFnWithError}
+   * @example
+   * reporter.panic(`text`, new Error('something'))
+   */
+  panic: true,
+
+  /**
+   * @type {GatsbyReporterFnWithError}
+   * @example
+   * reporter.panicOnBuild(`text`, new Error('something'))
+   */
+  panicOnBuild: true,
+};
+
+/** */
+const GatsbyCache = {
+  /**
+   * Retrieve cached value
+   * @param {string} key Cache key
+   * @returns {Promise<any>} Promise resolving to cached value
+   * @example
+   * const value = await cache.get(`unique-key`)
+   */
+  get: true,
+
+  /**
+   * Cache value
+   * @param {string} key Cache key
+   * @param {any} value Value to be cached
+   * @returns {Promise<any>} Promise resolving to cached value
+   * @example
+   * await cache.set(`unique-key`, value)
+   */
+  set: true,
+};
+
+/** */
+const GatsbyTracing = {
+  /**
+   * Global tracer instance. Check
+   * [opentracing Tracer documentation](https://opentracing-javascript.surge.sh/classes/tracer.html)
+   * for more details.
+   * @type {Opentracing.Tracer}
+   */
+  tracer: true,
+
+  /**
+   * Tracer span representing API run. Check
+   * [opentracing Span documentation](https://opentracing-javascript.surge.sh/classes/span.html)
+   * for more details.
+   * @type {Opentracing.Span}
+   */
+  parentSpan: true,
+
+  /**
+   * @callback GatsbyTracing.StartSpan
+   * @param {string} spanName name of the span
+   * @returns {Opentracing.Span}
+   */
+
+  /**
+   * Start a tracing span. The span will be created as a child of the currently
+   * running API span. This is a convenience wrapper for
+   * ```js
+   * tracing.tracer.startSpan(`span-name`, { childOf: tracing.parentSpan}).
+   * ```
+   * @type {GatsbyTracing.StartSpan}
+   * @example
+   * exports.sourceNodes = async ({ actions, tracing }) => {
+   *   const span = tracing.startSpan(`foo`)
+   *
+   *   // Perform any span operations. E.g add a tag to your span
+   *   span.setTag(`bar`, `baz`)
+   *
+   *   // Rest of your plugin code
+   *
+   *   span.finish()
+   * }
+   */
+  startSpan: true,
+};
+
+/** */
+const GatsbyNodeHelpers = {
+  /**
+   * Key-value store used to persist results of time/memory/cpu intensive
+   * tasks. All functions are async and return promises.
+   * @type {GatsbyCache}
+   */
+  cache: true,
+
+  /**
+   * Get cache instance by name - this should only be used by plugins that
+   * accept subplugins.
+   * @param {string} id Test
+   * @returns {GatsbyCache} See [`cache`](#cache) section for reference.
+   */
+  getCache: true,
+
+  /**
+   * Create a stable content digest from a string or object, you can use the
+   * result of this function to set the `internal.contentDigest` field
+   * on nodes. Gatsby uses the value of this field to invalidate stale data
+   * when your content changes.
+   * @param {(string|object)} input
+   * @returns {string} Hash string
+   * @example
+   * const node = {
+   *   ...nodeData,
+   *   internal: {
+   *     type: `TypeOfNode`,
+   *     contentDigest: createContentDigest(nodeData)
+   *   }
+   * }
+   */
+  createContentDigest: true,
+
+  /**
+   * Collection of functions used to programmatically modify Gatsby’s internal state.
+   *
+   * See [`actions`](/docs/actions/) reference.
+   * @type {Actions}
+   * @deprecated Will be removed in gatsby 3.0. Use [actions](#actions)
+   * instead.
+   */
+  boundActionCreators: true,
+
+  /**
+   * Collection of functions used to programmatically modify Gatsby’s internal state.
+   *
+   * See [`actions`](/docs/actions/) reference.
+   * @type {Actions}
+   */
+  actions: true,
+
+  /**
+   * Get content for a node from the plugin that created it.
+   * @param {Node} node
+   * @returns {Promise<string>}
+   * @example
+   * module.exports = async function onCreateNode(
+   *   { node, loadNodeContent, actions, createNodeId }
+   * ) {
+   *   if (node.internal.mediaType === 'text/markdown') {
+   *     const { createNode, createParentChildLink } = actions
+   *     const textContent = await loadNodeContent(node)
+   *     // process textContent and create child nodes
+   *   }
+   * }
+   */
+  loadNodeContent: true,
+
+  /**
+   * Internal redux state used for application state. Do not use, unless you
+   * absolutely must. Store is considered a private API and can change with
+   * any version.
+   * @type {Redux.Store}
+   */
+  store: true,
+
+  /**
+   * Internal event emitter / listener.  Do not use, unless you absolutely
+   * must. Emitter is considered a private API and can change with any version.
+   * @type {Emitter}
+   */
+  emitter: true,
+
+  /**
+   * Get array of all nodes.
+   * @returns {Node[]} Array of nodes.
+   * @example
+   * const allNodes = getNodes()
+   */
+  getNodes: true,
+
+  /**
+   * Get single node by given ID.
+   * Don't use this in graphql resolvers - see
+   * [`getNodeAndSavePathDependency`](#getNodeAndSavePathDependency).
+   * @param {string} ID id of the node.
+   * @returns {Node} Single node instance.
+   * @example
+   * const node = getNode(id)
+   */
+  getNode: true,
+
+  /**
+   * Get array of nodes of given type.
+   * @param {string} Type of nodes
+   * @returns {Node[]} Array of nodes.
+   * @example
+   * const markdownNodes = getNodesByType(`MarkdownRemark`)
+   */
+  getNodesByType: true,
+
+  /**
+   * Compares `contentDigest` of cached node with passed value
+   * to determine if node has changed.
+   *
+   * @param {string} id of node
+   * @param {string} contentDigest of node
+   * @returns {boolean}
+   * @deprecated This check is done internally in Gatsby and it's not necessary to use it in plugins. Will be removed in gatsby 3.0.
+   */
+  hasNodeChanged: true,
+
+  /**
+   * Set of utilities to output information to user
+   * @type {GatsbyReporter}
+   */
+  reporter: true,
+
+  /**
+   * Get single node by given ID and create dependency for given path.
+   * This should be used instead of `getNode` in graphql resolvers to enable
+   * tracking dependencies for query results. If it's not used Gatsby will
+   * not rerun query if node changes leading to stale query results. See
+   * [Page -> Node Dependency Tracking](/docs/page-node-dependencies/)
+   * for more details.
+   * @param {string} ID id of the node.
+   * @param {string} path of the node.
+   * @returns {Node} Single node instance.
+   */
+  getNodeAndSavePathDependency: true,
+
+  /**
+   * Utility function useful to generate globally unique and stable node IDs.
+   * It will generate different IDs for different plugins if they use same
+   * input.
+   *
+   * @param {string} input
+   * @returns {string} UUIDv5 ID string
+   * @example
+   * const node = {
+   *   id: createNodeId(`${backendData.type}${backendData.id}`),
+   *   ...restOfNodeData
+   * }
+   */
+  createNodeId: true,
+
+  /**
+   * Set of utilities that allow adding more detailed tracing for plugins.
+   * Check
+   * [Performance tracing](https://www.gatsbyjs.org/docs/performance-tracing)
+   * page for more details.
+   * @type {GatsbyTracing}
+   */
+  tracing: true,
+
+  /**
+   * Use to prefix resources URLs. `pathPrefix` will be either empty string or
+   * path that starts with slash and doesn't end with slash. Check
+   * [Adding a Path Prefix](https://www.gatsbyjs.org/docs/path-prefix/)
+   * page for details about path prefixing.
+   * @type {string}
+   */
+  pathPrefix: true,
+};
+
+module.exports = GatsbyNodeHelpers;
diff --git a/node_modules/gatsby/src/utils/api-runner-node.js b/node_modules/gatsby/src/utils/api-runner-node.js
new file mode 100644
index 0000000..44f0b96
--- /dev/null
+++ b/node_modules/gatsby/src/utils/api-runner-node.js
@@ -0,0 +1,373 @@
+const Promise = require(`bluebird`)
+const _ = require(`lodash`)
+const chalk = require(`chalk`)
+
+const tracer = require(`opentracing`).globalTracer()
+const reporter = require(`gatsby-cli/lib/reporter`)
+const getCache = require(`./get-cache`)
+const apiList = require(`./api-node-docs`)
+const createNodeId = require(`./create-node-id`)
+const createContentDigest = require(`./create-content-digest`)
+const {
+  buildObjectType,
+  buildUnionType,
+  buildInterfaceType,
+  buildInputObjectType,
+} = require(`../schema/types/type-builders`)
+const { emitter } = require(`../redux`)
+const { getNonGatsbyCodeFrame } = require(`./stack-trace-utils`)
+const { trackBuildError, decorateEvent } = require(`gatsby-telemetry`)
+
+// Bind action creators per plugin so we can auto-add
+// metadata to actions they create.
+const boundPluginActionCreators = {}
+const doubleBind = (boundActionCreators, api, plugin, actionOptions) => {
+  const { traceId } = actionOptions
+  if (boundPluginActionCreators[plugin.name + api + traceId]) {
+    return boundPluginActionCreators[plugin.name + api + traceId]
+  } else {
+    const keys = Object.keys(boundActionCreators)
+    const doubleBoundActionCreators = {}
+    for (let i = 0; i < keys.length; i++) {
+      const key = keys[i]
+      const boundActionCreator = boundActionCreators[key]
+      if (typeof boundActionCreator === `function`) {
+        doubleBoundActionCreators[key] = (...args) => {
+          // Let action callers override who the plugin is. Shouldn't be
+          // used that often.
+          if (args.length === 1) {
+            boundActionCreator(args[0], plugin, actionOptions)
+          } else if (args.length === 2) {
+            boundActionCreator(args[0], args[1], actionOptions)
+          }
+        }
+      }
+    }
+    boundPluginActionCreators[
+      plugin.name + api + traceId
+    ] = doubleBoundActionCreators
+    return doubleBoundActionCreators
+  }
+}
+
+const initAPICallTracing = parentSpan => {
+  const startSpan = (spanName, spanArgs = {}) => {
+    const defaultSpanArgs = { childOf: parentSpan }
+
+    return tracer.startSpan(spanName, _.merge(defaultSpanArgs, spanArgs))
+  }
+
+  return {
+    tracer,
+    parentSpan,
+    startSpan,
+  }
+}
+
+const runAPI = (plugin, api, args) => {
+  const gatsbyNode = require(`${plugin.resolve}/gatsby-node`)
+  if (gatsbyNode[api]) {
+    const parentSpan = args && args.parentSpan
+    const spanOptions = parentSpan ? { childOf: parentSpan } : {}
+    const pluginSpan = tracer.startSpan(`run-plugin`, spanOptions)
+
+    pluginSpan.setTag(`api`, api)
+    pluginSpan.setTag(`plugin`, plugin.name)
+
+    let pathPrefix = ``
+    const { store, emitter } = require(`../redux`)
+    const {
+      loadNodeContent,
+      getNodes,
+      getNode,
+      getNodesByType,
+      hasNodeChanged,
+      getNodeAndSavePathDependency,
+    } = require(`../db/nodes`)
+    const { boundActionCreators } = require(`../redux/actions`)
+
+    const doubleBoundActionCreators = doubleBind(
+      boundActionCreators,
+      api,
+      plugin,
+      { ...args, parentSpan: pluginSpan }
+    )
+
+    if (store.getState().program.prefixPaths) {
+      pathPrefix = store.getState().config.pathPrefix
+    }
+
+    const namespacedCreateNodeId = id => createNodeId(id, plugin.name)
+
+    const tracing = initAPICallTracing(pluginSpan)
+
+    const cache = getCache(plugin.name)
+
+    // Ideally this would be more abstracted and applied to more situations, but right now
+    // this can be potentially breaking so targeting `createPages` API and `createPage` action
+    let actions = doubleBoundActionCreators
+    let apiFinished = false
+    if (api === `createPages`) {
+      let alreadyDisplayed = false
+      const createPageAction = actions.createPage
+      // create new actions object with wrapped createPage action
+      // doubleBoundActionCreators is memoized, so we can't just
+      // reassign createPage field as this would cause this extra logic
+      // to be used in subsequent APIs and we only want to target this `createPages` call.
+      actions = {
+        ...actions,
+        createPage: (...args) => {
+          createPageAction(...args)
+          if (apiFinished && !alreadyDisplayed) {
+            const warning = [
+              reporter.stripIndent(`
+              Action ${chalk.bold(
+                `createPage`
+              )} was called outside of its expected asynchronous lifecycle ${chalk.bold(
+                `createPages`
+              )} in ${chalk.bold(plugin.name)}.
+              Ensure that you return a Promise from ${chalk.bold(
+                `createPages`
+              )} and are awaiting any asynchronous method invocations (like ${chalk.bold(
+                `graphql`
+              )} or http requests).
+              For more info and debugging tips: see ${chalk.bold(
+                `https://gatsby.dev/sync-actions`
+              )}
+            `),
+            ]
+
+            const possiblyCodeFrame = getNonGatsbyCodeFrame()
+            if (possiblyCodeFrame) {
+              warning.push(possiblyCodeFrame)
+            }
+
+            reporter.warn(warning.join(`\n\n`))
+            alreadyDisplayed = true
+          }
+        },
+      }
+    }
+
+    const apiCallArgs = [
+      {
+        ...args,
+        pathPrefix,
+        boundActionCreators: actions,
+        actions,
+        loadNodeContent,
+        store,
+        emitter,
+        getCache,
+        getNodes,
+        getNode,
+        getNodesByType,
+        hasNodeChanged,
+        reporter,
+        getNodeAndSavePathDependency,
+        cache,
+        createNodeId: namespacedCreateNodeId,
+        createContentDigest,
+        tracing,
+        schema: {
+          buildObjectType,
+          buildUnionType,
+          buildInterfaceType,
+          buildInputObjectType,
+        },
+      },
+      plugin.pluginOptions,
+    ]
+
+    // If the plugin is using a callback use that otherwise
+    // expect a Promise to be returned.
+    if (gatsbyNode[api].length === 3) {
+      return Promise.fromCallback(callback => {
+        const cb = (err, val) => {
+          pluginSpan.finish()
+          callback(err, val)
+          apiFinished = true
+        }
+
+        try {
+          gatsbyNode[api](...apiCallArgs, cb)
+        } catch (e) {
+          trackBuildError(api, {
+            error: e,
+            pluginName: `${plugin.name}@${plugin.version}`,
+          })
+          throw e
+        }
+      })
+    } else {
+      const result = gatsbyNode[api](...apiCallArgs)
+      pluginSpan.finish()
+      return Promise.resolve(result).then(res => {
+        apiFinished = true
+        return res
+      })
+    }
+  }
+
+  return null
+}
+
+let apisRunningById = new Map()
+let apisRunningByTraceId = new Map()
+let waitingForCasacadeToFinish = []
+
+module.exports = async (api, args = {}, pluginSource) =>
+  new Promise(resolve => {
+    const { parentSpan } = args
+    const apiSpanArgs = parentSpan ? { childOf: parentSpan } : {}
+    const apiSpan = tracer.startSpan(`run-api`, apiSpanArgs)
+
+    apiSpan.setTag(`api`, api)
+    _.forEach(args.traceTags, (value, key) => {
+      apiSpan.setTag(key, value)
+    })
+
+    // Check that the API is documented.
+    // "FAKE_API_CALL" is used when code needs to trigger something
+    // to happen once the the API queue is empty. Ideally of course
+    // we'd have an API (returning a promise) for that. But this
+    // works nicely in the meantime.
+    if (!apiList[api] && api !== `FAKE_API_CALL`) {
+      reporter.panic(`api: "${api}" is not a valid Gatsby api`)
+    }
+
+    const { store } = require(`../redux`)
+    const plugins = store.getState().flattenedPlugins
+
+    // Get the list of plugins that implement this API.
+    // Also: Break infinite loops. Sometimes a plugin will implement an API and
+    // call an action which will trigger the same API being called.
+    // `onCreatePage` is the only example right now. In these cases, we should
+    // avoid calling the originating plugin again.
+    const implementingPlugins = plugins.filter(
+      plugin => plugin.nodeAPIs.includes(api) && plugin.name !== pluginSource
+    )
+
+    const apiRunInstance = {
+      api,
+      args,
+      pluginSource,
+      resolve,
+      span: apiSpan,
+      startTime: new Date().toJSON(),
+      traceId: args.traceId,
+    }
+
+    // Generate IDs for api runs. Most IDs we generate from the args
+    // but some API calls can have very large argument objects so we
+    // have special ways of generating IDs for those to avoid stringifying
+    // large objects.
+    let id
+    if (api === `setFieldsOnGraphQLNodeType`) {
+      id = `${api}${apiRunInstance.startTime}${args.type.name}${args.traceId}`
+    } else if (api === `onCreateNode`) {
+      id = `${api}${apiRunInstance.startTime}${
+        args.node.internal.contentDigest
+      }${args.traceId}`
+    } else if (api === `preprocessSource`) {
+      id = `${api}${apiRunInstance.startTime}${args.filename}${args.traceId}`
+    } else if (api === `onCreatePage`) {
+      id = `${api}${apiRunInstance.startTime}${args.page.path}${args.traceId}`
+    } else {
+      // When tracing is turned on, the `args` object will have a
+      // `parentSpan` field that can be quite large. So we omit it
+      // before calling stringify
+      const argsJson = JSON.stringify(_.omit(args, `parentSpan`))
+      id = `${api}|${apiRunInstance.startTime}|${
+        apiRunInstance.traceId
+      }|${argsJson}`
+    }
+    apiRunInstance.id = id
+
+    if (args.waitForCascadingActions) {
+      waitingForCasacadeToFinish.push(apiRunInstance)
+    }
+
+    apisRunningById.set(apiRunInstance.id, apiRunInstance)
+    if (apisRunningByTraceId.has(apiRunInstance.traceId)) {
+      const currentCount = apisRunningByTraceId.get(apiRunInstance.traceId)
+      apisRunningByTraceId.set(apiRunInstance.traceId, currentCount + 1)
+    } else {
+      apisRunningByTraceId.set(apiRunInstance.traceId, 1)
+    }
+
+    let stopQueuedApiRuns = false
+    let onAPIRunComplete = null
+    if (api === `onCreatePage`) {
+      const path = args.page.path
+      const actionHandler = action => {
+        if (action.payload.path === path) {
+          stopQueuedApiRuns = true
+        }
+      }
+      emitter.on(`DELETE_PAGE`, actionHandler)
+      onAPIRunComplete = () => {
+        emitter.off(`DELETE_PAGE`, actionHandler)
+      }
+    }
+
+    Promise.mapSeries(implementingPlugins, plugin => {
+      if (stopQueuedApiRuns) {
+        return null
+      }
+
+      let pluginName =
+        plugin.name === `default-site-plugin`
+          ? `gatsby-node.js`
+          : `Plugin ${plugin.name}`
+
+      return new Promise(resolve => {
+        resolve(runAPI(plugin, api, { ...args, parentSpan: apiSpan }))
+      }).catch(err => {
+        decorateEvent(`BUILD_PANIC`, {
+          pluginName: `${plugin.name}@${plugin.version}`,
+        })
+        reporter.panicOnBuild(`${pluginName} returned an error`, err)
+        return null
+      })
+    }).then(results => {
+      if (onAPIRunComplete) {
+        onAPIRunComplete()
+      }
+      // Remove runner instance
+      apisRunningById.delete(apiRunInstance.id)
+      const currentCount = apisRunningByTraceId.get(apiRunInstance.traceId)
+      apisRunningByTraceId.set(apiRunInstance.traceId, currentCount - 1)
+
+      if (apisRunningById.size === 0) {
+        const { emitter } = require(`../redux`)
+        emitter.emit(`API_RUNNING_QUEUE_EMPTY`)
+      }
+
+      // Filter empty results
+      apiRunInstance.results = results.filter(result => !_.isEmpty(result))
+
+      // Filter out empty responses and return if the
+      // api caller isn't waiting for cascading actions to finish.
+      if (!args.waitForCascadingActions) {
+        apiSpan.finish()
+        resolve(apiRunInstance.results)
+      }
+
+      // Check if any of our waiters are done.
+      waitingForCasacadeToFinish = waitingForCasacadeToFinish.filter(
+        instance => {
+          // If none of its trace IDs are running, it's done.
+          const apisByTraceIdCount = apisRunningByTraceId.get(instance.traceId)
+          if (apisByTraceIdCount === 0) {
+            instance.span.finish()
+            instance.resolve(instance.results)
+            return false
+          } else {
+            return true
+          }
+        }
+      )
+      return
+    })
+  })
diff --git a/node_modules/gatsby/src/utils/babel-loader-helpers.js b/node_modules/gatsby/src/utils/babel-loader-helpers.js
new file mode 100644
index 0000000..8d7b9ea
--- /dev/null
+++ b/node_modules/gatsby/src/utils/babel-loader-helpers.js
@@ -0,0 +1,118 @@
+const path = require(`path`)
+const _ = require(`lodash`)
+
+const loadCachedConfig = () => {
+  let pluginBabelConfig = {
+    stages: {
+      test: { plugins: [], presets: [] },
+    },
+  }
+  if (process.env.NODE_ENV !== `test`) {
+    pluginBabelConfig = require(path.join(
+      process.cwd(),
+      `./.cache/babelState.json`
+    ))
+  }
+  return pluginBabelConfig
+}
+
+const getCustomOptions = () => {
+  const pluginBabelConfig = loadCachedConfig()
+  const stage = process.env.GATSBY_BUILD_STAGE || `test`
+  return pluginBabelConfig.stages[stage].options
+}
+
+const prepareOptions = (babel, resolve = require.resolve) => {
+  let pluginBabelConfig = loadCachedConfig()
+
+  const stage = process.env.GATSBY_BUILD_STAGE || `test`
+
+  // Required plugins/presets
+  const requiredPlugins = [
+    babel.createConfigItem([resolve(`babel-plugin-remove-graphql-queries`)], {
+      type: `plugin`,
+    }),
+  ]
+  const requiredPresets = []
+
+  // Stage specific plugins to add
+  if (stage === `build-html` || stage === `develop-html`) {
+    requiredPlugins.push(
+      babel.createConfigItem([resolve(`babel-plugin-dynamic-import-node`)], {
+        type: `plugin`,
+      })
+    )
+  }
+
+  if (stage === `develop`) {
+    requiredPlugins.push(
+      babel.createConfigItem([resolve(`react-hot-loader/babel`)], {
+        type: `plugin`,
+      })
+    )
+  }
+
+  // Fallback preset
+  const fallbackPresets = []
+
+  fallbackPresets.push(
+    babel.createConfigItem([resolve(`babel-preset-gatsby`)], {
+      type: `preset`,
+    })
+  )
+  // Go through babel state and create config items for presets/plugins from.
+  const reduxPlugins = []
+  const reduxPresets = []
+  pluginBabelConfig.stages[stage].plugins.forEach(plugin => {
+    reduxPlugins.push(
+      babel.createConfigItem([resolve(plugin.name), plugin.options], {
+        type: `plugin`,
+      })
+    )
+  })
+  pluginBabelConfig.stages[stage].presets.forEach(preset => {
+    reduxPresets.push(
+      babel.createConfigItem([resolve(preset.name), preset.options], {
+        type: `preset`,
+      })
+    )
+  })
+
+  return [
+    reduxPresets,
+    reduxPlugins,
+    requiredPresets,
+    requiredPlugins,
+    fallbackPresets,
+  ]
+}
+
+const mergeConfigItemOptions = ({ items, itemToMerge, type, babel }) => {
+  const index = _.findIndex(
+    items,
+    i => i.file.resolved === itemToMerge.file.resolved
+  )
+
+  // If this exist, merge the options, otherwise, add it to the array
+  if (index !== -1) {
+    items[index] = babel.createConfigItem(
+      [
+        itemToMerge.file.resolved,
+        _.merge({}, items[index].options, itemToMerge.options),
+      ],
+      {
+        type,
+      }
+    )
+  } else {
+    items.push(itemToMerge)
+  }
+
+  return items
+}
+
+exports.getCustomOptions = getCustomOptions
+
+// Export helper functions for testing
+exports.prepareOptions = prepareOptions
+exports.mergeConfigItemOptions = mergeConfigItemOptions
diff --git a/node_modules/gatsby/src/utils/babel-loader.js b/node_modules/gatsby/src/utils/babel-loader.js
new file mode 100644
index 0000000..b3a6463
--- /dev/null
+++ b/node_modules/gatsby/src/utils/babel-loader.js
@@ -0,0 +1,90 @@
+const babelLoader = require(`babel-loader`)
+
+const {
+  prepareOptions,
+  getCustomOptions,
+  mergeConfigItemOptions,
+} = require(`./babel-loader-helpers`)
+
+/**
+ * Gatsby's custom loader for webpack & babel
+ *
+ * Gatsby allows sites to either use our Babel setup (the default)
+ * or to add a .babelrc to take control.
+ *
+ * Our default setup is defined in the fallbackPlugins/fallbackPresets arrays
+ * below.
+ *
+ * After using either the fallback or user supplied setup, we add on a handful
+ * of required plugins and finally merge in any presets/plugins supplied
+ * by Gatsby plugins.
+ *
+ * You can find documentation for the custom loader here: https://babeljs.io/docs/en/next/babel-core.html#loadpartialconfig
+ */
+module.exports = babelLoader.custom(babel => {
+  const toReturn = {
+    // Passed the loader options.
+    customOptions(options) {
+      return {
+        loader: {
+          cacheDirectory: true,
+          sourceType: `unambiguous`,
+          ...getCustomOptions(),
+          ...options,
+        },
+      }
+    },
+
+    // Passed Babel's 'PartialConfig' object.
+    config(partialConfig) {
+      let { options } = partialConfig
+      const [
+        reduxPresets,
+        reduxPlugins,
+        requiredPresets,
+        requiredPlugins,
+        fallbackPresets,
+      ] = prepareOptions(babel)
+
+      // If there is no filesystem babel config present, add our fallback
+      // presets/plugins.
+      if (!partialConfig.hasFilesystemConfig()) {
+        options = {
+          ...options,
+          plugins: requiredPlugins,
+          presets: [...fallbackPresets, ...requiredPresets],
+        }
+      } else {
+        // With a babelrc present, only add our required plugins/presets
+        options = {
+          ...options,
+          plugins: [...options.plugins, ...requiredPlugins],
+          presets: [...options.presets, ...requiredPresets],
+        }
+      }
+
+      // Merge in presets/plugins added from gatsby plugins.
+      reduxPresets.forEach(preset => {
+        options.presets = mergeConfigItemOptions({
+          items: options.presets,
+          itemToMerge: preset,
+          type: `preset`,
+          babel,
+        })
+      })
+
+      reduxPlugins.forEach(plugin => {
+        options.plugins = mergeConfigItemOptions({
+          items: options.plugins,
+          itemToMerge: plugin,
+          type: `plugin`,
+          babel,
+        })
+      })
+
+      return options
+    },
+  }
+
+  return toReturn
+})
diff --git a/node_modules/gatsby/src/utils/babel-parse-to-ast.js b/node_modules/gatsby/src/utils/babel-parse-to-ast.js
new file mode 100644
index 0000000..bfda221
--- /dev/null
+++ b/node_modules/gatsby/src/utils/babel-parse-to-ast.js
@@ -0,0 +1,62 @@
+/* @flow */
+const parser = require(`@babel/parser`)
+
+const PARSER_OPTIONS = {
+  allowImportExportEverywhere: true,
+  allowReturnOutsideFunction: true,
+  allowSuperOutsideMethod: true,
+  sourceType: `unambigious`,
+  sourceFilename: true,
+  plugins: [
+    `jsx`,
+    `flow`,
+    `doExpressions`,
+    `objectRestSpread`,
+    [
+      `decorators`,
+      {
+        decoratorsBeforeExport: true,
+      },
+    ],
+    `classProperties`,
+    `classPrivateProperties`,
+    `classPrivateMethods`,
+    `exportDefaultFrom`,
+    `exportNamespaceFrom`,
+    `asyncGenerators`,
+    `functionBind`,
+    `functionSent`,
+    `dynamicImport`,
+    `numericSeparator`,
+    `optionalChaining`,
+    `importMeta`,
+    `bigInt`,
+    `optionalCatchBinding`,
+    `throwExpressions`,
+    [
+      `pipelineOperator`,
+      {
+        proposal: `minimal`,
+      },
+    ],
+    `nullishCoalescingOperator`,
+  ],
+}
+
+export function getBabelParserOptions(filePath: string) {
+  // Flow and typescript plugins can't be enabled simultaneously
+  if (/\.tsx?/.test(filePath)) {
+    const { plugins } = PARSER_OPTIONS
+    return {
+      ...PARSER_OPTIONS,
+      plugins: plugins.map(plugin =>
+        plugin === `flow` ? `typescript` : plugin
+      ),
+    }
+  }
+  return PARSER_OPTIONS
+}
+
+export function babelParseToAst(contents: string, filePath: string) {
+  return parser.parse(contents, getBabelParserOptions(filePath))
+}
diff --git a/node_modules/gatsby/src/utils/browserslist.js b/node_modules/gatsby/src/utils/browserslist.js
new file mode 100644
index 0000000..590acc7
--- /dev/null
+++ b/node_modules/gatsby/src/utils/browserslist.js
@@ -0,0 +1,31 @@
+const path = require(`path`)
+const browserslist = require(`browserslist/node`)
+
+function installedGatsbyVersion(directory) {
+  try {
+    const { version } = require(path.join(
+      directory,
+      `node_modules`,
+      `gatsby`,
+      `package.json`
+    ))
+    return parseInt(version.split(`.`)[0], 10)
+  } catch (e) {
+    return undefined
+  }
+}
+
+module.exports = function getBrowsersList(directory) {
+  const fallback =
+    installedGatsbyVersion(directory) === 1
+      ? [`>1%`, `last 2 versions`, `IE >= 9`]
+      : [`>0.25%`, `not dead`]
+
+  const config = browserslist.findConfig(directory)
+
+  if (config && config.defaults) {
+    return config.defaults
+  }
+
+  return fallback
+}
diff --git a/node_modules/gatsby/src/utils/cache.js b/node_modules/gatsby/src/utils/cache.js
new file mode 100644
index 0000000..7dbac24
--- /dev/null
+++ b/node_modules/gatsby/src/utils/cache.js
@@ -0,0 +1,58 @@
+const fs = require(`fs-extra`)
+const manager = require(`cache-manager`)
+const fsStore = require(`cache-manager-fs-hash`)
+const path = require(`path`)
+
+const MAX_CACHE_SIZE = 250
+const TTL = Number.MAX_SAFE_INTEGER
+
+class Cache {
+  constructor({ name = `db`, store = fsStore } = {}) {
+    this.name = name
+    this.store = store
+  }
+
+  get directory() {
+    return path.join(process.cwd(), `.cache/caches/${this.name}`)
+  }
+
+  init() {
+    fs.ensureDirSync(this.directory)
+
+    const caches = [
+      {
+        store: `memory`,
+        max: MAX_CACHE_SIZE,
+      },
+      {
+        store: this.store,
+        options: {
+          path: this.directory,
+          ttl: TTL,
+        },
+      },
+    ].map(cache => manager.caching(cache))
+
+    this.cache = manager.multiCaching(caches)
+
+    return this
+  }
+
+  get(key) {
+    return new Promise(resolve => {
+      this.cache.get(key, (err, res) => {
+        resolve(err ? undefined : res)
+      })
+    })
+  }
+
+  set(key, value, args = {}) {
+    return new Promise(resolve => {
+      this.cache.set(key, value, args, err => {
+        resolve(err ? undefined : value)
+      })
+    })
+  }
+}
+
+module.exports = Cache
diff --git a/node_modules/gatsby/src/utils/cpu-core-count.js b/node_modules/gatsby/src/utils/cpu-core-count.js
new file mode 100644
index 0000000..f52359e
--- /dev/null
+++ b/node_modules/gatsby/src/utils/cpu-core-count.js
@@ -0,0 +1,55 @@
+/**
+ * Calculate CPU core count
+ * @param {boolean} [useEnvVar=false] Use the 'GATSBY_CPU_COUNT' env var to calculate the requested type of CPU cores
+ * @returns {number} Count of the requested type of CPU cores. Defaults to number of physical cores or 1
+ */
+
+const cpuCoreCount = (useEnvVar = false) => {
+  try {
+    let coreCount = require(`physical-cpu-count`) || 1
+
+    if (!useEnvVar) {
+      // Return the physical CPU count,
+      // or default to 1 if we can't detect
+      return coreCount
+    }
+
+    if (typeof process.env.GATSBY_CPU_COUNT !== `undefined`) {
+      const coreCountArg =
+        Number(process.env.GATSBY_CPU_COUNT) || process.env.GATSBY_CPU_COUNT
+
+      switch (typeof coreCountArg) {
+        case `string`:
+          // Leave at Default CPU count if coreCountArg === `physical_cores`
+
+          // CPU count === logical CPU count
+          // throw error if we have a problem counting logical cores
+          if (coreCountArg === `logical_cores`) {
+            coreCount = require(`os`).cpus().length
+
+            if (typeof coreCount !== `number`) {
+              throw new Error(
+                `process.env.GATSBY_CPU_COUNT is set to 'logical_cores' but there was a problem finding the number of logical cores`
+              )
+            }
+          }
+          break
+
+        case `number`:
+          // CPU count === passed in count
+          coreCount = coreCountArg
+          break
+
+        default:
+          break
+      }
+    }
+
+    return coreCount
+  } catch (err) {
+    console.error(err)
+    throw new Error(`There has been a problem counting the number of CPU cores`)
+  }
+}
+
+module.exports = cpuCoreCount
diff --git a/node_modules/gatsby/src/utils/create-content-digest.js b/node_modules/gatsby/src/utils/create-content-digest.js
new file mode 100644
index 0000000..3f4910f
--- /dev/null
+++ b/node_modules/gatsby/src/utils/create-content-digest.js
@@ -0,0 +1,19 @@
+const crypto = require(`crypto`)
+
+/**
+ * createContentDigest() Encrypts an input using md5 hash of hexadecimal digest.
+ *
+ * @param {Object|String|Array} input - The input to encrypt
+ *
+ * @return {String} - The content digest
+ */
+const createContentDigest = input => {
+  const content = typeof input !== `string` ? JSON.stringify(input) : input
+
+  return crypto
+    .createHash(`md5`)
+    .update(content)
+    .digest(`hex`)
+}
+
+module.exports = createContentDigest
diff --git a/node_modules/gatsby/src/utils/create-node-id.js b/node_modules/gatsby/src/utils/create-node-id.js
new file mode 100644
index 0000000..c139177
--- /dev/null
+++ b/node_modules/gatsby/src/utils/create-node-id.js
@@ -0,0 +1,26 @@
+const uuidv5 = require(`uuid/v5`)
+const report = require(`gatsby-cli/lib/reporter`)
+
+const seedConstant = `638f7a53-c567-4eca-8fc1-b23efb1cfb2b`
+
+/**
+ * createNodeId() Generate UUID
+ *
+ * @param {String} id - A string of arbitary length
+ * @param {String} namespace - Namespace to use for UUID
+ *
+ * @return {String} - UUID
+ */
+function createNodeId(id, namespace) {
+  if (typeof id === `number`) {
+    id = id.toString()
+  } else if (typeof id !== `string`) {
+    report.panic(
+      `Parameter passed to createNodeId must be a String or Number (got ${typeof id})`
+    )
+  }
+
+  return uuidv5(id, uuidv5(namespace, seedConstant))
+}
+
+module.exports = createNodeId
diff --git a/node_modules/gatsby/src/utils/create-require-from-path.js b/node_modules/gatsby/src/utils/create-require-from-path.js
new file mode 100644
index 0000000..c17b988
--- /dev/null
+++ b/node_modules/gatsby/src/utils/create-require-from-path.js
@@ -0,0 +1,15 @@
+const Module = require(`module`)
+const path = require(`path`)
+
+// Polyfill Node's `Module.createRequireFromPath` if not present (added in Node v10.12.0)
+module.exports =
+  Module.createRequireFromPath ||
+  function(filename) {
+    const mod = new Module(filename, null)
+
+    mod.filename = filename
+    mod.paths = Module._nodeModulePaths(path.dirname(filename))
+    mod._compile(`module.exports = require;`, filename)
+
+    return mod.exports
+  }
diff --git a/node_modules/gatsby/src/utils/detect-port-in-use-and-prompt.js b/node_modules/gatsby/src/utils/detect-port-in-use-and-prompt.js
new file mode 100644
index 0000000..2ce875b
--- /dev/null
+++ b/node_modules/gatsby/src/utils/detect-port-in-use-and-prompt.js
@@ -0,0 +1,30 @@
+const detect = require(`detect-port`)
+const report = require(`gatsby-cli/lib/reporter`)
+
+// Checks if a port is in use and prompts the user to enter another one
+// Then calls callback with new port
+const detectPortInUseAndPrompt = (port, rlInterface, callback) => {
+  let newPort = port
+
+  detect(port, (err, _port) => {
+    if (err) {
+      report.panic(err)
+    }
+
+    if (port !== _port) {
+      // eslint-disable-next-line max-len
+      const question = `Something is already running at port ${port} \nWould you like to run the app at another port instead? [Y/n] `
+
+      rlInterface.question(question, answer => {
+        if (answer.length === 0 || answer.match(/^yes|y$/i)) {
+          newPort = _port
+        }
+        callback(newPort)
+      })
+    } else {
+      callback(newPort)
+    }
+  })
+}
+
+module.exports = detectPortInUseAndPrompt
diff --git a/node_modules/gatsby/src/utils/eslint-config.js b/node_modules/gatsby/src/utils/eslint-config.js
new file mode 100644
index 0000000..0f51361
--- /dev/null
+++ b/node_modules/gatsby/src/utils/eslint-config.js
@@ -0,0 +1,26 @@
+import { printSchema } from "graphql"
+
+module.exports = schema => {
+  return {
+    useEslintrc: false,
+    baseConfig: {
+      globals: {
+        graphql: true,
+        __PATH_PREFIX__: true,
+      },
+      extends: `react-app`,
+      plugins: [`graphql`],
+      rules: {
+        "import/no-webpack-loader-syntax": [0],
+        "graphql/template-strings": [
+          `error`,
+          {
+            env: `relay`,
+            schemaString: printSchema(schema, { commentDescriptions: true }),
+            tagName: `graphql`,
+          },
+        ],
+      },
+    },
+  }
+}
diff --git a/node_modules/gatsby/src/utils/gatsby-webpack-stats-extractor.js b/node_modules/gatsby/src/utils/gatsby-webpack-stats-extractor.js
new file mode 100644
index 0000000..4c0186c
--- /dev/null
+++ b/node_modules/gatsby/src/utils/gatsby-webpack-stats-extractor.js
@@ -0,0 +1,48 @@
+const fs = require(`fs-extra`)
+const path = require(`path`)
+
+class GatsbyWebpackStatsExtractor {
+  constructor(options) {
+    this.plugin = { name: `GatsbyWebpackStatsExtractor` }
+    this.options = options || {}
+  }
+  apply(compiler) {
+    compiler.hooks.done.tapAsync(this.plugin, (stats, done) => {
+      let assets = {}
+      let assetsMap = {}
+      for (let chunkGroup of stats.compilation.chunkGroups) {
+        if (chunkGroup.name) {
+          let files = []
+          for (let chunk of chunkGroup.chunks) {
+            files.push(...chunk.files)
+          }
+          assets[chunkGroup.name] = files.filter(f => f.slice(-4) !== `.map`)
+          assetsMap[chunkGroup.name] = files
+            .filter(
+              f =>
+                f.slice(-4) !== `.map` &&
+                f.slice(0, chunkGroup.name.length) === chunkGroup.name
+            )
+            .map(filename => `/${filename}`)
+        }
+      }
+      const webpackStats = {
+        ...stats.toJson({ all: false, chunkGroups: true }),
+        assetsByChunkName: assets,
+      }
+      fs.writeFile(
+        path.join(`public`, `chunk-map.json`),
+        JSON.stringify(assetsMap),
+        () => {
+          fs.writeFile(
+            path.join(`public`, `webpack.stats.json`),
+            JSON.stringify(webpackStats),
+            done
+          )
+        }
+      )
+    })
+  }
+}
+
+module.exports = GatsbyWebpackStatsExtractor
diff --git a/node_modules/gatsby/src/utils/get-cache.js b/node_modules/gatsby/src/utils/get-cache.js
new file mode 100644
index 0000000..af5db0d
--- /dev/null
+++ b/node_modules/gatsby/src/utils/get-cache.js
@@ -0,0 +1,12 @@
+const Cache = require(`./cache`)
+
+let caches = new Map()
+
+module.exports = function getCache(name) {
+  let cache = caches.get(name)
+  if (!cache) {
+    cache = new Cache({ name }).init()
+    caches.set(name, cache)
+  }
+  return cache
+}
diff --git a/node_modules/gatsby/src/utils/get-hash-fn.js b/node_modules/gatsby/src/utils/get-hash-fn.js
new file mode 100644
index 0000000..efdb676
--- /dev/null
+++ b/node_modules/gatsby/src/utils/get-hash-fn.js
@@ -0,0 +1,22 @@
+const createHash = require(`crypto`).createHash
+
+const getHashFn = ({
+  hashFunction = `md5`,
+  hashDigest = `hex`,
+  hashDigestBits = 48,
+  cache = new Set(),
+}) => input => {
+  const hash = createHash(hashFunction)
+  hash.update(input)
+  const digest = hash.digest(hashDigest)
+  const partialDigest = digest.substr(0, hashDigestBits / 4)
+  const output = parseInt(partialDigest, 16)
+  // guard against collisions
+  if (cache.has(output)) {
+    throw Error(`Hash collision at f(${input}) = ${output}`)
+  }
+  cache.add(output)
+  return output
+}
+
+module.exports = getHashFn
diff --git a/node_modules/gatsby/src/utils/get-ssl-cert.js b/node_modules/gatsby/src/utils/get-ssl-cert.js
new file mode 100644
index 0000000..a1a8652
--- /dev/null
+++ b/node_modules/gatsby/src/utils/get-ssl-cert.js
@@ -0,0 +1,37 @@
+const getDevelopmentCertificate = require(`devcert-san`).default
+const report = require(`gatsby-cli/lib/reporter`)
+const fs = require(`fs`)
+const path = require(`path`)
+
+module.exports = async ({ name, certFile, keyFile, directory }) => {
+  // check that cert file and key file are both true or both false, if they are both
+  // false, it defaults to the automatic ssl
+  if (certFile ? !keyFile : keyFile) {
+    report.panic(
+      `for custom ssl --https, --cert-file, and --key-file must be used together`
+    )
+  }
+
+  if (certFile && keyFile) {
+    const keyPath = path.join(directory, keyFile)
+    const certPath = path.join(directory, certFile)
+
+    return await {
+      keyPath,
+      certPath,
+      key: fs.readFileSync(keyPath),
+      cert: fs.readFileSync(certPath),
+    }
+  }
+
+  report.info(`setting up automatic SSL certificate (may require sudo)\n`)
+  try {
+    return await getDevelopmentCertificate(name, {
+      installCertutil: true,
+    })
+  } catch (err) {
+    report.panic(`\nFailed to generate dev SSL certificate`, err)
+  }
+
+  return false
+}
diff --git a/node_modules/gatsby/src/utils/get-static-dir.js b/node_modules/gatsby/src/utils/get-static-dir.js
new file mode 100644
index 0000000..ce6f95c
--- /dev/null
+++ b/node_modules/gatsby/src/utils/get-static-dir.js
@@ -0,0 +1,49 @@
+const fs = require(`fs-extra`)
+const chokidar = require(`chokidar`)
+const nodePath = require(`path`)
+const { store } = require(`../redux`)
+
+/**
+ * copyStaticDirs
+ * --
+ * Copy files from the static directory to the public directory
+ */
+exports.copyStaticDirs = () => {
+  // access the store to get themes
+  const { themes } = store.getState() // ensure there are themes
+
+  if (themes && themes.themes) {
+    themes.themes
+      // create an array of potential theme static folders
+      .map(theme => nodePath.resolve(theme.themeDir, `static`))
+      // filter out the static folders that don't exist
+      .filter(themeStaticPath => fs.existsSync(themeStaticPath))
+      // copy the files for each folder into the user's build
+      .map(folder =>
+        fs.copySync(folder, nodePath.join(process.cwd(), `public`))
+      )
+  }
+
+  const staticDir = nodePath.join(process.cwd(), `static`)
+  if (!fs.existsSync(staticDir)) return Promise.resolve()
+  return fs.copySync(staticDir, nodePath.join(process.cwd(), `public`))
+}
+
+/**
+ * syncStaticDir
+ * --
+ * Set up a watcher to sync changes from the static directory to the public directory
+ */
+exports.syncStaticDir = () => {
+  const staticDir = nodePath.join(process.cwd(), `static`)
+  chokidar
+    .watch(staticDir)
+    .on(`add`, path => {
+      const relativePath = nodePath.relative(staticDir, path)
+      fs.copy(path, `${process.cwd()}/public/${relativePath}`)
+    })
+    .on(`change`, path => {
+      const relativePath = nodePath.relative(staticDir, path)
+      fs.copy(path, `${process.cwd()}/public/${relativePath}`)
+    })
+}
diff --git a/node_modules/gatsby/src/utils/html-renderer-queue.js b/node_modules/gatsby/src/utils/html-renderer-queue.js
new file mode 100644
index 0000000..4a40dfa
--- /dev/null
+++ b/node_modules/gatsby/src/utils/html-renderer-queue.js
@@ -0,0 +1,54 @@
+const Promise = require(`bluebird`)
+const convertHrtime = require(`convert-hrtime`)
+const Worker = require(`jest-worker`).default
+const { chunk } = require(`lodash`)
+const cpuCoreCount = require(`./cpu-core-count`)
+
+const workerPool = new Worker(require.resolve(`./worker`), {
+  numWorkers: cpuCoreCount(true),
+  forkOptions: {
+    silent: false,
+  },
+})
+
+module.exports = (htmlComponentRendererPath, pages, activity) =>
+  new Promise((resolve, reject) => {
+    // We need to only pass env vars that are set programatically in gatsby-cli
+    // to child process. Other vars will be picked up from environment.
+    const envVars = Object.entries({
+      NODE_ENV: process.env.NODE_ENV,
+      gatsby_executing_command: process.env.gatsby_executing_command,
+      gatsby_log_level: process.env.gatsby_log_level,
+    })
+
+    const start = process.hrtime()
+    const segments = chunk(pages, 50)
+    let finished = 0
+
+    Promise.map(
+      segments,
+      pageSegment =>
+        new Promise((resolve, reject) => {
+          workerPool
+            .renderHTML({
+              htmlComponentRendererPath,
+              paths: pageSegment,
+              envVars,
+            })
+            .then(() => {
+              finished += pageSegment.length
+              if (activity) {
+                activity.setStatus(
+                  `${finished}/${pages.length} ${(
+                    finished / convertHrtime(process.hrtime(start)).seconds
+                  ).toFixed(2)} pages/second`
+                )
+              }
+              resolve()
+            })
+            .catch(reject)
+        })
+    )
+      .then(resolve)
+      .catch(reject)
+  })
diff --git a/node_modules/gatsby/src/utils/is-32-bit-integer.js b/node_modules/gatsby/src/utils/is-32-bit-integer.js
new file mode 100644
index 0000000..d1c541a
--- /dev/null
+++ b/node_modules/gatsby/src/utils/is-32-bit-integer.js
@@ -0,0 +1,3 @@
+module.exports = function(x) {
+  return (x | 0) === x
+}
diff --git a/node_modules/gatsby/src/utils/js-chunk-names.js b/node_modules/gatsby/src/utils/js-chunk-names.js
new file mode 100644
index 0000000..0b41ab8
--- /dev/null
+++ b/node_modules/gatsby/src/utils/js-chunk-names.js
@@ -0,0 +1,22 @@
+const { kebabCase } = require(`lodash`)
+const path = require(`path`)
+const kebabHash = require(`kebab-hash`)
+const { store } = require(`../redux`)
+
+const generatePathChunkName = path => {
+  const name = path === `/` ? `index` : kebabHash(path)
+  return `path---${name}`
+}
+
+const generateComponentChunkName = componentPath => {
+  const program = store.getState().program
+  let directory = `/`
+  if (program && program.directory) {
+    directory = program.directory
+  }
+  const name = path.relative(directory, componentPath)
+  return `component---${kebabCase(name)}`
+}
+
+exports.generatePathChunkName = generatePathChunkName
+exports.generateComponentChunkName = generateComponentChunkName
diff --git a/node_modules/gatsby/src/utils/local-eslint-config-finder.js b/node_modules/gatsby/src/utils/local-eslint-config-finder.js
new file mode 100644
index 0000000..083e80e
--- /dev/null
+++ b/node_modules/gatsby/src/utils/local-eslint-config-finder.js
@@ -0,0 +1,28 @@
+const path = require(`path`)
+const glob = require(`glob`)
+const debug = require(`debug`)(`gatsby:webpack-eslint-config`)
+const report = require(`gatsby-cli/lib/reporter`)
+
+module.exports = directory => {
+  try {
+    debug(`Attempting to load package.json for eslint config check`)
+
+    const pkg = require(path.resolve(directory, `package.json`))
+    if (pkg.eslintConfig) {
+      return true
+    }
+  } catch (err) {
+    report.error(`There was a problem processing the package.json file`, err)
+  }
+
+  debug(`Checking for eslint config file`)
+  const eslintFiles = glob.sync(`.eslintrc?(.js|.json|.yaml|.yml)`, {
+    cwd: directory,
+  })
+
+  if (eslintFiles.length) {
+    return true
+  }
+
+  return false
+}
diff --git a/node_modules/gatsby/src/utils/merge-gatsby-config.js b/node_modules/gatsby/src/utils/merge-gatsby-config.js
new file mode 100644
index 0000000..2671de7
--- /dev/null
+++ b/node_modules/gatsby/src/utils/merge-gatsby-config.js
@@ -0,0 +1,39 @@
+const _ = require(`lodash`)
+/**
+ * Defines how a theme object is merged with the user's config
+ */
+module.exports = (a, b) => {
+  // a and b are gatsby configs, If they have keys, that means there are values to merge
+  const allGatsbyConfigKeysWithAValue = _.uniq(
+    Object.keys(a).concat(Object.keys(b))
+  )
+
+  // reduce the array of mergable keys into a single gatsby config object
+  const mergedConfig = allGatsbyConfigKeysWithAValue.reduce(
+    (config, gatsbyConfigKey) => {
+      // choose a merge function for the config key if there's one defined,
+      // otherwise use the default value merge function
+      const mergeFn = howToMerge[gatsbyConfigKey] || howToMerge.byDefault
+      return {
+        ...config,
+        [gatsbyConfigKey]: mergeFn(a[gatsbyConfigKey], b[gatsbyConfigKey]),
+      }
+    },
+    {}
+  )
+
+  // return the fully merged config
+  return mergedConfig
+}
+const howToMerge = {
+  /**
+   * pick a truthy value by default.
+   * This makes sure that if a single value is defined, that one it used.
+   * We prefer the "right" value, because the user's config will be "on the right"
+   */
+  byDefault: (a, b) => b || a,
+  siteMetadata: (objA, objB) => _.merge({}, objA, objB),
+  // plugins are concatenated and uniq'd, so we don't get two of the same plugin value
+  plugins: (a = [], b = []) => _.uniqWith(a.concat(b), _.isEqual),
+  mapping: (objA, objB) => _.merge({}, objA, objB),
+}
diff --git a/node_modules/gatsby/src/utils/page-data.js b/node_modules/gatsby/src/utils/page-data.js
new file mode 100644
index 0000000..b622a84
--- /dev/null
+++ b/node_modules/gatsby/src/utils/page-data.js
@@ -0,0 +1,68 @@
+const fs = require(`fs-extra`)
+const path = require(`path`)
+const Queue = require(`better-queue`)
+
+const getFilePath = ({ publicDir }, pagePath) => {
+  const fixedPagePath = pagePath === `/` ? `index` : pagePath
+  return path.join(publicDir, `page-data`, fixedPagePath, `page-data.json`)
+}
+
+const write = async ({ publicDir }, page, result, webpackCompilationHash) => {
+  const filePath = getFilePath({ publicDir }, page.path)
+  const body = {
+    componentChunkName: page.componentChunkName,
+    path: page.path,
+    compilationHash: webpackCompilationHash,
+    ...result,
+  }
+  await fs.outputFile(filePath, JSON.stringify(body))
+}
+
+const read = async ({ publicDir }, pagePath) => {
+  const filePath = getFilePath({ publicDir }, pagePath)
+  const rawPageData = await fs.readFile(filePath)
+  return JSON.parse(rawPageData)
+}
+
+const updateCompilationHash = async (
+  { publicDir },
+  pagePath,
+  webpackCompilationHash
+) => {
+  const filePath = getFilePath({ publicDir }, pagePath)
+  const pageData = await read({ publicDir }, pagePath)
+  pageData.compilationHash = webpackCompilationHash
+  await fs.outputFile(filePath, JSON.stringify(pageData))
+}
+
+// TODO We should move this to a worker model (like html page
+// rendering) for performance
+const rewriteCompilationHashes = (
+  { publicDir },
+  pagePaths,
+  compilationHash
+) => {
+  if (pagePaths.length === 0) {
+    return Promise.resolve()
+  }
+  const queueOptions = {
+    concurrent: 4,
+  }
+  const handler = async (pagePath, callback) => {
+    await updateCompilationHash({ publicDir }, pagePath, compilationHash)
+    callback(null)
+  }
+  const q = new Queue(handler, queueOptions)
+  const drainPromise = new Promise(resolve => {
+    q.once(`drain`, () => resolve())
+  })
+  pagePaths.forEach(pagePath => q.push(pagePath))
+  return drainPromise
+}
+
+module.exports = {
+  write,
+  read,
+  updateCompilationHash,
+  rewriteCompilationHashes,
+}
diff --git a/node_modules/gatsby/src/utils/path.js b/node_modules/gatsby/src/utils/path.js
new file mode 100644
index 0000000..d2c9645
--- /dev/null
+++ b/node_modules/gatsby/src/utils/path.js
@@ -0,0 +1,15 @@
+const path = require(`path`)
+const os = require(`os`)
+
+export function joinPath(...paths) {
+  const joinedPath = path.join(...paths)
+  if (os.platform() === `win32`) {
+    return joinedPath.replace(/\\/g, `\\\\`)
+  } else {
+    return joinedPath
+  }
+}
+
+export function withBasePath(basePath) {
+  return (...paths) => joinPath(basePath, ...paths)
+}
diff --git a/node_modules/gatsby/src/utils/prepare-regex.js b/node_modules/gatsby/src/utils/prepare-regex.js
new file mode 100644
index 0000000..bf229e9
--- /dev/null
+++ b/node_modules/gatsby/src/utils/prepare-regex.js
@@ -0,0 +1,16 @@
+const _ = require(`lodash`)
+
+module.exports = str => {
+  const exploded = str.split(`/`)
+  const regex = new RegExp(
+    exploded
+      .slice(1, -1)
+      .join(`/`)
+      // Double escaping is needed to get past the GraphQL parser,
+      // but single escaping is needed for the RegExp constructor,
+      // i.e. `"\\\\w+"` for `/\w+/`.
+      .replace(/\\\\/, `\\`),
+    _.last(exploded)
+  )
+  return regex
+}
diff --git a/node_modules/gatsby/src/utils/profile.js b/node_modules/gatsby/src/utils/profile.js
new file mode 100644
index 0000000..d6033eb
--- /dev/null
+++ b/node_modules/gatsby/src/utils/profile.js
@@ -0,0 +1,69 @@
+// const convertHrtime = require(`convert-hrtime`)
+// const _ = require(`lodash`)
+// const treeify = require(`treeify`)
+// const ss = require(`simple-statistics`)
+
+// let root = {
+// ROOT: process.hrtime(),
+// }
+
+// const profile = ({ name, start, parent }) => {
+// const span = convertHrtime(process.hrtime(start))
+// let path = parent ? `${parent}.${name}` : name
+// let currentValue = _.get(root, path)
+// if (_.isObject(currentValue)) {
+// path = `${path}.ROOT`
+// currentValue = _.get(root, path)
+// }
+// const newValue = currentValue
+// ? currentValue + span.milliseconds
+// : span.milliseconds
+// if (name === `run-query`) {
+// console.log({
+// path,
+// span: span.milliseconds,
+// newValue,
+// })
+// }
+// root = _.set(root, path, newValue)
+// }
+
+// global._PROFILE = profile
+// module.exports = profile
+
+// const labelify = (object, rootValue) =>
+// _.mapKeys(object, (value, key, o) => {
+// const currentValue = _.isObject(value) ? value.ROOT : value
+// return `${key}: ${currentValue}ms | ${(
+// (currentValue / rootValue) *
+// 100
+// ).toFixed(2) + `%`}`
+// })
+
+// const descriptiveStats = (array, label) => {
+// if (!array || array.length === 0) return
+// console.log(``)
+// console.log(label)
+// console.log(`count:`, array.length)
+// console.log(`min:`, ss.min(array))
+// console.log(`max:`, ss.max(array))
+// console.log(`mean:`, ss.mean(array))
+// console.log(`quantile 25:`, ss.quantile(array, 0.25))
+// console.log(`quantile 75:`, ss.quantile(array, 0.75))
+// }
+
+// process.on(`exit`, () => {
+// root.ROOT = convertHrtime(process.hrtime(root.ROOT)).milliseconds
+// root = labelify(root, root.ROOT)
+// for (var prop in root) {
+// if (_.isObject(root[prop]) && root[prop].ROOT) {
+// const rootValue = root[prop].ROOT
+// delete root[prop].ROOT
+// root[prop] = labelify(root[prop], rootValue)
+// }
+// }
+// console.log(``)
+// console.log(`===PROFILE===`)
+// console.log(treeify.asTree(root))
+// descriptiveStats(global.promiseMapTimes, `run-sift map nodes`)
+// })
diff --git a/node_modules/gatsby/src/utils/source-nodes.js b/node_modules/gatsby/src/utils/source-nodes.js
new file mode 100644
index 0000000..d62ef92
--- /dev/null
+++ b/node_modules/gatsby/src/utils/source-nodes.js
@@ -0,0 +1,78 @@
+const _ = require(`lodash`)
+const report = require(`gatsby-cli/lib/reporter`)
+
+const apiRunner = require(`./api-runner-node`)
+const { store } = require(`../redux`)
+const { getNode, getNodes } = require(`../db/nodes`)
+const { boundActionCreators } = require(`../redux/actions`)
+const { deleteNode } = boundActionCreators
+
+/**
+ * Finds the name of all plugins which implement Gatsby APIs that
+ * may create nodes, but which have not actually created any nodes.
+ */
+function discoverPluginsWithoutNodes(storeState) {
+  // Discover which plugins implement APIs which may create nodes
+  const nodeCreationPlugins = storeState.flattenedPlugins
+    .filter(
+      plugin =>
+        plugin.nodeAPIs.includes(`sourceNodes`) &&
+        plugin.name !== `default-site-plugin`
+    )
+    .map(plugin => plugin.name)
+
+  // Find out which plugins own already created nodes
+  const nodeOwners = _.uniq(
+    Array.from(getNodes()).reduce((acc, node) => {
+      acc.push(node.internal.owner)
+      return acc
+    }, [])
+  )
+  return _.difference(nodeCreationPlugins, nodeOwners)
+}
+
+module.exports = async ({ parentSpan } = {}) => {
+  await apiRunner(`sourceNodes`, {
+    traceId: `initial-sourceNodes`,
+    waitForCascadingActions: true,
+    parentSpan: parentSpan,
+  })
+
+  const state = store.getState()
+
+  // Warn about plugins that should have created nodes but didn't.
+  const pluginsWithNoNodes = discoverPluginsWithoutNodes(state)
+  pluginsWithNoNodes.map(name =>
+    report.warn(
+      `The ${name} plugin has generated no Gatsby nodes. Do you need it?`
+    )
+  )
+
+  // Garbage collect stale data nodes
+  const touchedNodes = Object.keys(state.nodesTouched)
+  const staleNodes = Array.from(getNodes()).filter(node => {
+    // Find the root node.
+    let rootNode = node
+    let whileCount = 0
+    while (
+      rootNode.parent &&
+      getNode(rootNode.parent) !== undefined &&
+      whileCount < 101
+    ) {
+      rootNode = getNode(rootNode.parent)
+      whileCount += 1
+      if (whileCount > 100) {
+        console.log(
+          `It looks like you have a node that's set its parent as itself`,
+          rootNode
+        )
+      }
+    }
+
+    return !_.includes(touchedNodes, rootNode.id)
+  })
+
+  if (staleNodes.length > 0) {
+    staleNodes.forEach(node => deleteNode({ node }))
+  }
+}
diff --git a/node_modules/gatsby/src/utils/stack-trace-utils.js b/node_modules/gatsby/src/utils/stack-trace-utils.js
new file mode 100644
index 0000000..f24f54e
--- /dev/null
+++ b/node_modules/gatsby/src/utils/stack-trace-utils.js
@@ -0,0 +1,44 @@
+const stackTrace = require(`stack-trace`)
+const { codeFrameColumns } = require(`@babel/code-frame`)
+const fs = require(`fs-extra`)
+const path = require(`path`)
+const chalk = require(`chalk`)
+
+const gatsbyLocation = path.dirname(require.resolve(`gatsby/package.json`))
+
+const getNonGatsbyCallSite = () =>
+  stackTrace
+    .get()
+    .find(callSite => !callSite.getFileName().includes(gatsbyLocation))
+
+const getNonGatsbyCodeFrame = ({ highlightCode = true } = {}) => {
+  const callSite = getNonGatsbyCallSite()
+  if (!callSite) {
+    return null
+  }
+
+  const fileName = callSite.getFileName()
+  const line = callSite.getLineNumber()
+  const column = callSite.getColumnNumber()
+
+  const code = fs.readFileSync(fileName, { encoding: `utf-8` })
+  return [
+    `File ${chalk.bold(`${fileName}:${line}:${column}`)}`,
+    codeFrameColumns(
+      code,
+      {
+        start: {
+          line,
+          column,
+        },
+      },
+      {
+        highlightCode,
+      }
+    ),
+  ].join(`\n`)
+}
+
+module.exports = {
+  getNonGatsbyCodeFrame,
+}
diff --git a/node_modules/gatsby/src/utils/test-require-error.js b/node_modules/gatsby/src/utils/test-require-error.js
new file mode 100644
index 0000000..7f44a2f
--- /dev/null
+++ b/node_modules/gatsby/src/utils/test-require-error.js
@@ -0,0 +1,12 @@
+// This module is also copied into the .cache directory some modules copied there
+// from cache-dir can also use this module.
+export default (moduleName, err) => {
+  const regex = new RegExp(
+    `Error: Cannot find module\\s.${moduleName.replace(
+      /[-/\\^$*+?.()|[\]{}]/g,
+      `\\$&`
+    )}`
+  )
+  const firstLine = err.toString().split(`\n`)[0]
+  return regex.test(firstLine)
+}
diff --git a/node_modules/gatsby/src/utils/tracer/index.js b/node_modules/gatsby/src/utils/tracer/index.js
new file mode 100644
index 0000000..33cb4ca
--- /dev/null
+++ b/node_modules/gatsby/src/utils/tracer/index.js
@@ -0,0 +1,40 @@
+const slash = require(`slash`)
+const path = require(`path`)
+const opentracing = require(`opentracing`)
+
+let tracerProvider
+
+/**
+ * tracerFile should be a js file that exports two functions.
+ *
+ * `create` - Create and return an open-tracing compatible tracer. See
+ * https://github.com/opentracing/opentracing-javascript/blob/master/src/tracer.ts
+ *
+ * `stop` - Run any tracer cleanup required before the node.js process
+ * exits
+ */
+function initTracer(tracerFile) {
+  let tracer
+  if (tracerFile) {
+    const resolvedPath = slash(path.resolve(tracerFile))
+    tracerProvider = require(resolvedPath)
+    tracer = tracerProvider.create()
+  } else {
+    tracer = new opentracing.Tracer() // Noop
+  }
+
+  opentracing.initGlobalTracer(tracer)
+
+  return tracer
+}
+
+async function stopTracer() {
+  if (tracerProvider && tracerProvider.stop) {
+    await tracerProvider.stop()
+  }
+}
+
+module.exports = {
+  initTracer,
+  stopTracer,
+}
diff --git a/node_modules/gatsby/src/utils/tracer/jaeger-local.js b/node_modules/gatsby/src/utils/tracer/jaeger-local.js
new file mode 100644
index 0000000..6f9301d
--- /dev/null
+++ b/node_modules/gatsby/src/utils/tracer/jaeger-local.js
@@ -0,0 +1,34 @@
+const initTracer = require(`jaeger-client`).initTracer
+
+let tracer
+
+function create() {
+  // See schema
+  // https://github.com/jaegertracing/jaeger-client-node/blob/master/src/configuration.js#L37
+  var config = {
+    serviceName: `gatsby`,
+    reporter: {
+      // Provide the traces endpoint; this forces the client to
+      // connect directly to the Collector and send spans over HTTP
+      collectorEndpoint: `http://localhost:14268/api/traces`,
+    },
+    sampler: {
+      type: `const`,
+      param: 1,
+    },
+  }
+  var options = {}
+  tracer = initTracer(config, options)
+  return tracer
+}
+
+function stop() {
+  return new Promise(resolve => {
+    tracer.close(resolve)
+  })
+}
+
+module.exports = {
+  create,
+  stop,
+}
diff --git a/node_modules/gatsby/src/utils/tracer/zipkin-local.js b/node_modules/gatsby/src/utils/tracer/zipkin-local.js
new file mode 100644
index 0000000..c79fdaa
--- /dev/null
+++ b/node_modules/gatsby/src/utils/tracer/zipkin-local.js
@@ -0,0 +1,96 @@
+const zipkin = require(`zipkin`)
+const { HttpLogger } = require(`zipkin-transport-http`)
+const ZipkinTracer = require(`zipkin-javascript-opentracing`)
+const fetch = require(`node-fetch`)
+
+let logger
+let recorder
+
+/**
+ * Create and return an open-tracing compatible tracer. See
+ * https://github.com/opentracing/opentracing-javascript/blob/master/src/tracer.ts
+ */
+function create() {
+  logger = new HttpLogger({
+    // endpoint of local docker zipkin instance
+    endpoint: `http://localhost:9411/api/v1/spans`,
+  })
+
+  recorder = new zipkin.BatchRecorder({
+    logger,
+    // timeout = 60 hours, must be longer than site's build time
+    timeout: 60 * 60 * 60 * 1000000,
+  })
+
+  const tracer = new ZipkinTracer({
+    localServiceName: `gatsby`,
+    serviceName: `gatsby`,
+    // Sample 1 out of 1 spans (100%). When tracing production
+    // services, it is normal to sample 1 out of 10 requests so that
+    // tracing information doesn't impact site performance. But Gatsby
+    // is a build tool and only has "1" request (the
+    // build). Therefore, we must set this to 100% so that spans
+    // aren't missing
+    sampler: new zipkin.sampler.CountingSampler(1),
+    traceId128Bit: true,
+    recorder,
+    kind: `client`,
+  })
+
+  return tracer
+}
+
+/**
+ * Run any tracer cleanup required before the node.js process
+ * exits. For Zipkin HTTP, we must manually process any spans still on
+ * the queue
+ */
+async function stop() {
+  // First, write all partial spans to the http logger
+  recorder.partialSpans.forEach((span, id) => {
+    if (recorder._timedOut(span)) {
+      recorder._writeSpan(id)
+    }
+  })
+
+  // Then tell http logger to process all spans in its queue
+  return await _processQueue()
+}
+
+// Workaround for issue in Zipkin HTTP Logger where Spans are not
+// cleared off their processing queue before the node.js process
+// exits. Code is mostly the same as the zipkin processQueue
+// implementation.
+async function _processQueue() {
+  const self = logger
+  if (self.queue.length > 0) {
+    const postBody = `[${self.queue.join(`,`)}]`
+    return await fetch(self.endpoint, {
+      method: `POST`,
+      body: postBody,
+      headers: self.headers,
+      timeout: self.timeout,
+    })
+      .then(response => {
+        if (response.status !== 202) {
+          const err =
+            `Unexpected response while sending Zipkin data, status:` +
+            `${response.status}, body: ${postBody}`
+
+          if (self.errorListenerSet) self.emit(`error`, new Error(err))
+          else console.error(err)
+        }
+      })
+      .catch(error => {
+        const err = `Error sending Zipkin data ${error}`
+        if (self.errorListenerSet) this.emit(`error`, new Error(err))
+        else console.error(err)
+      })
+  }
+  return true
+}
+
+module.exports = {
+  create,
+  stop,
+}
diff --git a/node_modules/gatsby/src/utils/webpack-helpers.js b/node_modules/gatsby/src/utils/webpack-helpers.js
new file mode 100644
index 0000000..d51fcc8
--- /dev/null
+++ b/node_modules/gatsby/src/utils/webpack-helpers.js
@@ -0,0 +1,10 @@
+const path = require(`path`)
+
+exports.chunkNamer = chunk => {
+  if (chunk.name) return chunk.name
+  let n = []
+  chunk.forEachModule(m => {
+    n.push(path.relative(m.context, m.userRequest))
+  })
+  return n.join(`_`)
+}
diff --git a/node_modules/gatsby/src/utils/webpack-plugins.js b/node_modules/gatsby/src/utils/webpack-plugins.js
new file mode 100644
index 0000000..5b4d560
--- /dev/null
+++ b/node_modules/gatsby/src/utils/webpack-plugins.js
@@ -0,0 +1,57 @@
+// @flow
+
+const webpack = require(`webpack`)
+
+const plugin = (name, optimize) => {
+  let Plugin = (optimize ? webpack.optimize : webpack)[name]
+  return (...args: any) => new Plugin(...args)
+}
+
+const plugins = {
+  normalModuleReplacement: plugin(`NormalModuleReplacementPlugin`),
+  contextReplacement: plugin(`ContextReplacementPlugin`),
+  ignore: plugin(`IgnorePlugin`),
+  watchIgnore: plugin(`WatchIgnorePlugin`),
+  banner: plugin(`BannerPlugin`),
+  prefetch: plugin(`PrefetchPlugin`),
+  automaticPrefetch: plugin(`AutomaticPrefetchPlugin`),
+  define: plugin(`DefinePlugin`),
+  provide: plugin(`ProvidePlugin`),
+  hotModuleReplacement: plugin(`HotModuleReplacementPlugin`),
+  sourceMapDevTool: plugin(`SourceMapDevToolPlugin`),
+  evalSourceMapDevTool: plugin(`EvalSourceMapDevToolPlugin`),
+  evalDevToolModule: plugin(`EvalDevToolModulePlugin`),
+  cache: plugin(`CachePlugin`),
+  extendedAPI: plugin(`ExtendedAPIPlugin`),
+  externals: plugin(`ExternalsPlugin`),
+  jsonpTemplate: plugin(`JsonpTemplatePlugin`),
+  libraryTemplate: plugin(`LibraryTemplatePlugin`),
+  loaderTarget: plugin(`LoaderTargetPlugin`),
+  memoryOutputFile: plugin(`MemoryOutputFileSystem`),
+  progress: plugin(`ProgressPlugin`),
+  setVarMainTemplate: plugin(`SetVarMainTemplatePlugin`),
+  umdMainTemplate: plugin(`UmdMainTemplatePlugin`),
+  noErrors: plugin(`NoErrorsPlugin`),
+  noEmitOnErrors: plugin(`NoEmitOnErrorsPlugin`),
+  newWatching: plugin(`NewWatchingPlugin`),
+  environment: plugin(`EnvironmentPlugin`),
+  dll: plugin(`DllPlugin`),
+  dllReference: plugin(`DllReferencePlugin`),
+  loaderOptions: plugin(`LoaderOptionsPlugin`),
+  namedModules: plugin(`NamedModulesPlugin`),
+  namedChunks: plugin(`NamedChunksPlugin`),
+  hashedModuleIds: plugin(`HashedModuleIdsPlugin`),
+  moduleFilenameH: plugin(`ModuleFilenameHelpers`),
+
+  aggressiveMerging: plugin(`AggressiveMergingPlugin`, true),
+  aggressiveSplitting: plugin(`AggressiveSplittingPlugin`, true),
+  splitChunks: plugin(`SplitChunks`, true),
+  chunkModuleIdRange: plugin(`ChunkModuleIdRangePlugin`, true),
+  dedupe: plugin(`DedupePlugin`, true),
+  limitChunkCount: plugin(`LimitChunkCountPlugin`, true),
+  minChunkSize: plugin(`MinChunkSizePlugin`, true),
+  occurrenceOrder: plugin(`OccurrenceOrderPlugin`, true),
+  moduleConcatenation: plugin(`ModuleConcatenationPlugin`, true),
+}
+
+module.exports = plugins
diff --git a/node_modules/gatsby/src/utils/webpack-utils.js b/node_modules/gatsby/src/utils/webpack-utils.js
new file mode 100644
index 0000000..426e61b
--- /dev/null
+++ b/node_modules/gatsby/src/utils/webpack-utils.js
@@ -0,0 +1,494 @@
+// @flow
+
+const autoprefixer = require(`autoprefixer`)
+const flexbugs = require(`postcss-flexbugs-fixes`)
+const TerserPlugin = require(`terser-webpack-plugin`)
+const MiniCssExtractPlugin = require(`mini-css-extract-plugin`)
+const OptimizeCssAssetsPlugin = require(`optimize-css-assets-webpack-plugin`)
+const isWsl = require(`is-wsl`)
+
+const GatsbyWebpackStatsExtractor = require(`./gatsby-webpack-stats-extractor`)
+
+const builtinPlugins = require(`./webpack-plugins`)
+const eslintConfig = require(`./eslint-config`)
+
+type LoaderSpec = string | { loader: string, options?: Object }
+type LoaderResolver<T: Object> = (options?: T) => LoaderSpec
+
+type Condition = string | RegExp | RegExp[]
+
+type Rule = {
+  test?: Condition,
+  use: LoaderSpec[],
+  exclude?: Condition,
+  include?: Condition,
+}
+
+type RuleFactory<T: Object> = (options?: T) => Rule
+
+type ContextualRuleFactory = RuleFactory<*> & {
+  internal: RuleFactory<*>,
+  external: RuleFactory<*>,
+}
+
+type PluginInstance = any
+type PluginFactory = (...args?: any) => PluginInstance
+
+type BuiltinPlugins = typeof builtinPlugins
+
+type Stage = "develop" | "develop-html" | "build-javascript" | "build-html"
+
+/**
+ * Configuration options for `createUtils`
+ */
+export type WebpackUtilsOptions = { stage: Stage, program: any }
+
+/**
+ * Utils that produce webpack `loader` objects
+ */
+export type LoaderUtils = {
+  json: LoaderResolver<*>,
+  yaml: LoaderResolver<*>,
+  null: LoaderResolver<*>,
+  raw: LoaderResolver<*>,
+
+  style: LoaderResolver<*>,
+  css: LoaderResolver<*>,
+  postcss: LoaderResolver<{
+    browsers?: string[],
+    plugins?: Array<any> | ((loader: any) => Array<any>),
+  }>,
+
+  file: LoaderResolver<*>,
+  url: LoaderResolver<*>,
+  js: LoaderResolver<*>,
+
+  miniCssExtract: LoaderResolver<*>,
+  imports: LoaderResolver<*>,
+  exports: LoaderResolver<*>,
+
+  eslint: LoaderResolver<*>,
+}
+
+/**
+ * Utils that produce webpack rule objects
+ */
+export type RuleUtils = {
+  /**
+   * Handles JavaScript compilation via babel
+   */
+  js: RuleFactory<*>,
+  yaml: RuleFactory<*>,
+  fonts: RuleFactory<*>,
+  images: RuleFactory<*>,
+  miscAssets: RuleFactory<*>,
+
+  css: ContextualRuleFactory,
+  cssModules: RuleFactory<*>,
+  postcss: ContextualRuleFactory,
+
+  eslint: RuleFactory<*>,
+}
+
+export type PluginUtils = BuiltinPlugins & {
+  extractText: PluginFactory,
+  uglify: PluginFactory,
+  moment: PluginFactory,
+  extractStats: PluginFactory,
+}
+
+/**
+ * webpack atoms namespace
+ */
+export type WebpackUtils = {
+  loaders: LoaderUtils,
+
+  rules: RuleUtils,
+
+  plugins: PluginUtils,
+}
+
+/**
+ * A factory method that produces an atoms namespace
+ */
+module.exports = async ({
+  stage,
+  program,
+}: {
+  stage: Stage,
+  program: any,
+}): Promise<WebpackUtilsOptions> => {
+  const assetRelativeRoot = `static/`
+  const vendorRegex = /(node_modules|bower_components)/
+  const supportedBrowsers = program.browserslist
+
+  const PRODUCTION = !stage.includes(`develop`)
+
+  const isSSR = stage.includes(`html`)
+
+  const makeExternalOnly = (original: RuleFactory<*>) => (
+    options = {}
+  ): Rule => {
+    let rule = original(options)
+    rule.include = vendorRegex
+    return rule
+  }
+
+  const makeInternalOnly = (original: RuleFactory<*>) => (
+    options = {}
+  ): Rule => {
+    let rule = original(options)
+    rule.exclude = vendorRegex
+    return rule
+  }
+
+  let ident = 0
+
+  const loaders: LoaderUtils = {
+    json: (options = {}) => {
+      return {
+        options,
+        loader: require.resolve(`json-loader`),
+      }
+    },
+
+    yaml: (options = {}) => {
+      return {
+        options,
+        loader: require.resolve(`yaml-loader`),
+      }
+    },
+
+    null: (options = {}) => {
+      return {
+        options,
+        loader: require.resolve(`null-loader`),
+      }
+    },
+
+    raw: (options = {}) => {
+      return {
+        options,
+        loader: require.resolve(`raw-loader`),
+      }
+    },
+
+    style: (options = {}) => {
+      return {
+        options,
+        loader: require.resolve(`style-loader`),
+      }
+    },
+
+    miniCssExtract: (options = {}) => {
+      return {
+        options,
+        // use MiniCssExtractPlugin only on production builds
+        loader: PRODUCTION
+          ? MiniCssExtractPlugin.loader
+          : require.resolve(`style-loader`),
+      }
+    },
+
+    css: (options = {}) => {
+      return {
+        loader: isSSR
+          ? require.resolve(`css-loader/locals`)
+          : require.resolve(`css-loader`),
+        options: {
+          sourceMap: !PRODUCTION,
+          camelCase: `dashesOnly`,
+          // https://github.com/webpack-contrib/css-loader/issues/406
+          localIdentName: `[name]--[local]--[hash:base64:5]`,
+          ...options,
+        },
+      }
+    },
+
+    postcss: (options = {}) => {
+      let { plugins, browsers = supportedBrowsers, ...postcssOpts } = options
+
+      return {
+        loader: require.resolve(`postcss-loader`),
+        options: {
+          ident: `postcss-${++ident}`,
+          sourceMap: !PRODUCTION,
+          plugins: loader => {
+            plugins =
+              (typeof plugins === `function` ? plugins(loader) : plugins) || []
+
+            return [
+              flexbugs,
+              autoprefixer({ browsers, flexbox: `no-2009` }),
+              ...plugins,
+            ]
+          },
+          ...postcssOpts,
+        },
+      }
+    },
+
+    file: (options = {}) => {
+      return {
+        loader: require.resolve(`file-loader`),
+        options: {
+          name: `${assetRelativeRoot}[name]-[hash].[ext]`,
+          ...options,
+        },
+      }
+    },
+
+    url: (options = {}) => {
+      return {
+        loader: require.resolve(`url-loader`),
+        options: {
+          limit: 10000,
+          name: `${assetRelativeRoot}[name]-[hash].[ext]`,
+          ...options,
+        },
+      }
+    },
+
+    js: options => {
+      return {
+        options,
+        loader: require.resolve(`./babel-loader`),
+      }
+    },
+
+    eslint: (schema = ``) => {
+      const options = eslintConfig(schema)
+
+      return {
+        options,
+        loader: require.resolve(`eslint-loader`),
+      }
+    },
+
+    imports: (options = {}) => {
+      return {
+        options,
+        loader: require.resolve(`imports-loader`),
+      }
+    },
+
+    exports: (options = {}) => {
+      return {
+        options,
+        loader: require.resolve(`exports-loader`),
+      }
+    },
+  }
+
+  /**
+   * Rules
+   */
+  const rules = {}
+
+  /**
+   * JavaScript loader via babel, excludes node_modules
+   */
+  {
+    let js = (options = {}) => {
+      return {
+        test: /\.jsx?$/,
+        exclude: vendorRegex,
+        use: [loaders.js(options)],
+      }
+    }
+
+    rules.js = js
+  }
+
+  /**
+   * mjs loader:
+   * webpack 4 has issues automatically dealing with
+   * the .mjs extension, thus we need to explicitly
+   * add this rule to use the default webpack js loader
+   */
+  {
+    let mjs = (options = {}) => {
+      return {
+        test: /\.mjs$/,
+        include: /node_modules/,
+        type: `javascript/auto`,
+        ...options,
+      }
+    }
+
+    rules.mjs = mjs
+  }
+
+  {
+    let eslint = schema => {
+      return {
+        enforce: `pre`,
+        test: /\.jsx?$/,
+        exclude: vendorRegex,
+        use: [loaders.eslint(schema)],
+      }
+    }
+
+    rules.eslint = eslint
+  }
+
+  rules.yaml = () => {
+    return {
+      test: /\.ya?ml/,
+      use: [loaders.json(), loaders.yaml()],
+    }
+  }
+
+  /**
+   * Font loader
+   */
+  rules.fonts = () => {
+    return {
+      use: [loaders.url()],
+      test: /\.(eot|otf|ttf|woff(2)?)(\?.*)?$/,
+    }
+  }
+
+  /**
+   * Loads image assets, inlines images via a data URI if they are below
+   * the size threshold
+   */
+  rules.images = () => {
+    return {
+      use: [loaders.url()],
+      test: /\.(ico|svg|jpg|jpeg|png|gif|webp)(\?.*)?$/,
+    }
+  }
+
+  /**
+   * Loads audio and video and inlines them via a data URI if they are below
+   * the size threshold
+   */
+  rules.media = () => {
+    return {
+      use: [loaders.url()],
+      test: /\.(mp4|webm|wav|mp3|m4a|aac|oga|flac)$/,
+    }
+  }
+
+  /**
+   * Loads assets without inlining
+   */
+  rules.miscAssets = () => {
+    return {
+      use: [loaders.file()],
+      test: /\.pdf$/,
+    }
+  }
+
+  /**
+   * CSS style loader.
+   */
+  {
+    const css = ({ browsers, ...options } = {}) => {
+      const use = [
+        loaders.css({ ...options, importLoaders: 1 }),
+        loaders.postcss({ browsers }),
+      ]
+      if (!isSSR) use.unshift(loaders.miniCssExtract({ hmr: !options.modules }))
+
+      return {
+        use,
+        test: /\.css$/,
+      }
+    }
+
+    /**
+     * CSS style loader, _excludes_ node_modules.
+     */
+    css.internal = makeInternalOnly(css)
+    css.external = makeExternalOnly(css)
+
+    const cssModules = options => {
+      const rule = css({ ...options, modules: true })
+      delete rule.exclude
+      rule.test = /\.module\.css$/
+      return rule
+    }
+
+    rules.css = css
+    rules.cssModules = cssModules
+  }
+
+  /**
+   * PostCSS loader.
+   */
+  {
+    const postcss = options => {
+      return {
+        test: /\.css$/,
+        use: [loaders.css({ importLoaders: 1 }), loaders.postcss(options)],
+      }
+    }
+
+    /**
+     * PostCSS loader, _excludes_ node_modules.
+     */
+    postcss.internal = makeInternalOnly(postcss)
+    postcss.external = makeExternalOnly(postcss)
+    rules.postcss = postcss
+  }
+  /**
+   * Plugins
+   */
+  const plugins = { ...builtinPlugins }
+
+  /**
+   * Minify JavaScript code without regard for IE8. Attempts
+   * to parallelize the work to save time. Generally only add in Production
+   */
+  plugins.minifyJs = ({ terserOptions, ...options } = {}) =>
+    new TerserPlugin({
+      cache: true,
+      // We can't use parallel in WSL because of https://github.com/gatsbyjs/gatsby/issues/6540
+      // This issue was fixed in https://github.com/gatsbyjs/gatsby/pull/12636
+      parallel: !isWsl,
+      exclude: /\.min\.js/,
+      sourceMap: true,
+      terserOptions: {
+        ie8: false,
+        mangle: {
+          safari10: true,
+        },
+        parse: {
+          ecma: 8,
+        },
+        compress: {
+          ecma: 5,
+        },
+        output: {
+          ecma: 5,
+        },
+        ...terserOptions,
+      },
+      ...options,
+    })
+
+  plugins.minifyCss = (options = {}) => new OptimizeCssAssetsPlugin(options)
+
+  /**
+   * Extracts css requires into a single file;
+   * includes some reasonable defaults
+   */
+  plugins.extractText = options =>
+    new MiniCssExtractPlugin({
+      filename: `[name].[contenthash].css`,
+      chunkFilename: `[name].[contenthash].css`,
+      ...options,
+    })
+
+  plugins.moment = () => plugins.ignore(/^\.\/locale$/, /moment$/)
+
+  plugins.extractStats = options => new GatsbyWebpackStatsExtractor(options)
+
+  return {
+    loaders,
+    rules: (rules: RuleUtils),
+    plugins: (plugins: PluginUtils),
+  }
+}
diff --git a/node_modules/gatsby/src/utils/webpack.config.js b/node_modules/gatsby/src/utils/webpack.config.js
new file mode 100644
index 0000000..cec6e14
--- /dev/null
+++ b/node_modules/gatsby/src/utils/webpack.config.js
@@ -0,0 +1,487 @@
+require(`v8-compile-cache`)
+
+const fs = require(`fs-extra`)
+const path = require(`path`)
+const dotenv = require(`dotenv`)
+const FriendlyErrorsWebpackPlugin = require(`@pieh/friendly-errors-webpack-plugin`)
+const PnpWebpackPlugin = require(`pnp-webpack-plugin`)
+const { store } = require(`../redux`)
+const { actions } = require(`../redux/actions`)
+const debug = require(`debug`)(`gatsby:webpack-config`)
+const report = require(`gatsby-cli/lib/reporter`)
+const { withBasePath } = require(`./path`)
+
+const apiRunnerNode = require(`./api-runner-node`)
+const createUtils = require(`./webpack-utils`)
+const hasLocalEslint = require(`./local-eslint-config-finder`)
+
+// Four stages or modes:
+//   1) develop: for `gatsby develop` command, hot reload and CSS injection into page
+//   2) develop-html: same as develop without react-hmre in the babel config for html renderer
+//   3) build-javascript: Build JS and CSS chunks for production
+//   4) build-html: build all HTML files
+
+module.exports = async (
+  program,
+  directory,
+  suppliedStage,
+  webpackPort = 1500
+) => {
+  const directoryPath = withBasePath(directory)
+
+  process.env.GATSBY_BUILD_STAGE = suppliedStage
+
+  // We combine develop & develop-html stages for purposes of generating the
+  // webpack config.
+  const stage = suppliedStage
+  const { rules, loaders, plugins } = await createUtils({ stage, program })
+
+  function processEnv(stage, defaultNodeEnv) {
+    debug(`Building env for "${stage}"`)
+    const env =
+      process.env.GATSBY_ACTIVE_ENV ||
+      process.env.NODE_ENV ||
+      `${defaultNodeEnv}`
+    const envFile = path.join(process.cwd(), `./.env.${env}`)
+    let parsed = {}
+    try {
+      parsed = dotenv.parse(fs.readFileSync(envFile, { encoding: `utf8` }))
+    } catch (err) {
+      if (err.code !== `ENOENT`) {
+        report.error(`There was a problem processing the .env file`, err)
+      }
+    }
+
+    const envObject = Object.keys(parsed).reduce((acc, key) => {
+      acc[key] = JSON.stringify(parsed[key])
+      return acc
+    }, {})
+
+    const gatsbyVarObject = Object.keys(process.env).reduce((acc, key) => {
+      if (key.match(/^GATSBY_/)) {
+        acc[key] = JSON.stringify(process.env[key])
+      }
+      return acc
+    }, {})
+
+    // Don't allow overwriting of NODE_ENV, PUBLIC_DIR as to not break gatsby things
+    envObject.NODE_ENV = JSON.stringify(env)
+    envObject.PUBLIC_DIR = JSON.stringify(`${process.cwd()}/public`)
+    envObject.BUILD_STAGE = JSON.stringify(stage)
+    envObject.CYPRESS_SUPPORT = JSON.stringify(process.env.CYPRESS_SUPPORT)
+
+    const mergedEnvVars = Object.assign(envObject, gatsbyVarObject)
+
+    return Object.keys(mergedEnvVars).reduce(
+      (acc, key) => {
+        acc[`process.env.${key}`] = mergedEnvVars[key]
+        return acc
+      },
+      {
+        "process.env": JSON.stringify({}),
+      }
+    )
+  }
+
+  function getHmrPath() {
+    // ref: https://github.com/gatsbyjs/gatsby/issues/8348
+    let hmrBasePath = `/`
+    const hmrSuffix = `__webpack_hmr&reload=true&overlay=false`
+
+    if (process.env.GATSBY_WEBPACK_PUBLICPATH) {
+      const pubPath = process.env.GATSBY_WEBPACK_PUBLICPATH
+      if (pubPath.substr(-1) === `/`) {
+        hmrBasePath = pubPath
+      } else {
+        hmrBasePath = `${pubPath}/`
+      }
+    }
+
+    return hmrBasePath + hmrSuffix
+  }
+
+  debug(`Loading webpack config for stage "${stage}"`)
+  function getOutput() {
+    switch (stage) {
+      case `develop`:
+        return {
+          path: directory,
+          filename: `[name].js`,
+          // Add /* filename */ comments to generated require()s in the output.
+          pathinfo: true,
+          // Point sourcemap entries to original disk location (format as URL on Windows)
+          publicPath: process.env.GATSBY_WEBPACK_PUBLICPATH || `/`,
+          devtoolModuleFilenameTemplate: info =>
+            path.resolve(info.absoluteResourcePath).replace(/\\/g, `/`),
+          // Avoid React cross-origin errors
+          // See https://reactjs.org/docs/cross-origin-errors.html
+          crossOriginLoading: `anonymous`,
+        }
+      case `build-html`:
+      case `develop-html`:
+        // A temp file required by static-site-generator-plugin. See plugins() below.
+        // Deleted by build-html.js, since it's not needed for production.
+        return {
+          path: directoryPath(`public`),
+          filename: `render-page.js`,
+          libraryTarget: `umd`,
+          library: `lib`,
+          umdNamedDefine: true,
+          globalObject: `this`,
+          publicPath: program.prefixPaths
+            ? `${store.getState().config.pathPrefix}/`
+            : `/`,
+        }
+      case `build-javascript`:
+        return {
+          filename: `[name]-[contenthash].js`,
+          chunkFilename: `[name]-[contenthash].js`,
+          path: directoryPath(`public`),
+          publicPath: program.prefixPaths
+            ? `${store.getState().config.pathPrefix}/`
+            : `/`,
+        }
+      default:
+        throw new Error(`The state requested ${stage} doesn't exist.`)
+    }
+  }
+
+  function getEntry() {
+    switch (stage) {
+      case `develop`:
+        return {
+          commons: [
+            `event-source-polyfill`,
+            `${require.resolve(
+              `webpack-hot-middleware/client`
+            )}?path=${getHmrPath()}`,
+            directoryPath(`.cache/app`),
+          ],
+        }
+      case `develop-html`:
+        return {
+          main: directoryPath(`.cache/develop-static-entry`),
+        }
+      case `build-html`:
+        return {
+          main: directoryPath(`.cache/static-entry`),
+        }
+      case `build-javascript`:
+        return {
+          app: directoryPath(`.cache/production-app`),
+        }
+      default:
+        throw new Error(`The state requested ${stage} doesn't exist.`)
+    }
+  }
+
+  function getPlugins() {
+    let configPlugins = [
+      plugins.moment(),
+
+      // Add a few global variables. Set NODE_ENV to production (enables
+      // optimizations for React) and what the link prefix is (__PATH_PREFIX__).
+      plugins.define({
+        ...processEnv(stage, `development`),
+        __PATH_PREFIX__: JSON.stringify(
+          program.prefixPaths ? store.getState().config.pathPrefix : ``
+        ),
+      }),
+    ]
+
+    switch (stage) {
+      case `develop`:
+        configPlugins = configPlugins.concat([
+          plugins.hotModuleReplacement(),
+          plugins.noEmitOnErrors(),
+
+          new FriendlyErrorsWebpackPlugin({
+            clearConsole: false,
+          }),
+        ])
+        break
+      case `build-javascript`: {
+        configPlugins = configPlugins.concat([
+          plugins.extractText(),
+          // Write out stats object mapping named dynamic imports (aka page
+          // components) to all their async chunks.
+          plugins.extractStats(),
+        ])
+        break
+      }
+    }
+
+    return configPlugins
+  }
+
+  function getDevtool() {
+    switch (stage) {
+      case `develop`:
+        return `cheap-module-source-map`
+      // use a normal `source-map` for the html phases since
+      // it gives better line and column numbers
+      case `develop-html`:
+      case `build-html`:
+      case `build-javascript`:
+        return `source-map`
+      default:
+        return false
+    }
+  }
+
+  function getMode() {
+    switch (stage) {
+      case `build-javascript`:
+        return `production`
+      case `develop`:
+      case `develop-html`:
+      case `build-html`:
+        return `development` // So we don't uglify the html bundle
+      default:
+        return `production`
+    }
+  }
+
+  function getModule(config) {
+    // Common config for every env.
+    // prettier-ignore
+    let configRules = [
+      rules.mjs(),
+      rules.js(),
+      rules.yaml(),
+      rules.fonts(),
+      rules.images(),
+      rules.media(),
+      rules.miscAssets(),
+    ]
+    switch (stage) {
+      case `develop`: {
+        // get schema to pass to eslint config and program for directory
+        const { schema, program } = store.getState()
+
+        // if no local eslint config, then add gatsby config
+        if (!hasLocalEslint(program.directory)) {
+          configRules = configRules.concat([rules.eslint(schema)])
+        }
+
+        configRules = configRules.concat([
+          {
+            oneOf: [rules.cssModules(), rules.css()],
+          },
+        ])
+
+        break
+      }
+      case `build-html`:
+      case `develop-html`:
+        // We don't deal with CSS at all when building the HTML.
+        // The 'null' loader is used to prevent 'module not found' errors.
+        // On the other hand CSS modules loaders are necessary.
+
+        // prettier-ignore
+        configRules = configRules.concat([
+          {
+            oneOf: [
+              rules.cssModules(),
+              {
+                ...rules.css(),
+                use: [loaders.null()],
+              },
+            ],
+          },
+        ])
+        break
+
+      case `build-javascript`:
+        // We don't deal with CSS at all when building JavaScript but we still
+        // need to process the CSS so offline-plugin knows about the various
+        // assets referenced in your CSS.
+        //
+        // It's also necessary to process CSS Modules so your JS knows the
+        // classNames to use.
+        configRules = configRules.concat([
+          {
+            oneOf: [rules.cssModules(), rules.css()],
+          },
+        ])
+
+        break
+    }
+
+    return { rules: configRules }
+  }
+
+  function getResolve() {
+    const { program } = store.getState()
+    return {
+      // Use the program's extension list (generated via the
+      // 'resolvableExtensions' API hook).
+      extensions: [...program.extensions],
+      alias: {
+        gatsby$: directoryPath(path.join(`.cache`, `gatsby-browser-entry.js`)),
+        // Using directories for module resolution is mandatory because
+        // relative path imports are used sometimes
+        // See https://stackoverflow.com/a/49455609/6420957 for more details
+        "@babel/runtime": path.dirname(
+          require.resolve(`@babel/runtime/package.json`)
+        ),
+        "core-js": path.dirname(require.resolve(`core-js/package.json`)),
+        "react-hot-loader": path.dirname(
+          require.resolve(`react-hot-loader/package.json`)
+        ),
+        "react-lifecycles-compat": directoryPath(
+          `.cache/react-lifecycles-compat.js`
+        ),
+        "create-react-context": directoryPath(`.cache/create-react-context.js`),
+      },
+      plugins: [
+        // Those two folders are special and contain gatsby-generated files
+        // whose dependencies should be resolved through the `gatsby` package
+        PnpWebpackPlugin.bind(directoryPath(`.cache`), module),
+        PnpWebpackPlugin.bind(directoryPath(`public`), module),
+        // Transparently resolve packages via PnP when needed; noop otherwise
+        PnpWebpackPlugin,
+      ],
+    }
+  }
+
+  function getResolveLoader() {
+    const root = [path.resolve(directory, `node_modules`)]
+
+    const userLoaderDirectoryPath = path.resolve(directory, `loaders`)
+
+    try {
+      if (fs.statSync(userLoaderDirectoryPath).isDirectory()) {
+        root.push(userLoaderDirectoryPath)
+      }
+    } catch (err) {
+      debug(`Error resolving user loaders directory`, err)
+    }
+
+    return {
+      modules: [...root, path.join(__dirname, `../loaders`), `node_modules`],
+      // Bare loaders should always be loaded via the user dependencies (loaders
+      // configured via third-party like gatsby use require.resolve)
+      plugins: [PnpWebpackPlugin.moduleLoader(`${directory}/`)],
+    }
+  }
+
+  const config = {
+    // Context is the base directory for resolving the entry option.
+    context: directory,
+    entry: getEntry(),
+    output: getOutput(),
+
+    module: getModule(),
+    plugins: getPlugins(),
+
+    // Certain "isomorphic" packages have different entry points for browser
+    // and server (see
+    // https://github.com/defunctzombie/package-browser-field-spec); setting
+    // the target tells webpack which file to include, ie. browser vs main.
+    target: stage === `build-html` || stage === `develop-html` ? `node` : `web`,
+
+    devtool: getDevtool(),
+    // Turn off performance hints as we (for now) don't want to show the normal
+    // webpack output anywhere.
+    performance: {
+      hints: false,
+    },
+    mode: getMode(),
+
+    resolveLoader: getResolveLoader(),
+    resolve: getResolve(),
+
+    node: {
+      __filename: true,
+    },
+  }
+
+  if (stage === `build-javascript`) {
+    config.optimization = {
+      runtimeChunk: {
+        name: `webpack-runtime`,
+      },
+      splitChunks: {
+        name: false,
+        cacheGroups: {
+          // Only create one CSS file to avoid
+          // problems with code-split CSS loading in different orders
+          // causing inconsistent/non-determanistic styling
+          // See https://github.com/gatsbyjs/gatsby/issues/11072
+          styles: {
+            name: `styles`,
+            // This should cover all our types of CSS.
+            test: /\.(css|scss|sass|less|styl)$/,
+            chunks: `all`,
+            enforce: true,
+          },
+        },
+      },
+      minimizer: [
+        // TODO: maybe this option should be noMinimize?
+        !program.noUglify && plugins.minifyJs(),
+        plugins.minifyCss(),
+      ].filter(Boolean),
+    }
+  }
+
+  if (stage === `build-html` || stage === `develop-html`) {
+    const externalList = [
+      // match `lodash` and `lodash/foo`
+      // but not things like `lodash-es`
+      `lodash`,
+      /^lodash\//,
+      `react`,
+      /^react-dom\//,
+      `pify`,
+      `@reach/router`,
+      `@reach/router/lib/history`,
+      `common-tags`,
+      `path`,
+      `semver`,
+      `react-helmet`,
+      `minimatch`,
+      `fs`,
+      /^core-js\//,
+      `es6-promise`,
+      `crypto`,
+      `zlib`,
+      `http`,
+      `https`,
+      `debug`,
+    ]
+
+    config.externals = [
+      function(context, request, callback) {
+        if (
+          externalList.some(item => {
+            if (typeof item === `string` && item === request) {
+              return true
+            } else if (item instanceof RegExp && item.test(request)) {
+              return true
+            }
+
+            return false
+          })
+        ) {
+          return callback(null, `umd ${request}`)
+        }
+        return callback()
+      },
+    ]
+  }
+
+  store.dispatch(actions.replaceWebpackConfig(config))
+  const getConfig = () => store.getState().webpack
+
+  await apiRunnerNode(`onCreateWebpackConfig`, {
+    getConfig,
+    stage,
+    rules,
+    loaders,
+    plugins,
+  })
+
+  return getConfig()
+}
diff --git a/node_modules/gatsby/src/utils/websocket-manager.js b/node_modules/gatsby/src/utils/websocket-manager.js
new file mode 100644
index 0000000..cc0fed5
--- /dev/null
+++ b/node_modules/gatsby/src/utils/websocket-manager.js
@@ -0,0 +1,221 @@
+// @flow
+
+const path = require(`path`)
+const { store } = require(`../redux`)
+const fs = require(`fs`)
+
+type QueryResult = {
+  id: string,
+  result: object,
+}
+
+type QueryResultsMap = Map<string, QueryResult>
+
+/**
+ * Get cached page query result for given page path.
+ * @param {string} pagePath Path to a page.
+ * @param {string} directory Root directory of current project.
+ */
+const getCachedPageData = (
+  pagePath: string,
+  directory: string
+): QueryResult => {
+  const fixedPagePath = pagePath === `/` ? `index` : pagePath
+  const filePath = path.join(
+    directory,
+    `public`,
+    `page-data`,
+    fixedPagePath,
+    `page-data.json`
+  )
+  try {
+    const fileResult = fs.readFileSync(filePath, `utf-8`)
+    return {
+      ...JSON.parse(fileResult),
+      id: pagePath,
+    }
+  } catch (err) {
+    return null
+  }
+}
+
+/**
+ * Get cached StaticQuery results for components that Gatsby didn't run query yet.
+ * @param {QueryResultsMap} resultsMap Already stored results for queries that don't need to be read from files.
+ * @param {string} directory Root directory of current project.
+ */
+const getCachedStaticQueryResults = (
+  resultsMap: QueryResultsMap,
+  directory: string
+): QueryResultsMap => {
+  const cachedStaticQueryResults = new Map()
+  const { staticQueryComponents } = store.getState()
+  staticQueryComponents.forEach(staticQueryComponent => {
+    // Don't read from file if results were already passed from query runner
+    if (resultsMap.has(staticQueryComponent.hash)) return
+
+    const filePath = path.join(
+      directory,
+      `public`,
+      `static`,
+      `d`,
+      `${staticQueryComponent.hash}.json`
+    )
+    const fileResult = fs.readFileSync(filePath, `utf-8`)
+    if (fileResult === `undefined`) {
+      console.log(
+        `Error loading a result for the StaticQuery in "${
+          staticQueryComponent.componentPath
+        }". Query was not run and no cached result was found.`
+      )
+      return
+    }
+    const jsonResult = JSON.parse(fileResult)
+    cachedStaticQueryResults.set(staticQueryComponent.hash, {
+      ...jsonResult,
+      id: staticQueryComponent.hash,
+    })
+  })
+  return cachedStaticQueryResults
+}
+
+const getRoomNameFromPath = (path: string): string => `path-${path}`
+
+class WebsocketManager {
+  pageResults: QueryResultsMap
+  staticQueryResults: QueryResultsMap
+  errors: Map<string, QueryResult>
+  isInitialised: boolean
+  activePaths: Set<string>
+  programDir: string
+
+  constructor() {
+    this.isInitialised = false
+    this.activePaths = new Set()
+    this.pageResults = new Map()
+    this.staticQueryResults = new Map()
+    this.errors = new Map()
+    // this.websocket
+    // this.programDir
+
+    this.init = this.init.bind(this)
+    this.getSocket = this.getSocket.bind(this)
+    this.emitPageData = this.emitPageData.bind(this)
+    this.emitStaticQueryData = this.emitStaticQueryData.bind(this)
+    this.emitError = this.emitError.bind(this)
+  }
+
+  init({ server, directory }) {
+    this.programDir = directory
+
+    const cachedStaticQueryResults = getCachedStaticQueryResults(
+      this.staticQueryResults,
+      this.programDir
+    )
+    this.staticQueryResults = new Map([
+      ...this.staticQueryResults,
+      ...cachedStaticQueryResults,
+    ])
+
+    this.websocket = require(`socket.io`)(server)
+
+    this.websocket.on(`connection`, s => {
+      let activePath = null
+      // Send already existing static query results
+      this.staticQueryResults.forEach(result => {
+        this.websocket.send({
+          type: `staticQueryResult`,
+          payload: result,
+        })
+      })
+      this.errors.forEach((message, errorID) => {
+        this.websocket.send({
+          type: `overlayError`,
+          payload: {
+            id: errorID,
+            message,
+          },
+        })
+      })
+
+      const leaveRoom = path => {
+        s.leave(getRoomNameFromPath(path))
+        const leftRoom = this.websocket.sockets.adapter.rooms[
+          getRoomNameFromPath(path)
+        ]
+        if (!leftRoom || leftRoom.length === 0) {
+          this.activePaths.delete(path)
+        }
+      }
+
+      const getDataForPath = path => {
+        if (!this.pageResults.has(path)) {
+          const result = getCachedPageData(path, this.programDir)
+          if (result) {
+            this.pageResults.set(path, result)
+          } else {
+            console.log(`Page not found`, path)
+            return
+          }
+        }
+
+        this.websocket.send({
+          type: `pageQueryResult`,
+          why: `getDataForPath`,
+          payload: this.pageResults.get(path),
+        })
+      }
+
+      s.on(`getDataForPath`, getDataForPath)
+
+      s.on(`registerPath`, path => {
+        s.join(getRoomNameFromPath(path))
+        activePath = path
+        this.activePaths.add(path)
+      })
+
+      s.on(`disconnect`, s => {
+        leaveRoom(activePath)
+      })
+
+      s.on(`unregisterPath`, path => {
+        leaveRoom(path)
+      })
+    })
+
+    this.isInitialised = true
+  }
+
+  getSocket() {
+    return this.isInitialised && this.websocket
+  }
+
+  emitStaticQueryData(data: QueryResult) {
+    this.staticQueryResults.set(data.id, data)
+    if (this.isInitialised) {
+      this.websocket.send({ type: `staticQueryResult`, payload: data })
+    }
+  }
+
+  emitPageData(data: QueryResult) {
+    this.pageResults.set(data.id, data)
+    if (this.isInitialised) {
+      this.websocket.send({ type: `pageQueryResult`, payload: data })
+    }
+  }
+  emitError(id: string, message?: string) {
+    if (message) {
+      this.errors.set(id, message)
+    } else {
+      this.errors.delete(id)
+    }
+
+    if (this.isInitialised) {
+      this.websocket.send({ type: `overlayError`, payload: { id, message } })
+    }
+  }
+}
+
+const manager = new WebsocketManager()
+
+module.exports = manager
diff --git a/node_modules/gatsby/src/utils/worker.js b/node_modules/gatsby/src/utils/worker.js
new file mode 100644
index 0000000..ac74894
--- /dev/null
+++ b/node_modules/gatsby/src/utils/worker.js
@@ -0,0 +1,39 @@
+const fs = require(`fs-extra`)
+const path = require(`path`)
+const Promise = require(`bluebird`)
+
+// copied from https://github.com/markdalgleish/static-site-generator-webpack-plugin/blob/master/index.js#L161
+const generatePathToOutput = outputPath => {
+  let outputFileName = outputPath.replace(/^(\/|\\)/, ``) // Remove leading slashes for webpack-dev-server
+
+  if (!/\.(html?)$/i.test(outputFileName)) {
+    outputFileName = path.join(outputFileName, `index.html`)
+  }
+
+  return path.join(process.cwd(), `public`, outputFileName)
+}
+
+export function renderHTML({ htmlComponentRendererPath, paths, envVars }) {
+  // This is being executed in child process, so we need to set some vars
+  // for modules that aren't bundled by webpack.
+  envVars.forEach(([key, value]) => (process.env[key] = value))
+
+  return Promise.map(
+    paths,
+    path =>
+      new Promise((resolve, reject) => {
+        const htmlComponentRenderer = require(htmlComponentRendererPath)
+        try {
+          htmlComponentRenderer.default(path, (throwAway, htmlString) => {
+            resolve(fs.outputFile(generatePathToOutput(path), htmlString))
+          })
+        } catch (e) {
+          // add some context to error so we can display more helpful message
+          e.context = {
+            path,
+          }
+          reject(e)
+        }
+      })
+  )
+}
